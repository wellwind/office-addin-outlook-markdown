{"version":3,"sources":["webpack:///node_modules/rxjs/_esm2015/internal/operators/concatAll.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/config.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/mergeMap.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/InnerSubscriber.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/Subscriber.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/refCount.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/share.js.pre-build-optimizer.js","webpack:///node_modules/@angular/core/fesm2015/core.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/merge.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/multicast.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/from.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/fromObservable.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/fromPromise.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/isIterable.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/fromIterable.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/isArray.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/empty.js.pre-build-optimizer.js","webpack:///node_modules/@angular/animations/fesm2015/animations.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/Observable.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/toSubscriber.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/canReportError.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/isArrayLike.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/take.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/startWith.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/concat.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/noop.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/of.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/symbol/iterator.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/hostReportError.js.pre-build-optimizer.js","webpack:///node_modules/@angular/common/fesm2015/common.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/subscribeTo.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/identity.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/first.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/SubjectSubscription.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/Subject.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/scalar.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/isObject.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/mergeAll.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/concatMap.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/isPromise.js.pre-build-optimizer.js","webpack:///node_modules/@angular/platform-browser/fesm2015/platform-browser.js.pre-build-optimizer.js","webpack:///node_modules/@angular/animations/fesm2015/browser.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/Observer.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/BehaviorSubject.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/combineLatest.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/defer.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/takeLast.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/last.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/catchError.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/every.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/switchMap.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/scan.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/finalize.js.pre-build-optimizer.js","webpack:///node_modules/@angular/router/fesm2015/router.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/reduce.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/symbol/observable.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/OuterSubscriber.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/map.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/pipe.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/isFunction.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js.pre-build-optimizer.js","webpack:///node_modules/@angular/platform-browser/fesm2015/animations.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/filter.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js.pre-build-optimizer.js","webpack:///node_modules/@angular/router/router.ngfactory.js.pre-build-optimizer.js","webpack:///node_modules/@angular/router/router.d.ts.Éµangular_packages_router_router_l.html","webpack:///node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/Subscription.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/forkJoin.js.pre-build-optimizer.js","webpack:///node_modules/@angular/forms/fesm2015/forms.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/EmptyError.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/tap.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/fromArray.js.pre-build-optimizer.js","webpack:///node_modules/hammerjs/hammer.js","webpack:///node_modules/rxjs/_esm2015/internal/util/isScheduler.js.pre-build-optimizer.js","webpack:///src/app/app.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.ngfactory.js.pre-build-optimizer.js","webpack:///src/app/app.component.scss.shim.ngstyle.js.pre-build-optimizer.js","webpack:///src/app/app.component.html","webpack:///src/app/app-routing.module.ts.pre-build-optimizer.js","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.module.ngfactory.js.pre-build-optimizer.js","webpack:///src/main.ts","webpack:///src/main.ts.pre-build-optimizer.js","webpack:///$_lazy_route_resource lazy namespace object"],"names":["__webpack_require__","d","__webpack_exports__","concatAll","_mergeAll__WEBPACK_IMPORTED_MODULE_0__","Object","a","rxSubscriber","Symbol","Math","random","config","_enable_super_gross_mode_that_will_cause_bad_things","Promise","undefined","useDeprecatedSynchronousErrorHandling","value","error","Error","console","warn","stack","log","ArgumentOutOfRangeErrorImpl","call","this","message","name","ArgumentOutOfRangeError","prototype","create","mergeMap","_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__","_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__","_InnerSubscriber__WEBPACK_IMPORTED_MODULE_2__","_map__WEBPACK_IMPORTED_MODULE_3__","_observable_from__WEBPACK_IMPORTED_MODULE_4__","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","source","pipe","i","b","ii","lift","MergeMapOperator","[object Object]","observer","subscribe","MergeMapSubscriber","destination","super","hasCompleted","buffer","active","index","_tryNext","push","result","err","_innerSub","ish","innerSubscriber","add","length","complete","unsubscribe","outerValue","innerValue","outerIndex","innerIndex","innerSub","next","remove","_next","shift","InnerSubscriber","_Subscriber__WEBPACK_IMPORTED_MODULE_0__","parent","notifyNext","notifyError","notifyComplete","Subscriber","_util_isFunction__WEBPACK_IMPORTED_MODULE_0__","_Observer__WEBPACK_IMPORTED_MODULE_1__","_Subscription__WEBPACK_IMPORTED_MODULE_2__","_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_3__","_config__WEBPACK_IMPORTED_MODULE_4__","_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","arguments","SafeSubscriber","subscriber","_error","_complete","closed","_parent","_parents","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","refCount","RefCountOperator","connectable","_refCount","refCounter","refCount_RefCountSubscriber","subscription","connection","connect","sharedConnection","_connection","connectableProto","Observable","subjectFactory","_isComplete","getSubject","subject","_subject","Subscription","ConnectableObservable_ConnectableSubscriber","EMPTY","connectableObservableDescriptor","operator","writable","_subscribe","Subject","_unsubscribe","shareSubjectFactory","_iterableDiffersFactory","_keyValueDiffersFactory","_localeFactory","zoneSchedulerFactory","_appIdRandomProviderFactory","SCHEDULER","core_ApplicationRef","createPlatformFactory","NgProbeToken","enableProdMode","isDevMode","APP_ID","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","APP_INITIALIZER","ApplicationInitStatus","getDebugNode","Testability","setTestabilityGetter","LOCALE_ID$1","ApplicationModule","core_EventEmitter","ErrorHandler","Sanitizer","SecurityContext","ANALYZE_FOR_ENTRY_COMPONENTS","ViewEncapsulation","Version","ÉµÉµdefineInjectable","forwardRef","Injector","ÉµÉµinject","inject","InjectionToken","Inject","Optional","SkipSelf","NgZone","Renderer2","RendererFactory2","RendererStyleFlags2","Compiler","ComponentFactoryResolver","ElementRef","NgModuleFactory","NgModuleRef","NgModuleFactoryLoader","QueryList","SystemJsNgModuleLoader","SystemJsNgModuleLoaderConfig","ViewContainerRef","ChangeDetectorRef","IterableDiffers","KeyValueDiffers","WrappedValue","platformCore","isListLikeIterable$1","Console","APP_ROOT","CodegenComponentFactoryResolver","_sanitizeHtml","_sanitizeStyle","_sanitizeUrl","_global","looseIdentical","stringify","isObservable","isPromise","getLocalePluralCase","findLocaleData","LOCALE_DATA","LocaleDataIndex","ÉµÉµdefineDirective","ÉµÉµallocHostVars","ÉµÉµstyling","ÉµÉµstyleMap","ÉµÉµclassMap","ÉµÉµstylingApply","createComponentFactory","createNgModuleFactory","createRendererType2","directiveDef","elementDef","moduleDef","moduleProvideDef","ngContentDef","nodeValue","providerDef","queryDef","textDef","viewDef","PARAMETERS","makeParamDecorator","props","parentClass","metaCtor","args","values","propName","ParamDecoratorFactory","apply","annotationInstance","ParamDecorator","annotation","cls","unusedKey","parameters","hasOwnProperty","defineProperty","ngMetadataName","annotationCls","token","Self","InjectFlags","Default","Host","getClosureSafeProperty","objWithPropertyToExtract","key","opts","providedIn","factory","getInjectableDef","type","def","NG_INJECTABLE_DEF","ngInjectableDef","Array","map","join","overriddenName","res","toString","newLineIndex","indexOf","substring","__forward_ref__","forwardRefFn","resolveForwardRef","__globalThis","globalThis","__window","window","__self","self","WorkerGlobalScope","__global","global","_desc","options","__NG_ELEMENT_ID__","INJECTOR","THROW_IF_NOT_FOUND","NG_TEMP_TOKEN_PATH","NG_TOKEN_PATH","NEW_LINE","NO_NEW_LINE","SOURCE","USE_VALUE","provide","String","useValue","_injectImplementation","_currentInjector","setCurrentInjector","injector","former","injectInjectorOnly","flags","notFoundValue","injectableDef","get","NullInjector","formatError","text","obj","injectorErrorName","charAt","substr","parts","JSON","replace","addToArray","arr","splice","removeFromArray","pop","ChangeDetectionStrategy","OnPush","Emulated","Native","None","ShadowDom","EMPTY_OBJ","EMPTY_ARRAY","NG_COMPONENT_DEF","ngComponentDef","NG_DIRECTIVE_DEF","ngDirectiveDef","NG_PIPE_DEF","ngPipeDef","_renderCompCount","extractDirectiveDef","extractPipeDef","invertObject","secondary","newLookup","minifiedKey","publicName","declaredName","isArray","componentDefinition","typePrototype","declaredInputs","providersResolver","consts","vars","template","ngContentSelectors","hostBindings","contentQueries","inputs","outputs","exportAs","onChanges","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewInit","ngAfterViewInit","afterViewChecked","ngAfterViewChecked","onDestroy","ngOnDestroy","onPush","changeDetection","directiveDefs","pipeDefs","selectors","viewQuery","features","data","encapsulation","id","styles","_","setInput","schemas","tView","directiveTypes","directives","feature","pipeTypes","pipes","forEach","HOST","TVIEW","BINDING_INDEX","RENDERER","HEADER_OFFSET","_stylingState","_stateStorage","Map","_stylingElement","STYLING_INDEX_START_VALUE","BIT_MASK_START_VALUE","getStylingState","element","readFromMap","classesBitMask","classesIndex","stylesBitMask","stylesIndex","getNativeByTNode","tNode","lView","getTNode","view","currentDirectiveDef","getLView","previousOrParentTNode","_currentSanitizer","activeDirectiveId","activeDirectiveSuperClassDepthPosition","activeDirectiveSuperClassHeight","_selectedIndex","getSelectedIndex","getCurrentStyleSanitizer","defaultScheduler","requestAnimationFrame","setTimeout","MAP_BASED_ENTRY_PROP_NAME","TEMPLATE_DIRECTIVE_INDEX","updateLastDirectiveIndex","lastDirectiveIndex","setConfig","getConfig","getProp","getPropConfig","isSanitizationRequired","getGuardMask","setGuardMask","maskValue","getValuesCount","getBindingValue","offset","allowStylingFlush","isContextLocked","stateIsPersisted","getPropValuesStartPosition","hasValueChanged","compareValueA","compareValueB","isStylingValueDefined","concatString","separator","hyphenate","v","toLowerCase","getStylingMapArray","isStylingContext","getMapProp","setMapValue","getMapValue","RendererStyleFlags3","Important","DashCase","isProceduralRenderer","renderer","listen","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","ERROR_LOGGER","getDebugContext","getOriginalError","defaultErrorLogger","_console","originalError","_findOriginalError","_findContext","errorLogger","e","_devMode","_runModeLocked","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","createElement","appendChild","innerHTML","querySelector","getInertBodyElement","DOMParser","_a","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","send","response","removeChild","firstChild","parseFromString","templateEl","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","attrName","item","removeAttribute","childNode","nodeType","Node","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","DATA_URL_PATTERN","url","match","tagSet","tags","t","split","core_merge","sets","s","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","current","traverseContent","startElement","TEXT_NODE","chars","endElement","checkClobberedElement","parentNode","tagName","nodeName","elAttr","lower","srcset","trim","encodeEntities","node","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","charCodeAt","inertBodyHelper","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","sanitizer","safeHtml","sanitizeChildren","getTemplateContent","content","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","SAFE_STYLE_VALUE","RegExp","URL_RE","urlMatch","outsideSingle","outsideDouble","c","CAMEL_CASE_REGEXP","normalizeDebugBindingValue","slice","DEFAULT_GUARD_MASK_VALUE","STYLING_INDEX_FOR_MAP_BINDING","DEFAULT_BINDING_VALUE","DEFAULT_SIZE_VALUE","deferredBindingQueue","updateBindingData","counterIndex","prop","bindingIndex","deferRegistration","forceUpdate","sanitizationRequired","unshift","flushDeferredBindings","registerBinding","changed","countId","bindingValue","registered","found","valuesCount","p","allocateNewContextEntry","addBindingIntoContext","isMapBased","firstValueIndex","lastValueIndex","maybeApplyStyling","allowFlush","bitMask","styleSetter","styleSanitizer","initialValues","initialStyling","bindingData","bitMaskValue","applyStylingFn","stylingMapsSyncFn","_activeStylingMapApplyFn","mapsMode","valueApplied","valuesCountUpToDefault","defaultValue","j","valueAppliedWithinMap","setStyle","native","nativeStyle","style","setProperty","removeStyle","removeProperty","setClass","className","classList","addClass","removeClass","NO_CHANGE","syncStylingMap","mode","targetProp","targetPropValueWasApplied","runTheSyncAlgorithm","loopUntilEnd","innerSyncStylingMap","currentMapIndex","stylingMapArr","cursor","mapIndex","MAP_CURSORS","iteratedTooFar","isTargetPropMatched","valueIsDefined","resolveInnerMapMode","isValueAllowedToBeApplied","useDefault","valueToApply","bindingIndexToApply","currentMode","isExactMatch","innerMode","doApplyValue","addItemToStylingMap","allowOverwrite","propAtIndex","applied","valueAtIndex","SWITCH_CHANGE_DETECTOR_REF_FACTORY","INJECTOR_IMPL","providers","StaticInjector","NULL","IDENT","CIRCULAR$1","MULTI_PROVIDER_FN","NO_NEW_LINE$1","records","_records","set","deps","useNew","recursivelyProcessProviders","provider","staticError","resolvedProvider","providerDeps","annotations","useExisting","useFactory","useClass","multi","multiProvider","multiProviderMixError","record","tryResolveToken","depRecords","depRecord","childRecord","tokenPath","tokens","count","firstTemplatePass","hostVars","expando","expandoInstructions","totalHostVars","blueprint","_symbolIterator","getSymbolIterator","iterator","keys","getOwnPropertyNames","entries","isNaN","devModeEqual$1","isListLikeIterableA","isListLikeIterableB","comparator","iterator1","iterator2","item1","item2","done","isAObject","isBObject","wrapped","isWrapped","isJsObject$1","o","directiveIndex","getActiveDirectiveStylingIndex","getClassesContext","getStylesContext","updateDirectiveInputValue","_stylingMap","deferStylingUpdate","classes","elementIndex","isClassBased","defer","valueHasChanged","oldValue","newValues","normalizeProps","allValuesTrue","state","newValue","privateName","instance","initialValue","str","classesContext","stylesContext","persistState","allowFlushClasses","allowFlushStyles","classesFlushed","stylesFlushed","delete","getContext","then","SimpleChange","previousValue","currentValue","firstChange","ComponentRef","ComponentFactory","noComponentFactoryError","component","ERROR_COMPONENT","_NullComponentFactoryResolver","factories","_ngModule","_factories","componentType","resolveComponentFactory","ComponentFactoryBoundToModule","ngModule","selector","projectableNodes","rootSelectorOrNode","noop","nativeElement","SWITCH_ELEMENT_REF_FACTORY","Renderer","SWITCH_RENDERER2_FACTORY","full","major","minor","patch","VERSION","DefaultIterableDifferFactory","trackByFn","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","_nextPrevious","_nextAdded","_nextMoved","_nextIdentityChange","collection","check","_reset","itemTrackBy","mayBeDirty","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","_truncate","isDirty","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","clear","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","isEmpty","size","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","_nextChanged","insertBefore","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","before","has","KeyValueChangeRecord_","_addToAdditions","_addToChanges","k","copied","concat","iterable","find","f","supports","kv","keyValDiff","defaultIterableDiffers","defaultKeyValueDiffers","TemplateRef","SWITCH_TEMPLATE_REF_FACTORY","SWITCH_VIEW_CONTAINER_REF_FACTORY","expressionChangedAfterItHasBeenCheckedError","currValue","isFirstCheck","msg","_addDebugContext","logError","viewDestroyedError","action","shiftInitState","priorInitState","newInitState","initState","initIndex","shouldCallLifecycleInitHook","asTextData","nodes","asElementData","asProviderData","asPureExpressionData","asQueryList","Services","setCurrentNode","createRootView","createEmbeddedView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","handleEvent","updateDirectives","updateRenderer","dirtyParentQueries","NOOP","_tokenKeyCache","tokenKey","UNDEFINED_RENDERER_TYPE_ID","EMPTY_RENDERER_TYPE_ID","_renderCompCount$1","checkBinding","bindingIdx","oldValues","checkAndUpdateBinding","checkBindingNoChanges","bindingName","bindings","nodeIndex","markParentViewsForCheck","currView","viewContainerParent","markParentViewsForCheckProjectedViews","endView","dispatchEvent","eventName","event","componentView","root","errorHandler","handleError","declaredViewContainer","parentNodeDef","viewParentEl","renderNode","renderElement","renderText","isComponentView","isEmbeddedView","filterQueryId","queryId","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","references","valueType","splitDepsDsl","sourceName","configurable","getParentRenderElement","renderHost","renderParent","componentRendererType","DEFINITION_CACHE","WeakMap","resolveDefinition","visitRootRenderNodes","target","lastRenderRootNode","visitSiblingRenderNodes","startIndex","endIndex","nodeDef","visitRenderNode","childCount","visitProjectedRenderNodes","ngContentIndex","compView","hostView","hostElDef","projectedNodes","execRenderNodeAction","ngContent","rn","bindingFlags","embeddedViews","viewContainer","_embeddedViews","NS_PREFIX_RE","splitNamespace","calcBindingFlags","UNDEFINED_VALUE","InjectorRefTokenKey","INJECTORRefTokenKey","NgModuleRefTokenKey","providersByKey","modules","isRoot","resolveNgModuleDep","depDef","_def","providerInstance","_providers","_createProviderInstance","scope","injectable","ctor","len","depValues","detachEmbeddedView","elementData","viewIndex","renderDetachView$1","renderAttachEmbeddedView","prevView","prevRenderNode","EMPTY_CONTEXT","viewDefFactory","ComponentFactory_","_inputs","_outputs","inputsArr","templateName","outputsArr","componentNodeIndex","componentProvider","setAttribute","ComponentRef_","ViewRef_","_view","_viewRef","_component","_elDef","changeDetectorRef","location","Injector_","constructor","destroy","callback","createViewContainerData","elDef","elData","ViewContainerRef_","_data","parentInjector","ref","attachToViewContainerRef","templateRef","viewRef","insert","componentFactory","ngModuleRef","contextInjector","componentRef","destroyed","viewRef_","parentView","vcElementData","dvcElementData","projectedViews","_projectedViews","nodeFlags","childFlags","oldViewIndex","newViewIndex","viewData","createChangeDetectorRef","_viewContainerRef","_appRef","rootNodes","renderNodes","fs","rendererFactory","begin","end","disposables","detachView","detach","appRef","vcRef","createTemplateData","TemplateRef_","_parentView","elementRef","createInjector$1","createRendererV1","RendererAdapter","delegate","selectorOrNode","selectRootElement","namespaceAndName","ns","hostElement","parentElement","comment","createComment","createText","viewRootNodes","viewAllNodes","destroyNode","propertyName","propertyValue","attributeValue","isAdd","styleName","styleValue","methodName","setValue","moduleType","bootstrapComponents","NgModuleRef_","_moduleType","_bootstrapComponents","_destroyListeners","_destroyed","provDef","injectFlags","componentFactoryResolver","lifecycles","Set","listener","RendererV1TokenKey","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","TemplateRefTokenKey","ChangeDetectorRefTokenKey","InjectorRefTokenKey$1","INJECTORRefTokenKey$1","checkIndex","nonMinifiedName","securityContext","suffix","outputDefs","depDefs","outputIndex","directChildFlags","childMatchedQueries","query","createProviderInstance","_createProviderInstance$1","createPipeInstance","createClass","createDirectiveInstance","output","outputObservable","eventHandlerClosure","allowPrivateServices","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","startView","searchView","findCompView","allProviders","publicProviders","providerData","updateProp","changes","unwrap","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","LocaleId","DayPeriodsFormat","DayPeriodsStandalone","DaysFormat","DaysStandalone","MonthsFormat","MonthsStandalone","Eras","FirstDayOfWeek","WeekendRange","DateFormat","TimeFormat","DateTimeFormat","NumberSymbols","NumberFormats","CurrencySymbol","CurrencyName","Currencies","PluralCase","ExtraData","u","localeEn","n","floor","abs","locale","normalizedLocale","parentLocale","DEFAULT_LOCALE_ID","LOCALE_ID","setLocaleId","localeId","isAsync","__isAsync","generatorOrNext","schedulerFn","errorFn","completeFn","sink","symbolIterator","_results","dirty","symbol","proto","filter","init","reduce","some","resultsTree","flatten","list","dst","last","first","emit","appInits","initialized","donePromise","rej","resolve","reject","asyncInitPromises","initResult","all","catch","_randomChar","fromCharCode","ivyEnabled","_throwError","Compiler_compileModuleSync","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","CompilerFactory","trace","events","detectWTF","wtf","wtfEnabled","noopScope","arg0","arg1","wtfCreateScope","signature","createScope","wtfLeave","returnValue","leaveScope","r","promise","scheduleMicroTask","Zone","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","zone","assertZonePatched","_nesting","_outer","_inner","wtfZoneSpec","fork","TaskTrackingZoneSpec","longStackTraceZoneSpec","properties","isAngularZone","onInvokeTask","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","runOutsideAngular","isInAngularZone","run","scheduleEventTask","EMPTY_PAYLOAD","noop$1","runTask","cancelTask","runGuarded","NoopNgZone","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","assertNotInAngularZone","_runCallbacksIfReady","cb","clearTimeout","timeoutId","doneCb","pending","getPendingTasks","updateCb","macroTasks","creationLocation","timeout","addCallback","using","exactMatch","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","testability","elem","from","findInAncestors","findTestabilityInTree","_NoopGetTestability","registry","getter","_platform","compileNgModuleFactory","createCompiler","isBoundToModule","cf","ALLOW_MULTIPLE_PLATFORMS","parentPlatformFactory","desc","marker","extraProviders","platform","getPlatform","injectedProviders","PlatformRef","inits","requiredToken","_injector","_modules","moduleFactory","ngZone","ngZoneOption","ngZoneInjector","moduleRef","exceptionHandler","initStatus","runInitializers","_moduleDoBootstrap","compilerOptions","optionsReducer","bootstrapModuleFactory","bootstrap","ngDoBootstrap","module","objs","assign","ApplicationRef","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","components","tick","isCurrentlyStable","stableSub","unstableSub","assertInAngularZone","observables","scheduler","isScheduler","mergeAll","fromArray","subjectOrSubjectFactory","componentOrFactory","compRef","_unloadComponent","registerApplication","_loadComponent","_tickScope","detectChanges","checkNoChanges","attachToAppRef","detachFromAppRef","attachView","viewCount","_SEPARATOR","FACTORY_CLASS_SUFFIX","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","_compiler","_config","path","loadFactory","loadAndCompile","exportName","checkNotEmpty","factoryClassSuffix","modulePath","DebugEventListener","DebugNode__PRE_R3__","nativeNode","_debugContext","listeners","DebugElement__PRE_R3__","addChild","componentInstance","providerTokens","childNodes","child","childIndex","newChildren","siblingIndex","refChild","newChild","refIndex","predicate","queryAll","matches","_queryElementChildren","_queryNodeChildren","children","eventObj","_nativeNodeToDebugNode","indexDebugNode","queue","fixedAttrs","bindingDefs","suffixOrSecurityContext","attrs","isFilled","parentEl","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","disposable","checkAndUpdateElementValue","binding","renderValue","sanitize","unit","bindingType","filterId","queryIds","nodeMatchedQueries","tplDef","setDirty","checkAndUpdateQuery","queryList","directiveInstance","calcQueryValues","reset","notify","boundValue","notifyOnChanges","getQueryValue","embeddedView","dvc","projectedView","queryValueType","appendNgContent","staticText","prefix","_addInterpolationPart","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentParent","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","validateNode","isComponent","isNgContainer","newParent","rootNodeFlags","bindingCount","outputCount","nodeCount","parentEnd","anchorDef","createView","initView","createViewNodes","rendererType","compRenderer","createRenderer","nodeData","compViewDef","execComponentViewsAction","ViewAction","CreateViewNodes","execQueriesAction","markProjectedViewsForCheck","execEmbeddedViewsAction","CheckNoChanges","CheckAndUpdate","callInit","checkAndUpdateNode","argStyle","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","bindLen","directive","ngOnChanges","transform","params","checkNoChangesNode","checkNoChangesQuery","Destroy","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","callViewAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","createProdRootView","elInjector","createRootData","debugCreateRootView","DebugRendererFactory2","defWithOverride","applyProviderOverridesToView","callWithDebugContext","DebugAction","debugCreateEmbeddedView","debugCreateComponentView","viewDefOverrides","debugCreateNgModuleRef","hasOverrides","hasDeprecatedOverrides","providerOverrides","override","deprecatedBehavior","providerOverridesWithScope","moduleSet","debugOverrideProvider","debugOverrideComponentView","comp","compFactory","hostViewDef","debugClearOverrides","elementIndicesWithOverwrittenProviders","elIndicesWithOverwrittenProviders","lastElementDef","applyProviderOverridesToElement","elIndex","prodCheckAndUpdateNode","prodCheckNoChangesNode","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","_currentAction","_currentView","_currentNodeIndex","debugSetCurrentNode","debugHandleEvent","debugUpdateDirectives","nextDirectiveWithBinding","debugCheckAndUpdateNode","debugCheckNoChangesNode","debugUpdateRenderer","nextRenderNodeWithBinding","givenValues","bindingValues","input","m","attr","DebugContext_","elView","elOrCompView","childDef","collectReferences","componentRenderElement","logViewDef","logNodeIndex","renderNodeIndex","currRenderNodeIndex","refName","oldAction","oldView","oldNodeIndex","getCurrentDebugContext","renderData","DebugRenderer2","whenRenderingDone","debugContextFactory","debugNode","namespace","debugCtx","debugEl","debugChildEl","debugRefEl","oldChild","preserveContent","ngModuleType","defFactory","NgModuleFactory_","_ngModuleDefFactory","services","ObjectUnsubscribedErrorImpl","ObjectUnsubscribedError","subscribeToObservable","_symbol_observable__WEBPACK_IMPORTED_MODULE_0__","obs","TypeError","subscribeTo","symbol_observable","sub","schedule","observable","subscribeToPromise","isArrayLike","symbol_iterator","return","subscribeToIterable","x","empty","_Observable__WEBPACK_IMPORTED_MODULE_0__","AnimationBuilder","AnimationFactory","AUTO_STYLE","sequence","NoopAnimationPlayer","AnimationGroupPlayer","ÉµPRE_STYLE","steps","duration","delay","_onDoneFns","_onStartFns","_onDestroyFns","_started","_finished","parentPlayer","totalTime","hasStarted","_onStart","triggerMicrotask","_onFinish","finish","position","phaseName","methods","_players","players","doneCount","destroyCount","startCount","total","player","onDone","_onDestroy","onStart","time","max","play","pause","restart","timeAtPosition","min","setPosition","getPosition","beforeDestroy","Observable_Observable","_isScalar","nextOrObserver","Observer","_trySubscribe","promiseCtor","getPromiseCtor","operations","take","_util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__","_observable_empty__WEBPACK_IMPORTED_MODULE_2__","TakeOperator","TakeSubscriber","startWith","array","of","scalar","_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__","_fromArray__WEBPACK_IMPORTED_MODULE_1__","_empty__WEBPACK_IMPORTED_MODULE_2__","_scalar__WEBPACK_IMPORTED_MODULE_3__","hostReportError","DEPRECATED_PLURAL_FN","NgLocaleLocalization","NgLocalization","parseCookieValue","CommonModule","DOCUMENT","PLATFORM_BROWSER_ID","isPlatformBrowser","isPlatformServer","ViewportScroller","PlatformLocation","LOCATION_INITIALIZED","LocationStrategy","APP_BASE_HREF","HashLocationStrategy","PathLocationStrategy","Location","_angular_core__WEBPACK_IMPORTED_MODULE_0__","platformStrategy","platformLocation","_urlChangeListeners","_platformStrategy","browserBaseHref","getBaseHref","_platformLocation","_baseHref","stripTrailingSlash","_stripIndexHtml","onPopState","ev","includeHash","normalize","getState","normalizeQueryParams","baseHref","startsWith","prepareExternalUrl","pushState","_notifyUrlChangeListeners","replaceState","forward","back","onNext","onThrow","onReturn","start","slashes","endsWith","pathEndIdx","onHashChange","hash","internal","joinWithSlash","title","queryParams","pathname","href","getBaseHrefFromDOM","search","externalUrl","Plural","Zero","One","Two","Few","Many","Other","rb","deprecatedPluralFn","cookieStr","encodeURIComponent","cookie","eqIndex","cookieName","cookieValue","decodeURIComponent","PLATFORM_SERVER_ID","platformId","Jb","BrowserViewportScroller","Kb","l","document","supportScrollRestoration","scrollX","scrollY","scrollTo","anchor","CSS","escape","elSelectedById","scrollToElement","elSelectedByName","scrollRestoration","history","rect","getBoundingClientRect","left","pageXOffset","top","pageYOffset","_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__","_subscribeToPromise__WEBPACK_IMPORTED_MODULE_2__","_subscribeToIterable__WEBPACK_IMPORTED_MODULE_3__","_subscribeToObservable__WEBPACK_IMPORTED_MODULE_4__","_isArrayLike__WEBPACK_IMPORTED_MODULE_5__","_isPromise__WEBPACK_IMPORTED_MODULE_6__","_isObject__WEBPACK_IMPORTED_MODULE_7__","_symbol_iterator__WEBPACK_IMPORTED_MODULE_8__","_symbol_observable__WEBPACK_IMPORTED_MODULE_9__","identity","_util_EmptyError__WEBPACK_IMPORTED_MODULE_0__","_filter__WEBPACK_IMPORTED_MODULE_1__","_take__WEBPACK_IMPORTED_MODULE_2__","_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__","_throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__","_util_identity__WEBPACK_IMPORTED_MODULE_5__","hasDefaultValue","throwIfEmpty","_tap__WEBPACK_IMPORTED_MODULE_0__","_util_EmptyError__WEBPACK_IMPORTED_MODULE_1__","errorFactory","defaultErrorFactory","hasValue","SubjectSubscription_SubjectSubscription","observers","subscriberIndex","Subject_SubjectSubscriber","Subject_Subject","hasError","thrownError","Subject_AnonymousSubject","copy","isObject","subscribeToResult","_InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__","_subscribeTo__WEBPACK_IMPORTED_MODULE_1__","outerSubscriber","_hostReportError__WEBPACK_IMPORTED_MODULE_0__","_mergeMap__WEBPACK_IMPORTED_MODULE_0__","_util_identity__WEBPACK_IMPORTED_MODULE_1__","concatMap","_createNgProbe","BrowserModule","platformBrowser","EVENT_MANAGER_PLUGINS","EventManager","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","HammerGestureConfig","DomSanitizer","getDOM","DomRendererFactory2","DomEventsPlugin","HammerGesturesPlugin","KeyEventsPlugin","DomSharedStylesHost","SharedStylesHost","DomSanitizerImpl","_angular_common__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","_DOM","DomAdapter","resourceLoaderType","attrToPropMap","_attrToPropMap","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","getStyle","domPrefixes","transEndEventNames","WebkitTransition","MozTransition","OTransition","transition","getDistributedNodes","baseUrl","createShadowRoot","class","innerHtml","readonly","tabindex","DOM_KEY_LOCATION_NUMPAD","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","O","`","Â","nodeContains","sb","contains","BrowserDomAdapter","templateHtml","adapter","group","groupEnd","nodeA","nodeB","querySelectorAll","evt","addEventListener","removeEventListener","eventType","getDefaultDocument","createEvent","initEvent","preventDefault","defaultPrevented","isTemplateElement","hasProperty","replaceChild","textContent","checked","doc","createElementNS","createTextNode","attrValue","css","shadowRoot","host","cloneNode","getElementsByClassName","getElementsByTagName","stylename","attrib","attribute","hasAttribute","hasAttributeNS","getAttribute","getAttributeNS","setAttributeNS","removeAttributeNS","bottom","right","width","height","newTitle","isElementNode","msMatchesSelector","webkitMatchesSelector","COMMENT_NODE","HTMLElement","DocumentFragment","importNode","templateAwareRoot","adoptNode","keyIdentifier","parseInt","baseElement","urlParsingNode","navigator","userAgent","getComputedStyle","Element","animate","performance","now","Date","getTime","q","supportsState","TRANSITION_ID","SERVER_TRANSITION_PROVIDERS","transitionId","dom","BrowserGetTestability","W","getAngularTestability","getAllAngularTestabilities","getAllTestabilities","getAllAngularRootElements","getAllRootElements","frameworkStabilizers","testabilities","didWork","decrement","didWork_","whenStable","getTestability","isShadowRoot","getHost","exportNgVar","COMPILED","ng","CORE_TOKENS","g","INSPECT_GLOBAL_NAME","CORE_TOKENS_GLOBAL_NAME","inspectNativeElement","S","coreTokens","plugins","_eventNameToPlugin","manager","_plugins","reverse","handler","_findPluginFor","addGlobalEventListener","plugin","EventManagerPlugin","_doc","getGlobalEventTarget","_stylesSet","additions","onStylesAdded","_hostNodes","_styleNodes","head","styleEl","hostNode","_addStylesToHost","styleNode","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","COMPONENT_REGEX","HOST_ATTR","CONTENT_ATTR","flattenStyles","compId","decoratePreventDefault","eventHandler","eventManager","sharedStylesHost","appId","rendererByCompId","defaultRenderer","DefaultDomRenderer2","EmulatedEncapsulationDomRenderer2","applyToHost","ShadowDomRenderer","addStyles","namespaceUri","checkNoSyntheticProp","AT_CHARCODE","nameKind","contentAttr","hostAttr","componentShortId","hostEl","attachShadow","addHost","removeHost","nodeOrShadowRoot","__symbol__","ADD_EVENT_LISTENER","REMOVE_EVENT_LISTENER","symbolNames","FALSE","ANGULAR","NATIVE_ADD_LISTENER","NATIVE_REMOVE_LISTENER","stopSymbol","stopMethodSymbol","blackListedMap","blackListedEvents","isBlackListedEvent","globalListener","symbolName","taskDatas","taskData","copiedTasks","patchEvent","Event","stopImmediatePropagation","globalListenerRegistered","callbackRegistered","underlyingRemove","EVENT_NAMES","pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeleft","swiperight","swipeup","swipedown","tap","overrides","mc","Hammer","enable","loader","isCustomEvent","getZone","cancelRegistration","deregister","buildHammer","on","off","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","alt","altKey","control","ctrlKey","meta","metaKey","shiftKey","parseEventName","parsedEvent","outsideHandler","eventCallback","fullKey","onAndCancel","domEventName","_normalizeKey","modifierName","getEventKey","modifierGetter","getEventFullKey","keyName","ctx","SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","SafeStyleImpl","db","SafeScriptImpl","SafeResourceUrlImpl","SafeUrlImpl","eb","expectedType","SafeValueImpl","getTypeName","INTERNAL_BROWSER_PLATFORM_PROVIDERS","z","makeCurrent","_init","getLocation","_history","getHistory","protocol","hostname","port","newPath","P","V","parentModule","AnimationDriver","AnimationStyleNormalizer","WebAnimationsStyleNormalizer","NoopAnimationDriver","AnimationEngine","CssKeyframesDriver","WebAnimationsDriver","supportsWebAnimations","_angular_animations__WEBPACK_IMPORTED_MODULE_0__","isNode","process","optimizeGroupPlayer","normalizeKeyframes","driver","normalizer","keyframes","preStyles","postStyles","errors","normalizedKeyframes","previousOffset","previousKeyframe","kf","isSameOffset","normalizedKeyframe","normalizedProp","normalizedValue","normalizePropertyName","h","normalizeStyleValue","LINE_START","listenOnPlayer","copyAnimationEvent","makeAnimationEvent","triggerName","fromState","toState","disabled","getOrSetAsInMap","parseTimelineCommand","command","separatorPos","_contains","elm1","elm2","_matches","_query","_isNode","matchesSelector","mozMatchesSelector","oMatchesSelector","results","elm","_CACHED_BODY","_IS_WEBKIT","validateStyleProperty","toUpperCase","matchesElement","containsElement","invokeQuery","hypenatePropsObject","object","newObj","newProp","easing","previousPlayers","scrubberAccessRequested","ONE_SECOND","SUBSTITUTION_EXPR_START","ENTER_CLASSNAME","LEAVE_CLASSNAME","NG_TRIGGER_CLASSNAME","NG_TRIGGER_SELECTOR","NG_ANIMATING_CLASSNAME","NG_ANIMATING_SELECTOR","resolveTimingValue","_convertTimeValueToMS","parseFloat","resolveTiming","timings","allowNegativeValues","exp","delayMatch","easingVal","containsErrors","copyObj","copyStyles","readPrototype","getStyleAttributeString","writeStyleAttribute","styleAttrValue","getPropertyValue","setStyles","formerStyles","camelProp","dashCaseToCamelCase","eraseStyles","normalizeAnimationEntry","PARAM_REGEX","extractStyleParams","val","exec","lastIndex","interpolateParams","original","varName","localVal","iteratorToArray","DASH_CASE_REGEXP","allowPreviousPlayerStylesMerge","balancePreviousStylesIntoKeyframes","previousStyles","previousStyleProps","startingKeyframe","missingStyleProps","computeStyle","visitDslNode","visitor","visitTrigger","visitState","visitTransition","visitSequence","visitGroup","visitAnimate","visitKeyframes","visitStyle","visitReference","visitAnimateChild","visitAnimateRef","visitQuery","visitStagger","ANY_STATE","parseTransitionExpr","transitionValue","expressions","eventStr","alias","makeLambdaFromStates","TRUE_BOOLEAN_VALUES","FALSE_BOOLEAN_VALUES","lhs","rhs","LHS_MATCH_BOOLEAN","RHS_MATCH_BOOLEAN","lhsMatch","rhsMatch","SELF_TOKEN","SELF_TOKEN_REGEX","buildAnimationAst","metadata","AnimationAstBuilderVisitor","build","ROOT_SELECTOR","_driver","AnimationAstBuilderContext","_resetContextStyleTimingState","currentQuerySelector","collectedStyles","currentTime","queryCount","depCount","states","transitions","definitions","stateDef","styleAst","astParams","containsDynamicStyles","missingSubs","stylesObj","missingSubsArr","animation","matchers","expr","normalizeAnimationOptions","furthestTime","step","innerAst","timingAst","makeTimingAst","strValue","ast","dynamic","currentAnimateTimings","styleMetadata","newStyleData","_styleAst","isEmptyStep","_makeStyleAst","_validateStyleAst","styleTuple","collectedEasing","styleData","styleMap","endTime","startTime","tuple","collectedEntry","updateCollectedStyle","totalKeyframesWithOffsets","offsets","offsetsOutOfOrder","keyframesOutOfRange","offsetVal","generatedOffset","limit","animateDuration","durationUpToThisFrame","parentSelector","currentQuery","includeSelf","hasAmpersand","optional","originalSelector","currentTransition","createTimelineInstruction","preStyleProps","postStyleProps","subTimeline","ElementInstructionMap","_map","instructions","existingInstructions","ONE_FRAME_IN_MILLISECONDS","ENTER_TOKEN_REGEX","LEAVE_TOKEN_REGEX","buildAnimationTimelines","rootElement","enterClassName","leaveClassName","startingStyles","finalStyles","subInstructions","AnimationTimelineBuilderVisitor","buildKeyframes","AnimationTimelineContext","currentTimeline","timelines","timeline","containsAnimation","tl","allowOnlyTimelineStyles","elementInstructions","consume","innerContext","createSubContext","_visitSubInstructions","transformIntoNewTimeline","previousNode","instruction","instructionTimings","appendInstructionToTimeline","updateOptions","subContextCount","snapshotCurrentStyles","DEFAULT_NOOP_PREVIOUS_NODE","delayNextStep","applyStylesToKeyframe","innerTimelines","mergeTimelineCollectedStyles","_visitTiming","incrementTime","getCurrentStyleProperties","forwardFrame","applyEmptyStep","innerTimeline","forwardTime","elms","currentQueryTotal","sameElementTimeline","currentQueryIndex","parentContext","maxTime","currentStaggerTime","startingTime","_enterClassName","_leaveClassName","initialTimeline","TimelineBuilder","skipIfExists","newOptions","optionsToUpdate","newParams","paramsToUpdate","oldParams","newTime","_copyOptions","updatedTimings","builder","SubTimelineBuilder","stretchStartingKeyframe","elements","_elementTimelineStylesLookup","_previousKeyframe","_currentKeyframe","_keyframes","_styleSummary","_pendingStyles","_backFill","_currentEmptyStepKeyframe","_localTimelineStyles","_globalTimelineStyles","_loadKeyframe","hasPreStyleStep","allStyles","allProperties","_updateStyle","details0","details1","finalKeyframes","keyframe","finalKeyframe","preProps","postProps","kf0","kf1","_stretchStartingKeyframe","newKeyframes","startingGap","newFirstKeyframe","oldFirstKeyframe","roundOffset","decimalPoints","mult","pow","round","userProvidedProperty","normalizedProperty","strVal","DIMENSIONAL_PROP_MAP","valAndSuffixMatch","createTransitionInstruction","isRemovalTransition","fromStyles","toStyles","queriedElements","EMPTY_OBJECT","AnimationTransitionFactory","_triggerName","_stateStyles","currentState","nextState","matchFns","stateName","backupStateStyler","stateStyler","backupStyles","buildStyles","currentOptions","nextOptions","skipAstBuild","transitionAnimationParams","currentStateStyles","nextAnimationParams","nextStateStyles","preStyleMap","postStyleMap","isRemoval","animationOptions","queriedElementsList","AnimationStateStyles","defaultParams","combinedParams","styleObj","AnimationTrigger","transitionFactories","balanceProperties","fallbackTransition","containsQueries","key1","key2","EMPTY_INSTRUCTION_MAP","TimelineAnimationEngine","bodyNode","_normalizer","_animations","_playersById","autoStylesMap","inst","_buildPlayer","_getPlayer","baseEvent","register","QUEUED_CLASSNAME","QUEUED_SELECTOR","DISABLED_CLASSNAME","DISABLED_SELECTOR","STAR_CLASSNAME","STAR_SELECTOR","EMPTY_PLAYER_ARRAY","NULL_REMOVAL_STATE","namespaceId","setForRemoval","setForMove","hasAnimation","removedBeforeQueried","NULL_REMOVED_QUERIED_STATE","REMOVAL_FLAG","StateValue","isObj","VOID_VALUE","DEFAULT_STATE_VALUE","AnimationTransitionNamespace","_engine","_triggers","_queue","_elementListeners","_hostClassName","phase","triggersWithStates","statesByElement","afterFlush","trigger","defaultToFallback","_getTrigger","TransitionAnimationPlayer","absorbOptions","k1","k2","matchStyles","reportError","playersOnElement","playersByElement","queued","matchTransition","isFallbackTransition","totalQueuedPlayers","stateMap","entry","elementPlayers","namespaces","fetchNamespacesByElement","triggerLeaveAnimation","clearElementCache","destroyAfterComplete","triggerStates","markElementAsRemoved","processLeaveNode","visitedTriggers","engine","childElementCount","_signalRemovalForInnerTriggers","containsPotentialParentTransition","totalAnimations","currentPlayers","playersByQueriedElement","prepareLeaveAnimationListeners","destroyInnerAnimations","_onRemovalComplete","microtaskId","markedForDestroy","sort","d0","d1","containsData","TransitionAnimationEngine","newHostElements","disabledNodes","_namespaceLookup","_namespaceList","_flushFns","_whenQuietFns","namespacesByHostElement","collectedEnterElements","collectedLeaveElements","onRemovalComplete","queuedPlayers","_balanceNamespaceList","collectEnterElement","createNamespace","_fetchNamespace","afterFlushAnimationsDone","elementStates","nsId","details","insertNode","isHostElement","removeNode","hostNS","subTimelines","skipBuildAst","containerElement","destroyActiveAnimationsForElement","finishActiveQueriedAnimationOnElement","markElementAsDisabled","cleanupFns","_flushAnimations","quietFns","skippedPlayers","skippedPlayersMap","queuedInstructions","allPreStyleElements","allPostStyleElements","disabledElementsSet","nodesThatAreDisabled","allTriggerElements","enterNodeMap","buildRootMap","enterNodeMapIds","allLeaveNodes","mergedLeaveNodes","leaveNodesWithoutAnimations","leaveNodeMapIds","leaveNodeMap","allPlayers","erroneousTransitions","drainQueuedTransitions","nodeIsOrphaned","_buildInstruction","append","stringMap","setVal","allPreviousPlayersMap","animationElementMap","_beforeAnimationBuild","_getPreviousPlayers","prevPlayer","replaceNodes","replacePostStylesAsPre","postStylesMap","cloakAndComputeStyles","preStylesMap","post","pre","rootPlayers","subPlayers","NO_PARENT_ANIMATION_ELEMENT_DETECTED","overrideTotalTime","parentWithAnimation","parentsToAdd","detectedParent","innerPlayer","_buildAnimation","setRealPlayer","parentPlayers","playersForElement","syncPlayerEvents","queriedPlayerResults","queriedInnerElements","queriedPlayers","activePlayers","removeNodesAfterAnimationDone","elementContainsData","isQueriedElement","toStateValue","queriedElementPlayers","isRemovalAnimation","targetNameSpaceId","targetTriggerName","timelineInstruction","realPlayer","getRealPlayer","allQueriedPlayers","allConsumedElements","allSubElements","allNewPlayers","finalPlayers","_flattenGroupPlayersRecur","wrappedPlayer","currentValues","_player","_containsRealPlayer","_queuedCallbacks","triggerCallback","_queueEvent","cloakElement","display","valuesMap","elementPropsMap","defaultStyle","cloakVals","failedElements","roots","rootMap","nodeSet","localRootMap","getRoot","CLASSES_CACHE_KEY","postEntry","preEntry","_triggerCache","_transitionEngine","_timelineEngine","componentId","cacheKey","registerTrigger","disable","property","eventPhase","flush","packageNonAnimatableStyles","startStyles","endStyles","filterNonAnimatableStyles","SpecialCasedStyles","_element","_startStyles","_endStyles","_state","initialStyles","initialStylesByElement","_initialStyles","isNonAnimatableStyle","ELAPSED_TIME_MAX_DECIMAL_PLACES","ANIMATION_PROP","ANIMATIONEND_EVENT","ONE_SECOND$1","ElementAnimationStyleHandler","_name","_duration","_delay","_easing","_fillMode","_onDoneFn","_startTime","_position","_eventFn","_handleCallback","anim","getAnimationStyle","char","setAnimationStyle","addRemoveAnimationEvent","playPauseAnimation","findIndexForAnimation","timestamp","_ngTestManualTimestamp","elapsedTime","toFixed","animationName","findMatchingTokenIndex","status","searchToken","doRemove","DEFAULT_FILL_MODE","DEFAULT_EASING","CssKeyframesPlayer","_finalStyles","_specialStyles","currentSnapshot","_buildStyler","_styler","_flushStartFns","_flushDoneFns","resume","finished","DirectStylePlayer","_startingStyles","__initialized","_styles","KEYFRAMES_NAME_PREFIX","TAB_SPACE","_count","_warningIssued","keyframeStr","tab","kfElm","_notifyFaultyScrubber","previousCssKeyframePlayers","flatKeyframes","buildKeyframeElement","specialStyles","WebAnimationsPlayer","_initialized","_preparePlayerBeforeStart","domPlayer","_triggerWebAnimation","_finalKeyframe","_resetDomPlayerState","cancel","_isNativeImpl","test","getElementAnimateFn","_cssKeyframesDriver","supported","playerOptions","fill","previousWebAnimationPlayers","_config__WEBPACK_IMPORTED_MODULE_0__","_util_hostReportError__WEBPACK_IMPORTED_MODULE_1__","BehaviorSubject_BehaviorSubject","_value","getValue","CombineLatestOperator","combineLatest_CombineLatestSubscriber","OuterSubscriber","toRespond","unused","_tryResultSelector","observableFactory","takeLast","takeLast_TakeLastOperator","takeLast_TakeLastSubscriber","ring","idx","defaultIfEmpty","EmptyError","catchError","CatchOperator","caught","catchError_CatchSubscriber","err2","_unsubscribeAndRecycle","EveryOperator","thisArg","every_EverySubscriber","everyValueMatch","switchMap","SwitchMapOperator","switchMap_SwitchMapSubscriber","innerSubscription","scan","accumulator","seed","hasSeed","ScanOperator","scan_ScanSubscriber","_seed","FinallyOperator","finalize_FinallySubscriber","ÉµEmptyOutletComponent","ROUTER_FORROOT_GUARD","router_RouterInitializer","createRouterScroller","getAppInitializer","getBootstrapListener","provideForRootGuard","provideLocationStrategy","rootRoute","routerNgProbeToken","setupRouter","RouterScroller","router_RouterOutlet","RouteReuseStrategy","router_Router","ROUTES","ROUTER_CONFIGURATION","ROUTER_INITIALIZER","router_RouterModule","ChildrenOutletContexts","router_NoPreloading","router_PreloadAllModules","PreloadingStrategy","router_RouterPreloader","router_ActivatedRoute","UrlHandlingStrategy","DefaultUrlSerializer","UrlSerializer","RouterEvent","NavigationStart","navigationTrigger","restoredState","NavigationEnd","urlAfterRedirects","NavigationCancel","reason","NavigationError","RoutesRecognized","GuardsCheckStart","GuardsCheckEnd","shouldActivate","ResolveStart","ResolveEnd","RouteConfigLoadStart","route","RouteConfigLoadEnd","ChildActivationStart","snapshot","routeConfig","ChildActivationEnd","ActivationStart","ActivationEnd","routerEvent","PRIMARY_OUTLET","ParamsAsMap","convertToParamMap","NAVIGATION_CANCELING_ERROR","navigationCancelingError","defaultUrlMatcher","segments","segmentGroup","pathMatch","hasChildren","posParams","part","segment","consumed","LoadedRouterConfig","routes","validateConfig","parentPath","getFullPath","fullPath","loadChildren","outlet","redirectTo","matcher","currentRoute","standardizeConfig","shallowEqual","router_last","wrapIntoObservable","core","ub","vb","containsTree","container","containee","exact","equalSegmentGroups","equalPath","numberOfChildren","every","containsSegmentGroup","containsSegmentGroupHelper","containeePaths","UrlTree","fragment","queryParamMap","_queryParamMap","DEFAULT_SERIALIZER","serialize","UrlSegmentGroup","serializePaths","UrlSegment","parameterMap","_parameterMap","serializePath","as","bs","mapChildrenIntoArray","childOutlet","UrlParser","parseRootSegment","parseQueryParams","parseFragment","tree","serializeSegment","primary","strParams","encodeUriQuery","encodeUriString","encodeUriSegment","decode","decodeQuery","SEGMENT_RE","matchSegments","QUERY_PARAM_RE","QUERY_PARAM_VALUE_RE","remaining","consumeOptional","peekStartsWith","parseChildren","parseQueryParam","parseSegment","capture","parseParens","parseMatrixParams","parseParam","valueMatch","decodedKey","decodedVal","currentVal","allowPrimary","outletName","Tree","_root","pathFromRoot","findNode","findPath","cc","TreeNode","nodeChildrenAsMap","RouterState","setRouterState","createEmptyState","urlTree","rootComponent","activated","ActivatedRouteSnapshot","RouterStateSnapshot","emptyUrl","emptyParams","emptyData","emptyQueryParams","futureSnapshot","_futureSnapshot","_routerState","paramMap","_paramMap","inheritedParamsDataResolve","paramsInheritanceStrategy","inheritingStartingFrom","curr","_resolvedData","urlSegment","lastPathIndex","_urlSegment","_lastPathIndex","_resolve","serializeNode","advanceActivatedRoute","nextSnapshot","equalParamsAndUrlSegments","isMatrixParams","outlets","segmentPath","router_tree","oldSegmentGroup","newSegmentGroup","qp","replaceSegment","oldSegment","newSegment","Navigation","isAbsolute","numberOfDoubleDots","commands","cmdWithOutlet","Position","processChildren","getPath","updateSegmentGroup","updateSegmentGroupChildren","currentCommandIndex","currentPathIndex","noMatch","pathIndex","commandIndex","compare","slicedCommands","createNewSegmentGroup","paths","createNewSegmentChildren","activateRoutes","rootContexts","routeReuseStrategy","forwardEvent","ActivateRoutes","targetRouterState","currentRouterState","activate","futureState","currState","parentContexts","futureRoot","currRoot","deactivateChildRoutes","activateChildRoutes","futureNode","currNode","contexts","futureChild","childOutletName","deactivateRoutes","childName","deactivateRouteAndItsChildren","future","shouldDetach","detachAndStoreRouteSubtree","deactivateRouteAndOutlet","onOutletDeactivated","store","deactivate","getOrCreateContext","shouldAttach","stored","retrieve","onOutletReAttached","attachRef","attach","advanceActivatedRouteNodeAndItsChildren","_loadedConfig","cmpFactoryResolver","resolver","activateWith","isFunction","isUrlTree","NoMatch","AbsoluteRedirect","absoluteRedirect","newTree","namedOutletsRedirect","router_ApplyRedirects","moduleInjector","configLoader","urlSerializer","allowRedirects","expandSegmentGroup","rootSegmentGroup","createUrlTree","noMatchError","rootCandidate","expandChildren","expandSegment","waitHead","waitTail","mapped","expandSegmentAgainstRoute","noLeftoversInUrl","getOutlet","matchSegmentAgainstRoute","expandSegmentAgainstRouteUsingRedirect","expandWildCardWithParamsAgainstRouteUsingRedirect","expandRegularSegmentAgainstRouteUsingRedirect","applyRedirectCommands","lineralizeSegments","newSegments","matched","consumedSegments","lastChild","positionalParamSegments","rawSegmentGroup","load","cfg","rawSlicedSegments","getChildConfig","routerConfig","childModule","childConfig","slicedSegments","isEmptyPathRedirect","mergeTrivialChildren","primarySegmentGroup","cs","canLoad","injectionToken","guard","guardVal","shouldLoad","applyRedirectCreatreUrlTree","parse","newRoot","createSegmentGroup","createQueryParams","redirectToParams","actualParams","updatedSegments","createSegments","redirectToSegments","actualSegments","findPosParam","findOrReturn","redirectToUrlSegment","pos","CanActivate","CanDeactivate","getAllRouteGuards","getChildRouteGuards","futurePath","checks","canDeactivateChecks","canActivateChecks","prevChildren","shouldRun","runGuardsAndResolvers","getToken","isActivated","INITIAL_VALUE","prioritizedGuardValue","acc","isPending","innerAcc","fireActivationStart","fireChildActivationStart","runCanActivate","futureRSS","futureARS","canActivate","canActivateObservables","runCanActivateChild","canActivateChildGuardsMapped","canActivateChild","guards","guardsMapped","NoMatch$1","router_Recognizer","rootComponentType","relativeLinkResolution","split$1","processSegmentGroup","freeze","rootNode","routeState","inheritParamsAndData","routeNode","processSegment","names","routeWithSameOutletName","localeCompare","processSegmentAgainstRoute","rawSegment","getData","getSourceSegmentGroup","getPathIndexShift","getResolve","_sourceSegment","_segmentIndexShift","emptyPathMatch","getOutlet$1","primarySegment","getResolver","switchTap","nextResult","DefaultRouteReuseStrategy","detachedTree","router_RouterConfigLoader","compiler","onLoadStartListener","onLoadEndListener","loadModuleFactory","DefaultUrlHandlingStrategy","newUrlPart","wholeUrl","defaultErrorHandler","defaultMalformedUriErrorHandler","defaultRouterHook","runExtras","lastSuccessfulNavigation","currentNavigation","navigationId","isNgZoneEnabled","malformedUriErrorHandler","navigated","lastSuccessfulId","hooks","beforePreactivation","afterPreactivation","urlHandlingStrategy","onSameUrlNavigation","urlUpdateStrategy","Z","resetConfig","currentUrlTree","rawUrlTree","browserUrlTree","triggerEvent","routerState","currentRawUrl","extractedUrl","extract","rawUrl","extras","targetSnapshot","guardsResult","navigations","setupNavigations","processNavigations","eventsSubject","completed","errored","initialUrl","previousNavigation","urlTransition","shouldProcessUrl","serializeUrl","finalUrl","serializer","recognize","skipLocationChange","setBrowserUrl","replaceUrl","routesRecognized","navStart","appliedUrlTree","guardsStart","currRSS","currARS","canDeactivate","canDeactivateObservables","guardsEnd","resetUrlToCurrentUrlTree","navCancel","resolveStart","resolvedData","__","resolveEnd","prevState","createNode","shouldReuseRoute","detachedRouteHandle","setFutureSnapshotsOfActivatedRoutes","merge","redirecting","resetStateAndUrl","navigateByUrl","navError","ee","getTransition","setUpLocationChangeListener","locationSubscription","parseUrl","scheduleNavigation","dispose","navigationExtras","relativeTo","preserveQueryParams","queryParamsHandling","preserveFragment","U","removeEmptyProps","nav","cmd","cmdIdx","urlPart","partIndex","toRoot","startingPosition","modifier","ci","dd","mergedTree","lastNavigation","setTransition","isCurrentPathEqualTo","go","storedState","storedUrl","OutletContext","changeDetector","_activatedRoute","activateEvents","deactivateEvents","onChildOutletCreated","onChildOutletDestroyed","activatedRoute","activatedRouteData","cmp","childContexts","OutletInjector","createComponent","markForCheck","router","moduleLoader","preloadingStrategy","preload","processRoutes","preloadConfig","viewportScroller","lastId","lastSource","restoredId","scrollPositionRestoration","anchorScrolling","setHistoryScrollRestoration","routerEventsSubscription","createScrollEvents","scrollEventsSubscription","consumeScrollEvents","getScrollPosition","scheduleScrollEvent","scrollToPosition","scrollToAnchor","ROUTER_PROVIDERS","common","y","enableTracing","w","provideRoutes","scrollOffset","setOffset","platformLocationStrategy","useHash","platform_browser","logGroup","logGroupEnd","initNavigation","resultOfPreactivationDone","isLegacyDisabled","isLegacyEnabled","initialNavigation","bootstrappedComponentRef","preloader","routerScroller","setUpPreloading","resetRootComponentType","appInitializer","bootstrapListener","MapOperator","MapSubscriber","pipeFromArray","_noop__WEBPACK_IMPORTED_MODULE_0__","fns","subscribeToArray","instantiateDefaultStyleNormalizer","instantiateRendererFactory","instantiateSupportedAnimationDriver","BrowserAnimationsModule","ANIMATION_MODULE_TYPE","BrowserAnimationBuilder","InjectableAnimationEngine","_angular_animations__WEBPACK_IMPORTED_MODULE_2__","_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__","rootRenderer","_nextAnimationId","_renderer","issueAnimationCommand","BrowserAnimationFactory","_id","RendererAnimationPlayer","_command","_listen","ANIMATION_PREFIX","DISABLE_ANIMATIONS_FLAG","AnimationRendererFactory","_currentId","_microtaskId","_animationCallbacksBuffer","_rendererCache","_cdRecurDepth","BaseAnimationRenderer","AnimationRenderer","_scheduleCountTask","onInsert","onRemove","disableAnimations","dotIndex","scheduleListenerCallback","FilterOperator","FilterSubscriber","_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__","Éµangular_packages_router_router_lNgFactory","_angular_router__WEBPACK_IMPORTED_MODULE_1__","RenderType_Éµangular_packages_router_router_l","nb","View_Éµangular_packages_router_router_l_0","_l","Fb","pb","ob","_ck","_v","View_Éµangular_packages_router_router_l_Host_0","lb","UnsubscriptionErrorImpl","UnsubscriptionError","Subscription_Subscription","_subscriptions","hasErrors","flattenUnsubscriptionErrors","teardown","tmp","_addParent","subscriptions","subscriptionIndex","errs","forkJoin_ForkJoinSubscriber","sources","haveValues","_hasValue","ÉµInternalFormsSharedModule","RadioControlRegistry","NG_VALUE_ACCESSOR","COMPOSITION_BUFFER_MODE","DefaultValueAccessor","NgControl","NgControlStatus","forms_NgModel","FormsModule","_elementRef","_compositionMode","onChange","onTouched","_composing","getUserAgent","isDisabled","AbstractControlDirective","valid","invalid","enabled","pristine","touched","untouched","statusChanges","valueChanges","errorCode","getError","ControlContainer","formDirective","unimplemented","valueAccessor","_rawValidators","_rawAsyncValidators","validator","asyncValidator","AbstractControlStatus","cd","_cd","ngClassUntouched","ngClassTouched","ngClassPristine","ngClassDirty","ngClassValid","ngClassInvalid","ngClassPending","isEmptyInputValue","EMAIL_REGEXP","forms_Validators","actual","required","email","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","nullValidator","regex","regexStr","requiredPattern","actualValue","validators","presentValidators","isPresent","_mergeErrors","forkJoin","toObservable","arrayOfErrors","normalizeValidator","validate","normalizeAsyncValidator","_accessors","accessor","_isSameGroup","fireUncheck","controlPair","_control","FormErrorExamples","formControlName","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","controlPath","setUpControl","dir","compose","composeAsync","writeValue","registerOnChange","_pendingValue","_pendingChange","_pendingDirty","updateOn","updateControl","emitModelEvent","viewToModelUpdate","registerOnTouched","_pendingTouched","markAsTouched","setDisabledState","registerOnDisabledChange","registerOnValidatorChange","updateValueAndValidity","markAsDirty","emitModelToViewChange","messageEnd","composeValidators","composeAsyncValidators","BUILTIN_ACCESSORS","_optionMap","_idCounter","_compareWith","wb","compareWith","_getOptionId","valueString","_getOptionValue","optionSelectedStateSetter","ids","opt","_setSelected","selected","selectedOptions","_registry","_checkName","_fn","select","_throwNameError","VALID","INVALID","PENDING","DISABLED","coerceToValidator","validatorOrOpts","isOptionsObj","coerceToAsyncValidator","origAsyncValidator","asyncValidators","forms_AbstractControl","_onCollectionChange","_onDisabledChange","_updateOn","newValidator","onlySelf","_forEachChild","markAllAsTouched","markAsUntouched","_updateTouched","markAsPristine","_updatePristine","emitEvent","markAsPending","skipPristineCheck","_parentMarkedDirty","_updateValue","_updateAncestors","changeFn","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","ctrl","_updateTreeValidity","_allControlsDisabled","_asyncValidationSubscription","setErrors","_updateControlsErrors","delimiter","FormGroup","controls","FormArray","at","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","formState","FormControl","_onChange","_applyFormState","_setUpdateStrategy","_initObservables","emitViewToModelChange","condition","_isBoxedValue","_setUpControls","setParent","_registerOnCollectionChange","registerControl","controlName","_checkAllValuesPresent","_throwIfControlMissing","patchValue","_reduceChildren","getRawValue","subtreeUpdated","updated","_syncPendingControls","_reduceValue","initValue","_registerControl","resolvedPromise","forms_NgForm","submitted","_directives","ngSubmit","form","_findContainer","removeControl","$event","resetForm","TemplateDrivenErrors","NG_FORM_SELECTOR_WARNING","AbstractFormGroupDirective","_checkParentType","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","NgModelGroup","modelGroupParentException","resolvedPromise$1","valueAccessors","_registered","update","defaultAccessor","builtinAccessor","customAccessor","_checkForErrors","_setUpControl","_updateDisabled","viewModel","model","isFirstChange","_isStandalone","_setUpStandalone","addControl","standalone","formGroupNameException","modelParentException","missingNameException","disabledValue","warnOnDeprecatedNgFormSelector","EmptyErrorImpl","_util_noop__WEBPACK_IMPORTED_MODULE_1__","_util_isFunction__WEBPACK_IMPORTED_MODULE_2__","DoOperator","TapSubscriber","_tapNext","_tapError","_tapComplete","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","_Subscription__WEBPACK_IMPORTED_MODULE_1__","_util_subscribeToArray__WEBPACK_IMPORTED_MODULE_2__","__WEBPACK_AMD_DEFINE_RESULT__","VENDOR_PREFIXES","TEST_ELEMENT","TYPE_FUNCTION","setTimeoutContext","bindFn","invokeArrayArg","arg","each","deprecate","method","deprecationMessage","nextKey","extend","dest","src","inherit","base","childP","baseP","_super","boolOrFn","ifUndefined","val1","val2","addEventListeners","types","splitStr","removeEventListeners","hasParent","inStr","inArray","findByKey","toArray","uniqueArray","prefixed","_uniqueId","getWindowForElement","ownerDocument","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","inputTarget","domHandler","inputHandler","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","offsetDelta","prevDelta","prevInput","deltaX","deltaY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","rotation","maxPointers","velocity","velocityX","velocityY","direction","lastInterval","srcEvent","clientX","clientY","p1","p2","sqrt","atan2","PI","evEl","evTarget","evWin","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","normalizeSingleTouches","touches","changedTouches","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","getTouches","allTouches","identifier","targetTouches","changedTargetTouches","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","TouchMouseInput","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","isSyntheticEvent","dx","dy","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_MAP","touchMap","cssSupports","TouchAction","compute","actions","touchAction","recognizers","recognizer","getTouchAction","hasPanX","hasPanY","preventDefaults","prevented","hasNone","none","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","Recognizer","defaults","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","preset","Manager","handlers","oldCssProps","inputClass","toggleCssProps","recognizeWith","requireFailure","cssProps","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","validPointers","validMovement","validTime","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","stop","force","stopped","curRecognizer","existing","gestureEvent","gesture","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press","exports","AppModule","AppComponent","RenderType_AppComponent","View_AppComponent_0","View_AppComponent_Host_0","AppComponentNgFactory","Éµ0","MarkdownPaneModuleNgFactory","AppRoutingModule","AppModuleNgFactory","mb","xb","yb","Y","router_ngfactory","jb","fb","kb","gb","hb","ib","p0_0","p0_1","p0_2","p1_0","p2_0","p2_1","p2_2","p2_3","browser","animations","fesm2015_forms","fesm2015_animations","X","Q","Office","initialize","webpackEmptyAsyncContext","req","code"],"mappings":"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","file":"main-es2015.e41baa05031e748eec0a.js","sourcesContent":["import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map","export const rxSubscriber = typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\nexport const $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","let _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport const config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            const error = new Error();\n            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map","function ArgumentOutOfRangeErrorImpl() {\n    Error.call(this);\n    this.message = 'argument out of range';\n    this.name = 'ArgumentOutOfRangeError';\n    return this;\n}\nArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);\nexport const ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","import { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\nexport class MergeMapSubscriber extends OuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    }\n    _innerSub(ish, value, index) {\n        const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        subscribeToResult(this, ish, value, index, innerSubscriber);\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeMap.js.map","import { Subscriber } from './Subscriber';\nexport class InnerSubscriber extends Subscriber {\n    constructor(parent, outerValue, outerIndex) {\n        super();\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    _next(value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    }\n    _error(error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    }\n}\n//# sourceMappingURL=InnerSubscriber.js.map","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport class Subscriber extends Subscription {\n    constructor(destinationOrNext, error, complete) {\n        super();\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        destinationOrNext.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    [rxSubscriberSymbol]() { return this; }\n    static create(next, error, complete) {\n        const subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    }\n    next(value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        super.unsubscribe();\n    }\n    _next(value) {\n        this.destination.next(value);\n    }\n    _error(err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.destination.complete();\n        this.unsubscribe();\n    }\n    _unsubscribeAndRecycle() {\n        const { _parent, _parents } = this;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    }\n}\nexport class SafeSubscriber extends Subscriber {\n    constructor(_parentSubscriber, observerOrNext, error, complete) {\n        super();\n        this._parentSubscriber = _parentSubscriber;\n        let next;\n        let context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    next(value) {\n        if (!this.isStopped && this._next) {\n            const { _parentSubscriber } = this;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            const { useDeprecatedSynchronousErrorHandling } = config;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            if (this._complete) {\n                const wrappedComplete = () => this._complete.call(this._context);\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    }\n    __tryOrUnsub(fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    }\n    __tryOrSetError(parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    }\n    _unsubscribe() {\n        const { _parentSubscriber } = this;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=refCount.js.map","import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nconst connectableProto = ConnectableObservable.prototype;\nexport const connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=ConnectableObservable.js.map","import { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\nexport function share() {\n    return (source) => refCount()(multicast(shareSubjectFactory)(source));\n}\n//# sourceMappingURL=share.js.map","/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Subject, Subscription, Observable, merge as merge$1 } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    const metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory(...args) {\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call(this, ...args);\n            return this;\n        }\n        const annotationInstance = new DecoratorFactory(...args);\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn(cls, ...args);\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                cls[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n}\nfunction makeMetadataCtor(props) {\n    return function ctor(...args) {\n        if (props) {\n            const values = props(...args);\n            for (const propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(...args) {\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        const annotationInstance = new ParamDecoratorFactory(...args);\n        ParamDecorator.annotation = annotationInstance;\n        return ParamDecorator;\n        function ParamDecorator(cls, unusedKey, index) {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\n                cls[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n    const metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory(...args) {\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        const decoratorInstance = new PropDecoratorFactory(...args);\n        function PropDecorator(target, name) {\n            const constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                constructor[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing(target, name, ...args);\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Type of the Inject decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction InjectDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ0 = /**\n * @param {?} token\n * @return {?}\n */\n(token) => ({ token });\n/**\n * Inject decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Inject = makeParamDecorator('Inject', (Éµ0));\n/**\n * Type of the Optional decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction OptionalDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Optional decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Optional = makeParamDecorator('Optional');\n/**\n * Type of the Self decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction SelfDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Self decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Self = makeParamDecorator('Self');\n/**\n * Type of the SkipSelf decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction SkipSelfDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * SkipSelf decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst SkipSelf = makeParamDecorator('SkipSelf');\n/**\n * Type of the Host decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction HostDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Host decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Host = makeParamDecorator('Host');\n/**\n * Type of the Attribute decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction AttributeDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ1 = /**\n * @param {?=} attributeName\n * @return {?}\n */\n(attributeName) => ({ attributeName });\n/**\n * Attribute decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Attribute = makeParamDecorator('Attribute', (Éµ1));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nvar InjectFlags;\n(function (InjectFlags) {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n    /** Check self and check parent injector if needed */\n    InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n    /** Don't ascend to ancestors of the node requesting injection. */\n    InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n    /** Skip the node that is requesting injection. */\n    InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n    /** Inject `defaultValue` instead if token not found. */\n    InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (let key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target, source) {\n    for (const key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @codeGenApi\n */\nfunction ÉµÉµdefineInjectable(opts) {\n    return {\n        token: opts.token, providedIn: opts.providedIn || null, factory: opts.factory,\n        value: undefined,\n    };\n}\n/**\n * @deprecated in v8, delete after v10. This API should be used only be generated code, and that\n * code should now use ÉµÉµdefineInjectable instead.\n * @publicApi\n */\nconst defineInjectable = ÉµÉµdefineInjectable;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @publicApi\n */\nfunction ÉµÉµdefineInjector(options) {\n    return {\n        factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n    };\n}\n/**\n * Read the `ngInjectableDef` for `type` in a way which is immune to accidentally reading inherited\n * value.\n *\n * @param type A type which may have its own (non-inherited) `ngInjectableDef`.\n */\nfunction getInjectableDef(type) {\n    const def = type[NG_INJECTABLE_DEF];\n    // The definition read above may come from a base class. `hasOwnProperty` is not sufficient to\n    // distinguish this case, as in older browsers (e.g. IE10) static property inheritance is\n    // implemented by copying the properties.\n    //\n    // Instead, the ngInjectableDef's token is compared to the type, and if they don't match then the\n    // property was not defined directly on the type itself, and was likely inherited. The definition\n    // is only returned if the type matches the def.token.\n    return def && def.token === type ? def : null;\n}\n/**\n * Read the `ngInjectableDef` for `type` or read the `ngInjectableDef` from one of its ancestors.\n *\n * @param type A type which may have `ngInjectableDef`, via inheritance.\n *\n * @deprecated Will be removed in v10, where an error will occur in the scenario if we find the\n * `ngInjectableDef` on an ancestor only.\n */\nfunction getInheritedInjectableDef(type) {\n    if (type && type[NG_INJECTABLE_DEF]) {\n        // TODO(FW-1307): Re-add ngDevMode when closure can handle it\n        // ngDevMode &&\n        console.warn(`DEPRECATED: DI is instantiating a token \"${type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` +\n            `This will become an error in v10. Please add @Injectable() to the \"${type.name}\" class.`);\n        return type[NG_INJECTABLE_DEF];\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectorDef`\n */\nfunction getInjectorDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? type[NG_INJECTOR_DEF] : null;\n}\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\nconst NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An interface that a function passed into {\\@link forwardRef} has to implement.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * \\@publicApi\n * @record\n */\nfunction ForwardRefFn() { }\n/** @type {?} */\nconst __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * \\@usageNotes\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@publicApi\n * @param {?} forwardRefFn\n * @return {?}\n */\nfunction forwardRef(forwardRefFn) {\n    ((/** @type {?} */ (forwardRefFn))).__forward_ref__ = forwardRef;\n    ((/** @type {?} */ (forwardRefFn))).toString = (/**\n     * @return {?}\n     */\n    function () { return stringify(this()); });\n    return ((/** @type {?} */ ((/** @type {?} */ (forwardRefFn)))));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * \\@publicApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction resolveForwardRef(type) {\n    /** @type {?} */\n    const fn = type;\n    if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef) {\n        return fn();\n    }\n    else {\n        return type;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst __globalThis = typeof globalThis !== 'undefined' && globalThis;\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\n// Always use __globalThis if available, which is the spec-defined global variable across all\n// environments, then fallback to __global first, because in Node tests both __global and\n// __window may be defined and _global should be __global in that case.\nconst _global = __globalThis || __global || __window || __self;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar R3ResolvedDependencyType;\n(function (R3ResolvedDependencyType) {\n    R3ResolvedDependencyType[R3ResolvedDependencyType[\"Token\"] = 0] = \"Token\";\n    R3ResolvedDependencyType[R3ResolvedDependencyType[\"Attribute\"] = 1] = \"Attribute\";\n    R3ResolvedDependencyType[R3ResolvedDependencyType[\"ChangeDetectorRef\"] = 2] = \"ChangeDetectorRef\";\n})(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getCompilerFacade() {\n    const globalNg = _global['ng'];\n    if (!globalNg || !globalNg.ÉµcompilerFacade) {\n        throw new Error(`Angular JIT compilation failed: '@angular/compiler' not loaded!\\n` +\n            `  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n` +\n            `  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n` +\n            `  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`);\n    }\n    return globalNg.ÉµcompilerFacade;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nclass InjectionToken {\n    /**\n     * @param {?} _desc\n     * @param {?=} options\n     */\n    constructor(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        /** @nocollapse */ this.ngInjectableDef = undefined;\n        if (typeof options == 'number') {\n            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n            // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.\n            // We are using it to assign `-1` which is used to identify `Injector`.\n            ((/** @type {?} */ (this))).__NG_ELEMENT_ID__ = options;\n        }\n        else if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = ÉµÉµdefineInjectable({\n                token: this,\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `InjectionToken ${this._desc}`; }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    InjectionToken.prototype.ngMetadataName;\n    /** @type {?} */\n    InjectionToken.prototype.ngInjectableDef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    InjectionToken.prototype._desc;\n}\n/**\n * @record\n * @template T\n */\nfunction InjectableDefToken() { }\nif (false) {\n    /** @type {?} */\n    InjectableDefToken.prototype.ngInjectableDef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@publicApi\n * @type {?}\n */\nconst INJECTOR = new InjectionToken('INJECTOR', (/** @type {?} */ (-1)));\n/** @type {?} */\nconst _THROW_IF_NOT_FOUND = new Object();\n/** @type {?} */\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/** @type {?} */\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @type {?} */\nconst NG_TOKEN_PATH = 'ngTokenPath';\n/** @type {?} */\nconst NEW_LINE = /\\n/gm;\n/** @type {?} */\nconst NO_NEW_LINE = 'Éµ';\n/** @type {?} */\nconst SOURCE = '__source';\nconst Éµ0$1 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE = getClosureSafeProperty({ provide: String, useValue: Éµ0$1 });\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n * @type {?}\n */\nlet _currentInjector = undefined;\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction setCurrentInjector(injector) {\n    /** @type {?} */\n    const former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n * @type {?}\n */\nlet _injectImplementation;\n/**\n * Sets the current inject implementation.\n * @param {?} impl\n * @return {?}\n */\nfunction setInjectImplementation(impl) {\n    /** @type {?} */\n    const previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n    if (_currentInjector === undefined) {\n        throw new Error(`inject() must be called from an injection context`);\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction ÉµÉµinject(token, flags = InjectFlags.Default) {\n    return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects a token from the currently active injector.\n *\n * Must be used in the context of a factory function such as one defined for an\n * `InjectionToken`. Throws an error if not called from such a context.\n *\n * Within such a factory function, using this function to request injection of a dependency\n * is faster and more type-safe than providing an additional array of dependencies\n * (as has been common with `useFactory` providers).\n *\n * \\@param token The injection token for the dependency to be injected.\n * \\@param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `\\@Host`, `\\@Self`, `\\@SkipSef`, and `\\@Optional`.\n * \\@return True if injection is successful, null otherwise.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * \\@publicApi\n * @type {?}\n */\nconst inject = ÉµÉµinject;\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n * @template T\n * @param {?} token\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n    /** @type {?} */\n    const injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throw new Error(`Injector: NOT_FOUND [${stringify(token)}]`);\n}\n/**\n * @param {?} types\n * @return {?}\n */\nfunction injectArgs(types) {\n    /** @type {?} */\n    const args = [];\n    for (let i = 0; i < types.length; i++) {\n        /** @type {?} */\n        const arg = resolveForwardRef(types[i]);\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            /** @type {?} */\n            let type = undefined;\n            /** @type {?} */\n            let flags = InjectFlags.Default;\n            for (let j = 0; j < arg.length; j++) {\n                /** @type {?} */\n                const meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional' || meta === Optional) {\n                    flags |= InjectFlags.Optional;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf' || meta === SkipSelf) {\n                    flags |= InjectFlags.SkipSelf;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self' || meta === Self) {\n                    flags |= InjectFlags.Self;\n                }\n                else if (meta instanceof Inject || meta === Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(ÉµÉµinject((/** @type {?} */ (type)), flags));\n        }\n        else {\n            args.push(ÉµÉµinject(arg));\n        }\n    }\n    return args;\n}\nclass NullInjector {\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n        if (notFoundValue === THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            /** @type {?} */\n            const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n            error.name = 'NullInjectorError';\n            throw error;\n        }\n        return notFoundValue;\n    }\n}\n/**\n * @param {?} e\n * @param {?} token\n * @param {?} injectorErrorName\n * @param {?} source\n * @return {?}\n */\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n    /** @type {?} */\n    const tokenPath = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?} injectorErrorName\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, injectorErrorName, source = null) {\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    /** @type {?} */\n    let context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        /** @type {?} */\n        let parts = (/** @type {?} */ ([]));\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                /** @type {?} */\n                let value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = `{${parts.join(', ')}}`;\n    }\n    return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n * @type {?}\n */\nconst angularCoreDiEnv = {\n    'ÉµÉµdefineInjectable': ÉµÉµdefineInjectable,\n    'ÉµÉµdefineInjector': ÉµÉµdefineInjector,\n    'ÉµÉµinject': ÉµÉµinject,\n    'ÉµÉµgetFactoryOf': getFactoryOf,\n};\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getFactoryOf(type) {\n    /** @type {?} */\n    const typeAny = (/** @type {?} */ (type));\n    /** @type {?} */\n    const def = getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * \\@publicApi\n * @abstract\n * @template T\n */\nclass NgModuleRef {\n}\nif (false) {\n    /**\n     * The injector that contains all of the providers of the NgModule.\n     * @abstract\n     * @return {?}\n     */\n    NgModuleRef.prototype.injector = function () { };\n    /**\n     * The ComponentFactoryResolver to get hold of the ComponentFactories\n     * declared in the `entryComponents` property of the module.\n     * @abstract\n     * @return {?}\n     */\n    NgModuleRef.prototype.componentFactoryResolver = function () { };\n    /**\n     * The NgModule instance.\n     * @abstract\n     * @return {?}\n     */\n    NgModuleRef.prototype.instance = function () { };\n    /**\n     * Destroys the module instance and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    NgModuleRef.prototype.destroy = function () { };\n    /**\n     * Allows to register a callback that will be called when the module is destroyed.\n     * @abstract\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef.prototype.onDestroy = function (callback) { };\n}\n/**\n * @record\n * @template T\n */\nfunction InternalNgModuleRef() { }\nif (false) {\n    /** @type {?} */\n    InternalNgModuleRef.prototype._bootstrapComponents;\n}\n/**\n * \\@publicApi\n * @abstract\n * @template T\n */\nclass NgModuleFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    NgModuleFactory.prototype.moduleType = function () { };\n    /**\n     * @abstract\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory.prototype.create = function (parentInjector) { };\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* Equivalent to ES6 spread, add each item to an array.\n*\n* @param items The items to add\n* @param arr The array to which you want to add the items\n*/\nfunction addAllToArray(items, arr) {\n    for (let i = 0; i < items.length; i++) {\n        arr.push(items[i]);\n    }\n}\n/**\n * Flattens an array.\n */\nfunction flatten(list, dst) {\n    if (dst === undefined)\n        dst = list;\n    for (let i = 0; i < list.length; i++) {\n        let item = list[i];\n        if (Array.isArray(item)) {\n            // we need to inline it.\n            if (dst === list) {\n                // Our assumption that the list was already flat was wrong and\n                // we need to clone flat since we need to write to it.\n                dst = list.slice(0, i);\n            }\n            flatten(item, dst);\n        }\n        else if (dst !== list) {\n            dst.push(item);\n        }\n    }\n    return dst;\n}\nfunction deepForEach(input, fn) {\n    input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        return arr.pop();\n    }\n    else {\n        return arr.splice(index, 1)[0];\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction assertNumber(actual, msg) {\n    if (typeof actual != 'number') {\n        throwError(msg);\n    }\n}\nfunction assertEqual(actual, expected, msg) {\n    if (actual != expected) {\n        throwError(msg);\n    }\n}\nfunction assertNotEqual(actual, expected, msg) {\n    if (actual == expected) {\n        throwError(msg);\n    }\n}\nfunction assertSame(actual, expected, msg) {\n    if (actual !== expected) {\n        throwError(msg);\n    }\n}\nfunction assertNotSame(actual, expected, msg) {\n    if (actual === expected) {\n        throwError(msg);\n    }\n}\nfunction assertLessThan(actual, expected, msg) {\n    if (actual >= expected) {\n        throwError(msg);\n    }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n    if (actual <= expected) {\n        throwError(msg);\n    }\n}\nfunction assertNotDefined(actual, msg) {\n    if (actual != null) {\n        throwError(msg);\n    }\n}\nfunction assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg);\n    }\n}\nfunction throwError(msg) {\n    // tslint:disable-next-line\n    debugger; // Left intentionally for better debugger experience.\n    throw new Error(`ASSERTION ERROR: ${msg}`);\n}\nfunction assertDomNode(node) {\n    // If we're in a worker, `Node` will not be defined.\n    assertEqual((typeof Node !== 'undefined' && node instanceof Node) ||\n        (typeof node === 'object' && node != null &&\n            node.constructor.name === 'WebWorkerRenderNode'), true, `The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n}\nfunction assertDataInRange(arr, index) {\n    const maxLen = arr ? arr.length : 0;\n    assertLessThan(index, maxLen, `Index expected to be less than ${maxLen} but got ${index}`);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction ngDevModeResetPerfCounters() {\n    const locationString = typeof location !== 'undefined' ? location.toString() : '';\n    const newCounters = {\n        namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n        firstTemplatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererAppendChild: 0,\n        rendererInsertBefore: 0,\n        rendererCreateComment: 0,\n        styleMap: 0,\n        styleMapCacheMiss: 0,\n        classMap: 0,\n        classMapCacheMiss: 0,\n        styleProp: 0,\n        stylePropCacheMiss: 0,\n        classProp: 0,\n        classPropCacheMiss: 0,\n        flushStyling: 0,\n        classesApplied: 0,\n        stylesApplied: 0,\n        stylingWritePersistedState: 0,\n        stylingReadPersistedState: 0,\n    };\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n    _global['ngDevMode'] = allowNgDevModeTrue && newCounters;\n    return newCounters;\n}\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * NOTE: changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ngDevModeResetPerfCounters();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ChangeDetectionStrategy = {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explicitly invoked.\n     * This strategy applies to all child directives and cannot be overridden.\n     */\n    OnPush: 0,\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    Default: 1,\n};\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';\n/** @enum {number} */\nconst ChangeDetectorStatus = {\n    /**\n     * A state in which, after calling `detectChanges()`, the change detector\n     * state becomes `Checked`, and must be explicitly invoked or reactivated.\n     */\n    CheckOnce: 0,\n    /**\n     * A state in which change detection is skipped until the change detector mode\n     * becomes `CheckOnce`.\n     */\n    Checked: 1,\n    /**\n     * A state in which change detection continues automatically until explicitly\n     * deactivated.\n     */\n    CheckAlways: 2,\n    /**\n     * A state in which a change detector sub tree is not a part of the main tree and\n     * should be skipped.\n     */\n    Detached: 3,\n    /**\n     * Indicates that the change detector encountered an error checking a binding\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\n     * detectors in this state do not detect changes.\n     */\n    Errored: 4,\n    /**\n     * Indicates that the change detector has been destroyed.\n     */\n    Destroyed: 5,\n};\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @see `ChangeDetectorStatus` / `ChangeDetectorRef`\n * @param {?} changeDetectionStrategy The strategy to check.\n * @return {?} True if the given strategy is the current default, false otherwise.\n */\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ViewEncapsulation = {\n    /**\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n     * selectors.\n     *\n     * This is the default option.\n     */\n    Emulated: 0,\n    /**\n     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n     * Use the native encapsulation mechanism of the renderer.\n     *\n     * For the DOM this means using the deprecated [Shadow DOM\n     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    Native: 1,\n    /**\n     * Don't provide any template or style encapsulation.\n     */\n    None: 2,\n    /**\n     * Use Shadow DOM to encapsulate styles.\n     *\n     * For the DOM this means using modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ShadowDom: 3,\n};\nViewEncapsulation[ViewEncapsulation.Emulated] = 'Emulated';\nViewEncapsulation[ViewEncapsulation.Native] = 'Native';\nViewEncapsulation[ViewEncapsulation.None] = 'None';\nViewEncapsulation[ViewEncapsulation.ShadowDom] = 'ShadowDom';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nfunction noSideEffects(fn) {\n    return '' + { toString: fn };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n * @type {?}\n */\nconst EMPTY_OBJ = {};\n/** @type {?} */\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    // These property accesses can be ignored because ngDevMode will be set to false\n    // when optimizing code and the whole if statement will be dropped.\n    // tslint:disable-next-line:no-toplevel-property-access\n    Object.freeze(EMPTY_OBJ);\n    // tslint:disable-next-line:no-toplevel-property-access\n    Object.freeze(EMPTY_ARRAY);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_COMPONENT_DEF = getClosureSafeProperty({ ngComponentDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_DIRECTIVE_DEF = getClosureSafeProperty({ ngDirectiveDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_PIPE_DEF = getClosureSafeProperty({ ngPipeDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_MODULE_DEF = getClosureSafeProperty({ ngModuleDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_LOCALE_ID_DEF = getClosureSafeProperty({ ngLocaleIdDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_BASE_DEF = getClosureSafeProperty({ ngBaseDef: getClosureSafeProperty });\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n * @type {?}\n */\nconst NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * \\@codeGenApi\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nfunction ÉµÉµdefineComponent(componentDefinition) {\n    /** @type {?} */\n    const type = componentDefinition.type;\n    /** @type {?} */\n    const typePrototype = type.prototype;\n    /** @type {?} */\n    const declaredInputs = (/** @type {?} */ ({}));\n    /** @type {?} */\n    const def = {\n        type: type,\n        providersResolver: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || (/** @type {?} */ (null)),\n        ngContentSelectors: componentDefinition.ngContentSelectors,\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        declaredInputs: declaredInputs,\n        inputs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        outputs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        exportAs: componentDefinition.exportAs || null,\n        onChanges: null,\n        onInit: typePrototype.ngOnInit || null,\n        doCheck: typePrototype.ngDoCheck || null,\n        afterContentInit: typePrototype.ngAfterContentInit || null,\n        afterContentChecked: typePrototype.ngAfterContentChecked || null,\n        afterViewInit: typePrototype.ngAfterViewInit || null,\n        afterViewChecked: typePrototype.ngAfterViewChecked || null,\n        onDestroy: typePrototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        pipeDefs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: (/** @type {?} */ (componentDefinition.features)) || null,\n        data: componentDefinition.data || {},\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n        id: 'c',\n        styles: componentDefinition.styles || EMPTY_ARRAY,\n        _: (/** @type {?} */ (null)),\n        setInput: null,\n        schemas: componentDefinition.schemas || null,\n        tView: null,\n    };\n    def._ = (/** @type {?} */ (noSideEffects((/**\n     * @return {?}\n     */\n    () => {\n        /** @type {?} */\n        const directiveTypes = (/** @type {?} */ (componentDefinition.directives));\n        /** @type {?} */\n        const feature = componentDefinition.features;\n        /** @type {?} */\n        const pipeTypes = (/** @type {?} */ (componentDefinition.pipes));\n        def.id += _renderCompCount++;\n        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n            def.outputs = invertObject(componentDefinition.outputs),\n            feature && feature.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            (fn) => fn(def)));\n        def.directiveDefs = directiveTypes ?\n            (/**\n             * @return {?}\n             */\n            () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef)) :\n            null;\n        def.pipeDefs = pipeTypes ?\n            (/**\n             * @return {?}\n             */\n            () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef)) :\n            null;\n        // Add ngInjectableDef so components are reachable through the module injector by default\n        // (unless it has already been set by the @Injectable decorator). This is mostly to\n        // support injecting components in tests. In real application code, components should\n        // be retrieved through the node injector, so this isn't a problem.\n        if (!type.hasOwnProperty(NG_INJECTABLE_DEF)) {\n            ((/** @type {?} */ (type)))[NG_INJECTABLE_DEF] =\n                ÉµÉµdefineInjectable({ token: type, factory: (/** @type {?} */ (componentDefinition.factory)) });\n        }\n    }))));\n    return (/** @type {?} */ (def));\n}\n/**\n * \\@codeGenApi\n * @param {?} type\n * @param {?} directives\n * @param {?} pipes\n * @return {?}\n */\nfunction ÉµÉµsetComponentScope(type, directives, pipes) {\n    /** @type {?} */\n    const def = ((/** @type {?} */ (type.ngComponentDef)));\n    def.directiveDefs = (/**\n     * @return {?}\n     */\n    () => directives.map(extractDirectiveDef));\n    def.pipeDefs = (/**\n     * @return {?}\n     */\n    () => pipes.map(extractPipeDef));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extractDirectiveDef(type) {\n    /** @type {?} */\n    const def = getComponentDef(type) || getDirectiveDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n    }\n    return (/** @type {?} */ (def));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extractPipeDef(type) {\n    /** @type {?} */\n    const def = getPipeDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(`'${type.name}' is not a 'PipeType'.`);\n    }\n    return (/** @type {?} */ (def));\n}\n/**\n * \\@codeGenApi\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction ÉµÉµdefineNgModule(def) {\n    /** @type {?} */\n    const res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY,\n        declarations: def.declarations || EMPTY_ARRAY,\n        imports: def.imports || EMPTY_ARRAY,\n        exports: def.exports || EMPTY_ARRAY,\n        transitiveCompileScopes: null,\n        schemas: def.schemas || null,\n        id: def.id || null,\n    };\n    return (/** @type {?} */ (res));\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * \\@codeGenApi\n * @param {?} type\n * @param {?} scope\n * @return {?}\n */\nfunction ÉµÉµsetNgModuleScope(type, scope) {\n    return (/** @type {?} */ (noSideEffects((/**\n     * @return {?}\n     */\n    () => {\n        /** @type {?} */\n        /** @nocollapse */ const ngModuleDef = getNgModuleDef(type, true);\n        ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n        ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n        ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n    }))));\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n * \\@Input()\n *   propName1: string;\n *\n * \\@Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n * @template T\n * @param {?=} obj\n * @param {?=} secondary\n * @return {?}\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return (/** @type {?} */ (EMPTY_OBJ));\n    /** @type {?} */\n    const newLookup = {};\n    for (const minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            /** @type {?} */\n            let publicName = (/** @type {?} */ (obj[minifiedKey]));\n            /** @type {?} */\n            let declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[publicName] = (/** @type {?} */ (declaredName)));\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```ts\n * class ShouldBeInherited {\n *   static ngBaseDef = ÉµÉµdefineBase({\n *      ...\n *   })\n * }\n * ```\n *\n * \\@codeGenApi\n * @template T\n * @param {?} baseDefinition The base definition parameters\n *\n * @return {?}\n */\nfunction ÉµÉµdefineBase(baseDefinition) {\n    /** @type {?} */\n    const declaredInputs = (/** @type {?} */ ({}));\n    return {\n        inputs: invertObject((/** @type {?} */ (baseDefinition.inputs)), declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject((/** @type {?} */ (baseDefinition.outputs))),\n        viewQuery: baseDefinition.viewQuery || null,\n        contentQueries: baseDefinition.contentQueries || null,\n        hostBindings: baseDefinition.hostBindings || null\n    };\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = ÉµÉµdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * \\@codeGenApi\n * @type {?}\n */\nconst ÉµÉµdefineDirective = (/** @type {?} */ ((/** @type {?} */ (ÉµÉµdefineComponent))));\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * \\@codeGenApi\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n *\n * @return {?}\n */\nfunction ÉµÉµdefinePipe(pipeDef) {\n    return (/** @type {?} */ (((/** @type {?} */ ({\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    })))));\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getComponentDef(type) {\n    return ((/** @type {?} */ (type)))[NG_COMPONENT_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getDirectiveDef(type) {\n    return ((/** @type {?} */ (type)))[NG_DIRECTIVE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getPipeDef(type) {\n    return ((/** @type {?} */ (type)))[NG_PIPE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getBaseDef(type) {\n    return ((/** @type {?} */ (type)))[NG_BASE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @param {?=} throwNotFound\n * @return {?}\n */\nfunction getNgModuleDef(type, throwNotFound) {\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = ((/** @type {?} */ (type)))[NG_MODULE_DEF] || null;\n    if (!ngModuleDef && throwNotFound === true) {\n        throw new Error(`Type ${stringify(type)} does not have 'ngModuleDef' property.`);\n    }\n    return ngModuleDef;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getNgLocaleIdDef(type) {\n    return ((/** @type {?} */ (type)))[NG_LOCALE_ID_DEF] || null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\n/** @type {?} */\nconst HOST = 0;\n/** @type {?} */\nconst TVIEW = 1;\n/** @type {?} */\nconst FLAGS = 2;\n/** @type {?} */\nconst PARENT = 3;\n/** @type {?} */\nconst NEXT = 4;\n/** @type {?} */\nconst QUERIES = 5;\n/** @type {?} */\nconst T_HOST = 6;\n/** @type {?} */\nconst BINDING_INDEX = 7;\n/** @type {?} */\nconst CLEANUP = 8;\n/** @type {?} */\nconst CONTEXT = 9;\n/** @type {?} */\nconst INJECTOR$1 = 10;\n/** @type {?} */\nconst RENDERER_FACTORY = 11;\n/** @type {?} */\nconst RENDERER = 12;\n/** @type {?} */\nconst SANITIZER = 13;\n/** @type {?} */\nconst CHILD_HEAD = 14;\n/** @type {?} */\nconst CHILD_TAIL = 15;\n/** @type {?} */\nconst DECLARATION_VIEW = 16;\n/** @type {?} */\nconst DECLARATION_LCONTAINER = 17;\n/** @type {?} */\nconst PREORDER_HOOK_FLAGS = 18;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n * @type {?}\n */\nconst HEADER_OFFSET = 19;\n/**\n * @record\n */\nfunction OpaqueViewState() { }\nif (false) {\n    /** @type {?} */\n    OpaqueViewState.prototype.__brand__;\n}\n/**\n * `LView` stores all of the information needed to process the instructions as\n * they are invoked from the template. Each embedded view and component view has its\n * own `LView`. When processing a particular view, we set the `viewData` to that\n * `LView`. When that view is done processing, the `viewData` is set back to\n * whatever the original `viewData` was before (the parent `LView`).\n *\n * Keeping separate state for each view facilities view insertion / deletion, so we\n * don't have to edit the data array based on which views are present.\n * @record\n */\nfunction LView() { }\nif (false) {\n    /* Skipping unnamed member:\n    [HOST]: RElement|null;*/\n    /* Skipping unnamed member:\n    readonly[TVIEW]: TView;*/\n    /* Skipping unnamed member:\n    [FLAGS]: LViewFlags;*/\n    /* Skipping unnamed member:\n    [PARENT]: LView|LContainer|null;*/\n    /* Skipping unnamed member:\n    [NEXT]: LView|LContainer|null;*/\n    /* Skipping unnamed member:\n    [QUERIES]: LQueries|null;*/\n    /* Skipping unnamed member:\n    [T_HOST]: TViewNode|TElementNode|null;*/\n    /* Skipping unnamed member:\n    [BINDING_INDEX]: number;*/\n    /* Skipping unnamed member:\n    [CLEANUP]: any[]|null;*/\n    /* Skipping unnamed member:\n    [CONTEXT]: {}|RootContext|null;*/\n    /* Skipping unnamed member:\n    readonly[INJECTOR]: Injector|null;*/\n    /* Skipping unnamed member:\n    [RENDERER_FACTORY]: RendererFactory3;*/\n    /* Skipping unnamed member:\n    [RENDERER]: Renderer3;*/\n    /* Skipping unnamed member:\n    [SANITIZER]: Sanitizer|null;*/\n    /* Skipping unnamed member:\n    [CHILD_HEAD]: LView|LContainer|null;*/\n    /* Skipping unnamed member:\n    [CHILD_TAIL]: LView|LContainer|null;*/\n    /* Skipping unnamed member:\n    [DECLARATION_VIEW]: LView|null;*/\n    /* Skipping unnamed member:\n    [DECLARATION_LCONTAINER]: LContainer|null;*/\n    /* Skipping unnamed member:\n    [PREORDER_HOOK_FLAGS]: PreOrderHookFlags;*/\n}\n/** @enum {number} */\nconst LViewFlags = {\n    /** The state of the init phase on the first 2 bits */\n    InitPhaseStateIncrementer: 1,\n    InitPhaseStateMask: 3,\n    /**\n     * Whether or not the view is in creationMode.\n     *\n     * This must be stored in the view rather than using `data` as a marker so that\n     * we can properly support embedded views. Otherwise, when exiting a child view\n     * back into the parent view, `data` will be defined and `creationMode` will be\n     * improperly reported as false.\n     */\n    CreationMode: 4,\n    /**\n     * Whether or not this LView instance is on its first processing pass.\n     *\n     * An LView instance is considered to be on its \"first pass\" until it\n     * has completed one creation mode run and one update mode run. At this\n     * time, the flag is turned off.\n     */\n    FirstLViewPass: 8,\n    /** Whether this view has default change detection strategy (checks always) or onPush */\n    CheckAlways: 16,\n    /**\n     * Whether or not manual change detection is turned on for onPush components.\n     *\n     * This is a special mode that only marks components dirty in two cases:\n     * 1) There has been a change to an @Input property\n     * 2) `markDirty()` has been called manually by the user\n     *\n     * Note that in this mode, the firing of events does NOT mark components\n     * dirty automatically.\n     *\n     * Manual mode is turned off by default for backwards compatibility, as events\n     * automatically mark OnPush components dirty in View Engine.\n     *\n     * TODO: Add a public API to ChangeDetectionStrategy to turn this mode on\n     */\n    ManualOnPush: 32,\n    /** Whether or not this view is currently dirty (needing check) */\n    Dirty: 64,\n    /** Whether or not this view is currently attached to change detection tree. */\n    Attached: 128,\n    /** Whether or not this view is destroyed. */\n    Destroyed: 256,\n    /** Whether or not this view is the root view */\n    IsRoot: 512,\n    /**\n     * Index of the current init phase on last 22 bits\n     */\n    IndexWithinInitPhaseIncrementer: 1024,\n    IndexWithinInitPhaseShift: 10,\n    IndexWithinInitPhaseReset: 1023,\n};\n/** @enum {number} */\nconst InitPhaseState = {\n    OnInitHooksToBeRun: 0,\n    AfterContentInitHooksToBeRun: 1,\n    AfterViewInitHooksToBeRun: 2,\n    InitPhaseCompleted: 3,\n};\n/** @enum {number} */\nconst PreOrderHookFlags = {\n    /** The index of the next pre-order hook to be called in the hooks array, on the first 16\n       bits */\n    IndexOfTheNextPreOrderHookMaskMask: 65535,\n    /**\n     * The number of init hooks that have already been called, on the last 16 bits\n     */\n    NumberOfInitHooksCalledIncrementer: 65536,\n    NumberOfInitHooksCalledShift: 16,\n    NumberOfInitHooksCalledMask: 4294901760,\n};\n/**\n * Set of instructions used to process host bindings efficiently.\n *\n * See VIEW_DATA.md for more information.\n * @record\n */\nfunction ExpandoInstructions() { }\n/**\n * The static data for an LView (shared between all templates of a\n * given type).\n *\n * Stored on the `ComponentDef.tView`.\n * @record\n */\nfunction TView() { }\nif (false) {\n    /**\n     * ID for inline views to determine whether a view is the same as the previous view\n     * in a certain position. If it's not, we know the new view needs to be inserted\n     * and the one that exists needs to be removed (e.g. if/else statements)\n     *\n     * If this is -1, then this is a component view or a dynamically created view.\n     * @type {?}\n     */\n    TView.prototype.id;\n    /**\n     * This is a blueprint used to generate LView instances for this TView. Copying this\n     * blueprint is faster than creating a new LView from scratch.\n     * @type {?}\n     */\n    TView.prototype.blueprint;\n    /**\n     * The template function used to refresh the view of dynamically created views\n     * and components. Will be null for inline views.\n     * @type {?}\n     */\n    TView.prototype.template;\n    /**\n     * A function containing query-related instructions.\n     * @type {?}\n     */\n    TView.prototype.viewQuery;\n    /**\n     * Pointer to the host `TNode` (not part of this TView).\n     *\n     * If this is a `TViewNode` for an `LViewNode`, this is an embedded view of a container.\n     * We need this pointer to be able to efficiently find this node when inserting the view\n     * into an anchor.\n     *\n     * If this is a `TElementNode`, this is the view of a root component. It has exactly one\n     * root TNode.\n     *\n     * If this is null, this is the view of a component that is not at root. We do not store\n     * the host TNodes for child component views because they can potentially have several\n     * different host TNodes, depending on where the component is being used. These host\n     * TNodes cannot be shared (due to different indices, etc).\n     * @type {?}\n     */\n    TView.prototype.node;\n    /**\n     * Whether or not this template has been processed.\n     * @type {?}\n     */\n    TView.prototype.firstTemplatePass;\n    /**\n     * Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n.\n     * @type {?}\n     */\n    TView.prototype.data;\n    /**\n     * The binding start index is the index at which the data array\n     * starts to store bindings only. Saving this value ensures that we\n     * will begin reading bindings at the correct point in the array when\n     * we are in update mode.\n     * @type {?}\n     */\n    TView.prototype.bindingStartIndex;\n    /**\n     * The index where the \"expando\" section of `LView` begins. The expando\n     * section contains injectors, directive instances, and host binding values.\n     * Unlike the \"consts\" and \"vars\" sections of `LView`, the length of this\n     * section cannot be calculated at compile-time because directives are matched\n     * at runtime to preserve locality.\n     *\n     * We store this start index so we know where to start checking host bindings\n     * in `setHostBindings`.\n     * @type {?}\n     */\n    TView.prototype.expandoStartIndex;\n    /**\n     * Whether or not there are any static view queries tracked on this view.\n     *\n     * We store this so we know whether or not we should do a view query\n     * refresh after creation mode to collect static query results.\n     * @type {?}\n     */\n    TView.prototype.staticViewQueries;\n    /**\n     * Whether or not there are any static content queries tracked on this view.\n     *\n     * We store this so we know whether or not we should do a content query\n     * refresh after creation mode to collect static query results.\n     * @type {?}\n     */\n    TView.prototype.staticContentQueries;\n    /**\n     * A reference to the first child node located in the view.\n     * @type {?}\n     */\n    TView.prototype.firstChild;\n    /**\n     * Set of instructions used to process host bindings efficiently.\n     *\n     * See VIEW_DATA.md for more information.\n     * @type {?}\n     */\n    TView.prototype.expandoInstructions;\n    /**\n     * Full registry of directives and components that may be found in this view.\n     *\n     * It's necessary to keep a copy of the full def list on the TView so it's possible\n     * to render template functions without a host component.\n     * @type {?}\n     */\n    TView.prototype.directiveRegistry;\n    /**\n     * Full registry of pipes that may be found in this view.\n     *\n     * The property is either an array of `PipeDefs`s or a function which returns the array of\n     * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n     *\n     * It's necessary to keep a copy of the full def list on the TView so it's possible\n     * to render template functions without a host component.\n     * @type {?}\n     */\n    TView.prototype.pipeRegistry;\n    /**\n     * Array of ngOnInit, ngOnChanges and ngDoCheck hooks that should be executed for this view in\n     * creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.preOrderHooks;\n    /**\n     * Array of ngOnChanges and ngDoCheck hooks that should be executed for this view in update mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.preOrderCheckHooks;\n    /**\n     * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n     * for this view in creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.contentHooks;\n    /**\n     * Array of ngAfterContentChecked hooks that should be executed for this view in update\n     * mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.contentCheckHooks;\n    /**\n     * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n     * this view in creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.viewHooks;\n    /**\n     * Array of ngAfterViewChecked hooks that should be executed for this view in\n     * update mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.viewCheckHooks;\n    /**\n     * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.destroyHooks;\n    /**\n     * When a view is destroyed, listeners need to be released and outputs need to be\n     * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n     * and output data (in chunks of 2) for a particular view. Combining the arrays\n     * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n     * separate for loops).\n     *\n     * If it's a native DOM listener or output subscription being stored:\n     * 1st index is: event name  `name = tView.cleanup[i+0]`\n     * 2nd index is: index of native element or a function that retrieves global target (window,\n     *               document or body) reference based on the native element:\n     *    `typeof idxOrTargetGetter === 'function'`: global target getter function\n     *    `typeof idxOrTargetGetter === 'number'`: index of native element\n     *\n     * 3rd index is: index of listener function `listener = lView[CLEANUP][tView.cleanup[i+2]]`\n     * 4th index is: `useCaptureOrIndx = tView.cleanup[i+3]`\n     *    `typeof useCaptureOrIndx == 'boolean' : useCapture boolean\n     *    `typeof useCaptureOrIndx == 'number':\n     *         `useCaptureOrIndx >= 0` `removeListener = LView[CLEANUP][useCaptureOrIndx]`\n     *         `useCaptureOrIndx <  0` `subscription = LView[CLEANUP][-useCaptureOrIndx]`\n     *\n     * If it's an output subscription or query list destroy hook:\n     * 1st index is: output unsubscribe function / query list destroy function\n     * 2nd index is: index of function context in LView.cleanupInstances[]\n     *               `tView.cleanup[i+0].call(lView[CLEANUP][tView.cleanup[i+1]])`\n     * @type {?}\n     */\n    TView.prototype.cleanup;\n    /**\n     * A list of element indices for child components that will need to be\n     * refreshed when the current view has finished its check. These indices have\n     * already been adjusted for the HEADER_OFFSET.\n     *\n     * @type {?}\n     */\n    TView.prototype.components;\n    /**\n     * A collection of queries tracked in a given view.\n     * @type {?}\n     */\n    TView.prototype.queries;\n    /**\n     * An array of indices pointing to directives with content queries alongside with the\n     * corresponding\n     * query index. Each entry in this array is a tuple of:\n     * - index of the first content query index declared by a given directive;\n     * - index of a directive.\n     *\n     * We are storing those indexes so we can refresh content queries as part of a view refresh\n     * process.\n     * @type {?}\n     */\n    TView.prototype.contentQueries;\n    /**\n     * Set of schemas that declare elements to be allowed inside the view.\n     * @type {?}\n     */\n    TView.prototype.schemas;\n}\n/** @enum {number} */\nconst RootContextFlags = {\n    Empty: 0, DetectChanges: 1, FlushPlayers: 2,\n};\n/**\n * RootContext contains information which is shared for all components which\n * were bootstrapped with {\\@link renderComponent}.\n * @record\n */\nfunction RootContext() { }\nif (false) {\n    /**\n     * A function used for scheduling change detection in the future. Usually\n     * this is `requestAnimationFrame`.\n     * @type {?}\n     */\n    RootContext.prototype.scheduler;\n    /**\n     * A promise which is resolved when all components are considered clean (not dirty).\n     *\n     * This promise is overwritten every time a first call to {\\@link markDirty} is invoked.\n     * @type {?}\n     */\n    RootContext.prototype.clean;\n    /**\n     * RootComponents - The components that were instantiated by the call to\n     * {\\@link renderComponent}.\n     * @type {?}\n     */\n    RootContext.prototype.components;\n    /**\n     * The player flushing handler to kick off all animations\n     * @type {?}\n     */\n    RootContext.prototype.playerHandler;\n    /**\n     * What render-related operations to run once a scheduler has been set\n     * @type {?}\n     */\n    RootContext.prototype.flags;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nconst unusedValueExportToPlacateAjd = 1;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n * @type {?}\n */\nconst TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n * @type {?}\n */\nconst ACTIVE_INDEX = 2;\n// PARENT and NEXT are indices 3 and 4\n// As we already have these constants in LView, we don't need to re-create them.\n/** @type {?} */\nconst MOVED_VIEWS = 5;\n// T_HOST is index 6\n// We already have this constants in LView, we don't need to re-create it.\n/** @type {?} */\nconst NATIVE = 7;\n/** @type {?} */\nconst VIEW_REFS = 8;\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n * @type {?}\n */\nconst CONTAINER_HEADER_OFFSET = 9;\n/**\n * The state associated with a container.\n *\n * This is an array so that its structure is closer to LView. This helps\n * when traversing the view tree (which is a mix of containers and component\n * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n * of type.\n * @record\n */\nfunction LContainer() { }\nif (false) {\n    /* Skipping unnamed member:\n    readonly[HOST]: RElement|RComment|LView;*/\n    /* Skipping unnamed member:\n    [TYPE]: true;*/\n    /* Skipping unnamed member:\n    [ACTIVE_INDEX]: number;*/\n    /* Skipping unnamed member:\n    [PARENT]: LView;*/\n    /* Skipping unnamed member:\n    [NEXT]: LView|LContainer|null;*/\n    /* Skipping unnamed member:\n    [MOVED_VIEWS]: LView[]|null;*/\n    /* Skipping unnamed member:\n    [T_HOST]: TNode;*/\n    /* Skipping unnamed member:\n    readonly[NATIVE]:\n          RComment;*/\n    /* Skipping unnamed member:\n    [VIEW_REFS]: ViewRef[]|null;*/\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nconst unusedValueExportToPlacateAjd$1 = 1;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * True if `value` is `LView`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`\n * @return {?}\n */\nfunction isLView(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`\n * @return {?}\n */\nfunction isLContainer(value) {\n    return Array.isArray(value) && value[TYPE] === true;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isContentQueryHost(tNode) {\n    return (tNode.flags & 4 /* hasContentQuery */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isComponent(tNode) {\n    return (tNode.flags & 1 /* isComponent */) === 1 /* isComponent */;\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction isComponentDef(def) {\n    return ((/** @type {?} */ (def))).template !== null;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isRootView(target) {\n    return (target[FLAGS] & 512 /* IsRoot */) !== 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction assertTNodeForLView(tNode, lView) {\n    tNode.hasOwnProperty('tView_') && assertEqual(((/** @type {?} */ ((/** @type {?} */ (tNode))))).tView_, lView[TVIEW], 'This TNode does not belong to this LView.');\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.') {\n    if (!getComponentDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.') {\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} isParent\n * @return {?}\n */\nfunction assertPreviousIsParent(isParent) {\n    assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction assertHasParent(tNode) {\n    assertDefined(tNode, 'previousOrParentTNode should exist!');\n    assertDefined((/** @type {?} */ (tNode)).parent, 'previousOrParentTNode should have a parent');\n}\n/**\n * @param {?} lView\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nfunction assertDataNext(lView, index, arr) {\n    if (arr == null)\n        arr = lView;\n    assertEqual(arr.length, index, `index ${index} expected to be at the end of arr (length ${arr.length})`);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction assertLContainerOrUndefined(value) {\n    value && assertEqual(isLContainer(value), true, 'Expecting LContainer or undefined or null');\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction assertLContainer(value) {\n    assertDefined(value, 'LContainer must be defined');\n    assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction assertLViewOrUndefined(value) {\n    value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction assertLView(value) {\n    assertDefined(value, 'LView must be defined');\n    assertEqual(isLView(value), true, 'Expecting LView');\n}\n/**\n * @param {?} tView\n * @param {?} errMessage\n * @return {?}\n */\nfunction assertFirstTemplatePass(tView, errMessage) {\n    assertEqual(tView.firstTemplatePass, true, errMessage);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst TNODE = 8;\n/** @type {?} */\nconst PARENT_INJECTOR = 8;\n/** @type {?} */\nconst INJECTOR_BLOOM_PARENT_SIZE = 9;\n/**\n * Represents a relative location of parent injector.\n *\n * The interfaces encodes number of parents `LView`s to traverse and index in the `LView`\n * pointing to the parent injector.\n * @record\n */\nfunction RelativeInjectorLocation() { }\nif (false) {\n    /** @type {?} */\n    RelativeInjectorLocation.prototype.__brand__;\n}\n/** @enum {number} */\nconst RelativeInjectorLocationFlags = {\n    InjectorIndexMask: 32767,\n    ViewOffsetShift: 16,\n    NO_PARENT: -1,\n};\n/** @type {?} */\nconst NO_PARENT_INJECTOR = (/** @type {?} */ (-1));\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n    /**\n     * @param {?} factory\n     * @param {?} isViewProvider\n     * @param {?} injectImplementation\n     */\n    constructor(factory, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n}\nif (false) {\n    /**\n     * The inject implementation to be activated when using the factory.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.injectImpl;\n    /**\n     * Marker set to true during factory invocation to see if we get into recursive loop.\n     * Recursive loop causes an error to be displayed.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.resolving;\n    /**\n     * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.canSeeViewProviders;\n    /**\n     * An array of factories to use in case of `multi` provider.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.multi;\n    /**\n     * Number of `multi`-providers which belong to the component.\n     *\n     * This is needed because when multiple components and directives declare the `multi` provider\n     * they have to be concatenated in the correct order.\n     *\n     * Example:\n     *\n     * If we have a component and directive active an a single element as declared here\n     * ```\n     * component:\n     *   provides: [ {provide: String, useValue: 'component', multi: true} ],\n     *   viewProvides: [ {provide: String, useValue: 'componentView', multi: true} ],\n     *\n     * directive:\n     *   provides: [ {provide: String, useValue: 'directive', multi: true} ],\n     * ```\n     *\n     * Then the expected results are:\n     *\n     * ```\n     * providers: ['component', 'directive']\n     * viewProviders: ['component', 'componentView', 'directive']\n     * ```\n     *\n     * The way to think about it is that the `viewProviders` have been inserted after the component\n     * but before the directives, which is why we need to know how many `multi`s have been declared by\n     * the component.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.componentProviders;\n    /**\n     * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n     * See `providerFactory`.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.index;\n    /**\n     * Because the same `multi` provider can be declared in `provides` and `viewProvides` it is\n     * possible for `viewProvides` to shadow the `provides`. For this reason we store the\n     * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n     *\n     * Example:\n     *\n     * Given:\n     * ```\n     * provides: [ {provide: String, useValue: 'all', multi: true} ],\n     * viewProvides: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n     * ```\n     *\n     * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n     * of view injection. We further have to make sure that the shared instances (in our case\n     * `all`) are the exact same instance in both the content as well as the view injection. (We\n     * have to make sure that we don't double instantiate.) For this reason the `viewProvides`\n     * `Factory` has a pointer to the shadowed `provides` factory so that it can instantiate the\n     * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n     * ['all', 'viewOnly']`).\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.providerFactory;\n    /**\n     * Factory to invoke in order to create a new instance.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.factory;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isFactory(obj) {\n    // See: https://jsperf.com/instanceof-vs-getprototypeof\n    return obj !== null && typeof obj == 'object' &&\n        Object.getPrototypeOf(obj) == NodeInjectorFactory.prototype;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nconst unusedValueExportToPlacateAjd$2 = 1;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tNode\n * @param {?} type\n * @return {?}\n */\nfunction assertNodeType(tNode, type) {\n    assertDefined(tNode, 'should be called with a TNode');\n    assertEqual(tNode.type, type, `should be a ${typeName(type)}`);\n}\n/**\n * @param {?} tNode\n * @param {...?} types\n * @return {?}\n */\nfunction assertNodeOfPossibleTypes(tNode, ...types) {\n    assertDefined(tNode, 'should be called with a TNode');\n    /** @type {?} */\n    const found = types.some((/**\n     * @param {?} type\n     * @return {?}\n     */\n    type => tNode.type === type));\n    assertEqual(found, true, `Should be one of ${types.map(typeName).join(', ')} but got ${typeName(tNode.type)}`);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    if (type == 4 /* ElementContainer */)\n        return 'ElementContainer';\n    return '<unknown>';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {\\@link HookData} for details about the data structure.\n *\n * @param {?} directiveIndex The index of the directive in LView\n * @param {?} directiveDef The definition containing the hooks to setup in tView\n * @param {?} tView The current TView\n * @param {?} nodeIndex The index of the node to which the directive is attached\n * @param {?} initialPreOrderHooksLength the number of pre-order hooks already registered before the\n * current process, used to know if the node index has to be added to the array. If it is -1,\n * the node index is never added.\n * @param {?} initialPreOrderCheckHooksLength same as previous for pre-order check hooks\n * @return {?}\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    const { onChanges, onInit, doCheck } = directiveDef;\n    if (initialPreOrderHooksLength >= 0 &&\n        (!tView.preOrderHooks || initialPreOrderHooksLength === tView.preOrderHooks.length) &&\n        (onChanges || onInit || doCheck)) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(nodeIndex);\n    }\n    if (initialPreOrderCheckHooksLength >= 0 &&\n        (!tView.preOrderCheckHooks ||\n            initialPreOrderCheckHooksLength === tView.preOrderCheckHooks.length) &&\n        (onChanges || doCheck)) {\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(nodeIndex);\n    }\n    if (onChanges) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, onChanges);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, onChanges);\n    }\n    if (onInit) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(-directiveIndex, onInit);\n    }\n    if (doCheck) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, doCheck);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, doCheck);\n    }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {\\@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param {?} tView The current TView\n * @param {?} tNode The TNode whose directives are to be searched for hooks to queue\n * @return {?}\n */\nfunction registerPostOrderHooks(tView, tNode) {\n    if (tView.firstTemplatePass) {\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (tView.data[i]));\n            if (directiveDef.afterContentInit) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(-i, directiveDef.afterContentInit);\n            }\n            if (directiveDef.afterContentChecked) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);\n                (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, directiveDef.afterContentChecked);\n            }\n            if (directiveDef.afterViewInit) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(-i, directiveDef.afterViewInit);\n            }\n            if (directiveDef.afterViewChecked) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);\n                (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, directiveDef.afterViewChecked);\n            }\n            if (directiveDef.onDestroy != null) {\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);\n            }\n        }\n    }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes necessary hooks at the start of executing a template.\n *\n * Executes hooks that are to be run during the initialization of a directive such\n * as `onChanges`, `onInit`, and `doCheck`.\n *\n * @param {?} currentView\n * @param {?} tView Static data for the view containing the hooks to be executed\n * @param {?} checkNoChangesMode Whether or not we're in checkNoChanges mode.\n * @param {?} currentNodeIndex\n * @return {?}\n */\nfunction executePreOrderHooks(currentView, tView, checkNoChangesMode, currentNodeIndex) {\n    if (!checkNoChangesMode) {\n        executeHooks(currentView, tView.preOrderHooks, tView.preOrderCheckHooks, checkNoChangesMode, 0 /* OnInitHooksToBeRun */, currentNodeIndex !== undefined ? currentNodeIndex : null);\n    }\n}\n/**\n * Executes hooks against the given `LView` based off of whether or not\n * This is the first pass.\n *\n * @param {?} currentView The view instance data to run the hooks against\n * @param {?} firstPassHooks An array of hooks to run if we're in the first view pass\n * @param {?} checkHooks An Array of hooks to run if we're not in the first view pass.\n * @param {?} checkNoChangesMode Whether or not we're in no changes mode.\n * @param {?} initPhaseState the current state of the init phase\n * @param {?} currentNodeIndex 3 cases depending the the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n * @return {?}\n */\nfunction executeHooks(currentView, firstPassHooks, checkHooks, checkNoChangesMode, initPhaseState, currentNodeIndex) {\n    if (checkNoChangesMode)\n        return;\n    /** @type {?} */\n    const hooksToCall = (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState ?\n        firstPassHooks :\n        checkHooks;\n    if (hooksToCall) {\n        callHooks(currentView, hooksToCall, initPhaseState, currentNodeIndex);\n    }\n    // The init phase state must be always checked here as it may have been recursively updated\n    if (currentNodeIndex == null &&\n        (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState &&\n        initPhaseState !== 3 /* InitPhaseCompleted */) {\n        currentView[FLAGS] &= 1023 /* IndexWithinInitPhaseReset */;\n        currentView[FLAGS] += 1 /* InitPhaseStateIncrementer */;\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param {?} currentView The current view\n * @param {?} arr The array in which the hooks are found\n * @param {?} initPhase\n * @param {?} currentNodeIndex 3 cases depending the the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n * @return {?}\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n    /** @type {?} */\n    const startIndex = currentNodeIndex !== undefined ?\n        (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :\n        0;\n    /** @type {?} */\n    const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n    /** @type {?} */\n    let lastNodeIndexFound = 0;\n    for (let i = startIndex; i < arr.length; i++) {\n        /** @type {?} */\n        const hook = (/** @type {?} */ (arr[i + 1]));\n        if (typeof hook === 'number') {\n            lastNodeIndexFound = (/** @type {?} */ (arr[i]));\n            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                break;\n            }\n        }\n        else {\n            /** @type {?} */\n            const isInitHook = arr[i] < 0;\n            if (isInitHook)\n                currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;\n            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                callHook(currentView, initPhase, arr, i);\n                currentView[PREORDER_HOOK_FLAGS] =\n                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +\n                        2;\n            }\n            i++;\n        }\n    }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param {?} currentView The current view\n * @param {?} initPhase\n * @param {?} arr The array in which the hooks are found\n * @param {?} i The current index within the hook data array\n * @return {?}\n */\nfunction callHook(currentView, initPhase, arr, i) {\n    /** @type {?} */\n    const isInitHook = arr[i] < 0;\n    /** @type {?} */\n    const hook = (/** @type {?} */ (arr[i + 1]));\n    /** @type {?} */\n    const directiveIndex = isInitHook ? -arr[i] : (/** @type {?} */ (arr[i]));\n    /** @type {?} */\n    const directive = currentView[directiveIndex];\n    if (isInitHook) {\n        /** @type {?} */\n        const indexWithintInitPhase = currentView[FLAGS] >> 10 /* IndexWithinInitPhaseShift */;\n        // The init phase state must be always checked here as it may have been recursively\n        // updated\n        if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&\n            (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {\n            currentView[FLAGS] += 1024 /* IndexWithinInitPhaseIncrementer */;\n            hook.call(directive);\n        }\n    }\n    else {\n        hook.call(directive);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n/**\n * --------\n *\n * // TODO(matsko): add updateMask info\n *\n * This file contains all state-based logic for styling in Angular.\n *\n * Styling in Angular is evaluated with a series of styling-specific\n * template instructions which are called one after another each time\n * change detection occurs in Angular.\n *\n * Styling makes use of various temporary, state-based variables between\n * instructions so that it can better cache and optimize its values.\n * These values are usually populated and cleared when an element is\n * exited in change detection (once all the instructions are run for\n * that element).\n *\n * There are, however, situations where the state-based values\n * need to be stored and used at a later point. This ONLY occurs when\n * there are template-level as well as host-binding-level styling\n * instructions on the same element. The example below shows exactly\n * what could be:\n *\n * ```html\n * <!-- two sources of styling: the template and the directive -->\n * <div [style.width]=\"width\" dir-that-sets-height></div>\n * ```\n *\n * If and when this situation occurs, the current styling state is\n * stored in a storage map value and then later accessed once the\n * host bindings are evaluated. Once styling for the current element\n * is over then the map entry will be cleared.\n *\n * To learn more about the algorithm see `TStylingContext`.\n *\n * --------\n */\n/** @type {?} */\nlet _stylingState = null;\n/** @type {?} */\nconst _stateStorage = new Map();\n// this value is not used outside this file and is only here\n// as a caching check for when the element changes.\n/** @type {?} */\nlet _stylingElement = null;\n/**\n * Used as a state reference for update values between style/class binding instructions.\n * @record\n */\nfunction StylingState() { }\nif (false) {\n    /** @type {?} */\n    StylingState.prototype.classesBitMask;\n    /** @type {?} */\n    StylingState.prototype.classesIndex;\n    /** @type {?} */\n    StylingState.prototype.stylesBitMask;\n    /** @type {?} */\n    StylingState.prototype.stylesIndex;\n}\n/** @type {?} */\nconst STYLING_INDEX_START_VALUE = 1;\n/** @type {?} */\nconst BIT_MASK_START_VALUE = 0;\n/**\n * @param {?} element\n * @param {?=} readFromMap\n * @return {?}\n */\nfunction getStylingState(element, readFromMap) {\n    if (!_stylingElement || element !== _stylingElement) {\n        _stylingElement = element;\n        if (readFromMap) {\n            _stylingState = _stateStorage.get(element) || null;\n            ngDevMode && ngDevMode.stylingReadPersistedState++;\n        }\n        _stylingState = _stylingState || {\n            classesBitMask: BIT_MASK_START_VALUE,\n            classesIndex: STYLING_INDEX_START_VALUE,\n            stylesBitMask: BIT_MASK_START_VALUE,\n            stylesIndex: STYLING_INDEX_START_VALUE,\n        };\n    }\n    return (/** @type {?} */ (_stylingState));\n}\n/**\n * @return {?}\n */\nfunction resetStylingState() {\n    _stylingState = null;\n    _stylingElement = null;\n}\n/**\n * @param {?} element\n * @param {?} state\n * @return {?}\n */\nfunction storeStylingState(element, state) {\n    ngDevMode && ngDevMode.stylingWritePersistedState++;\n    _stateStorage.set(element, state);\n}\n/**\n * @param {?} element\n * @return {?}\n */\nfunction deleteStylingStateFromStorage(element) {\n    _stateStorage.delete(element);\n}\n/**\n * @return {?}\n */\nfunction resetAllStylingState() {\n    resetStylingState();\n    _stateStorage.clear();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This property will be monkey-patched on elements, components and directives\n * @type {?}\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n * @record\n */\nfunction LContext() { }\nif (false) {\n    /**\n     * The component's parent view data.\n     * @type {?}\n     */\n    LContext.prototype.lView;\n    /**\n     * The index instance of the node.\n     * @type {?}\n     */\n    LContext.prototype.nodeIndex;\n    /**\n     * The instance of the DOM node that is attached to the lNode.\n     * @type {?}\n     */\n    LContext.prototype.native;\n    /**\n     * The instance of the Component node.\n     * @type {?}\n     */\n    LContext.prototype.component;\n    /**\n     * The list of active directives that exist on this element.\n     * @type {?}\n     */\n    LContext.prototype.directives;\n    /**\n     * The map of local references (local reference name => element or directive instance) that exist\n     * on this element.\n     * @type {?}\n     */\n    LContext.prototype.localRefs;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`\n * @return {?}\n */\nfunction unwrapRNode(value) {\n    while (Array.isArray(value)) {\n        value = (/** @type {?} */ (value[HOST]));\n    }\n    return (/** @type {?} */ (value));\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`\n * @return {?}\n */\nfunction unwrapLView(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isLView()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (typeof value[TYPE] === 'object')\n            return (/** @type {?} */ (value));\n        value = (/** @type {?} */ (value[HOST]));\n    }\n    return null;\n}\n/**\n * Returns `LContainer` or `null` if not found.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`\n * @return {?}\n */\nfunction unwrapLContainer(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isLContainer()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (value[TYPE] === true)\n            return (/** @type {?} */ (value));\n        value = (/** @type {?} */ (value[HOST]));\n    }\n    return null;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nfunction getNativeByIndex(index, lView) {\n    return unwrapRNode(lView[index + HEADER_OFFSET]);\n}\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction getNativeByTNode(tNode, lView) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode && assertDataInRange(lView, tNode.index);\n    /** @type {?} */\n    const node = unwrapRNode(lView[tNode.index]);\n    ngDevMode && assertDomNode(node);\n    return node;\n}\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction getNativeByTNodeOrNull(tNode, lView) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    /** @type {?} */\n    const index = tNode.index;\n    /** @type {?} */\n    const node = index == -1 ? null : unwrapRNode(lView[index]);\n    ngDevMode && node !== null && assertDomNode(node);\n    return node;\n}\n/**\n * A helper function that returns `true` if a given `TNode` has any matching directives.\n * @param {?} tNode\n * @return {?}\n */\nfunction hasDirectives(tNode) {\n    return tNode.directiveEnd > tNode.directiveStart;\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nfunction getTNode(index, view) {\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n    ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n    return (/** @type {?} */ (view[TVIEW].data[index + HEADER_OFFSET]));\n}\n/**\n * Retrieves a value from any `LView` or `TData`.\n * @template T\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction loadInternal(view, index) {\n    ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n    return view[index + HEADER_OFFSET];\n}\n/**\n * @param {?} nodeIndex\n * @param {?} hostView\n * @return {?}\n */\nfunction getComponentViewByIndex(nodeIndex, hostView) {\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n    /** @type {?} */\n    const slotValue = hostView[nodeIndex];\n    /** @type {?} */\n    const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n    return lView;\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n * @param {?} target\n * @return {?}\n */\nfunction readPatchedData(target) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    return target[MONKEY_PATCH_KEY_NAME];\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction readPatchedLView(target) {\n    /** @type {?} */\n    const value = readPatchedData(target);\n    if (value) {\n        return Array.isArray(value) ? value : ((/** @type {?} */ (value))).lView;\n    }\n    return null;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n * @param {?} view\n * @return {?}\n */\nfunction viewAttachedToChangeDetector(view) {\n    return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;\n}\n/**\n * Returns a boolean for whether the view is attached to a container.\n * @param {?} view\n * @return {?}\n */\nfunction viewAttachedToContainer(view) {\n    return isLContainer(view[PARENT]);\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param {?} lView the LView on which the flags are reset\n * @return {?}\n */\nfunction resetPreOrderHookFlags(lView) {\n    lView[PREORDER_HOOK_FLAGS] = 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LView` to only those elements.\n * @type {?}\n */\nlet elementDepthCount;\n/**\n * @return {?}\n */\nfunction getElementDepthCount() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return elementDepthCount;\n}\n/**\n * @return {?}\n */\nfunction increaseElementDepthCount() {\n    elementDepthCount++;\n}\n/**\n * @return {?}\n */\nfunction decreaseElementDepthCount() {\n    elementDepthCount--;\n}\n/** @type {?} */\nlet currentDirectiveDef = null;\n/**\n * @return {?}\n */\nfunction getCurrentDirectiveDef() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentDirectiveDef;\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction setCurrentDirectiveDef(def) {\n    currentDirectiveDef = def;\n}\n/**\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n * @type {?}\n */\nlet bindingsEnabled;\n/**\n * @return {?}\n */\nfunction getBindingsEnabled() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ÉµÉµdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ÉµÉµenableBindings() -->\n * </div>\n * ```\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµenableBindings() {\n    bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ÉµÉµdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ÉµÉµenableBindings() -->\n * </div>\n * ```\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµdisableBindings() {\n    bindingsEnabled = false;\n}\n/**\n * @return {?}\n */\nfunction getLView() {\n    return lView;\n}\n/**\n * Used as the starting directive id value.\n *\n * All subsequent directives are incremented from this value onwards.\n * The reason why this value is `1` instead of `0` is because the `0`\n * value is reserved for the template.\n * @type {?}\n */\nconst MIN_DIRECTIVE_ID = 1;\n/** @type {?} */\nlet activeDirectiveId = MIN_DIRECTIVE_ID;\n/**\n * Position depth (with respect from leaf to root) in a directive sub-class inheritance chain.\n * @type {?}\n */\nlet activeDirectiveSuperClassDepthPosition = 0;\n/**\n * Total count of how many directives are a part of an inheritance chain.\n *\n * When directives are sub-classed (extended) from one to another, Angular\n * needs to keep track of exactly how many were encountered so it can accurately\n * generate the next directive id (once the next directive id is visited).\n * Normally the next directive id just a single incremented value from the\n * previous one, however, if the previous directive is a part of an inheritance\n * chain (a series of sub-classed directives) then the incremented value must\n * also take into account the total amount of sub-classed values.\n *\n * Note that this value resets back to zero once the next directive is\n * visited (when `incrementActiveDirectiveId` or `setActiveHostElement`\n * is called).\n * @type {?}\n */\nlet activeDirectiveSuperClassHeight = 0;\n/**\n * Sets the active directive host element and resets the directive id value\n * (when the provided elementIndex value has changed).\n *\n * @param {?=} elementIndex the element index value for the host element where\n *                     the directive/component instance lives\n * @return {?}\n */\nfunction setActiveHostElement(elementIndex = null) {\n    if (_selectedIndex !== elementIndex) {\n        setSelectedIndex(elementIndex == null ? -1 : elementIndex);\n        activeDirectiveId = elementIndex == null ? 0 : MIN_DIRECTIVE_ID;\n        activeDirectiveSuperClassDepthPosition = 0;\n        activeDirectiveSuperClassHeight = 0;\n    }\n}\n/**\n * Returns the current id value of the current directive.\n *\n * For example we have an element that has two directives on it:\n * <div dir-one dir-two></div>\n *\n * dirOne->hostBindings() (id == 1)\n * dirTwo->hostBindings() (id == 2)\n *\n * Note that this is only active when `hostBinding` functions are being processed.\n *\n * Note that directive id values are specific to an element (this means that\n * the same id value could be present on another element with a completely\n * different set of directives).\n * @return {?}\n */\nfunction getActiveDirectiveId() {\n    return activeDirectiveId;\n}\n/**\n * Increments the current directive id value.\n *\n * For example we have an element that has two directives on it:\n * <div dir-one dir-two></div>\n *\n * dirOne->hostBindings() (index = 1)\n * // increment\n * dirTwo->hostBindings() (index = 2)\n *\n * Depending on whether or not a previous directive had any inherited\n * directives present, that value will be incremented in addition\n * to the id jumping up by one.\n *\n * Note that this is only active when `hostBinding` functions are being processed.\n *\n * Note that directive id values are specific to an element (this means that\n * the same id value could be present on another element with a completely\n * different set of directives).\n * @return {?}\n */\nfunction incrementActiveDirectiveId() {\n    activeDirectiveId += 1 + activeDirectiveSuperClassHeight;\n    // because we are dealing with a new directive this\n    // means we have exited out of the inheritance chain\n    activeDirectiveSuperClassDepthPosition = 0;\n    activeDirectiveSuperClassHeight = 0;\n}\n/**\n * Set the current super class (reverse inheritance) position depth for a directive.\n *\n * For example we have two directives: Child and Other (but Child is a sub-class of Parent)\n * <div child-dir other-dir></div>\n *\n * // increment\n * parentInstance->hostBindings() (depth = 1)\n * // decrement\n * childInstance->hostBindings() (depth = 0)\n * otherInstance->hostBindings() (depth = 0 b/c it's a different directive)\n *\n * Note that this is only active when `hostBinding` functions are being processed.\n * @param {?} delta\n * @return {?}\n */\nfunction adjustActiveDirectiveSuperClassDepthPosition(delta) {\n    activeDirectiveSuperClassDepthPosition += delta;\n    // we keep track of the height value so that when the next directive is visited\n    // then Angular knows to generate a new directive id value which has taken into\n    // account how many sub-class directives were a part of the previous directive.\n    activeDirectiveSuperClassHeight =\n        Math.max(activeDirectiveSuperClassHeight, activeDirectiveSuperClassDepthPosition);\n}\n/**\n * Returns he current depth of the super/sub class inheritance chain.\n *\n * This will return how many inherited directive/component classes\n * exist in the current chain.\n *\n * ```typescript\n * \\@Directive({ selector: '[super-dir]' })\n * class SuperDir {}\n *  / selector: '[sub-dir]' })\n * class SubDir extends SuperDir {}\n *\n * // if `<div sub-dir>` is used then the super class height is `1`\n * // if `<div super-dir>` is used then the super class height is `0`\n * ```\n * @return {?}\n */\nfunction getActiveDirectiveSuperClassHeight() {\n    return activeDirectiveSuperClassHeight;\n}\n/**\n * Returns the current super class (reverse inheritance) depth for a directive.\n *\n * This is designed to help instruction code distinguish different hostBindings\n * calls from each other when a directive has extended from another directive.\n * Normally using the directive id value is enough, but with the case\n * of parent/sub-class directive inheritance more information is required.\n *\n * Note that this is only active when `hostBinding` functions are being processed.\n * @return {?}\n */\nfunction getActiveDirectiveSuperClassDepth() {\n    return activeDirectiveSuperClassDepthPosition;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * \\@codeGenApi\n * @param {?} viewToRestore The OpaqueViewState instance to restore.\n *\n * @return {?}\n */\nfunction ÉµÉµrestoreView(viewToRestore) {\n    contextLView = (/** @type {?} */ ((/** @type {?} */ (viewToRestore))));\n}\n/**\n * Used to set the parent property when nodes are created and track query results.\n * @type {?}\n */\nlet previousOrParentTNode;\n/**\n * @return {?}\n */\nfunction getPreviousOrParentTNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentTNode;\n}\n/**\n * @param {?} tNode\n * @param {?} _isParent\n * @return {?}\n */\nfunction setPreviousOrParentTNode(tNode, _isParent) {\n    previousOrParentTNode = tNode;\n    isParent = _isParent;\n}\n/**\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nfunction setTNodeAndViewData(tNode, view) {\n    ngDevMode && assertLViewOrUndefined(view);\n    previousOrParentTNode = tNode;\n    lView = view;\n}\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n * @type {?}\n */\nlet isParent;\n/**\n * @return {?}\n */\nfunction getIsParent() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return isParent;\n}\n/**\n * @return {?}\n */\nfunction setIsNotParent() {\n    isParent = false;\n}\n/**\n * @return {?}\n */\nfunction setIsParent() {\n    isParent = true;\n}\n/**\n * Checks whether a given view is in creation mode\n * @param {?=} view\n * @return {?}\n */\nfunction isCreationMode(view = lView) {\n    return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;\n}\n/**\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n * @type {?}\n */\nlet lView;\n/**\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n * @type {?}\n */\nlet contextLView = (/** @type {?} */ (null));\n/**\n * @return {?}\n */\nfunction getContextLView() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return contextLView;\n}\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n * @type {?}\n */\nlet checkNoChangesMode = false;\n/**\n * @return {?}\n */\nfunction getCheckNoChangesMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return checkNoChangesMode;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction setCheckNoChangesMode(mode) {\n    checkNoChangesMode = mode;\n}\n/**\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n * @type {?}\n */\nlet bindingRootIndex = -1;\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\n/**\n * @return {?}\n */\nfunction getBindingRoot() {\n    return bindingRootIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setBindingRoot(value) {\n    bindingRootIndex = value;\n}\n/**\n * Current index of a View or Content Query which needs to be processed next.\n * We iterate over the list of Queries and increment current query index at every step.\n * @type {?}\n */\nlet currentQueryIndex = 0;\n/**\n * @return {?}\n */\nfunction getCurrentQueryIndex() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentQueryIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setCurrentQueryIndex(value) {\n    currentQueryIndex = value;\n}\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} hostTNode\n * @return {?} the previous state;\n */\nfunction enterView(newView, hostTNode) {\n    ngDevMode && assertLViewOrUndefined(newView);\n    /** @type {?} */\n    const oldView = lView;\n    if (newView) {\n        /** @type {?} */\n        const tView = newView[TVIEW];\n        bindingRootIndex = tView.bindingStartIndex;\n    }\n    previousOrParentTNode = (/** @type {?} */ (hostTNode));\n    isParent = true;\n    lView = contextLView = newView;\n    return oldView;\n}\n/**\n * @template T\n * @param {?=} level\n * @return {?}\n */\nfunction nextContextImpl(level = 1) {\n    contextLView = walkUpViews(level, (/** @type {?} */ (contextLView)));\n    return (/** @type {?} */ (contextLView[CONTEXT]));\n}\n/**\n * @param {?} nestingLevel\n * @param {?} currentView\n * @return {?}\n */\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = (/** @type {?} */ (currentView[DECLARATION_VIEW]));\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nfunction resetComponentState() {\n    isParent = false;\n    previousOrParentTNode = (/** @type {?} */ (null));\n    elementDepthCount = 0;\n    bindingsEnabled = true;\n    setCurrentStyleSanitizer(null);\n    resetAllStylingState();\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param {?} newView New state to become active\n * @param {?} safeToRunHooks Whether the runtime is in a state where running lifecycle hooks is valid.\n * This is not always the case (for example, the application may have crashed and `leaveView` is\n * being executed while unwinding the call stack).\n * @return {?}\n */\nfunction leaveView(newView, safeToRunHooks) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (isCreationMode(lView)) {\n        lView[FLAGS] &= ~4 /* CreationMode */;\n    }\n    else {\n        try {\n            resetPreOrderHookFlags(lView);\n            safeToRunHooks && executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode, 2 /* AfterViewInitHooksToBeRun */, undefined);\n        }\n        finally {\n            // Views are clean and in update mode after being checked, so these bits are cleared\n            lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);\n            lView[BINDING_INDEX] = tView.bindingStartIndex;\n        }\n    }\n    enterView(newView, null);\n}\n/** @type {?} */\nlet _selectedIndex = -1;\n/**\n * Gets the most recent index passed to {\\@link select}\n *\n * Used with {\\@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n * @return {?}\n */\nfunction getSelectedIndex() {\n    return _selectedIndex;\n}\n/**\n * Sets the most recent index passed to {\\@link select}\n *\n * Used with {\\@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n * @param {?} index\n * @return {?}\n */\nfunction setSelectedIndex(index) {\n    _selectedIndex = index;\n    // we have now jumped to another element\n    // therefore the state is stale\n    resetStylingState();\n}\n/** @type {?} */\nlet _currentNamespace = null;\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµnamespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg';\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµnamespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµnamespaceHTML() {\n    namespaceHTMLInternal();\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n * @return {?}\n */\nfunction namespaceHTMLInternal() {\n    _currentNamespace = null;\n}\n/**\n * @return {?}\n */\nfunction getNamespace() {\n    return _currentNamespace;\n}\n/** @type {?} */\nlet _currentSanitizer;\n/**\n * @param {?} sanitizer\n * @return {?}\n */\nfunction setCurrentStyleSanitizer(sanitizer) {\n    _currentSanitizer = sanitizer;\n}\n/**\n * @return {?}\n */\nfunction getCurrentStyleSanitizer() {\n    return _currentSanitizer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * @param {?} value\n * @return {?}\n */\nfunction renderStringify(value) {\n    if (typeof value === 'string')\n        return value;\n    if (value == null)\n        return '';\n    return '' + value;\n}\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n * @param {?} value\n * @return {?}\n */\nfunction stringifyForError(value) {\n    if (typeof value === 'function')\n        return value.name || value.toString();\n    if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n        return value.type.name || value.type.toString();\n    }\n    return renderStringify(value);\n}\nconst Éµ0$2 = /**\n * @return {?}\n */\n() => (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n    setTimeout // everything else\n).bind(_global);\n/** @type {?} */\nconst defaultScheduler = ((Éµ0$2))();\n/**\n *\n * \\@codeGenApi\n * @param {?} element\n * @return {?}\n */\nfunction ÉµÉµresolveWindow(element) {\n    return { name: 'window', target: element.ownerDocument.defaultView };\n}\n/**\n *\n * \\@codeGenApi\n * @param {?} element\n * @return {?}\n */\nfunction ÉµÉµresolveDocument(element) {\n    return { name: 'document', target: element.ownerDocument };\n}\n/**\n *\n * \\@codeGenApi\n * @param {?} element\n * @return {?}\n */\nfunction ÉµÉµresolveBody(element) {\n    return { name: 'body', target: element.ownerDocument.body };\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n * @type {?}\n */\nconst INTERPOLATION_DELIMITER = `ï¿½`;\n/**\n * Determines whether or not the given string is a property metadata string.\n * See storeBindingMetadata().\n * @param {?} str\n * @return {?}\n */\nfunction isPropMetadataString(str) {\n    return str.indexOf(INTERPOLATION_DELIMITER) >= 0;\n}\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapFn(value) {\n    if (value instanceof Function) {\n        return value();\n    }\n    else {\n        return value;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAP_BASED_ENTRY_PROP_NAME = '--MAP--';\n/** @type {?} */\nconst TEMPLATE_DIRECTIVE_INDEX = 0;\n/**\n * Creates a new instance of the `TStylingContext`.\n *\n * The `TStylingContext` is used as a manifest of all style or all class bindings on\n * an element. Because it is a T-level data-structure, it is only created once per\n * tNode for styles and for classes. This function allocates a new instance of a\n * `TStylingContext` with the initial values (see `interfaces.ts` for more info).\n * @param {?=} initialStyling\n * @return {?}\n */\nfunction allocTStylingContext(initialStyling) {\n    // because map-based bindings deal with a dynamic set of values, there\n    // is no way to know ahead of time whether or not sanitization is required.\n    // For this reason the configuration will always mark sanitization as active\n    // (this means that when map-based values are applied then sanitization will\n    // be checked against each property).\n    /** @type {?} */\n    const mapBasedConfig = 1 /* SanitizationRequired */;\n    return [\n        initialStyling || [''],\n        0 /* Initial */,\n        TEMPLATE_DIRECTIVE_INDEX,\n        mapBasedConfig,\n        0,\n        MAP_BASED_ENTRY_PROP_NAME,\n    ];\n}\n/**\n * Sets the provided directive as the last directive index in the provided `TStylingContext`.\n *\n * Styling in Angular can be applied from the template as well as multiple sources of\n * host bindings. This means that each binding function (the template function or the\n * hostBindings functions) will generate styling instructions as well as a styling\n * apply function (i.e. `stylingApply()`). Because host bindings functions and the\n * template function are independent from one another this means that the styling apply\n * function will be called multiple times. By tracking the last directive index (which\n * is what happens in this function) the styling algorithm knows exactly when to flush\n * styling (which is when the last styling apply function is executed).\n * @param {?} context\n * @param {?} lastDirectiveIndex\n * @return {?}\n */\nfunction updateLastDirectiveIndex(context, lastDirectiveIndex) {\n    if (lastDirectiveIndex === TEMPLATE_DIRECTIVE_INDEX) {\n        /** @type {?} */\n        const currentValue = context[2 /* LastDirectiveIndexPosition */];\n        if (currentValue > TEMPLATE_DIRECTIVE_INDEX) {\n            // This means that a directive or two contained a host bindings function, but\n            // now the template function also contains styling. When this combination of sources\n            // comes up then we need to tell the context to store the state between updates\n            // (because host bindings evaluation happens after template binding evaluation).\n            markContextToPersistState(context);\n        }\n    }\n    else {\n        context[2 /* LastDirectiveIndexPosition */] = lastDirectiveIndex;\n    }\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getConfig(context) {\n    return context[1 /* ConfigPosition */];\n}\n/**\n * @param {?} context\n * @param {?} value\n * @return {?}\n */\nfunction setConfig(context, value) {\n    context[1 /* ConfigPosition */] = value;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getProp(context, index) {\n    return (/** @type {?} */ (context[index + 2 /* PropOffset */]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPropConfig(context, index) {\n    return ((/** @type {?} */ (context[index + 0 /* ConfigAndGuardOffset */]))) &\n        1 /* Mask */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isSanitizationRequired(context, index) {\n    return (getPropConfig(context, index) & 1 /* SanitizationRequired */) > 0;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getGuardMask(context, index) {\n    /** @type {?} */\n    const configGuardValue = (/** @type {?} */ (context[index + 0 /* ConfigAndGuardOffset */]));\n    return configGuardValue >> 1 /* TotalBits */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} maskValue\n * @return {?}\n */\nfunction setGuardMask(context, index, maskValue) {\n    /** @type {?} */\n    const config = getPropConfig(context, index);\n    /** @type {?} */\n    const guardMask = maskValue << 1 /* TotalBits */;\n    context[index + 0 /* ConfigAndGuardOffset */] = config | guardMask;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getValuesCount(context, index) {\n    return (/** @type {?} */ (context[index + 1 /* ValuesCountOffset */]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} offset\n * @return {?}\n */\nfunction getBindingValue(context, index, offset) {\n    return (/** @type {?} */ (context[index + 3 /* BindingsStartOffset */ + offset]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getDefaultValue(context, index) {\n    /** @type {?} */\n    const valuesCount = getValuesCount(context, index);\n    return (/** @type {?} */ (context[index + 3 /* BindingsStartOffset */ + valuesCount - 1]));\n}\n/**\n * Temporary function which determines whether or not a context is\n * allowed to be flushed based on the provided directive index.\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction allowStylingFlush(context, index) {\n    return (context && index === context[2 /* LastDirectiveIndexPosition */]) ? true :\n        false;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction lockContext(context) {\n    setConfig(context, getConfig(context) | 1 /* Locked */);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction isContextLocked(context) {\n    return (getConfig(context) & 1 /* Locked */) > 0;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction stateIsPersisted(context) {\n    return (getConfig(context) & 2 /* PersistStateValues */) > 0;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction markContextToPersistState(context) {\n    setConfig(context, getConfig(context) | 2 /* PersistStateValues */);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getPropValuesStartPosition(context) {\n    return 6 /* MapBindingsBindingsStartPosition */ +\n        context[4 /* MapBindingsValuesCountPosition */];\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction isMapBased(prop) {\n    return prop === MAP_BASED_ENTRY_PROP_NAME;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasValueChanged(a, b) {\n    /** @type {?} */\n    let compareValueA = Array.isArray(a) ? a[0 /* RawValuePosition */] : a;\n    /** @type {?} */\n    let compareValueB = Array.isArray(b) ? b[0 /* RawValuePosition */] : b;\n    // these are special cases for String based values (which are created as artifacts\n    // when sanitization is bypassed on a particular value)\n    if (compareValueA instanceof String) {\n        compareValueA = compareValueA.toString();\n    }\n    if (compareValueB instanceof String) {\n        compareValueB = compareValueB.toString();\n    }\n    return isDifferent(compareValueA, compareValueB);\n}\n/**\n * Determines whether the provided styling value is truthy or falsy.\n * @param {?} value\n * @return {?}\n */\nfunction isStylingValueDefined(value) {\n    // the reason why null is compared against is because\n    // a CSS class value that is set to `false` must be\n    // respected (otherwise it would be treated as falsy).\n    // Empty string values are because developers usually\n    // set a value to an empty string to remove it.\n    return value != null && value !== '';\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?=} separator\n * @return {?}\n */\nfunction concatString(a, b, separator = ' ') {\n    return a + ((b.length && a.length) ? separator : '') + b;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hyphenate(value) {\n    return value.replace(/[a-z][A-Z]/g, (/**\n     * @param {?} v\n     * @return {?}\n     */\n    v => v.charAt(0) + '-' + v.charAt(1))).toLowerCase();\n}\n/**\n * Returns an instance of `StylingMapArray`.\n *\n * This function is designed to find an instance of `StylingMapArray` in case it is stored\n * inside of an instance of `TStylingContext`. When a styling context is created it\n * will copy over an initial styling values from the tNode (which are stored as a\n * `StylingMapArray` on the `tNode.classes` or `tNode.styles` values).\n * @param {?} value\n * @return {?}\n */\nfunction getStylingMapArray(value) {\n    return isStylingContext(value) ?\n        ((/** @type {?} */ (value)))[0 /* InitialStylingValuePosition */] :\n        value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isStylingContext(value) {\n    // the StylingMapArray is in the format of [initial, prop, string, prop, string]\n    // and this is the defining value to distinguish between arrays\n    return Array.isArray(value) &&\n        value.length >= 6 /* MapBindingsBindingsStartPosition */ &&\n        typeof value[1] !== 'string';\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getInitialStylingValue(context) {\n    /** @type {?} */\n    const map = getStylingMapArray(context);\n    return map && ((/** @type {?} */ (map[0 /* RawValuePosition */]))) || '';\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction hasClassInput(tNode) {\n    return (tNode.flags & 8 /* hasClassInput */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction hasStyleInput(tNode) {\n    return (tNode.flags & 16 /* hasStyleInput */) !== 0;\n}\n/**\n * @param {?} map\n * @param {?} index\n * @return {?}\n */\nfunction getMapProp(map, index) {\n    return (/** @type {?} */ (map[index + 0 /* PropOffset */]));\n}\n/**\n * @param {?} map\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction setMapValue(map, index, value) {\n    map[index + 1 /* ValueOffset */] = value;\n}\n/**\n * @param {?} map\n * @param {?} index\n * @return {?}\n */\nfunction getMapValue(map, index) {\n    return (/** @type {?} */ (map[index + 1 /* ValueOffset */]));\n}\n/**\n * @param {?} classes\n * @return {?}\n */\nfunction forceClassesAsString(classes) {\n    if (classes && typeof classes !== 'string') {\n        classes = Object.keys(classes).join(' ');\n    }\n    return ((/** @type {?} */ (classes))) || '';\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction forceStylesAsString(styles) {\n    /** @type {?} */\n    let str = '';\n    if (styles) {\n        /** @type {?} */\n        const props = Object.keys(styles);\n        for (let i = 0; i < props.length; i++) {\n            /** @type {?} */\n            const prop = props[i];\n            str = concatString(str, `${prop}:${styles[prop]}`, ';');\n        }\n    }\n    return str;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and than\n * use that time for rendering.\n *\n * At runtime we can then use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n/** @enum {number} */\nconst RendererStyleFlags3 = {\n    Important: 1,\n    DashCase: 2,\n};\nRendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n *\n * @record\n */\nfunction ObjectOrientedRenderer3() { }\nif (false) {\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    ObjectOrientedRenderer3.prototype.createComment = function (data) { };\n    /**\n     * @param {?} tagName\n     * @return {?}\n     */\n    ObjectOrientedRenderer3.prototype.createElement = function (tagName) { };\n    /**\n     * @param {?} namespace\n     * @param {?} tagName\n     * @return {?}\n     */\n    ObjectOrientedRenderer3.prototype.createElementNS = function (namespace, tagName) { };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    ObjectOrientedRenderer3.prototype.createTextNode = function (data) { };\n    /**\n     * @param {?} selectors\n     * @return {?}\n     */\n    ObjectOrientedRenderer3.prototype.querySelector = function (selectors) { };\n}\n/**\n * Returns whether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nfunction isProceduralRenderer(renderer) {\n    return !!(((/** @type {?} */ (renderer))).listen);\n}\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n * @record\n */\nfunction ProceduralRenderer3() { }\nif (false) {\n    /**\n     * This property is allowed to be null / undefined,\n     * in which case the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?|undefined}\n     */\n    ProceduralRenderer3.prototype.destroyNode;\n    /**\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.destroy = function () { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.createComment = function (value) { };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.createElement = function (name, namespace) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.createText = function (value) { };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.appendChild = function (parent, newChild) { };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.insertBefore = function (parent, newChild, refChild) { };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @param {?=} isHostElement\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.removeChild = function (parent, oldChild, isHostElement) { };\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.selectRootElement = function (selectorOrNode) { };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.parentNode = function (node) { };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.nextSibling = function (node) { };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.setAttribute = function (el, name, value, namespace) { };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.removeAttribute = function (el, name, namespace) { };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.addClass = function (el, name) { };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.removeClass = function (el, name) { };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?=} flags\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.setStyle = function (el, style, value, flags) { };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?=} flags\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.removeStyle = function (el, style, flags) { };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.setProperty = function (el, name, value) { };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.setValue = function (node, value) { };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.listen = function (target, eventName, callback) { };\n}\n/**\n * @record\n */\nfunction RendererFactory3() { }\nif (false) {\n    /**\n     * @param {?} hostElement\n     * @param {?} rendererType\n     * @return {?}\n     */\n    RendererFactory3.prototype.createRenderer = function (hostElement, rendererType) { };\n    /**\n     * @return {?}\n     */\n    RendererFactory3.prototype.begin = function () { };\n    /**\n     * @return {?}\n     */\n    RendererFactory3.prototype.end = function () { };\n}\nconst Éµ0$3 = /**\n * @param {?} hostElement\n * @param {?} rendererType\n * @return {?}\n */\n(hostElement, rendererType) => { return document; };\n/** @type {?} */\nconst domRendererFactory3 = {\n    createRenderer: (Éµ0$3)\n};\n/**\n * Subset of API needed for appending elements and text nodes.\n * @record\n */\nfunction RNode() { }\nif (false) {\n    /**\n     * Returns the parent Element, Document, or DocumentFragment\n     * @type {?}\n     */\n    RNode.prototype.parentNode;\n    /**\n     * Returns the parent Element if there is one\n     * @type {?}\n     */\n    RNode.prototype.parentElement;\n    /**\n     * Gets the Node immediately following this one in the parent's childNodes\n     * @type {?}\n     */\n    RNode.prototype.nextSibling;\n    /**\n     * Removes a child from the current node and returns the removed node\n     * @param {?} oldChild the child node to remove\n     * @return {?}\n     */\n    RNode.prototype.removeChild = function (oldChild) { };\n    /**\n     * Insert a child node.\n     *\n     * Used exclusively for adding View root nodes into ViewAnchor location.\n     * @param {?} newChild\n     * @param {?} refChild\n     * @param {?} isViewRoot\n     * @return {?}\n     */\n    RNode.prototype.insertBefore = function (newChild, refChild, isViewRoot) { };\n    /**\n     * Append a child node.\n     *\n     * Used exclusively for building up DOM which are static (ie not View roots)\n     * @param {?} newChild\n     * @return {?}\n     */\n    RNode.prototype.appendChild = function (newChild) { };\n}\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n * @record\n */\nfunction RElement() { }\nif (false) {\n    /** @type {?} */\n    RElement.prototype.style;\n    /** @type {?} */\n    RElement.prototype.classList;\n    /** @type {?} */\n    RElement.prototype.className;\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    RElement.prototype.setAttribute = function (name, value) { };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    RElement.prototype.removeAttribute = function (name) { };\n    /**\n     * @param {?} namespaceURI\n     * @param {?} qualifiedName\n     * @param {?} value\n     * @return {?}\n     */\n    RElement.prototype.setAttributeNS = function (namespaceURI, qualifiedName, value) { };\n    /**\n     * @param {?} type\n     * @param {?} listener\n     * @param {?=} useCapture\n     * @return {?}\n     */\n    RElement.prototype.addEventListener = function (type, listener, useCapture) { };\n    /**\n     * @param {?} type\n     * @param {?=} listener\n     * @param {?=} options\n     * @return {?}\n     */\n    RElement.prototype.removeEventListener = function (type, listener, options) { };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    RElement.prototype.setProperty = function (name, value) { };\n}\n/**\n * @record\n */\nfunction RCssStyleDeclaration() { }\nif (false) {\n    /**\n     * @param {?} propertyName\n     * @return {?}\n     */\n    RCssStyleDeclaration.prototype.removeProperty = function (propertyName) { };\n    /**\n     * @param {?} propertyName\n     * @param {?} value\n     * @param {?=} priority\n     * @return {?}\n     */\n    RCssStyleDeclaration.prototype.setProperty = function (propertyName, value, priority) { };\n}\n/**\n * @record\n */\nfunction RDomTokenList() { }\nif (false) {\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    RDomTokenList.prototype.add = function (token) { };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    RDomTokenList.prototype.remove = function (token) { };\n}\n/**\n * @record\n */\nfunction RText() { }\nif (false) {\n    /** @type {?} */\n    RText.prototype.textContent;\n}\n/**\n * @record\n */\nfunction RComment() { }\nif (false) {\n    /** @type {?} */\n    RComment.prototype.textContent;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nconst unusedValueExportToPlacateAjd$3 = 1;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n *\n * @param {?} native The element that the attributes will be assigned to\n * @param {?} attrs The attribute array of values that will be assigned to the element\n * @return {?} the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(native, attrs) {\n    /** @type {?} */\n    const renderer = getLView()[RENDERER];\n    /** @type {?} */\n    const isProc = isProceduralRenderer(renderer);\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const value = attrs[i];\n        if (typeof value === 'number') {\n            // only namespaces are supported. Other value types (such as style/class\n            // entries) are not supported in this function.\n            if (value !== 0 /* NamespaceURI */) {\n                break;\n            }\n            // we just landed on the marker value ... therefore\n            // we should skip to the next entry\n            i++;\n            /** @type {?} */\n            const namespaceURI = (/** @type {?} */ (attrs[i++]));\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (attrs[i++]));\n            /** @type {?} */\n            const attrVal = (/** @type {?} */ (attrs[i++]));\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProc ?\n                ((/** @type {?} */ (renderer))).setAttribute(native, attrName, attrVal, namespaceURI) :\n                native.setAttributeNS(namespaceURI, attrName, attrVal);\n        }\n        else {\n            // attrName is string;\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (value));\n            /** @type {?} */\n            const attrVal = attrs[++i];\n            // Standard attributes\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            if (isAnimationProp(attrName)) {\n                if (isProc) {\n                    ((/** @type {?} */ (renderer))).setProperty(native, attrName, attrVal);\n                }\n            }\n            else {\n                isProc ?\n                    ((/** @type {?} */ (renderer)))\n                        .setAttribute(native, (/** @type {?} */ (attrName)), (/** @type {?} */ (attrVal))) :\n                    native.setAttribute((/** @type {?} */ (attrName)), (/** @type {?} */ (attrVal)));\n            }\n            i++;\n        }\n    }\n    // another piece of code may iterate over the same attributes array. Therefore\n    // it may be helpful to return the exact spot where the attributes array exited\n    // whether by running into an unsupported marker or if all the static values were\n    // iterated over.\n    return i;\n}\n/**\n * @param {?} attrs\n * @param {?} startIndex\n * @return {?}\n */\nfunction attrsStylingIndexOf(attrs, startIndex) {\n    for (let i = startIndex; i < attrs.length; i++) {\n        /** @type {?} */\n        const val = attrs[i];\n        if (val === 1 /* Classes */ || val === 2 /* Styles */) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param {?} marker The attribute marker to test.\n * @return {?} true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nfunction isNameOnlyAttributeMarker(marker) {\n    return marker === 3 /* Bindings */ || marker === 4 /* Template */ ||\n        marker === 6 /* I18n */;\n}\n/** @type {?} */\nconst ANIMATION_PROP_PREFIX = '@';\n/**\n * @param {?} name\n * @return {?}\n */\nfunction isAnimationProp(name) {\n    return name[0] === ANIMATION_PROP_PREFIX;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction getParentInjectorIndex(parentLocation) {\n    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) & 32767 /* InjectorIndexMask */;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction getParentInjectorViewOffset(parentLocation) {\n    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) >> 16 /* ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @return {?} The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n    /** @type {?} */\n    let viewOffset = getParentInjectorViewOffset(location);\n    /** @type {?} */\n    let parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));\n        viewOffset--;\n    }\n    return parentView;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param {?} lView the lView whose parent to get\n * @return {?}\n */\nfunction getLViewParent(lView) {\n    ngDevMode && assertLView(lView);\n    /** @type {?} */\n    const parent = lView[PARENT];\n    return isLContainer(parent) ? (/** @type {?} */ (parent[PARENT])) : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} componentOrLView any component or `LView`\n * @return {?}\n */\nfunction getRootView(componentOrLView) {\n    ngDevMode && assertDefined(componentOrLView, 'component');\n    /** @type {?} */\n    let lView = isLView(componentOrLView) ? componentOrLView : (/** @type {?} */ (readPatchedLView(componentOrLView)));\n    while (lView && !(lView[FLAGS] & 512 /* IsRoot */)) {\n        lView = (/** @type {?} */ (getLViewParent(lView)));\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Given an `LView`, find the closest declaration view which is not an embedded view.\n *\n * This method searches for the `LView` associated with the component which declared the `LView`.\n *\n * This function may return itself if the `LView` passed in is not an embedded `LView`. Otherwise\n * it walks the declaration parents until it finds a component view (non-embedded-view.)\n *\n * @param {?} lView LView for which we want a host element node\n * @return {?} The host node\n */\nfunction findComponentView(lView) {\n    /** @type {?} */\n    let rootTNode = lView[T_HOST];\n    while (rootTNode !== null && rootTNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n        lView = (/** @type {?} */ (lView[DECLARATION_VIEW]));\n        rootTNode = lView[T_HOST];\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated. It does this by walking the parent views until it\n * gets to the root view, then getting the context off of that.\n *\n * @param {?} viewOrComponent the `LView` or component to get the root context for.\n * @return {?}\n */\nfunction getRootContext(viewOrComponent) {\n    /** @type {?} */\n    const rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n    return (/** @type {?} */ (rootView[CONTEXT]));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * \\@Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * \\@Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n * @type {?}\n */\nlet includeViewProviders = true;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction setIncludeViewProviders(v) {\n    /** @type {?} */\n    const oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n * @type {?}\n */\nconst BLOOM_SIZE = 256;\n/** @type {?} */\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * Counter used to generate unique IDs for directives.\n * @type {?}\n */\nlet nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injectorIndex The index of the node injector where this token should be registered\n * @param {?} tView The TView for the injector's bloom filters\n * @param {?} type The directive token to register\n * @return {?}\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    let id = typeof type !== 'string' ? ((/** @type {?} */ (type)))[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = ((/** @type {?} */ (type)))[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    /** @type {?} */\n    const bloomBit = id & BLOOM_MASK;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    /** @type {?} */\n    const mask = 1 << bloomBit;\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n    /** @type {?} */\n    const b7 = bloomBit & 0x80;\n    /** @type {?} */\n    const b6 = bloomBit & 0x40;\n    /** @type {?} */\n    const b5 = bloomBit & 0x20;\n    /** @type {?} */\n    const tData = (/** @type {?} */ (tView.data));\n    if (b7) {\n        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n    }\n    else {\n        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n    }\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} tNode for which an injector should be retrieved / created.\n * @param {?} hostView View where the node is stored\n * @return {?} Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, hostView) {\n    /** @type {?} */\n    const existingInjectorIndex = getInjectorIndex(tNode, hostView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    /** @type {?} */\n    const tView = hostView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tNode.injectorIndex = hostView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(hostView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n        ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 1 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n    }\n    /** @type {?} */\n    const parentLoc = getParentInjectorLocation(tNode, hostView);\n    /** @type {?} */\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    /** @type {?} */\n    const parentLView = getParentInjectorView(parentLoc, hostView);\n    /** @type {?} */\n    const injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        /** @type {?} */\n        const parentData = (/** @type {?} */ (parentLView[TVIEW].data));\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (let i = 0; i < 8; i++) {\n            hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n    return injectorIndex;\n}\n/**\n * @param {?} arr\n * @param {?} footer\n * @return {?}\n */\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nfunction getInjectorIndex(tNode, hostView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n        return -1;\n    }\n    else {\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nfunction getParentInjectorLocation(tNode, view) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        return (/** @type {?} */ (tNode.parent.injectorIndex)); // ViewOffset is 0\n    }\n    // For most cases, the parent injector index can be found on the host node (e.g. for component\n    // or container), so this loop will be skipped, but we must keep the loop here to support\n    // the rarer case of deeply nested <ng-template> tags or inline views.\n    /** @type {?} */\n    let hostTNode = view[T_HOST];\n    /** @type {?} */\n    let viewOffset = 1;\n    while (hostTNode && hostTNode.injectorIndex === -1) {\n        view = (/** @type {?} */ (view[DECLARATION_VIEW]));\n        hostTNode = view ? view[T_HOST] : null;\n        viewOffset++;\n    }\n    return hostTNode ?\n        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :\n        (/** @type {?} */ (-1));\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param {?} injectorIndex\n * @param {?} tView\n * @param {?} token The type or the injection token to be made public\n * @return {?}\n */\nfunction diPublicInInjector(injectorIndex, tView, token) {\n    bloomAdd(injectorIndex, tView, token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@publicApi\n * @param {?} tNode\n * @param {?} attrNameToInject\n * @return {?}\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    if (attrNameToInject === 'class') {\n        return getInitialStylingValue(tNode.classes);\n    }\n    if (attrNameToInject === 'style') {\n        return getInitialStylingValue(tNode.styles);\n    }\n    /** @type {?} */\n    const attrs = tNode.attrs;\n    if (attrs) {\n        /** @type {?} */\n        const attrsLength = attrs.length;\n        /** @type {?} */\n        let i = 0;\n        while (i < attrsLength) {\n            /** @type {?} */\n            const value = attrs[i];\n            // If we hit a `Bindings` or `Template` marker then we are done.\n            if (isNameOnlyAttributeMarker(value))\n                break;\n            // Skip namespaced attributes\n            if (value === 0 /* NamespaceURI */) {\n                // we skip the next two values\n                // as namespaced attributes looks like\n                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n                // 'existValue', ...]\n                i = i + 2;\n            }\n            else if (typeof value === 'number') {\n                // Skip to the first value of the marked attribute.\n                i++;\n                while (i < attrsLength && typeof attrs[i] === 'string') {\n                    i++;\n                }\n            }\n            else if (value === attrNameToInject) {\n                return (/** @type {?} */ (attrs[i + 1]));\n            }\n            else {\n                i = i + 2;\n            }\n        }\n    }\n    return null;\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. Negative values are reserved for special objects.\n *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @template T\n * @param {?} tNode The Node where the search for the injector should start\n * @param {?} lView The `LView` that contains the `tNode`\n * @param {?} token The token to look for\n * @param {?=} flags Injection flags\n * @param {?=} notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @return {?} the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n    if (tNode) {\n        /** @type {?} */\n        const bloomHash = bloomHashBitOrFactory(token);\n        // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n        // so just call the factory function to create it.\n        if (typeof bloomHash === 'function') {\n            /** @type {?} */\n            const savePreviousOrParentTNode = getPreviousOrParentTNode();\n            /** @type {?} */\n            const saveLView = getLView();\n            setTNodeAndViewData(tNode, lView);\n            try {\n                /** @type {?} */\n                const value = bloomHash();\n                if (value == null && !(flags & InjectFlags.Optional)) {\n                    throw new Error(`No provider for ${stringifyForError(token)}!`);\n                }\n                else {\n                    return value;\n                }\n            }\n            finally {\n                setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n            }\n        }\n        else if (typeof bloomHash == 'number') {\n            if (bloomHash === -1) {\n                // `-1` is a special value used to identify `Injector` types.\n                return (/** @type {?} */ (new NodeInjector(tNode, lView)));\n            }\n            // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n            // A reference to the previous injector TView that was found while climbing the element\n            // injector tree. This is used to know if viewProviders can be accessed on the current\n            // injector.\n            /** @type {?} */\n            let previousTView = null;\n            /** @type {?} */\n            let injectorIndex = getInjectorIndex(tNode, lView);\n            /** @type {?} */\n            let parentLocation = NO_PARENT_INJECTOR;\n            /** @type {?} */\n            let hostTElementNode = flags & InjectFlags.Host ? findComponentView(lView)[T_HOST] : null;\n            // If we should skip this injector, or if there is no injector on this node, start by\n            // searching\n            // the parent injector.\n            if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n                parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                    lView[injectorIndex + PARENT_INJECTOR];\n                if (!shouldSearchParent(flags, false)) {\n                    injectorIndex = -1;\n                }\n                else {\n                    previousTView = lView[TVIEW];\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n            }\n            // Traverse up the injector tree until we find a potential match or until we know there\n            // *isn't* a match.\n            while (injectorIndex !== -1) {\n                parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n                // Check the current injector. If it matches, see if it contains token.\n                /** @type {?} */\n                const tView = lView[TVIEW];\n                if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                    // At this point, we have an injector which *may* contain the token, so we step through\n                    // the providers and directives associated with the injector's corresponding node to get\n                    // the instance.\n                    /** @type {?} */\n                    const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                    if (instance !== NOT_FOUND) {\n                        return instance;\n                    }\n                }\n                if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n                    bloomHasToken(bloomHash, injectorIndex, lView)) {\n                    // The def wasn't found anywhere on this node, so it was a false positive.\n                    // Traverse up the tree and continue searching.\n                    previousTView = tView;\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n                else {\n                    // If we should not search parent OR If the ancestor bloom filter value does not have the\n                    // bit corresponding to the directive we can give up on traversing up to find the specific\n                    // injector.\n                    injectorIndex = -1;\n                }\n            }\n        }\n    }\n    if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        /** @type {?} */\n        const moduleInjector = lView[INJECTOR$1];\n        // switch to `injectInjectorOnly` implementation for module injector, since module injector\n        // should not have access to Component/Directive DI scope (that may happen through\n        // `directiveInject` implementation)\n        /** @type {?} */\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            if (moduleInjector) {\n                return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n            else {\n                return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n        }\n        finally {\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    if (flags & InjectFlags.Optional) {\n        return notFoundValue;\n    }\n    else {\n        throw new Error(`NodeInjector: NOT_FOUND [${stringifyForError(token)}]`);\n    }\n}\n/** @type {?} */\nconst NOT_FOUND = {};\n/**\n * @template T\n * @param {?} injectorIndex\n * @param {?} lView\n * @param {?} token\n * @param {?} previousTView\n * @param {?} flags\n * @param {?} hostTElementNode\n * @return {?}\n */\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n    /** @type {?} */\n    const currentTView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (currentTView.data[injectorIndex + TNODE]));\n    // First, we need to determine if view providers can be accessed by the starting element.\n    // There are two possibities\n    /** @type {?} */\n    const canAccessViewProviders = previousTView == null ?\n        // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        (isComponent(tNode) && includeViewProviders) :\n        // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        (previousTView != currentTView && (tNode.type === 3 /* Element */));\n    // This special case happens when there is a @host on the inject and when we are searching\n    // on the host element node.\n    /** @type {?} */\n    const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n    /** @type {?} */\n    const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(currentTView.data, lView, injectableIdx, (/** @type {?} */ (tNode)));\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @template T\n * @param {?} tNode TNode on which directives are present.\n * @param {?} tView The tView we are currently processing\n * @param {?} token Provider token or type of a directive to look for.\n * @param {?} canAccessViewProviders Whether view providers should be considered.\n * @param {?} isHostSpecialCase Whether the host special case applies.\n * @return {?} Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n    /** @type {?} */\n    const nodeProviderIndexes = tNode.providerIndexes;\n    /** @type {?} */\n    const tInjectables = tView.data;\n    /** @type {?} */\n    const injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const directivesStart = tNode.directiveStart;\n    /** @type {?} */\n    const directiveEnd = tNode.directiveEnd;\n    /** @type {?} */\n    const cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n    /** @type {?} */\n    const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n    // When the host special case applies, only the viewProviders and the component are visible\n    /** @type {?} */\n    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n    for (let i = startingIndex; i < endIndex; i++) {\n        /** @type {?} */\n        const providerTokenOrDef = (/** @type {?} */ (tInjectables[i]));\n        if (i < directivesStart && token === providerTokenOrDef ||\n            i >= directivesStart && ((/** @type {?} */ (providerTokenOrDef))).type === token) {\n            return i;\n        }\n    }\n    if (isHostSpecialCase) {\n        /** @type {?} */\n        const dirDef = (/** @type {?} */ (tInjectables[directivesStart]));\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n            return directivesStart;\n        }\n    }\n    return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n * @param {?} tData\n * @param {?} lData\n * @param {?} index\n * @param {?} tNode\n * @return {?}\n */\nfunction getNodeInjectable(tData, lData, index, tNode) {\n    /** @type {?} */\n    let value = lData[index];\n    if (isFactory(value)) {\n        /** @type {?} */\n        const factory = value;\n        if (factory.resolving) {\n            throw new Error(`Circular dep for ${stringifyForError(tData[index])}`);\n        }\n        /** @type {?} */\n        const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        /** @type {?} */\n        let previousInjectImplementation;\n        if (factory.injectImpl) {\n            previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n        }\n        /** @type {?} */\n        const savePreviousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        const saveLView = getLView();\n        setTNodeAndViewData(tNode, lData);\n        try {\n            value = lData[index] = factory.factory(undefined, tData, lData, tNode);\n        }\n        finally {\n            if (factory.injectImpl)\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param {?} token the injection token\n * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nfunction bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    /** @type {?} */\n    const tokenId = ((/** @type {?} */ (token)))[NG_ELEMENT_ID];\n    // Negative token IDs are used for special objects such as `Injector`\n    return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;\n}\n/**\n * @param {?} bloomHash\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @return {?}\n */\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    /** @type {?} */\n    const mask = 1 << bloomHash;\n    /** @type {?} */\n    const b7 = bloomHash & 0x80;\n    /** @type {?} */\n    const b6 = bloomHash & 0x40;\n    /** @type {?} */\n    const b5 = bloomHash & 0x20;\n    // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n    // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n    // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n    /** @type {?} */\n    let value;\n    if (b7) {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n    }\n    else {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n    }\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/**\n * Returns true if flags prevent parent injector from being searched for tokens\n * @param {?} flags\n * @param {?} isFirstHostTNode\n * @return {?}\n */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nclass NodeInjector {\n    /**\n     * @param {?} _tNode\n     * @param {?} _lView\n     */\n    constructor(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NodeInjector.prototype._tNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    NodeInjector.prototype._lView;\n}\n/**\n * \\@codeGenApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction ÉµÉµgetFactoryOf(type) {\n    /** @type {?} */\n    const typeAny = (/** @type {?} */ (type));\n    /** @type {?} */\n    const def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n        getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n/**\n * \\@codeGenApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction ÉµÉµgetInheritedFactory(type) {\n    /** @type {?} */\n    const proto = (/** @type {?} */ (Object.getPrototypeOf(type.prototype).constructor));\n    /** @type {?} */\n    const factory = ÉµÉµgetFactoryOf(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return (/**\n         * @param {?} t\n         * @return {?}\n         */\n        (t) => new t());\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ERROR_TYPE = 'ngType';\nconst ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nconst ERROR_LOGGER = 'ngErrorLogger';\nfunction wrappedError(message, originalError) {\n    const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n    const error = Error(msg);\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getType(error) {\n    return ((/** @type {?} */ (error)))[ERROR_TYPE];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getDebugContext(error) {\n    return ((/** @type {?} */ (error)))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getOriginalError(error) {\n    return ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getErrorLogger(error) {\n    return ((/** @type {?} */ (error)))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console, ...values) {\n    ((/** @type {?} */ (console.error)))(...values);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nclass ErrorHandler {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    handleError(error) {\n        /** @type {?} */\n        const originalError = this._findOriginalError(error);\n        /** @type {?} */\n        const context = this._findContext(error);\n        // Note: Browser consoles show the place from where console.error was called.\n        // We can use this to give users additional information about the error.\n        /** @type {?} */\n        const errorLogger = getErrorLogger(error);\n        errorLogger(this._console, `ERROR`, error);\n        if (originalError) {\n            errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    _findContext(error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    _findOriginalError(error) {\n        /** @type {?} */\n        let e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ErrorHandler.prototype._console;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A schema definition associated with an NgModule.\n *\n * @see `\\@NgModule`, `CUSTOM_ELEMENTS_SCHEMA`, `NO_ERRORS_SCHEMA`\n *\n * @param name The name of a defined schema.\n *\n * \\@publicApi\n * @record\n */\nfunction SchemaMetadata() { }\nif (false) {\n    /** @type {?} */\n    SchemaMetadata.prototype.name;\n}\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * \\@publicApi\n * @type {?}\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * \\@publicApi\n * @type {?}\n */\nconst NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/** @enum {string} */\nconst BypassType = {\n    Url: 'Url',\n    Html: 'Html',\n    ResourceUrl: 'ResourceUrl',\n    Script: 'Script',\n    Style: 'Style',\n};\n/**\n * A branded trusted string used with sanitization.\n *\n * See: {\\@link TrustedHtmlString}, {\\@link TrustedResourceUrlString}, {\\@link TrustedScriptString},\n * {\\@link TrustedStyleString}, {\\@link TrustedUrlString}\n * @record\n */\nfunction TrustedString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType;*/\n}\n/**\n * A branded trusted string used with sanitization of `html` strings.\n *\n * See: {\\@link bypassSanitizationTrustHtml} and {\\@link htmlSanitizer}.\n * @record\n */\nfunction TrustedHtmlString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType.Html;*/\n}\n/**\n * A branded trusted string used with sanitization of `style` strings.\n *\n * See: {\\@link bypassSanitizationTrustStyle} and {\\@link styleSanitizer}.\n * @record\n */\nfunction TrustedStyleString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType.Style;*/\n}\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustScript} and {\\@link scriptSanitizer}.\n * @record\n */\nfunction TrustedScriptString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType.Script;*/\n}\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustUrl} and {\\@link urlSanitizer}.\n * @record\n */\nfunction TrustedUrlString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType.Url;*/\n}\n/**\n * A branded trusted string used with sanitization of `resourceUrl` strings.\n *\n * See: {\\@link bypassSanitizationTrustResourceUrl} and {\\@link resourceUrlSanitizer}.\n * @record\n */\nfunction TrustedResourceUrlString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType.ResourceUrl;*/\n}\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nfunction allowSanitizationBypass(value, type) {\n    return (value instanceof String && ((/** @type {?} */ (value)))[BRAND] === type);\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    // tslint:disable-next-line\n    /** @type {?} */\n    const trusted = (/** @type {?} */ (new String(trustedString)));\n    trusted[BRAND] = mode;\n    return trusted;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\nlet _devMode = true;\nlet _runModeLocked = false;\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nfunction isDevMode() {\n    _runModeLocked = true;\n    return _devMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nfunction enableProdMode() {\n    if (_runModeLocked) {\n        throw new Error('Cannot enable prod mode after platform setup.');\n    }\n    _devMode = false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nclass InertBodyHelper {\n    /**\n     * @param {?} defaultDoc\n     */\n    constructor(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            /** @type {?} */\n            const inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_XHR(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (_a) {\n            return null;\n        }\n        /** @type {?} */\n        const xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        /** @type {?} */\n        const body = xhr.response.body;\n        body.removeChild((/** @type {?} */ (body.firstChild)));\n        return body;\n    }\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_DOMParser(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            /** @type {?} */\n            const body = (/** @type {?} */ (new ((/** @type {?} */ (window)))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body));\n            body.removeChild((/** @type {?} */ (body.firstChild)));\n            return body;\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_InertDocument(html) {\n        // Prefer using <template> element if supported.\n        /** @type {?} */\n        const templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if (((/** @type {?} */ (this.defaultDoc))).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    }\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @private\n     * @param {?} el\n     * @return {?}\n     */\n    stripCustomNsAttrs(el) {\n        /** @type {?} */\n        const elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (let i = elAttrs.length - 1; 0 < i; i--) {\n            /** @type {?} */\n            const attrib = elAttrs.item(i);\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (attrib)).name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        /** @type {?} */\n        let childNode = (/** @type {?} */ (el.firstChild));\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs((/** @type {?} */ (childNode)));\n            childNode = childNode.nextSibling;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    InertBodyHelper.prototype.inertBodyElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    InertBodyHelper.prototype.inertDocument;\n    /**\n     * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n     * The implementation of this is determined in the constructor, when the class is instantiated.\n     * @type {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    InertBodyHelper.prototype.defaultDoc;\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!((/** @type {?} */ (window))).DOMParser;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n * @type {?}\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/* A pattern that matches safe srcset values */\n/** @type {?} */\nconst SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n * @type {?}\n */\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nfunction sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map((/**\n     * @param {?} srcset\n     * @return {?}\n     */\n    (srcset) => _sanitizeUrl(srcset.trim()))).join(', ');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    /** @type {?} */\n    const res = {};\n    for (const t of tags.split(','))\n        res[t] = true;\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge(...sets) {\n    /** @type {?} */\n    const res = {};\n    for (const s of sets) {\n        for (const v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\n/** @type {?} */\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\n/** @type {?} */\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n/** @type {?} */\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n/** @type {?} */\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\n/** @type {?} */\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\n/** @type {?} */\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n/** @type {?} */\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\n/** @type {?} */\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\n/** @type {?} */\nconst SRCSET_ATTRS = tagSet('srcset');\n/** @type {?} */\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\n/** @type {?} */\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n/** @type {?} */\nconst VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\n/** @type {?} */\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n    constructor() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    sanitizeChildren(el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        /** @type {?} */\n        let current = (/** @type {?} */ (el.firstChild));\n        /** @type {?} */\n        let traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement((/** @type {?} */ (current)));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars((/** @type {?} */ (current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = (/** @type {?} */ (current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement((/** @type {?} */ (current)));\n                }\n                /** @type {?} */\n                let next = this.checkClobberedElement(current, (/** @type {?} */ (current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, (/** @type {?} */ (current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    }\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @private\n     * @param {?} element The element to sanitize.\n     * @return {?} True if the element's contents should be traversed.\n     */\n    startElement(element) {\n        /** @type {?} */\n        const tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        /** @type {?} */\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            const elAttr = elAttrs.item(i);\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (elAttr)).name;\n            /** @type {?} */\n            const lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            /** @type {?} */\n            let value = (/** @type {?} */ (elAttr)).value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    }\n    /**\n     * @private\n     * @param {?} current\n     * @return {?}\n     */\n    endElement(current) {\n        /** @type {?} */\n        const tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    }\n    /**\n     * @private\n     * @param {?} chars\n     * @return {?}\n     */\n    chars(chars) { this.buf.push(encodeEntities(chars)); }\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    checkClobberedElement(node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(`Failed to sanitize html because the element is clobbered: ${((/** @type {?} */ (node))).outerHTML}`);\n        }\n        return nextNode;\n    }\n}\nif (false) {\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.sanitizedSomething;\n    /**\n     * @type {?}\n     * @private\n     */\n    SanitizingHtmlSerializer.prototype.buf;\n}\n// Regular Expressions for parsing tags and attributes\n/** @type {?} */\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\n/** @type {?} */\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    function (match) {\n        /** @type {?} */\n        const hi = match.charCodeAt(0);\n        /** @type {?} */\n        const low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    }))\n        .replace(NON_ALPHANUMERIC_REGEXP, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    function (match) { return '&#' + match.charCodeAt(0) + ';'; }))\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n/** @type {?} */\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    /** @type {?} */\n    let inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        /** @type {?} */\n        let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        /** @type {?} */\n        let mXSSAttempts = 5;\n        /** @type {?} */\n        let parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = (/** @type {?} */ (inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        /** @type {?} */\n        const sanitizer = new SanitizingHtmlSerializer();\n        /** @type {?} */\n        const safeHtml = sanitizer.sanitizeChildren((/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            /** @type {?} */\n            const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction getTemplateContent(el) {\n    return 'content' in ((/** @type {?} */ (el))) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nSecurityContext[SecurityContext.NONE] = 'NONE';\nSecurityContext[SecurityContext.HTML] = 'HTML';\nSecurityContext[SecurityContext.STYLE] = 'STYLE';\nSecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';\nSecurityContext[SecurityContext.URL] = 'URL';\nSecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nclass Sanitizer {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    Sanitizer.prototype.sanitize = function (context, value) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n * @type {?}\n */\nconst VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n/** @type {?} */\nconst TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|Z|3d)?';\n/** @type {?} */\nconst COLOR_FNS = '(?:rgb|hsl)a?';\n/** @type {?} */\nconst GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n/** @type {?} */\nconst CSS3_FNS = '(?:calc|attr)';\n/** @type {?} */\nconst FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n/** @type {?} */\nconst SAFE_STYLE_VALUE = new RegExp(`^(${VALUES}|` +\n    `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n    `${FN_ARGS})$`, 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n * @type {?}\n */\nconst URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    /** @type {?} */\n    let outsideSingle = true;\n    /** @type {?} */\n    let outsideDouble = true;\n    for (let i = 0; i < value.length; i++) {\n        /** @type {?} */\n        const c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nfunction _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n    // reasoning behind this.\n    /** @type {?} */\n    const urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(`WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n    }\n    return 'unsafe';\n}\n/** @enum {number} */\nconst StyleSanitizeMode = {\n    /** Just check to see if the property is required to be sanitized or not */\n    ValidateProperty: 1,\n    /** Skip checking the property; just sanitize the value */\n    SanitizeOnly: 2,\n    /** Check the property and (if true) then sanitize the value */\n    ValidateAndSanitize: 3,\n};\n/**\n * Used to intercept and sanitize style values before they are written to the renderer.\n *\n * This function is designed to be called in two modes. When a value is not provided\n * then the function will return a boolean whether a property will be sanitized later.\n * If a value is provided then the sanitized version of that will be returned.\n * @record\n */\nfunction StyleSanitizeFn() { }\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * \\@publicApi\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n */\nfunction ÉµÉµsanitizeHtml(unsafeHtml) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n    }\n    if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * \\@publicApi\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n *\n */\nfunction ÉµÉµsanitizeStyle(unsafeStyle) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(renderStringify(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * \\@publicApi\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n */\nfunction ÉµÉµsanitizeUrl(unsafeUrl) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * \\@publicApi\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n */\nfunction ÉµÉµsanitizeResourceUrl(unsafeResourceUrl) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link\n * bypassSanitizationTrustScript}.\n *\n * \\@publicApi\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n */\nfunction ÉµÉµsanitizeScript(unsafeScript) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n    }\n    if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n * @param {?} tag\n * @param {?} prop\n * @return {?}\n */\nfunction getUrlSanitizer(tag, prop) {\n    if ((prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' ||\n        tag === 'media' || tag === 'script')) ||\n        (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n        return ÉµÉµsanitizeResourceUrl;\n    }\n    return ÉµÉµsanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * \\@publicApi\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @param {?} tag target element tag name.\n * @param {?} prop name of the property that contains the value.\n * @return {?} `url` string which is safe to bind.\n *\n */\nfunction ÉµÉµsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n    return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n *\n * \\@publicApi\n * @type {?}\n */\nconst ÉµÉµdefaultStyleSanitizer = ((/** @type {?} */ ((/**\n * @param {?} prop\n * @param {?} value\n * @param {?=} mode\n * @return {?}\n */\nfunction (prop, value, mode) {\n    mode = mode || 3 /* ValidateAndSanitize */;\n    /** @type {?} */\n    let doSanitizeValue = true;\n    if (mode & 1 /* ValidateProperty */) {\n        doSanitizeValue = prop === 'background-image' || prop === 'background' ||\n            prop === 'border-image' || prop === 'filter' || prop === 'list-style' ||\n            prop === 'list-style-image' || prop === 'clip-path';\n    }\n    if (mode & 2 /* SanitizeOnly */) {\n        return doSanitizeValue ? ÉµÉµsanitizeStyle(value) : value;\n    }\n    else {\n        return doSanitizeValue;\n    }\n}))));\n/**\n * @param {?} name\n * @return {?}\n */\nfunction validateAgainstEventProperties(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        /** @type {?} */\n        const msg = `Binding to event property '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...` +\n            `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n            ` current module.`;\n        throw new Error(msg);\n    }\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction validateAgainstEventAttributes(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        /** @type {?} */\n        const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...`;\n        throw new Error(msg);\n    }\n}\n/**\n * @return {?}\n */\nfunction getSanitizer() {\n    /** @type {?} */\n    const lView = getLView();\n    return lView && lView[SANITIZER];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!\n */\n/**\n * Creates an `Array` construction with a given name. This is useful when\n * looking for memory consumption to see what time of array it is.\n *\n *\n * @param name Name to give to the constructor\n * @returns A subclass of `Array` if possible. This can only be done in\n *          environments which support `class` construct.\n */\nfunction createNamedArrayType(name) {\n    // This should never be called in prod mode, so let's verify that is the case.\n    if (ngDevMode) {\n        try {\n            // We need to do it this way so that TypeScript does not down-level the below code.\n            const FunctionConstructor = createNamedArrayType.constructor;\n            return (new FunctionConstructor('Array', `return class ABC extends Array{}`))(Array);\n        }\n        catch (e) {\n            // If it does not work just give up and fall back to regular Array.\n            return Array;\n        }\n    }\n    else {\n        throw new Error('Looks like we are in \\'prod mode\\', but we are creating a named Array type, which is wrong! Check your code');\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return `ng-reflect-${name}`;\n}\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param {?} target Component, Directive or DOM Node.\n * @return {?}\n */\nfunction getLContext(target) {\n    /** @type {?} */\n    let mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (Array.isArray(mpValue)) {\n            /** @type {?} */\n            const lView = (/** @type {?} */ (mpValue));\n            /** @type {?} */\n            let nodeIndex;\n            /** @type {?} */\n            let component = undefined;\n            /** @type {?} */\n            let directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, (/** @type {?} */ (target)));\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            // the goal is not to fill the entire context full of data because the lookups\n            // are expensive. Instead, only the target data (the element, component, container, ICU\n            // expression or directive details) are filled into the context. If called multiple times\n            // with different target values then the missing target data will be filled in.\n            /** @type {?} */\n            const native = unwrapRNode(lView[nodeIndex]);\n            /** @type {?} */\n            const existingCtx = readPatchedData(native);\n            /** @type {?} */\n            const context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (let i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        /** @type {?} */\n        const rElement = (/** @type {?} */ (target));\n        ngDevMode && assertDomNode(rElement);\n        // if the context is not found then we need to traverse upwards up the DOM\n        // to find the nearest element that has already been monkey patched with data\n        /** @type {?} */\n        let parent = (/** @type {?} */ (rElement));\n        while (parent = parent.parentNode) {\n            /** @type {?} */\n            const parentContext = readPatchedData(parent);\n            if (parentContext) {\n                /** @type {?} */\n                let lView;\n                if (Array.isArray(parentContext)) {\n                    lView = (/** @type {?} */ (parentContext));\n                }\n                else {\n                    lView = parentContext.lView;\n                }\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                /** @type {?} */\n                const index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    /** @type {?} */\n                    const native = unwrapRNode(lView[index]);\n                    /** @type {?} */\n                    const context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return ((/** @type {?} */ (mpValue))) || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n * @param {?} lView\n * @param {?} nodeIndex\n * @param {?} native\n * @return {?}\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return {\n        lView,\n        nodeIndex,\n        native,\n        component: undefined,\n        directives: undefined,\n        localRefs: undefined,\n    };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param {?} componentInstance\n * @return {?} The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n    /** @type {?} */\n    let lView = readPatchedData(componentInstance);\n    /** @type {?} */\n    let view;\n    if (Array.isArray(lView)) {\n        /** @type {?} */\n        const nodeIndex = findViaComponent(lView, componentInstance);\n        view = getComponentViewByIndex(nodeIndex, lView);\n        /** @type {?} */\n        const context = createLContext(lView, nodeIndex, (/** @type {?} */ (view[HOST])));\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        /** @type {?} */\n        const context = (/** @type {?} */ ((/** @type {?} */ (lView))));\n        view = getComponentViewByIndex(context.nodeIndex, context.lView);\n    }\n    return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n * @param {?} target\n * @param {?} data\n * @return {?}\n */\nfunction attachPatchData(target, data) {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} target\n * @return {?}\n */\nfunction findViaNativeElement(lView, target) {\n    /** @type {?} */\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNodeOrNull(tNode, lView)));\n        if (native === target) {\n            return tNode.index;\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n * @param {?} tNode\n * @return {?}\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else {\n        // Let's take the following template: <div><span>text</span></div><component/>\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n        // in this case the parent `div`, so that we can find the component.\n        while (tNode.parent && !tNode.parent.next) {\n            tNode = tNode.parent;\n        }\n        return tNode.parent && tNode.parent.next;\n    }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} componentInstance\n * @return {?}\n */\nfunction findViaComponent(lView, componentInstance) {\n    /** @type {?} */\n    const componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (let i = 0; i < componentIndices.length; i++) {\n            /** @type {?} */\n            const elementComponentIndex = componentIndices[i];\n            /** @type {?} */\n            const componentView = getComponentViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        /** @type {?} */\n        const rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n        /** @type {?} */\n        const rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} directiveInstance\n * @return {?}\n */\nfunction findViaDirective(lView, directiveInstance) {\n    // if a directive is monkey patched then it will (by default)\n    // have a reference to the LView of the current view. The\n    // element bound to the directive being search lives somewhere\n    // in the view data. We loop through the nodes and check their\n    // list of directives for the instance.\n    /** @type {?} */\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        const directiveIndexStart = tNode.directiveStart;\n        /** @type {?} */\n        const directiveIndexEnd = tNode.directiveEnd;\n        for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param {?} nodeIndex The node index\n * @param {?} lView The target view data\n * @param {?} includeComponents Whether or not to include components in returned directives\n * @return {?}\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    /** @type {?} */\n    let directiveStartIndex = tNode.directiveStart;\n    if (directiveStartIndex == 0)\n        return EMPTY_ARRAY;\n    /** @type {?} */\n    const directiveEndIndex = tNode.directiveEnd;\n    if (!includeComponents && tNode.flags & 1 /* isComponent */)\n        directiveStartIndex++;\n    return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n/**\n * @param {?} nodeIndex\n * @param {?} lView\n * @return {?}\n */\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    /** @type {?} */\n    let directiveStartIndex = tNode.directiveStart;\n    return tNode.flags & 1 /* isComponent */ ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n * @param {?} lView\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    if (tNode && tNode.localNames) {\n        /** @type {?} */\n        const result = {};\n        /** @type {?} */\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < tNode.localNames.length; i += 2) {\n            result[tNode.localNames[i]] = lView[localIndex];\n            localIndex++;\n        }\n        return result;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Called when directives inject each other (creating a circular dependency)\n * @param {?} token\n * @return {?}\n */\nfunction throwCyclicDependencyError(token) {\n    throw new Error(`Cannot instantiate cyclic dependency! ${token}`);\n}\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nfunction throwMultipleComponentError(tNode) {\n    throw new Error(`Multiple components match node with tagname ${tNode.tagName}`);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue) {\n    /** @type {?} */\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n    if (creationMode) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook ?`;\n    }\n    // TODO: include debug context\n    throw new Error(msg);\n}\n/**\n * @return {?}\n */\nfunction throwMixedMultiProviderError() {\n    throw new Error(`Cannot mix multi providers and regular providers`);\n}\n/**\n * @param {?=} ngModuleType\n * @param {?=} providers\n * @param {?=} provider\n * @return {?}\n */\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\n    /** @type {?} */\n    let ngModuleDetail = '';\n    if (ngModuleType && providers) {\n        /** @type {?} */\n        const providerDetail = providers.map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => v == provider ? '?' + provider + '?' : '...'));\n        ngModuleDetail =\n            ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;\n    }\n    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst TNodeType = {\n    /**\n     * The TNode contains information about an {@link LContainer} for embedded views.\n     */\n    Container: 0,\n    /**\n     * The TNode contains information about an `<ng-content>` projection\n     */\n    Projection: 1,\n    /**\n     * The TNode contains information about an {@link LView}\n     */\n    View: 2,\n    /**\n     * The TNode contains information about a DOM element aka {@link RNode}.\n     */\n    Element: 3,\n    /**\n     * The TNode contains information about an `<ng-container>` element {@link RNode}.\n     */\n    ElementContainer: 4,\n    /**\n     * The TNode contains information about an ICU comment used in `i18n`.\n     */\n    IcuContainer: 5,\n};\n/** @enum {number} */\nconst TNodeFlags = {\n    /** This bit is set if the node is a component */\n    isComponent: 1,\n    /** This bit is set if the node has been projected */\n    isProjected: 2,\n    /** This bit is set if any directive on this node has content queries */\n    hasContentQuery: 4,\n    /** This bit is set if the node has any \"class\" inputs */\n    hasClassInput: 8,\n    /** This bit is set if the node has any \"style\" inputs */\n    hasStyleInput: 16,\n    /** This bit is set if the node has been detached by i18n */\n    isDetached: 32,\n};\n/** @enum {number} */\nconst TNodeProviderIndexes = {\n    /** The index of the first provider on this node is encoded on the least significant bits */\n    ProvidersStartIndexMask: 65535,\n    /** The count of view providers from the component on this node is encoded on the 16 most\n       significant bits */\n    CptViewProvidersCountShift: 16,\n    CptViewProvidersCountShifter: 65536,\n};\n/** @enum {number} */\nconst AttributeMarker = {\n    /**\n     * Marker indicates that the following 3 values in the attributes array are:\n     * namespaceUri, attributeName, attributeValue\n     * in that order.\n     */\n    NamespaceURI: 0,\n    /**\n      * Signals class declaration.\n      *\n      * Each value following `Classes` designates a class name to include on the element.\n      * ## Example:\n      *\n      * Given:\n      * ```\n      * <div class=\"foo bar baz\">...<d/vi>\n      * ```\n      *\n      * the generated code is:\n      * ```\n      * var _c1 = [AttributeMarker.Classes, 'foo', 'bar', 'baz'];\n      * ```\n      */\n    Classes: 1,\n    /**\n     * Signals style declaration.\n     *\n     * Each pair of values following `Styles` designates a style name and value to include on the\n     * element.\n     * ## Example:\n     *\n     * Given:\n     * ```\n     * <div style=\"width:100px; height:200px; color:red\">...</div>\n     * ```\n     *\n     * the generated code is:\n     * ```\n     * var _c1 = [AttributeMarker.Styles, 'width', '100px', 'height'. '200px', 'color', 'red'];\n     * ```\n     */\n    Styles: 2,\n    /**\n     * Signals that the following attribute names were extracted from input or output bindings.\n     *\n     * For example, given the following HTML:\n     *\n     * ```\n     * <div moo=\"car\" [foo]=\"exp\" (bar)=\"doSth()\">\n     * ```\n     *\n     * the generated code is:\n     *\n     * ```\n     * var _c1 = ['moo', 'car', AttributeMarker.Bindings, 'foo', 'bar'];\n     * ```\n     */\n    Bindings: 3,\n    /**\n     * Signals that the following attribute names were hoisted from an inline-template declaration.\n     *\n     * For example, given the following HTML:\n     *\n     * ```\n     * <div *ngFor=\"let value of values; trackBy:trackBy\" dirA [dirB]=\"value\">\n     * ```\n     *\n     * the generated code for the `template()` instruction would include:\n     *\n     * ```\n     * ['dirA', '', AttributeMarker.Bindings, 'dirB', AttributeMarker.Template, 'ngFor', 'ngForOf',\n     * 'ngForTrackBy', 'let-value']\n     * ```\n     *\n     * while the generated code for the `element()` instruction inside the template function would\n     * include:\n     *\n     * ```\n     * ['dirA', '', AttributeMarker.Bindings, 'dirB']\n     * ```\n     */\n    Template: 4,\n    /**\n     * Signals that the following attribute is `ngProjectAs` and its value is a parsed `CssSelector`.\n     *\n     * For example, given the following HTML:\n     *\n     * ```\n     * <h1 attr=\"value\" ngProjectAs=\"[title]\">\n     * ```\n     *\n     * the generated code for the `element()` instruction would include:\n     *\n     * ```\n     * ['attr', 'value', AttributeMarker.ProjectAs, ['', 'title', '']]\n     * ```\n     */\n    ProjectAs: 5,\n    /**\n     * Signals that the following attribute will be translated by runtime i18n\n     *\n     * For example, given the following HTML:\n     *\n     * ```\n     * <div moo=\"car\" foo=\"value\" i18n-foo [bar]=\"binding\" i18n-bar>\n     * ```\n     *\n     * the generated code is:\n     *\n     * ```\n     * var _c1 = ['moo', 'car', AttributeMarker.I18n, 'foo', 'bar'];\n     */\n    I18n: 6,\n};\n/**\n * Binding data (flyweight) for a particular node that is shared between all templates\n * of a specific type.\n *\n * If a property is:\n *    - PropertyAliases: that property's data was generated and this is it\n *    - Null: that property's data was already generated and nothing was found.\n *    - Undefined: that property's data has not yet been generated\n *\n * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\n * @record\n */\nfunction TNode() { }\nif (false) {\n    /**\n     * The type of the TNode. See TNodeType.\n     * @type {?}\n     */\n    TNode.prototype.type;\n    /**\n     * Index of the TNode in TView.data and corresponding native element in LView.\n     *\n     * This is necessary to get from any TNode to its corresponding native element when\n     * traversing the node tree.\n     *\n     * If index is -1, this is a dynamically created container node or embedded view node.\n     * @type {?}\n     */\n    TNode.prototype.index;\n    /**\n     * The index of the closest injector in this node's LView.\n     *\n     * If the index === -1, there is no injector on this node or any ancestor node in this view.\n     *\n     * If the index !== -1, it is the index of this node's injector OR the index of a parent injector\n     * in the same view. We pass the parent injector index down the node tree of a view so it's\n     * possible to find the parent injector without walking a potentially deep node tree. Injector\n     * indices are not set across view boundaries because there could be multiple component hosts.\n     *\n     * If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent\n     * injector.\n     * @type {?}\n     */\n    TNode.prototype.injectorIndex;\n    /**\n     * Stores starting index of the directives.\n     * @type {?}\n     */\n    TNode.prototype.directiveStart;\n    /**\n     * Stores final exclusive index of the directives.\n     * @type {?}\n     */\n    TNode.prototype.directiveEnd;\n    /**\n     * Stores the first index where property binding metadata is stored for\n     * this node.\n     * @type {?}\n     */\n    TNode.prototype.propertyMetadataStartIndex;\n    /**\n     * Stores the exclusive final index where property binding metadata is\n     * stored for this node.\n     * @type {?}\n     */\n    TNode.prototype.propertyMetadataEndIndex;\n    /**\n     * Stores if Node isComponent, isProjected, hasContentQuery, hasClassInput and hasStyleInput\n     * @type {?}\n     */\n    TNode.prototype.flags;\n    /**\n     * This number stores two values using its bits:\n     *\n     * - the index of the first provider on that node (first 16 bits)\n     * - the count of view providers from the component on this node (last 16 bits)\n     * @type {?}\n     */\n    TNode.prototype.providerIndexes;\n    /**\n     * The tag name associated with this node.\n     * @type {?}\n     */\n    TNode.prototype.tagName;\n    /**\n     * Attributes associated with an element. We need to store attributes to support various use-cases\n     * (attribute injection, content projection with selectors, directives matching).\n     * Attributes are stored statically because reading them from the DOM would be way too slow for\n     * content projection and queries.\n     *\n     * Since attrs will always be calculated first, they will never need to be marked undefined by\n     * other instructions.\n     *\n     * For regular attributes a name of an attribute and its value alternate in the array.\n     * e.g. ['role', 'checkbox']\n     * This array can contain flags that will indicate \"special attributes\" (attributes with\n     * namespaces, attributes extracted from bindings and outputs).\n     * @type {?}\n     */\n    TNode.prototype.attrs;\n    /**\n     * A set of local names under which a given element is exported in a template and\n     * visible to queries. An entry in this array can be created for different reasons:\n     * - an element itself is referenced, ex.: `<div #foo>`\n     * - a component is referenced, ex.: `<my-cmpt #foo>`\n     * - a directive is referenced, ex.: `<my-cmpt #foo=\"directiveExportAs\">`.\n     *\n     * A given element might have different local names and those names can be associated\n     * with a directive. We store local names at even indexes while odd indexes are reserved\n     * for directive index in a view (or `-1` if there is no associated directive).\n     *\n     * Some examples:\n     * - `<div #foo>` => `[\"foo\", -1]`\n     * - `<my-cmpt #foo>` => `[\"foo\", myCmptIdx]`\n     * - `<my-cmpt #foo #bar=\"directiveExportAs\">` => `[\"foo\", myCmptIdx, \"bar\", directiveIdx]`\n     * - `<div #foo #bar=\"directiveExportAs\">` => `[\"foo\", -1, \"bar\", directiveIdx]`\n     * @type {?}\n     */\n    TNode.prototype.localNames;\n    /**\n     * Information about input properties that need to be set once from attribute data.\n     * @type {?}\n     */\n    TNode.prototype.initialInputs;\n    /**\n     * Input data for all directives on this node.\n     *\n     * - `undefined` means that the prop has not been initialized yet,\n     * - `null` means that the prop has been initialized but no inputs have been found.\n     * @type {?}\n     */\n    TNode.prototype.inputs;\n    /**\n     * Output data for all directives on this node.\n     *\n     * - `undefined` means that the prop has not been initialized yet,\n     * - `null` means that the prop has been initialized but no outputs have been found.\n     * @type {?}\n     */\n    TNode.prototype.outputs;\n    /**\n     * The TView or TViews attached to this node.\n     *\n     * If this TNode corresponds to an LContainer with inline views, the container will\n     * need to store separate static data for each of its view blocks (TView[]). Otherwise,\n     * nodes in inline views with the same index as nodes in their parent views will overwrite\n     * each other, as they are in the same template.\n     *\n     * Each index in this array corresponds to the static data for a certain\n     * view. So if you had V(0) and V(1) in a container, you might have:\n     *\n     * [\n     *   [{tagName: 'div', attrs: ...}, null],     // V(0) TView\n     *   [{tagName: 'button', attrs ...}, null]    // V(1) TView\n     *\n     * If this TNode corresponds to an LContainer with a template (e.g. structural\n     * directive), the template's TView will be stored here.\n     *\n     * If this TNode corresponds to an element, tViews will be null .\n     * @type {?}\n     */\n    TNode.prototype.tViews;\n    /**\n     * The next sibling node. Necessary so we can propagate through the root nodes of a view\n     * to insert them or remove them from the DOM.\n     * @type {?}\n     */\n    TNode.prototype.next;\n    /**\n     * The next projected sibling. Since in Angular content projection works on the node-by-node basis\n     * the act of projecting nodes might change nodes relationship at the insertion point (target\n     * view). At the same time we need to keep initial relationship between nodes as expressed in\n     * content view.\n     * @type {?}\n     */\n    TNode.prototype.projectionNext;\n    /**\n     * First child of the current node.\n     *\n     * For component nodes, the child will always be a ContentChild (in same view).\n     * For embedded view nodes, the child will be in their child view.\n     * @type {?}\n     */\n    TNode.prototype.child;\n    /**\n     * Parent node (in the same view only).\n     *\n     * We need a reference to a node's parent so we can append the node to its parent's native\n     * element at the appropriate time.\n     *\n     * If the parent would be in a different view (e.g. component host), this property will be null.\n     * It's important that we don't try to cross component boundaries when retrieving the parent\n     * because the parent will change (e.g. index, attrs) depending on where the component was\n     * used (and thus shouldn't be stored on TNode). In these cases, we retrieve the parent through\n     * LView.node instead (which will be instance-specific).\n     *\n     * If this is an inline view node (V), the parent will be its container.\n     * @type {?}\n     */\n    TNode.prototype.parent;\n    /**\n     * List of projected TNodes for a given component host element OR index into the said nodes.\n     *\n     * For easier discussion assume this example:\n     * `<parent>`'s view definition:\n     * ```\n     * <child id=\"c1\">content1</child>\n     * <child id=\"c2\"><span>content2</span></child>\n     * ```\n     * `<child>`'s view definition:\n     * ```\n     * <ng-content id=\"cont1\"></ng-content>\n     * ```\n     *\n     * If `Array.isArray(projection)` then `TNode` is a host element:\n     * - `projection` stores the content nodes which are to be projected.\n     *    - The nodes represent categories defined by the selector: For example:\n     *      `<ng-content/><ng-content select=\"abc\"/>` would represent the heads for `<ng-content/>`\n     *      and `<ng-content select=\"abc\"/>` respectively.\n     *    - The nodes we store in `projection` are heads only, we used `.next` to get their\n     *      siblings.\n     *    - The nodes `.next` is sorted/rewritten as part of the projection setup.\n     *    - `projection` size is equal to the number of projections `<ng-content>`. The size of\n     *      `c1` will be `1` because `<child>` has only one `<ng-content>`.\n     * - we store `projection` with the host (`c1`, `c2`) rather than the `<ng-content>` (`cont1`)\n     *   because the same component (`<child>`) can be used in multiple locations (`c1`, `c2`) and as\n     *   a result have different set of nodes to project.\n     * - without `projection` it would be difficult to efficiently traverse nodes to be projected.\n     *\n     * If `typeof projection == 'number'` then `TNode` is a `<ng-content>` element:\n     * - `projection` is an index of the host's `projection`Nodes.\n     *   - This would return the first head node to project:\n     *     `getHost(currentTNode).projection[currentTNode.projection]`.\n     * - When projecting nodes the parent node retrieved may be a `<ng-content>` node, in which case\n     *   the process is recursive in nature.\n     *\n     * If `projection` is of type `RNode[][]` than we have a collection of native nodes passed as\n     * projectable nodes during dynamic component creation.\n     * @type {?}\n     */\n    TNode.prototype.projection;\n    /**\n     * A collection of all style bindings and/or static style values for an element.\n     *\n     * This field will be populated if and when:\n     *\n     * - There are one or more initial styles on an element (e.g. `<div style=\"width:200px\">`)\n     * - There are one or more style bindings on an element (e.g. `<div [style.width]=\"w\">`)\n     *\n     * If and when there are only initial styles (no bindings) then an instance of `StylingMapArray`\n     * will be used here. Otherwise an instance of `TStylingContext` will be created when there\n     * are one or more style bindings on an element.\n     *\n     * During element creation this value is likely to be populated with an instance of\n     * `StylingMapArray` and only when the bindings are evaluated (which happens during\n     * update mode) then it will be converted to a `TStylingContext` if any style bindings\n     * are encountered. If and when this happens then the existing `StylingMapArray` value\n     * will be placed into the initial styling slot in the newly created `TStylingContext`.\n     * @type {?}\n     */\n    TNode.prototype.styles;\n    /**\n     * A collection of all class bindings and/or static class values for an element.\n     *\n     * This field will be populated if and when:\n     *\n     * - There are one or more initial classes on an element (e.g. `<div class=\"one two three\">`)\n     * - There are one or more class bindings on an element (e.g. `<div [class.foo]=\"f\">`)\n     *\n     * If and when there are only initial classes (no bindings) then an instance of `StylingMapArray`\n     * will be used here. Otherwise an instance of `TStylingContext` will be created when there\n     * are one or more class bindings on an element.\n     *\n     * During element creation this value is likely to be populated with an instance of\n     * `StylingMapArray` and only when the bindings are evaluated (which happens during\n     * update mode) then it will be converted to a `TStylingContext` if any class bindings\n     * are encountered. If and when this happens then the existing `StylingMapArray` value\n     * will be placed into the initial styling slot in the newly created `TStylingContext`.\n     * @type {?}\n     */\n    TNode.prototype.classes;\n}\n/**\n * Static data for an element\n * @record\n */\nfunction TElementNode() { }\nif (false) {\n    /**\n     * Index in the data[] array\n     * @type {?}\n     */\n    TElementNode.prototype.index;\n    /** @type {?} */\n    TElementNode.prototype.child;\n    /**\n     * Element nodes will have parents unless they are the first node of a component or\n     * embedded view (which means their parent is in a different view and must be\n     * retrieved using viewData[HOST_NODE]).\n     * @type {?}\n     */\n    TElementNode.prototype.parent;\n    /** @type {?} */\n    TElementNode.prototype.tViews;\n    /**\n     * If this is a component TNode with projection, this will be an array of projected\n     * TNodes or native nodes (see TNode.projection for more info). If it's a regular element node or\n     * a component without projection, it will be null.\n     * @type {?}\n     */\n    TElementNode.prototype.projection;\n}\n/**\n * Static data for a text node\n * @record\n */\nfunction TTextNode() { }\nif (false) {\n    /**\n     * Index in the data[] array\n     * @type {?}\n     */\n    TTextNode.prototype.index;\n    /** @type {?} */\n    TTextNode.prototype.child;\n    /**\n     * Text nodes will have parents unless they are the first node of a component or\n     * embedded view (which means their parent is in a different view and must be\n     * retrieved using LView.node).\n     * @type {?}\n     */\n    TTextNode.prototype.parent;\n    /** @type {?} */\n    TTextNode.prototype.tViews;\n    /** @type {?} */\n    TTextNode.prototype.projection;\n}\n/**\n * Static data for an LContainer\n * @record\n */\nfunction TContainerNode() { }\nif (false) {\n    /**\n     * Index in the data[] array.\n     *\n     * If it's -1, this is a dynamically created container node that isn't stored in\n     * data[] (e.g. when you inject ViewContainerRef) .\n     * @type {?}\n     */\n    TContainerNode.prototype.index;\n    /** @type {?} */\n    TContainerNode.prototype.child;\n    /**\n     * Container nodes will have parents unless:\n     *\n     * - They are the first node of a component or embedded view\n     * - They are dynamically created\n     * @type {?}\n     */\n    TContainerNode.prototype.parent;\n    /** @type {?} */\n    TContainerNode.prototype.tViews;\n    /** @type {?} */\n    TContainerNode.prototype.projection;\n}\n/**\n * Static data for an <ng-container>\n * @record\n */\nfunction TElementContainerNode() { }\nif (false) {\n    /**\n     * Index in the LView[] array.\n     * @type {?}\n     */\n    TElementContainerNode.prototype.index;\n    /** @type {?} */\n    TElementContainerNode.prototype.child;\n    /** @type {?} */\n    TElementContainerNode.prototype.parent;\n    /** @type {?} */\n    TElementContainerNode.prototype.tViews;\n    /** @type {?} */\n    TElementContainerNode.prototype.projection;\n}\n/**\n * Static data for an ICU expression\n * @record\n */\nfunction TIcuContainerNode() { }\nif (false) {\n    /**\n     * Index in the LView[] array.\n     * @type {?}\n     */\n    TIcuContainerNode.prototype.index;\n    /** @type {?} */\n    TIcuContainerNode.prototype.child;\n    /** @type {?} */\n    TIcuContainerNode.prototype.parent;\n    /** @type {?} */\n    TIcuContainerNode.prototype.tViews;\n    /** @type {?} */\n    TIcuContainerNode.prototype.projection;\n    /**\n     * Indicates the current active case for an ICU expression.\n     * It is null when there is no active case.\n     * @type {?}\n     */\n    TIcuContainerNode.prototype.activeCaseIndex;\n}\n/**\n * Static data for a view\n * @record\n */\nfunction TViewNode() { }\nif (false) {\n    /**\n     * If -1, it's a dynamically created view. Otherwise, it is the view block ID.\n     * @type {?}\n     */\n    TViewNode.prototype.index;\n    /** @type {?} */\n    TViewNode.prototype.child;\n    /** @type {?} */\n    TViewNode.prototype.parent;\n    /** @type {?} */\n    TViewNode.prototype.tViews;\n    /** @type {?} */\n    TViewNode.prototype.projection;\n}\n/**\n * Static data for an LProjectionNode\n * @record\n */\nfunction TProjectionNode() { }\nif (false) {\n    /**\n     * Index in the data[] array\n     * @type {?}\n     */\n    TProjectionNode.prototype.child;\n    /**\n     * Projection nodes will have parents unless they are the first node of a component\n     * or embedded view (which means their parent is in a different view and must be\n     * retrieved using LView.node).\n     * @type {?}\n     */\n    TProjectionNode.prototype.parent;\n    /** @type {?} */\n    TProjectionNode.prototype.tViews;\n    /**\n     * Index of the projection node. (See TNode.projection for more info.)\n     * @type {?}\n     */\n    TProjectionNode.prototype.projection;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nconst unusedValueExportToPlacateAjd$4 = 1;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst SelectorFlags = {\n    /** Indicates this is the beginning of a new negative selector */\n    NOT: 1,\n    /** Mode for matching attributes */\n    ATTRIBUTE: 2,\n    /** Mode for matching tag names */\n    ELEMENT: 4,\n    /** Mode for matching class names */\n    CLASS: 8,\n};\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nconst unusedValueExportToPlacateAjd$5 = 1;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5;\n/** @type {?} */\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    /** @type {?} */\n    const nodeClassesLen = nodeClassAttrVal.length;\n    /** @type {?} */\n    const matchIndex = (/** @type {?} */ (nodeClassAttrVal)).indexOf(cssClassToMatch);\n    /** @type {?} */\n    const matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && (/** @type {?} */ (nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && (/** @type {?} */ (nodeClassAttrVal))[matchEndIdx] !== ' ')) // no space after\n     {\n        return false;\n    }\n    return true;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n * @param {?} tNode\n * @param {?} currentSelector\n * @param {?} isProjectionMode\n * @return {?}\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n    /** @type {?} */\n    const tagNameToCompare = tNode.type === 0 /* Container */ && !isProjectionMode ?\n        NG_TEMPLATE_SELECTOR :\n        tNode.tagName;\n    return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector The selector to try matching against the node.\n * @param {?} isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @return {?} true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    /** @type {?} */\n    let mode = 4 /* ELEMENT */;\n    /** @type {?} */\n    const nodeAttrs = tNode.attrs || [];\n    // Find the index of first attribute that has no value, only a name.\n    /** @type {?} */\n    const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\n    // current one doesn't match\n    /** @type {?} */\n    let skipToNextSelector = false;\n    for (let i = 0; i < selector.length; i++) {\n        /** @type {?} */\n        const current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive((/** @type {?} */ (current)))) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = ((/** @type {?} */ (current))) | (mode & 1 /* NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* ELEMENT */) {\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                current === '' && selector.length === 1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            /** @type {?} */\n            const selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n            // special case for matching against classes when a tNode has been instantiated with\n            // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n            if ((mode & 8 /* CLASS */) && tNode.classes) {\n                if (!isCssClassMatching(getInitialStylingValue(tNode.classes), (/** @type {?} */ (selectorAttrValue)))) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n                continue;\n            }\n            /** @type {?} */\n            const isInlineTemplate = tNode.type == 0 /* Container */ && tNode.tagName !== NG_TEMPLATE_SELECTOR;\n            /** @type {?} */\n            const attrName = (mode & 8 /* CLASS */) ? 'class' : current;\n            /** @type {?} */\n            const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate, isProjectionMode);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            if (selectorAttrValue !== '') {\n                /** @type {?} */\n                let nodeAttrValue;\n                if (attrIndexInNode > nameOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    nodeAttrValue = (/** @type {?} */ (nodeAttrs[attrIndexInNode + 1]));\n                }\n                /** @type {?} */\n                const compareAgainstClassName = mode & 8 /* CLASS */ ? nodeAttrValue : null;\n                if (compareAgainstClassName &&\n                    !isCssClassMatching(compareAgainstClassName, (/** @type {?} */ (selectorAttrValue))) ||\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction isPositive(mode) {\n    return (mode & 1 /* NOT */) === 0;\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param {?} name the name of the attribute to find\n * @param {?} attrs the attribute array to examine\n * @param {?} isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param {?} isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n * @return {?}\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n    if (attrs === null)\n        return -1;\n    /** @type {?} */\n    let i = 0;\n    if (isProjectionMode || !isInlineTemplate) {\n        /** @type {?} */\n        let bindingsMode = false;\n        while (i < attrs.length) {\n            /** @type {?} */\n            const maybeAttrName = attrs[i];\n            if (maybeAttrName === name) {\n                return i;\n            }\n            else if (maybeAttrName === 3 /* Bindings */ || maybeAttrName === 6 /* I18n */) {\n                bindingsMode = true;\n            }\n            else if (maybeAttrName === 1 /* Classes */) {\n                /** @type {?} */\n                let value = attrs[++i];\n                // We should skip classes here because we have a separate mechanism for\n                // matching classes in projection mode.\n                while (typeof value === 'string') {\n                    value = attrs[++i];\n                }\n                continue;\n            }\n            else if (maybeAttrName === 4 /* Template */) {\n                // We do not care about Template attributes in this scenario.\n                break;\n            }\n            else if (maybeAttrName === 0 /* NamespaceURI */) {\n                // Skip the whole namespaced attribute and value. This is by design.\n                i += 4;\n                continue;\n            }\n            // In binding mode there are only names, rather than name-value pairs.\n            i += bindingsMode ? 1 : 2;\n        }\n        // We did not match the attribute\n        return -1;\n    }\n    else {\n        return matchTemplateAttribute(attrs, name);\n    }\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @param {?=} isProjectionMode\n * @return {?}\n */\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n    for (let i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction getProjectAsAttrValue(tNode) {\n    /** @type {?} */\n    const nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        /** @type {?} */\n        const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* ProjectAs */);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return (/** @type {?} */ (nodeAttrs[ngProjectAsAttrIdx + 1]));\n        }\n    }\n    return null;\n}\n/**\n * @param {?} nodeAttrs\n * @return {?}\n */\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n    for (let i = 0; i < nodeAttrs.length; i++) {\n        /** @type {?} */\n        const nodeAttr = nodeAttrs[i];\n        if (isNameOnlyAttributeMarker(nodeAttr)) {\n            return i;\n        }\n    }\n    return nodeAttrs.length;\n}\n/**\n * @param {?} attrs\n * @param {?} name\n * @return {?}\n */\nfunction matchTemplateAttribute(attrs, name) {\n    /** @type {?} */\n    let i = attrs.indexOf(4 /* Template */);\n    if (i > -1) {\n        i++;\n        while (i < attrs.length) {\n            if (attrs[i] === name)\n                return i;\n            i++;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param {?} selector Selector to be checked.\n * @param {?} list List in which to look for the selector.\n * @return {?}\n */\nfunction isSelectorInSelectorList(selector, list) {\n    selectorListLoop: for (let i = 0; i < list.length; i++) {\n        /** @type {?} */\n        const currentSelectorInList = list[i];\n        if (selector.length !== currentSelectorInList.length) {\n            continue;\n        }\n        for (let j = 0; j < selector.length; j++) {\n            if (selector[j] !== currentSelectorInList[j]) {\n                continue selectorListLoop;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// The first bit value reflects a map-based binding value's bit.\n// The reason why it's always activated for every entry in the map\n// is so that if any map-binding values update then all other prop\n// based bindings will pass the guard check automatically without\n// any extra code or flags.\n/**\n * --------\n *\n * This file contains the core logic for styling in Angular.\n *\n * All styling bindings (i.e. `[style]`, `[style.prop]`, `[class]` and `[class.name]`)\n * will have their values be applied through the logic in this file.\n *\n * When a binding is encountered (e.g. `<div [style.width]=\"w\">`) then\n * the binding data will be populated into a `TStylingContext` data-structure.\n * There is only one `TStylingContext` per `TNode` and each element instance\n * will update its style/class binding values in concert with the styling\n * context.\n *\n * To learn more about the algorithm see `TStylingContext`.\n *\n * --------\n * @type {?}\n */\nconst DEFAULT_GUARD_MASK_VALUE = 0b1;\n/**\n * The guard/update mask bit index location for map-based bindings.\n *\n * All map-based bindings (i.e. `[style]` and `[class]` )\n * @type {?}\n */\nconst STYLING_INDEX_FOR_MAP_BINDING = 0;\n/**\n * Default fallback value for a styling binding.\n *\n * A value of `null` is used here which signals to the styling algorithm that\n * the styling value is not present. This way if there are no other values\n * detected then it will be removed once the style/class property is dirty and\n * diffed within the styling algorithm present in `flushStyling`.\n * @type {?}\n */\nconst DEFAULT_BINDING_VALUE = null;\n/**\n * Default size count value for a new entry in a context.\n *\n * A value of `1` is used here because each entry in the context has a default\n * property.\n * @type {?}\n */\nconst DEFAULT_SIZE_VALUE = 1;\n/** @type {?} */\nlet deferredBindingQueue = [];\n/**\n * Visits a class-based binding and updates the new value (if changed).\n *\n * This function is called each time a class-based styling instruction\n * is executed. It's important that it's always called (even if the value\n * has not changed) so that the inner counter index value is incremented.\n * This way, each instruction is always guaranteed to get the same counter\n * state each time it's called (which then allows the `TStylingContext`\n * and the bit mask values to be in sync).\n * @param {?} context\n * @param {?} data\n * @param {?} element\n * @param {?} prop\n * @param {?} bindingIndex\n * @param {?} value\n * @param {?} deferRegistration\n * @param {?} forceUpdate\n * @return {?}\n */\nfunction updateClassBinding(context, data, element, prop, bindingIndex, value, deferRegistration, forceUpdate) {\n    /** @type {?} */\n    const isMapBased = !prop;\n    /** @type {?} */\n    const state = getStylingState(element, stateIsPersisted(context));\n    /** @type {?} */\n    const index = isMapBased ? STYLING_INDEX_FOR_MAP_BINDING : state.classesIndex++;\n    /** @type {?} */\n    const updated = updateBindingData(context, data, index, prop, bindingIndex, value, deferRegistration, forceUpdate, false);\n    if (updated || forceUpdate) {\n        // We flip the bit in the bitMask to reflect that the binding\n        // at the `index` slot has changed. This identifies to the flushing\n        // phase that the bindings for this particular CSS class need to be\n        // applied again because on or more of the bindings for the CSS\n        // class have changed.\n        state.classesBitMask |= 1 << index;\n        return true;\n    }\n    return false;\n}\n/**\n * Visits a style-based binding and updates the new value (if changed).\n *\n * This function is called each time a style-based styling instruction\n * is executed. It's important that it's always called (even if the value\n * has not changed) so that the inner counter index value is incremented.\n * This way, each instruction is always guaranteed to get the same counter\n * state each time it's called (which then allows the `TStylingContext`\n * and the bit mask values to be in sync).\n * @param {?} context\n * @param {?} data\n * @param {?} element\n * @param {?} prop\n * @param {?} bindingIndex\n * @param {?} value\n * @param {?} sanitizer\n * @param {?} deferRegistration\n * @param {?} forceUpdate\n * @return {?}\n */\nfunction updateStyleBinding(context, data, element, prop, bindingIndex, value, sanitizer, deferRegistration, forceUpdate) {\n    /** @type {?} */\n    const isMapBased = !prop;\n    /** @type {?} */\n    const state = getStylingState(element, stateIsPersisted(context));\n    /** @type {?} */\n    const index = isMapBased ? STYLING_INDEX_FOR_MAP_BINDING : state.stylesIndex++;\n    /** @type {?} */\n    const sanitizationRequired = isMapBased ?\n        true :\n        (sanitizer ? sanitizer((/** @type {?} */ (prop)), null, 1 /* ValidateProperty */) : false);\n    /** @type {?} */\n    const updated = updateBindingData(context, data, index, prop, bindingIndex, value, deferRegistration, forceUpdate, sanitizationRequired);\n    if (updated || forceUpdate) {\n        // We flip the bit in the bitMask to reflect that the binding\n        // at the `index` slot has changed. This identifies to the flushing\n        // phase that the bindings for this particular property need to be\n        // applied again because on or more of the bindings for the CSS\n        // property have changed.\n        state.stylesBitMask |= 1 << index;\n        return true;\n    }\n    return false;\n}\n/**\n * Called each time a binding value has changed within the provided `TStylingContext`.\n *\n * This function is designed to be called from `updateStyleBinding` and `updateClassBinding`.\n * If called during the first update pass, the binding will be registered in the context.\n * If the binding does get registered and the `deferRegistration` flag is true then the\n * binding data will be queued up until the context is later flushed in `applyStyling`.\n *\n * This function will also update binding slot in the provided `LStylingData` with the\n * new binding entry (if it has changed).\n *\n * @param {?} context\n * @param {?} data\n * @param {?} counterIndex\n * @param {?} prop\n * @param {?} bindingIndex\n * @param {?} value\n * @param {?} deferRegistration\n * @param {?} forceUpdate\n * @param {?} sanitizationRequired\n * @return {?} whether or not the binding value was updated in the `LStylingData`.\n */\nfunction updateBindingData(context, data, counterIndex, prop, bindingIndex, value, deferRegistration, forceUpdate, sanitizationRequired) {\n    if (!isContextLocked(context)) {\n        if (deferRegistration) {\n            deferBindingRegistration(context, counterIndex, prop, bindingIndex, sanitizationRequired);\n        }\n        else {\n            deferredBindingQueue.length && flushDeferredBindings();\n            // this will only happen during the first update pass of the\n            // context. The reason why we can't use `tNode.firstTemplatePass`\n            // here is because its not guaranteed to be true when the first\n            // update pass is executed (remember that all styling instructions\n            // are run in the update phase, and, as a result, are no more\n            // styling instructions that are run in the creation phase).\n            registerBinding(context, counterIndex, prop, bindingIndex, sanitizationRequired);\n        }\n    }\n    /** @type {?} */\n    const changed = forceUpdate || hasValueChanged(data[bindingIndex], value);\n    if (changed) {\n        data[bindingIndex] = value;\n    }\n    return changed;\n}\n/**\n * Schedules a binding registration to be run at a later point.\n *\n * The reasoning for this feature is to ensure that styling\n * bindings are registered in the correct order for when\n * directives/components have a super/sub class inheritance\n * chains. Each directive's styling bindings must be\n * registered into the context in reverse order. Therefore all\n * bindings will be buffered in reverse order and then applied\n * after the inheritance chain exits.\n * @param {?} context\n * @param {?} counterIndex\n * @param {?} prop\n * @param {?} bindingIndex\n * @param {?} sanitizationRequired\n * @return {?}\n */\nfunction deferBindingRegistration(context, counterIndex, prop, bindingIndex, sanitizationRequired) {\n    deferredBindingQueue.unshift(context, counterIndex, prop, bindingIndex, sanitizationRequired);\n}\n/**\n * Flushes the collection of deferred bindings and causes each entry\n * to be registered into the context.\n * @return {?}\n */\nfunction flushDeferredBindings() {\n    /** @type {?} */\n    let i = 0;\n    while (i < deferredBindingQueue.length) {\n        /** @type {?} */\n        const context = (/** @type {?} */ (deferredBindingQueue[i++]));\n        /** @type {?} */\n        const count = (/** @type {?} */ (deferredBindingQueue[i++]));\n        /** @type {?} */\n        const prop = (/** @type {?} */ (deferredBindingQueue[i++]));\n        /** @type {?} */\n        const bindingIndex = (/** @type {?} */ (deferredBindingQueue[i++]));\n        /** @type {?} */\n        const sanitizationRequired = (/** @type {?} */ (deferredBindingQueue[i++]));\n        registerBinding(context, count, prop, bindingIndex, sanitizationRequired);\n    }\n    deferredBindingQueue.length = 0;\n}\n/**\n * Registers the provided binding (prop + bindingIndex) into the context.\n *\n * This function is shared between bindings that are assigned immediately\n * (via `updateBindingData`) and at a deferred stage. When called, it will\n * figure out exactly where to place the binding data in the context.\n *\n * It is needed because it will either update or insert a styling property\n * into the context at the correct spot.\n *\n * When called, one of two things will happen:\n *\n * 1) If the property already exists in the context then it will just add\n *    the provided `bindingValue` to the end of the binding sources region\n *    for that particular property.\n *\n *    - If the binding value is a number then it will be added as a new\n *      binding index source next to the other binding sources for the property.\n *\n *    - Otherwise, if the binding value is a string/boolean/null type then it will\n *      replace the default value for the property if the default value is `null`.\n *\n * 2) If the property does not exist then it will be inserted into the context.\n *    The styling context relies on all properties being stored in alphabetical\n *    order, so it knows exactly where to store it.\n *\n *    When inserted, a default `null` value is created for the property which exists\n *    as the default value for the binding. If the bindingValue property is inserted\n *    and it is either a string, number or null value then that will replace the default\n *    value.\n *\n * Note that this function is also used for map-based styling bindings. They are treated\n * much the same as prop-based bindings, but, because they do not have a property value\n * (since it's a map), all map-based entries are stored in an already populated area of\n * the context at the top (which is reserved for map-based entries).\n * @param {?} context\n * @param {?} countId\n * @param {?} prop\n * @param {?} bindingValue\n * @param {?=} sanitizationRequired\n * @return {?}\n */\nfunction registerBinding(context, countId, prop, bindingValue, sanitizationRequired) {\n    /** @type {?} */\n    let registered = false;\n    if (prop) {\n        // prop-based bindings (e.g `<div [style.width]=\"w\" [class.foo]=\"f\">`)\n        /** @type {?} */\n        let found = false;\n        /** @type {?} */\n        let i = getPropValuesStartPosition(context);\n        while (i < context.length) {\n            /** @type {?} */\n            const valuesCount = getValuesCount(context, i);\n            /** @type {?} */\n            const p = getProp(context, i);\n            found = prop <= p;\n            if (found) {\n                // all style/class bindings are sorted by property name\n                if (prop < p) {\n                    allocateNewContextEntry(context, i, prop, sanitizationRequired);\n                }\n                addBindingIntoContext(context, false, i, bindingValue, countId);\n                break;\n            }\n            i += 3 /* BindingsStartOffset */ + valuesCount;\n        }\n        if (!found) {\n            allocateNewContextEntry(context, context.length, prop, sanitizationRequired);\n            addBindingIntoContext(context, false, i, bindingValue, countId);\n            registered = true;\n        }\n    }\n    else {\n        // map-based bindings (e.g `<div [style]=\"s\" [class]=\"{className:true}\">`)\n        // there is no need to allocate the map-based binding region into the context\n        // since it is already there when the context is first created.\n        addBindingIntoContext(context, true, 3 /* MapBindingsPosition */, bindingValue, countId);\n        registered = true;\n    }\n    return registered;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} prop\n * @param {?=} sanitizationRequired\n * @return {?}\n */\nfunction allocateNewContextEntry(context, index, prop, sanitizationRequired) {\n    // 1,2: splice index locations\n    // 3: each entry gets a config value (guard mask + flags)\n    // 4. each entry gets a size value (which is always one because there is always a default binding\n    // value)\n    // 5. the property that is getting allocated into the context\n    // 6. the default binding value (usually `null`)\n    /** @type {?} */\n    const config = sanitizationRequired ? 1 /* SanitizationRequired */ :\n        0 /* Default */;\n    context.splice(index, 0, config, DEFAULT_SIZE_VALUE, prop, DEFAULT_BINDING_VALUE);\n    setGuardMask(context, index, DEFAULT_GUARD_MASK_VALUE);\n}\n/**\n * Inserts a new binding value into a styling property tuple in the `TStylingContext`.\n *\n * A bindingValue is inserted into a context during the first update pass\n * of a template or host bindings function. When this occurs, two things\n * happen:\n *\n * - If the bindingValue value is a number then it is treated as a bindingIndex\n *   value (a index in the `LView`) and it will be inserted next to the other\n *   binding index entries.\n *\n * - Otherwise the binding value will update the default value for the property\n *   and this will only happen if the default value is `null`.\n *\n * Note that this function also handles map-based bindings and will insert them\n * at the top of the context.\n * @param {?} context\n * @param {?} isMapBased\n * @param {?} index\n * @param {?} bindingValue\n * @param {?} countId\n * @return {?}\n */\nfunction addBindingIntoContext(context, isMapBased, index, bindingValue, countId) {\n    /** @type {?} */\n    const valuesCount = getValuesCount(context, index);\n    /** @type {?} */\n    const firstValueIndex = index + 3 /* BindingsStartOffset */;\n    /** @type {?} */\n    let lastValueIndex = firstValueIndex + valuesCount;\n    if (!isMapBased) {\n        // prop-based values all have default values, but map-based entries do not.\n        // we want to access the index for the default value in this case and not just\n        // the bindings...\n        lastValueIndex--;\n    }\n    if (typeof bindingValue === 'number') {\n        // the loop here will check to see if the binding already exists\n        // for the property in the context. Why? The reason for this is\n        // because the styling context is not \"locked\" until the first\n        // flush has occurred. This means that if a repeated element\n        // registers its styling bindings then it will register each\n        // binding more than once (since its duplicated). This check\n        // will prevent that from happening. Note that this only happens\n        // when a binding is first encountered and not each time it is\n        // updated.\n        for (let i = firstValueIndex; i <= lastValueIndex; i++) {\n            /** @type {?} */\n            const indexAtPosition = context[i];\n            if (indexAtPosition === bindingValue)\n                return;\n        }\n        context.splice(lastValueIndex, 0, bindingValue);\n        ((/** @type {?} */ (context[index + 1 /* ValuesCountOffset */])))++;\n        // now that a new binding index has been added to the property\n        // the guard mask bit value (at the `countId` position) needs\n        // to be included into the existing mask value.\n        /** @type {?} */\n        const guardMask = getGuardMask(context, index) | (1 << countId);\n        setGuardMask(context, index, guardMask);\n    }\n    else if (bindingValue !== null && context[lastValueIndex] == null) {\n        context[lastValueIndex] = bindingValue;\n    }\n}\n/**\n * Applies all pending style and class bindings to the provided element.\n *\n * This function will attempt to flush styling via the provided `classesContext`\n * and `stylesContext` context values. This function is designed to be run from\n * the `stylingApply()` instruction (which is run at the very end of styling\n * change detection) and will rely on any state values that are set from when\n * any styling bindings update.\n *\n * This function may be called multiple times on the same element because it can\n * be called from the template code as well as from host bindings. In order for\n * styling to be successfully flushed to the element (which will only happen once\n * despite this being called multiple times), the following criteria must be met:\n *\n * - `flushStyling` is called from the very last directive that has styling for\n *    the element (see `allowStylingFlush()`).\n * - one or more bindings for classes or styles has updated (this is checked by\n *   examining the classes or styles bit mask).\n *\n * If the style and class values are successfully applied to the element then\n * the temporary state values for the element will be cleared. Otherwise, if\n * this did not occur then the styling state is persisted (see `state.ts` for\n * more information on how this works).\n * @param {?} renderer\n * @param {?} data\n * @param {?} classesContext\n * @param {?} stylesContext\n * @param {?} element\n * @param {?} directiveIndex\n * @param {?} styleSanitizer\n * @return {?}\n */\nfunction flushStyling(renderer, data, classesContext, stylesContext, element, directiveIndex, styleSanitizer) {\n    ngDevMode && ngDevMode.flushStyling++;\n    /** @type {?} */\n    const persistState = classesContext ? stateIsPersisted(classesContext) :\n        (stylesContext ? stateIsPersisted(stylesContext) : false);\n    /** @type {?} */\n    const allowFlushClasses = allowStylingFlush(classesContext, directiveIndex);\n    /** @type {?} */\n    const allowFlushStyles = allowStylingFlush(stylesContext, directiveIndex);\n    // deferred bindings are bindings which are scheduled to register with\n    // the context at a later point. These bindings can only registered when\n    // the context will be 100% flushed to the element.\n    if (deferredBindingQueue.length && (allowFlushClasses || allowFlushStyles)) {\n        flushDeferredBindings();\n    }\n    /** @type {?} */\n    const state = getStylingState(element, persistState);\n    /** @type {?} */\n    const classesFlushed = maybeApplyStyling(renderer, element, data, classesContext, allowFlushClasses, state.classesBitMask, setClass, null);\n    /** @type {?} */\n    const stylesFlushed = maybeApplyStyling(renderer, element, data, stylesContext, allowFlushStyles, state.stylesBitMask, setStyle, styleSanitizer);\n    if (classesFlushed && stylesFlushed) {\n        resetStylingState();\n        if (persistState) {\n            deleteStylingStateFromStorage(element);\n        }\n    }\n    else if (persistState) {\n        storeStylingState(element, state);\n    }\n}\n/**\n * @param {?} renderer\n * @param {?} element\n * @param {?} data\n * @param {?} context\n * @param {?} allowFlush\n * @param {?} bitMask\n * @param {?} styleSetter\n * @param {?} styleSanitizer\n * @return {?}\n */\nfunction maybeApplyStyling(renderer, element, data, context, allowFlush, bitMask, styleSetter, styleSanitizer) {\n    if (allowFlush && context) {\n        lockAndFinalizeContext(context);\n        if (contextHasUpdates(context, bitMask)) {\n            ngDevMode && (styleSanitizer ? ngDevMode.stylesApplied++ : ngDevMode.classesApplied++);\n            applyStyling((/** @type {?} */ (context)), renderer, element, data, bitMask, styleSetter, styleSanitizer);\n            return true;\n        }\n    }\n    return allowFlush;\n}\n/**\n * @param {?} context\n * @param {?} bitMask\n * @return {?}\n */\nfunction contextHasUpdates(context, bitMask) {\n    return context && bitMask > BIT_MASK_START_VALUE;\n}\n/**\n * Locks the context (so no more bindings can be added) and also copies over initial class/style\n * values into their binding areas.\n *\n * There are two main actions that take place in this function:\n *\n * - Locking the context:\n *   Locking the context is required so that the style/class instructions know NOT to\n *   register a binding again after the first update pass has run. If a locking bit was\n *   not used then it would need to scan over the context each time an instruction is run\n *   (which is expensive).\n *\n * - Patching initial values:\n *   Directives and component host bindings may include static class/style values which are\n *   bound to the host element. When this happens, the styling context will need to be informed\n *   so it can use these static styling values as defaults when a matching binding is falsy.\n *   These initial styling values are read from the initial styling values slot within the\n *   provided `TStylingContext` (which is an instance of a `StylingMapArray`). This inner map will\n *   be updated each time a host binding applies its static styling values (via `elementHostAttrs`)\n *   so these values are only read at this point because this is the very last point before the\n *   first style/class values are flushed to the element.\n * @param {?} context\n * @return {?}\n */\nfunction lockAndFinalizeContext(context) {\n    if (!isContextLocked(context)) {\n        /** @type {?} */\n        const initialValues = getStylingMapArray(context);\n        if (initialValues) {\n            updateInitialStylingOnContext(context, initialValues);\n        }\n        lockContext(context);\n    }\n}\n/**\n * Runs through the provided styling context and applies each value to\n * the provided element (via the renderer) if one or more values are present.\n *\n * This function will iterate over all entries present in the provided\n * `TStylingContext` array (both prop-based and map-based bindings).-\n *\n * Each entry, within the `TStylingContext` array, is stored alphabetically\n * and this means that each prop/value entry will be applied in order\n * (so long as it is marked dirty in the provided `bitMask` value).\n *\n * If there are any map-based entries present (which are applied to the\n * element via the `[style]` and `[class]` bindings) then those entries\n * will be applied as well. However, the code for that is not a part of\n * this function. Instead, each time a property is visited, then the\n * code below will call an external function called `stylingMapsSyncFn`\n * and, if present, it will keep the application of styling values in\n * map-based bindings up to sync with the application of prop-based\n * bindings.\n *\n * Visit `styling_next/map_based_bindings.ts` to learn more about how the\n * algorithm works for map-based styling bindings.\n *\n * Note that this function is not designed to be called in isolation (use\n * `applyClasses` and `applyStyles` to actually apply styling values).\n * @param {?} context\n * @param {?} renderer\n * @param {?} element\n * @param {?} bindingData\n * @param {?} bitMaskValue\n * @param {?} applyStylingFn\n * @param {?} sanitizer\n * @return {?}\n */\nfunction applyStyling(context, renderer, element, bindingData, bitMaskValue, applyStylingFn, sanitizer) {\n    /** @type {?} */\n    const bitMask = normalizeBitMaskValue(bitMaskValue);\n    /** @type {?} */\n    const stylingMapsSyncFn = getStylingMapsSyncFn();\n    /** @type {?} */\n    const mapsGuardMask = getGuardMask(context, 3 /* MapBindingsPosition */);\n    /** @type {?} */\n    const applyAllValues = (bitMask & mapsGuardMask) > 0;\n    /** @type {?} */\n    const mapsMode = applyAllValues ? 1 /* ApplyAllValues */ : 0 /* TraverseValues */;\n    /** @type {?} */\n    let i = getPropValuesStartPosition(context);\n    while (i < context.length) {\n        /** @type {?} */\n        const valuesCount = getValuesCount(context, i);\n        /** @type {?} */\n        const guardMask = getGuardMask(context, i);\n        if (bitMask & guardMask) {\n            /** @type {?} */\n            let valueApplied = false;\n            /** @type {?} */\n            const prop = getProp(context, i);\n            /** @type {?} */\n            const valuesCountUpToDefault = valuesCount - 1;\n            /** @type {?} */\n            const defaultValue = (/** @type {?} */ (getBindingValue(context, i, valuesCountUpToDefault)));\n            // case 1: apply prop-based values\n            // try to apply the binding values and see if a non-null\n            // value gets set for the styling binding\n            for (let j = 0; j < valuesCountUpToDefault; j++) {\n                /** @type {?} */\n                const bindingIndex = (/** @type {?} */ (getBindingValue(context, i, j)));\n                /** @type {?} */\n                const value = bindingData[bindingIndex];\n                if (isStylingValueDefined(value)) {\n                    /** @type {?} */\n                    const finalValue = sanitizer && isSanitizationRequired(context, i) ?\n                        sanitizer(prop, value, 2 /* SanitizeOnly */) :\n                        value;\n                    applyStylingFn(renderer, element, prop, finalValue, bindingIndex);\n                    valueApplied = true;\n                    break;\n                }\n            }\n            // case 2: apply map-based values\n            // traverse through each map-based styling binding and update all values up to\n            // the provided `prop` value. If the property was not applied in the loop above\n            // then it will be attempted to be applied in the maps sync code below.\n            if (stylingMapsSyncFn) {\n                // determine whether or not to apply the target property or to skip it\n                /** @type {?} */\n                const mode = mapsMode | (valueApplied ? 4 /* SkipTargetProp */ :\n                    2 /* ApplyTargetProp */);\n                /** @type {?} */\n                const valueAppliedWithinMap = stylingMapsSyncFn(context, renderer, element, bindingData, applyStylingFn, sanitizer, mode, prop, defaultValue);\n                valueApplied = valueApplied || valueAppliedWithinMap;\n            }\n            // case 3: apply the default value\n            // if the value has not yet been applied then a truthy value does not exist in the\n            // prop-based or map-based bindings code. If and when this happens, just apply the\n            // default value (even if the default value is `null`).\n            if (!valueApplied) {\n                applyStylingFn(renderer, element, prop, defaultValue);\n            }\n        }\n        i += 3 /* BindingsStartOffset */ + valuesCount;\n    }\n    // the map-based styling entries may have not applied all their\n    // values. For this reason, one more call to the sync function\n    // needs to be issued at the end.\n    if (stylingMapsSyncFn) {\n        stylingMapsSyncFn(context, renderer, element, bindingData, applyStylingFn, sanitizer, mapsMode);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeBitMaskValue(value) {\n    // if pass => apply all values (-1 implies that all bits are flipped to true)\n    if (value === true)\n        return -1;\n    // if pass => skip all values\n    if (value === false)\n        return 0;\n    // return the bit mask value as is\n    return value;\n}\n/** @type {?} */\nlet _activeStylingMapApplyFn = null;\n/**\n * @return {?}\n */\nfunction getStylingMapsSyncFn() {\n    return _activeStylingMapApplyFn;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nfunction setStylingMapsSyncFn(fn) {\n    _activeStylingMapApplyFn = fn;\n}\n/**\n * Assigns a style value to a style property for the given element.\n * @type {?}\n */\nconst setStyle = (/**\n * @param {?} renderer\n * @param {?} native\n * @param {?} prop\n * @param {?} value\n * @return {?}\n */\n(renderer, native, prop, value) => {\n    // the reason why this may be `null` is either because\n    // it's a container element or it's a part of a test\n    // environment that doesn't have styling. In either\n    // case it's safe not to apply styling to the element.\n    /** @type {?} */\n    const nativeStyle = native.style;\n    if (value) {\n        // opacity, z-index and flexbox all have number values\n        // and these need to be converted into strings so that\n        // they can be assigned properly.\n        value = value.toString();\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        renderer && isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            (nativeStyle && nativeStyle.setProperty(prop, value));\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        renderer && isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            (nativeStyle && nativeStyle.removeProperty(prop));\n    }\n});\nconst Éµ0$4 = setStyle;\n/**\n * Adds/removes the provided className value to the provided element.\n * @type {?}\n */\nconst setClass = (/**\n * @param {?} renderer\n * @param {?} native\n * @param {?} className\n * @param {?} value\n * @return {?}\n */\n(renderer, native, className, value) => {\n    if (className !== '') {\n        // the reason why this may be `null` is either because\n        // it's a container element or it's a part of a test\n        // environment that doesn't have styling. In either\n        // case it's safe not to apply styling to the element.\n        /** @type {?} */\n        const classList = native.classList;\n        if (value) {\n            ngDevMode && ngDevMode.rendererAddClass++;\n            renderer && isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n                (classList && classList.add(className));\n        }\n        else {\n            ngDevMode && ngDevMode.rendererRemoveClass++;\n            renderer && isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n                (classList && classList.remove(className));\n        }\n    }\n});\nconst Éµ1$1 = setClass;\n/**\n * Iterates over all provided styling entries and renders them on the element.\n *\n * This function is used alongside a `StylingMapArray` entry. This entry is not\n * the same as the `TStylingContext` and is only really used when an element contains\n * initial styling values (e.g. `<div style=\"width:200px\">`), but no style/class bindings\n * are present. If and when that happens then this function will be called to render all\n * initial styling values on an element.\n * @param {?} renderer\n * @param {?} element\n * @param {?} stylingValues\n * @param {?} isClassBased\n * @return {?}\n */\nfunction renderStylingMap(renderer, element, stylingValues, isClassBased) {\n    /** @type {?} */\n    const stylingMapArr = getStylingMapArray(stylingValues);\n    if (stylingMapArr) {\n        for (let i = 1 /* ValuesStartPosition */; i < stylingMapArr.length; i += 2 /* TupleSize */) {\n            /** @type {?} */\n            const prop = getMapProp(stylingMapArr, i);\n            /** @type {?} */\n            const value = getMapValue(stylingMapArr, i);\n            if (isClassBased) {\n                setClass(renderer, element, prop, value, null);\n            }\n            else {\n                setStyle(renderer, element, prop, value, null);\n            }\n        }\n    }\n}\n/**\n * Registers all initial styling entries into the provided context.\n *\n * This function will iterate over all entries in the provided `initialStyling` ar}ray and register\n * them as default (initial) values in the provided context. Initial styling values in a context are\n * the default values that are to be applied unless overwritten by a binding.\n *\n * The reason why this function exists and isn't a part of the context construction is because\n * host binding is evaluated at a later stage after the element is created. This means that\n * if a directive or component contains any initial styling code (i.e. `<div class=\"foo\">`)\n * then that initial styling data can only be applied once the styling for that element\n * is first applied (at the end of the update phase). Once that happens then the context will\n * update itself with the complete initial styling for the element.\n * @param {?} context\n * @param {?} initialStyling\n * @return {?}\n */\nfunction updateInitialStylingOnContext(context, initialStyling) {\n    // `-1` is used here because all initial styling data is not a spart\n    // of a binding (since it's static)\n    /** @type {?} */\n    const INITIAL_STYLING_COUNT_ID = -1;\n    for (let i = 1 /* ValuesStartPosition */; i < initialStyling.length; i += 2 /* TupleSize */) {\n        /** @type {?} */\n        const value = getMapValue(initialStyling, i);\n        if (value) {\n            /** @type {?} */\n            const prop = getMapProp(initialStyling, i);\n            registerBinding(context, INITIAL_STYLING_COUNT_ID, prop, value, false);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * A special value which designates that a value has not changed.\n * @type {?}\n */\nconst NO_CHANGE = (/** @type {?} */ ({}));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst I18nMutateOpCode = {\n    /**\n     * Stores shift amount for bits 17-3 that contain reference index.\n     */\n    SHIFT_REF: 3,\n    /**\n     * Stores shift amount for bits 31-17 that contain parent index.\n     */\n    SHIFT_PARENT: 17,\n    /**\n     * Mask for OpCode\n     */\n    MASK_OPCODE: 7,\n    /**\n     * OpCode to select a node. (next OpCode will contain the operation.)\n     */\n    Select: 0,\n    /**\n     * OpCode to append the current node to `PARENT`.\n     */\n    AppendChild: 1,\n    /**\n     * OpCode to remove the `REF` node from `PARENT`.\n     */\n    Remove: 3,\n    /**\n     * OpCode to set the attribute of a node.\n     */\n    Attr: 4,\n    /**\n     * OpCode to simulate elementEnd()\n     */\n    ElementEnd: 5,\n    /**\n     * OpCode to read the remove OpCodes for the nested ICU\n     */\n    RemoveNestedIcu: 6,\n};\n/**\n * Marks that the next string is for element.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nconst ELEMENT_MARKER = {\n    marker: 'element'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Marks that the next string is for comment.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nconst COMMENT_MARKER = {\n    marker: 'comment'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Array storing OpCode for dynamically creating `i18n` blocks.\n *\n * Example:\n * ```ts\n * <I18nCreateOpCode>[\n *   // For adding text nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createTextNode('abc');\n *   //   lView[1].insertBefore(node, lView[2]);\n *   'abc', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createTextNode('xyz');\n *   //   lView[1].appendChild(node);\n *   'xyz', 1 << SHIFT_PARENT | AppendChild,\n *\n *   // For adding element nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createElement('div');\n *   //   lView[1].insertBefore(node, lView[2]);\n *   ELEMENT_MARKER, 'div', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createElement('div');\n *   //   lView[1].appendChild(node);\n *   ELEMENT_MARKER, 'div', 1 << SHIFT_PARENT | AppendChild,\n *\n *   // For adding comment nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createComment('');\n *   //   lView[1].insertBefore(node, lView[2]);\n *   COMMENT_MARKER, '', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createComment('');\n *   //   lView[1].appendChild(node);\n *   COMMENT_MARKER, '', 1 << SHIFT_PARENT | AppendChild,\n *\n *   // For moving existing nodes to a different location\n *   // --------------------------------------------------\n *   // Equivalent to:\n *   //   const node = lView[1];\n *   //   lView[2].insertBefore(node, lView[3]);\n *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | 3 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lView[1];\n *   //   lView[2].appendChild(node);\n *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | AppendChild,\n *\n *   // For removing existing nodes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   removeChild(tView.data(1), node, lView);\n *   1 << SHIFT_REF | Remove,\n *\n *   // For writing attributes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   node.setAttribute('attr', 'value');\n *   1 << SHIFT_REF | Select, 'attr', 'value'\n *            // NOTE: Select followed by two string (vs select followed by OpCode)\n * ];\n * ```\n * NOTE:\n *   - `index` is initial location where the extra nodes should be stored in the EXPANDO section of\n * `LVIewData`.\n *\n * See: `applyI18nCreateOpCodes`;\n * @record\n */\nfunction I18nMutateOpCodes() { }\n/** @enum {number} */\nconst I18nUpdateOpCode = {\n    /**\n     * Stores shift amount for bits 17-2 that contain reference index.\n     */\n    SHIFT_REF: 2,\n    /**\n     * Mask for OpCode\n     */\n    MASK_OPCODE: 3,\n    /**\n     * OpCode to update a text node.\n     */\n    Text: 0,\n    /**\n     * OpCode to update a attribute of a node.\n     */\n    Attr: 1,\n    /**\n     * OpCode to switch the current ICU case.\n     */\n    IcuSwitch: 2,\n    /**\n     * OpCode to update the current ICU case.\n     */\n    IcuUpdate: 3,\n};\n/**\n * Stores DOM operations which need to be applied to update DOM render tree due to changes in\n * expressions.\n *\n * The basic idea is that `i18nExp` OpCodes capture expression changes and update a change\n * mask bit. (Bit 1 for expression 1, bit 2 for expression 2 etc..., bit 32 for expression 32 and\n * higher.) The OpCodes then compare its own change mask against the expression change mask to\n * determine if the OpCodes should execute.\n *\n * These OpCodes can be used by both the i18n block as well as ICU sub-block.\n *\n * ## Example\n *\n * Assume\n * ```ts\n *   if (rf & RenderFlags.Update) {\n *    i18nExp(bind(ctx.exp1)); // If changed set mask bit 1\n *    i18nExp(bind(ctx.exp2)); // If changed set mask bit 2\n *    i18nExp(bind(ctx.exp3)); // If changed set mask bit 3\n *    i18nExp(bind(ctx.exp4)); // If changed set mask bit 4\n *    i18nApply(0);            // Apply all changes by executing the OpCodes.\n *  }\n * ```\n * We can assume that each call to `i18nExp` sets an internal `changeMask` bit depending on the\n * index of `i18nExp`.\n *\n * ### OpCodes\n * ```ts\n * <I18nUpdateOpCodes>[\n *   // The following OpCodes represent: `<div i18n-title=\"pre{{exp1}}in{{exp2}}post\">`\n *   // If `changeMask & 0b11`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `7` values and start processing next OpCodes.\n *   0b11, 7,\n *   // Concatenate `newValue = 'pre'+lView[bindIndex-4]+'in'+lView[bindIndex-3]+'post';`.\n *   'pre', -4, 'in', -3, 'post',\n *   // Update attribute: `elementAttribute(1, 'title', sanitizerFn(newValue));`\n *   1 << SHIFT_REF | Attr, 'title', sanitizerFn,\n *\n *   // The following OpCodes represent: `<div i18n>Hello {{exp3}}!\">`\n *   // If `changeMask & 0b100`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n *   0b100, 4,\n *   // Concatenate `newValue = 'Hello ' + lView[bindIndex -2] + '!';`.\n *   'Hello ', -2, '!',\n *   // Update text: `lView[1].textContent = newValue;`\n *   1 << SHIFT_REF | Text,\n *\n *   // The following OpCodes represent: `<div i18n>{exp4, plural, ... }\">`\n *   // If `changeMask & 0b1000`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n *   0b1000, 4,\n *   // Concatenate `newValue = lView[bindIndex -1];`.\n *   -1,\n *   // Switch ICU: `icuSwitchCase(lView[1], 0, newValue);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuSwitch,\n *\n *   // Note `changeMask & -1` is always true, so the IcuUpdate will always execute.\n *   -1, 1,\n *   // Update ICU: `icuUpdateCase(lView[1], 0);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuUpdate,\n *\n * ];\n * ```\n *\n * @record\n */\nfunction I18nUpdateOpCodes() { }\n/**\n * Store information for the i18n translation block.\n * @record\n */\nfunction TI18n() { }\nif (false) {\n    /**\n     * Number of slots to allocate in expando.\n     *\n     * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n     * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n     * write into them.\n     * @type {?}\n     */\n    TI18n.prototype.vars;\n    /**\n     * A set of OpCodes which will create the Text Nodes and ICU anchors for the translation blocks.\n     *\n     * NOTE: The ICU anchors are filled in with ICU Update OpCode.\n     * @type {?}\n     */\n    TI18n.prototype.create;\n    /**\n     * A set of OpCodes which will be executed on each change detection to determine if any changes to\n     * DOM are required.\n     * @type {?}\n     */\n    TI18n.prototype.update;\n    /**\n     * A list of ICUs in a translation block (or `null` if block has no ICUs).\n     *\n     * Example:\n     * Given: `<div i18n>You have {count, plural, ...} and {state, switch, ...}</div>`\n     * There would be 2 ICUs in this array.\n     *   1. `{count, plural, ...}`\n     *   2. `{state, switch, ...}`\n     * @type {?}\n     */\n    TI18n.prototype.icus;\n}\n/** @enum {number} */\nconst IcuType = {\n    select: 0,\n    plural: 1,\n};\n/**\n * @record\n */\nfunction TIcu() { }\nif (false) {\n    /**\n     * Defines the ICU type of `select` or `plural`\n     * @type {?}\n     */\n    TIcu.prototype.type;\n    /**\n     * Number of slots to allocate in expando for each case.\n     *\n     * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n     * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n     * write into them.\n     * @type {?}\n     */\n    TIcu.prototype.vars;\n    /**\n     * An optional array of child/sub ICUs.\n     *\n     * In case of nested ICUs such as:\n     * ```\n     * {ï¿½0ï¿½, plural,\n     *   =0 {zero}\n     *   other {ï¿½0ï¿½ {ï¿½1ï¿½, select,\n     *                     cat {cats}\n     *                     dog {dogs}\n     *                     other {animals}\n     *                   }!\n     *   }\n     * }\n     * ```\n     * When the parent ICU is changing it must clean up child ICUs as well. For this reason it needs\n     * to know which child ICUs to run clean up for as well.\n     *\n     * In the above example this would be:\n     * ```ts\n     * [\n     *   [],   // `=0` has no sub ICUs\n     *   [1],  // `other` has one subICU at `1`st index.\n     * ]\n     * ```\n     *\n     * The reason why it is Array of Arrays is because first array represents the case, and second\n     * represents the child ICUs to clean up. There may be more than one child ICUs per case.\n     * @type {?}\n     */\n    TIcu.prototype.childIcus;\n    /**\n     * A list of case values which the current ICU will try to match.\n     *\n     * The last value is `other`\n     * @type {?}\n     */\n    TIcu.prototype.cases;\n    /**\n     * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n     * @type {?}\n     */\n    TIcu.prototype.create;\n    /**\n     * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n     * @type {?}\n     */\n    TIcu.prototype.remove;\n    /**\n     * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n     * @type {?}\n     */\n    TIcu.prototype.update;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nconst unusedValueExportToPlacateAjd$6 = 1;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?} obj\n * @param {?} debug\n * @return {?}\n */\nfunction attachDebugObject(obj, debug) {\n    Object.defineProperty(obj, 'debug', { value: debug, enumerable: false });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to apply styling values presently within any map-based bindings on an element.\n *\n * Angular supports map-based styling bindings which can be applied via the\n * `[style]` and `[class]` bindings which can be placed on any HTML element.\n * These bindings can work independently, together or alongside prop-based\n * styling bindings (e.g. `<div [style]=\"x\" [style.width]=\"w\">`).\n *\n * If a map-based styling binding is detected by the compiler, the following\n * AOT code is produced:\n *\n * ```typescript\n * styleMap(ctx.styles); // styles = {key:value}\n * classMap(ctx.classes); // classes = {key:value}|string\n * ```\n *\n * If and when either of the instructions above are evaluated, then the code\n * present in this file is included into the bundle. The mechanism used, to\n * activate support for map-based bindings at runtime is possible via the\n * `activeStylingMapFeature` function (which is also present in this file).\n *\n * # The Algorithm\n * Whenever a map-based binding updates (which is when the identity of the\n * map-value changes) then the map is iterated over and a `StylingMapArray` array\n * is produced. The `StylingMapArray` instance is stored in the binding location\n * where the `BINDING_INDEX` is situated when the `styleMap()` or `classMap()`\n * instruction were called. Once the binding changes, then the internal `bitMask`\n * value is marked as dirty.\n *\n * Styling values are applied once CD exits the element (which happens when\n * the `select(n)` instruction is called or the template function exits). When\n * this occurs, all prop-based bindings are applied. If a map-based binding is\n * present then a special flushing function (called a sync function) is made\n * available and it will be called each time a styling property is flushed.\n *\n * The flushing algorithm is designed to apply styling for a property (which is\n * a CSS property or a className value) one by one. If map-based bindings\n * are present, then the flushing algorithm will keep calling the maps styling\n * sync function each time a property is visited. This way, the flushing\n * behavior of map-based bindings will always be at the same property level\n * as the current prop-based property being iterated over (because everything\n * is alphabetically sorted).\n *\n * Let's imagine we have the following HTML template code:\n *\n * ```html\n * <div [style]=\"{width:'100px', height:'200px', 'z-index':'10'}\"\n *      [style.width.px]=\"200\">...</div>\n * ```\n *\n * When CD occurs, both the `[style]` and `[style.width]` bindings\n * are evaluated. Then when the styles are flushed on screen, the\n * following operations happen:\n *\n * 1. `[style.width]` is attempted to be written to the element.\n *\n * 2.  Once that happens, the algorithm instructs the map-based\n *     entries (`[style]` in this case) to \"catch up\" and apply\n *     all values up to the `width` value. When this happens the\n *     `height` value is applied to the element (since it is\n *     alphabetically situated before the `width` property).\n *\n * 3. Since there are no more prop-based entries anymore, the\n *    loop exits and then, just before the flushing ends, it\n *    instructs all map-based bindings to \"finish up\" applying\n *    their values.\n *\n * 4. The only remaining value within the map-based entries is\n *    the `z-index` value (`width` got skipped because it was\n *    successfully applied via the prop-based `[style.width]`\n *    binding). Since all map-based entries are told to \"finish up\",\n *    the `z-index` value is iterated over and it is then applied\n *    to the element.\n *\n * The most important thing to take note of here is that prop-based\n * bindings are evaluated in order alongside map-based bindings.\n * This allows all styling across an element to be applied in O(n)\n * time (a similar algorithm is that of the array merge algorithm\n * in merge sort).\n * @type {?}\n */\nconst syncStylingMap = (/**\n * @param {?} context\n * @param {?} renderer\n * @param {?} element\n * @param {?} data\n * @param {?} applyStylingFn\n * @param {?} sanitizer\n * @param {?} mode\n * @param {?=} targetProp\n * @param {?=} defaultValue\n * @return {?}\n */\n(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp, defaultValue) => {\n    /** @type {?} */\n    let targetPropValueWasApplied = false;\n    // once the map-based styling code is activate it is never deactivated. For this reason a\n    // check to see if the current styling context has any map based bindings is required.\n    /** @type {?} */\n    const totalMaps = getValuesCount(context, 3 /* MapBindingsPosition */);\n    if (totalMaps) {\n        /** @type {?} */\n        let runTheSyncAlgorithm = true;\n        /** @type {?} */\n        const loopUntilEnd = !targetProp;\n        // If the code is told to finish up (run until the end), but the mode\n        // hasn't been flagged to apply values (it only traverses values) then\n        // there is no point in iterating over the array because nothing will\n        // be applied to the element.\n        if (loopUntilEnd && (mode & ~1 /* ApplyAllValues */)) {\n            runTheSyncAlgorithm = false;\n            targetPropValueWasApplied = true;\n        }\n        if (runTheSyncAlgorithm) {\n            targetPropValueWasApplied = innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp || null, 0, defaultValue || null);\n        }\n        if (loopUntilEnd) {\n            resetSyncCursors();\n        }\n    }\n    return targetPropValueWasApplied;\n});\n/**\n * Recursive function designed to apply map-based styling to an element one map at a time.\n *\n * This function is designed to be called from the `syncStylingMap` function and will\n * apply map-based styling data one map at a time to the provided `element`.\n *\n * This function is recursive and it will call itself if a follow-up map value is to be\n * processed. To learn more about how the algorithm works, see `syncStylingMap`.\n * @param {?} context\n * @param {?} renderer\n * @param {?} element\n * @param {?} data\n * @param {?} applyStylingFn\n * @param {?} sanitizer\n * @param {?} mode\n * @param {?} targetProp\n * @param {?} currentMapIndex\n * @param {?} defaultValue\n * @return {?}\n */\nfunction innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp, currentMapIndex, defaultValue) {\n    /** @type {?} */\n    let targetPropValueWasApplied = false;\n    /** @type {?} */\n    const totalMaps = getValuesCount(context, 3 /* MapBindingsPosition */);\n    if (currentMapIndex < totalMaps) {\n        /** @type {?} */\n        const bindingIndex = (/** @type {?} */ (getBindingValue(context, 3 /* MapBindingsPosition */, currentMapIndex)));\n        /** @type {?} */\n        const stylingMapArr = (/** @type {?} */ (data[bindingIndex]));\n        /** @type {?} */\n        let cursor = getCurrentSyncCursor(currentMapIndex);\n        while (cursor < stylingMapArr.length) {\n            /** @type {?} */\n            const prop = getMapProp(stylingMapArr, cursor);\n            /** @type {?} */\n            const iteratedTooFar = targetProp && prop > targetProp;\n            /** @type {?} */\n            const isTargetPropMatched = !iteratedTooFar && prop === targetProp;\n            /** @type {?} */\n            const value = getMapValue(stylingMapArr, cursor);\n            /** @type {?} */\n            const valueIsDefined = isStylingValueDefined(value);\n            // the recursive code is designed to keep applying until\n            // it reaches or goes past the target prop. If and when\n            // this happens then it will stop processing values, but\n            // all other map values must also catch up to the same\n            // point. This is why a recursive call is still issued\n            // even if the code has iterated too far.\n            /** @type {?} */\n            const innerMode = iteratedTooFar ? mode : resolveInnerMapMode(mode, valueIsDefined, isTargetPropMatched);\n            /** @type {?} */\n            const innerProp = iteratedTooFar ? targetProp : prop;\n            /** @type {?} */\n            let valueApplied = innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, innerMode, innerProp, currentMapIndex + 1, defaultValue);\n            if (iteratedTooFar) {\n                if (!targetPropValueWasApplied) {\n                    targetPropValueWasApplied = valueApplied;\n                }\n                break;\n            }\n            if (!valueApplied && isValueAllowedToBeApplied(mode, isTargetPropMatched)) {\n                /** @type {?} */\n                const useDefault = isTargetPropMatched && !valueIsDefined;\n                /** @type {?} */\n                const valueToApply = useDefault ? defaultValue : value;\n                /** @type {?} */\n                const bindingIndexToApply = useDefault ? bindingIndex : null;\n                /** @type {?} */\n                const finalValue = sanitizer ?\n                    sanitizer(prop, valueToApply, 3 /* ValidateAndSanitize */) :\n                    valueToApply;\n                applyStylingFn(renderer, element, prop, finalValue, bindingIndexToApply);\n                valueApplied = true;\n            }\n            targetPropValueWasApplied = valueApplied && isTargetPropMatched;\n            cursor += 2 /* TupleSize */;\n        }\n        setCurrentSyncCursor(currentMapIndex, cursor);\n        // this is a fallback case in the event that the styling map is `null` for this\n        // binding but there are other map-based bindings that need to be evaluated\n        // afterwards. If the `prop` value is falsy then the intention is to cycle\n        // through all of the properties in the remaining maps as well. If the current\n        // styling map is too short then there are no values to iterate over. In either\n        // case the follow-up maps need to be iterated over.\n        if (stylingMapArr.length === 1 /* ValuesStartPosition */ || !targetProp) {\n            return innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp, currentMapIndex + 1, defaultValue);\n        }\n    }\n    return targetPropValueWasApplied;\n}\n/**\n * Enables support for map-based styling bindings (e.g. `[style]` and `[class]` bindings).\n * @return {?}\n */\nfunction activateStylingMapFeature() {\n    setStylingMapsSyncFn(syncStylingMap);\n}\n/**\n * Used to determine the mode for the inner recursive call.\n *\n * If an inner map is iterated on then this is done so for one\n * of two reasons:\n *\n * - value is being applied:\n *   if the value is being applied from this current styling\n *   map then there is no need to apply it in a deeper map.\n *\n * - value is being not applied:\n *   apply the value if it is found in a deeper map.\n *\n * When these reasons are encountered the flags will for the\n * inner map mode will be configured.\n * @param {?} currentMode\n * @param {?} valueIsDefined\n * @param {?} isExactMatch\n * @return {?}\n */\nfunction resolveInnerMapMode(currentMode, valueIsDefined, isExactMatch) {\n    /** @type {?} */\n    let innerMode = currentMode;\n    if (!valueIsDefined && !(currentMode & 4 /* SkipTargetProp */) &&\n        (isExactMatch || (currentMode & 1 /* ApplyAllValues */))) {\n        // case 1: set the mode to apply the targeted prop value if it\n        // ends up being encountered in another map value\n        innerMode |= 2 /* ApplyTargetProp */;\n        innerMode &= ~4 /* SkipTargetProp */;\n    }\n    else {\n        // case 2: set the mode to skip the targeted prop value if it\n        // ends up being encountered in another map value\n        innerMode |= 4 /* SkipTargetProp */;\n        innerMode &= ~2 /* ApplyTargetProp */;\n    }\n    return innerMode;\n}\n/**\n * Decides whether or not a prop/value entry will be applied to an element.\n *\n * To determine whether or not a value is to be applied,\n * the following procedure is evaluated:\n *\n * First check to see the current `mode` status:\n *  1. If the mode value permits all props to be applied then allow.\n *    - But do not allow if the current prop is set to be skipped.\n *  2. Otherwise if the current prop is permitted then allow.\n * @param {?} mode\n * @param {?} isTargetPropMatched\n * @return {?}\n */\nfunction isValueAllowedToBeApplied(mode, isTargetPropMatched) {\n    /** @type {?} */\n    let doApplyValue = (mode & 1 /* ApplyAllValues */) > 0;\n    if (!doApplyValue) {\n        if (mode & 2 /* ApplyTargetProp */) {\n            doApplyValue = isTargetPropMatched;\n        }\n    }\n    else if ((mode & 4 /* SkipTargetProp */) && isTargetPropMatched) {\n        doApplyValue = false;\n    }\n    return doApplyValue;\n}\n/**\n * Used to keep track of concurrent cursor values for multiple map-based styling bindings present on\n * an element.\n * @type {?}\n */\nconst MAP_CURSORS = [];\n/**\n * Used to reset the state of each cursor value being used to iterate over map-based styling\n * bindings.\n * @return {?}\n */\nfunction resetSyncCursors() {\n    for (let i = 0; i < MAP_CURSORS.length; i++) {\n        MAP_CURSORS[i] = 1 /* ValuesStartPosition */;\n    }\n}\n/**\n * Returns an active cursor value at a given mapIndex location.\n * @param {?} mapIndex\n * @return {?}\n */\nfunction getCurrentSyncCursor(mapIndex) {\n    if (mapIndex >= MAP_CURSORS.length) {\n        MAP_CURSORS.push(1 /* ValuesStartPosition */);\n    }\n    return MAP_CURSORS[mapIndex];\n}\n/**\n * Sets a cursor value at a given mapIndex location.\n * @param {?} mapIndex\n * @param {?} indexValue\n * @return {?}\n */\nfunction setCurrentSyncCursor(mapIndex, indexValue) {\n    MAP_CURSORS[mapIndex] = indexValue;\n}\n/**\n * Used to convert a {key:value} map into a `StylingMapArray` array.\n *\n * This function will either generate a new `StylingMapArray` instance\n * or it will patch the provided `newValues` map value into an\n * existing `StylingMapArray` value (this only happens if `bindingValue`\n * is an instance of `StylingMapArray`).\n *\n * If a new key/value map is provided with an old `StylingMapArray`\n * value then all properties will be overwritten with their new\n * values or with `null`. This means that the array will never\n * shrink in size (but it will also not be created and thrown\n * away whenever the {key:value} map entries change).\n * @param {?} bindingValue\n * @param {?} newValues\n * @param {?=} normalizeProps\n * @return {?}\n */\nfunction normalizeIntoStylingMap(bindingValue, newValues, normalizeProps) {\n    /** @type {?} */\n    const stylingMapArr = Array.isArray(bindingValue) ? bindingValue : [null];\n    stylingMapArr[0 /* RawValuePosition */] = newValues || null;\n    // because the new values may not include all the properties\n    // that the old ones had, all values are set to `null` before\n    // the new values are applied. This way, when flushed, the\n    // styling algorithm knows exactly what style/class values\n    // to remove from the element (since they are `null`).\n    for (let j = 1 /* ValuesStartPosition */; j < stylingMapArr.length; j += 2 /* TupleSize */) {\n        setMapValue(stylingMapArr, j, null);\n    }\n    /** @type {?} */\n    let props = null;\n    /** @type {?} */\n    let map;\n    /** @type {?} */\n    let allValuesTrue = false;\n    if (typeof newValues === 'string') { // [class] bindings allow string values\n        if (newValues.length) {\n            props = newValues.split(/\\s+/);\n            allValuesTrue = true;\n        }\n    }\n    else {\n        props = newValues ? Object.keys(newValues) : null;\n        map = newValues;\n    }\n    if (props) {\n        for (let i = 0; i < props.length; i++) {\n            /** @type {?} */\n            const prop = (/** @type {?} */ (props[i]));\n            /** @type {?} */\n            const newProp = normalizeProps ? hyphenate(prop) : prop;\n            /** @type {?} */\n            const value = allValuesTrue ? true : (/** @type {?} */ (map))[prop];\n            addItemToStylingMap(stylingMapArr, newProp, value, true);\n        }\n    }\n    return stylingMapArr;\n}\n/**\n * Inserts the provided item into the provided styling array at the right spot.\n *\n * The `StylingMapArray` type is a sorted key/value array of entries. This means\n * that when a new entry is inserted it must be placed at the right spot in the\n * array. This function figures out exactly where to place it.\n * @param {?} stylingMapArr\n * @param {?} prop\n * @param {?} value\n * @param {?=} allowOverwrite\n * @return {?}\n */\nfunction addItemToStylingMap(stylingMapArr, prop, value, allowOverwrite) {\n    for (let j = 1 /* ValuesStartPosition */; j < stylingMapArr.length; j += 2 /* TupleSize */) {\n        /** @type {?} */\n        const propAtIndex = getMapProp(stylingMapArr, j);\n        if (prop <= propAtIndex) {\n            /** @type {?} */\n            let applied = false;\n            if (propAtIndex === prop) {\n                /** @type {?} */\n                const valueAtIndex = stylingMapArr[j];\n                if (allowOverwrite || !isStylingValueDefined(valueAtIndex)) {\n                    applied = true;\n                    setMapValue(stylingMapArr, j, value);\n                }\n            }\n            else {\n                applied = true;\n                stylingMapArr.splice(j, 0, prop, value);\n            }\n            return applied;\n        }\n    }\n    stylingMapArr.push(prop, value);\n    return true;\n}\n/**\n * Converts the provided styling map array into a string.\n *\n * Classes => `one two three`\n * Styles => `prop:value; prop2:value2`\n * @param {?} map\n * @param {?} isClassBased\n * @return {?}\n */\nfunction stylingMapToString(map, isClassBased) {\n    /** @type {?} */\n    let str = '';\n    for (let i = 1 /* ValuesStartPosition */; i < map.length; i += 2 /* TupleSize */) {\n        /** @type {?} */\n        const prop = getMapProp(map, i);\n        /** @type {?} */\n        const value = (/** @type {?} */ (getMapValue(map, i)));\n        /** @type {?} */\n        const attrValue = concatString(prop, isClassBased ? '' : value, ':');\n        str = concatString(str, attrValue, isClassBased ? ' ' : '; ');\n    }\n    return str;\n}\n/**\n * Converts the provided styling map array into a key value map.\n * @param {?} map\n * @return {?}\n */\nfunction stylingMapToStringMap(map) {\n    /** @type {?} */\n    let stringMap = {};\n    if (map) {\n        for (let i = 1 /* ValuesStartPosition */; i < map.length; i += 2 /* TupleSize */) {\n            /** @type {?} */\n            const prop = getMapProp(map, i);\n            /** @type {?} */\n            const value = (/** @type {?} */ (getMapValue(map, i)));\n            stringMap[prop] = value;\n        }\n    }\n    return stringMap;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A debug/testing-oriented summary of a styling entry.\n *\n * A value such as this is generated as an artifact of the `DebugStyling`\n * summary.\n * @record\n */\nfunction LStylingSummary() { }\nif (false) {\n    /**\n     * The style/class property that the summary is attached to\n     * @type {?}\n     */\n    LStylingSummary.prototype.prop;\n    /**\n     * The last applied value for the style/class property\n     * @type {?}\n     */\n    LStylingSummary.prototype.value;\n    /**\n     * The binding index of the last applied style/class property\n     * @type {?}\n     */\n    LStylingSummary.prototype.bindingIndex;\n}\n/**\n * A debug/testing-oriented summary of all styling entries for a `DebugNode` instance.\n * @record\n */\nfunction DebugStyling() { }\nif (false) {\n    /**\n     * The associated TStylingContext instance\n     * @type {?}\n     */\n    DebugStyling.prototype.context;\n    /**\n     * A summarization of each style/class property\n     * present in the context.\n     * @type {?}\n     */\n    DebugStyling.prototype.summary;\n    /**\n     * A key/value map of all styling properties and their\n     * runtime values.\n     * @type {?}\n     */\n    DebugStyling.prototype.values;\n    /**\n     * Overrides the sanitizer used to process styles.\n     * @param {?} sanitizer\n     * @return {?}\n     */\n    DebugStyling.prototype.overrideSanitizer = function (sanitizer) { };\n}\n/**\n * A debug/testing-oriented summary of all styling entries within a `TStylingContext`.\n * @record\n */\nfunction TStylingTupleSummary() { }\nif (false) {\n    /**\n     * The property (style or class property) that this tuple represents\n     * @type {?}\n     */\n    TStylingTupleSummary.prototype.prop;\n    /**\n     * The total amount of styling entries a part of this tuple\n     * @type {?}\n     */\n    TStylingTupleSummary.prototype.valuesCount;\n    /**\n     * The bit guard mask that is used to compare and protect against\n     * styling changes when and styling bindings update\n     * @type {?}\n     */\n    TStylingTupleSummary.prototype.guardMask;\n    /**\n     * Whether or not the entry requires sanitization\n     * @type {?}\n     */\n    TStylingTupleSummary.prototype.sanitizationRequired;\n    /**\n     * The default value that will be applied if any bindings are falsy.\n     * @type {?}\n     */\n    TStylingTupleSummary.prototype.defaultValue;\n    /**\n     * All bindingIndex sources that have been registered for this style.\n     * @type {?}\n     */\n    TStylingTupleSummary.prototype.sources;\n}\n/**\n * Instantiates and attaches an instance of `TStylingContextDebug` to the provided context.\n * @param {?} context\n * @return {?}\n */\nfunction attachStylingDebugObject(context) {\n    /** @type {?} */\n    const debug = new TStylingContextDebug(context);\n    attachDebugObject(context, debug);\n    return debug;\n}\n/**\n * A human-readable debug summary of the styling data present within `TStylingContext`.\n *\n * This class is designed to be used within testing code or when an\n * application has `ngDevMode` activated.\n */\nclass TStylingContextDebug {\n    /**\n     * @param {?} context\n     */\n    constructor(context) {\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get isLocked() { return isContextLocked(this.context); }\n    /**\n     * Returns a detailed summary of each styling entry in the context.\n     *\n     * See `TStylingTupleSummary`.\n     * @return {?}\n     */\n    get entries() {\n        /** @type {?} */\n        const context = this.context;\n        /** @type {?} */\n        const entries = {};\n        /** @type {?} */\n        const start = 3 /* MapBindingsPosition */;\n        /** @type {?} */\n        let i = start;\n        while (i < context.length) {\n            /** @type {?} */\n            const valuesCount = getValuesCount(context, i);\n            // the context may contain placeholder values which are populated ahead of time,\n            // but contain no actual binding values. In this situation there is no point in\n            // classifying this as an \"entry\" since no real data is stored here yet.\n            if (valuesCount) {\n                /** @type {?} */\n                const prop = getProp(context, i);\n                /** @type {?} */\n                const guardMask = getGuardMask(context, i);\n                /** @type {?} */\n                const defaultValue = getDefaultValue(context, i);\n                /** @type {?} */\n                const sanitizationRequired = isSanitizationRequired(context, i);\n                /** @type {?} */\n                const bindingsStartPosition = i + 3 /* BindingsStartOffset */;\n                /** @type {?} */\n                const sources = [];\n                for (let j = 0; j < valuesCount; j++) {\n                    sources.push((/** @type {?} */ (context[bindingsStartPosition + j])));\n                }\n                entries[prop] = { prop, guardMask, sanitizationRequired, valuesCount, defaultValue, sources };\n            }\n            i += 3 /* BindingsStartOffset */ + valuesCount;\n        }\n        return entries;\n    }\n}\nif (false) {\n    /** @type {?} */\n    TStylingContextDebug.prototype.context;\n}\n/**\n * A human-readable debug summary of the styling data present for a `DebugNode` instance.\n *\n * This class is designed to be used within testing code or when an\n * application has `ngDevMode` activated.\n */\nclass NodeStylingDebug {\n    /**\n     * @param {?} context\n     * @param {?} _data\n     * @param {?=} _isClassBased\n     */\n    constructor(context, _data, _isClassBased) {\n        this.context = context;\n        this._data = _data;\n        this._isClassBased = _isClassBased;\n        this._sanitizer = null;\n    }\n    /**\n     * Overrides the sanitizer used to process styles.\n     * @param {?} sanitizer\n     * @return {?}\n     */\n    overrideSanitizer(sanitizer) { this._sanitizer = sanitizer; }\n    /**\n     * Returns a detailed summary of each styling entry in the context and\n     * what their runtime representation is.\n     *\n     * See `LStylingSummary`.\n     * @return {?}\n     */\n    get summary() {\n        /** @type {?} */\n        const entries = {};\n        this._mapValues((/**\n         * @param {?} prop\n         * @param {?} value\n         * @param {?} bindingIndex\n         * @return {?}\n         */\n        (prop, value, bindingIndex) => {\n            entries[prop] = { prop, value, bindingIndex };\n        }));\n        return entries;\n    }\n    /**\n     * Returns a key/value map of all the styles/classes that were last applied to the element.\n     * @return {?}\n     */\n    get values() {\n        /** @type {?} */\n        const entries = {};\n        this._mapValues((/**\n         * @param {?} prop\n         * @param {?} value\n         * @return {?}\n         */\n        (prop, value) => { entries[prop] = value; }));\n        return entries;\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _mapValues(fn) {\n        // there is no need to store/track an element instance. The\n        // element is only used when the styling algorithm attempts to\n        // style the value (and we mock out the stylingApplyFn anyway).\n        /** @type {?} */\n        const mockElement = (/** @type {?} */ ({}));\n        /** @type {?} */\n        const hasMaps = getValuesCount(this.context, 3 /* MapBindingsPosition */) > 0;\n        if (hasMaps) {\n            activateStylingMapFeature();\n        }\n        /** @type {?} */\n        const mapFn = (/**\n         * @param {?} renderer\n         * @param {?} element\n         * @param {?} prop\n         * @param {?} value\n         * @param {?=} bindingIndex\n         * @return {?}\n         */\n        (renderer, element, prop, value, bindingIndex) => { fn(prop, value, bindingIndex || null); });\n        /** @type {?} */\n        const sanitizer = this._isClassBased ? null : (this._sanitizer || getCurrentStyleSanitizer());\n        applyStyling(this.context, null, mockElement, this._data, true, mapFn, sanitizer);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NodeStylingDebug.prototype._sanitizer;\n    /** @type {?} */\n    NodeStylingDebug.prototype.context;\n    /**\n     * @type {?}\n     * @private\n     */\n    NodeStylingDebug.prototype._data;\n    /**\n     * @type {?}\n     * @private\n     */\n    NodeStylingDebug.prototype._isClassBased;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n * This file contains conditionally attached classes which provide human readable (debug) level\n * information for `LView`, `LContainer` and other internal data structures. These data structures\n * are stored internally as array which makes it very difficult during debugging to reason about the\n * current state of the system.\n *\n * Patching the array with extra property does change the array's hidden class' but it does not\n * change the cost of access, therefore this patching should not have significant if any impact in\n * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)\n *\n * So instead of seeing:\n * ```\n * Array(30) [Object, 659, null, â¦]\n * ```\n *\n * You get to see:\n * ```\n * LViewDebug {\n *   views: [...],\n *   flags: {attached: true, ...}\n *   nodes: [\n *     {html: '<div id=\"123\">', ..., nodes: [\n *       {html: '<span>', ..., nodes: null}\n *     ]}\n *   ]\n * }\n * ```\n */\n/** @type {?} */\nconst LViewArray = ngDevMode && createNamedArrayType('LView');\n/** @type {?} */\nlet LVIEW_EMPTY;\n// can't initialize here or it will not be tree shaken, because `LView`\n// constructor could have side-effects.\n/**\n * This function clones a blueprint and creates LView.\n *\n * Simple slice will keep the same type, and we need it to be LView\n * @param {?} list\n * @return {?}\n */\nfunction cloneToLView(list) {\n    if (LVIEW_EMPTY === undefined)\n        LVIEW_EMPTY = new (/** @type {?} */ (LViewArray))();\n    return (/** @type {?} */ (LVIEW_EMPTY.concat(list)));\n}\n/**\n * This class is a debug version of Object literal so that we can have constructor name show up in\n * debug tools in ngDevMode.\n * @type {?}\n */\nconst TViewConstructor = class TView {\n    /**\n     * @param {?} id\n     * @param {?} blueprint\n     * @param {?} template\n     * @param {?} queries\n     * @param {?} viewQuery\n     * @param {?} node\n     * @param {?} data\n     * @param {?} bindingStartIndex\n     * @param {?} expandoStartIndex\n     * @param {?} expandoInstructions\n     * @param {?} firstTemplatePass\n     * @param {?} staticViewQueries\n     * @param {?} staticContentQueries\n     * @param {?} preOrderHooks\n     * @param {?} preOrderCheckHooks\n     * @param {?} contentHooks\n     * @param {?} contentCheckHooks\n     * @param {?} viewHooks\n     * @param {?} viewCheckHooks\n     * @param {?} destroyHooks\n     * @param {?} cleanup\n     * @param {?} contentQueries\n     * @param {?} components\n     * @param {?} directiveRegistry\n     * @param {?} pipeRegistry\n     * @param {?} firstChild\n     * @param {?} schemas\n     */\n    constructor(id, //\n    blueprint, //\n    template, //\n    queries, //\n    viewQuery, //\n    node, //\n    data, //\n    bindingStartIndex, //\n    expandoStartIndex, //\n    expandoInstructions, //\n    firstTemplatePass, //\n    staticViewQueries, //\n    staticContentQueries, //\n    preOrderHooks, //\n    preOrderCheckHooks, //\n    contentHooks, //\n    contentCheckHooks, //\n    viewHooks, //\n    viewCheckHooks, //\n    destroyHooks, //\n    cleanup, //\n    contentQueries, //\n    components, //\n    directiveRegistry, //\n    pipeRegistry, //\n    firstChild, //\n    schemas) {\n        this.id = id;\n        this.blueprint = blueprint;\n        this.template = template;\n        this.queries = queries;\n        this.viewQuery = viewQuery;\n        this.node = node;\n        this.data = data;\n        this.bindingStartIndex = bindingStartIndex;\n        this.expandoStartIndex = expandoStartIndex;\n        this.expandoInstructions = expandoInstructions;\n        this.firstTemplatePass = firstTemplatePass;\n        this.staticViewQueries = staticViewQueries;\n        this.staticContentQueries = staticContentQueries;\n        this.preOrderHooks = preOrderHooks;\n        this.preOrderCheckHooks = preOrderCheckHooks;\n        this.contentHooks = contentHooks;\n        this.contentCheckHooks = contentCheckHooks;\n        this.viewHooks = viewHooks;\n        this.viewCheckHooks = viewCheckHooks;\n        this.destroyHooks = destroyHooks;\n        this.cleanup = cleanup;\n        this.contentQueries = contentQueries;\n        this.components = components;\n        this.directiveRegistry = directiveRegistry;\n        this.pipeRegistry = pipeRegistry;\n        this.firstChild = firstChild;\n        this.schemas = schemas;\n    }\n};\n/** @type {?} */\nconst TNodeConstructor = class TNode {\n    /**\n     * @param {?} tView_\n     * @param {?} type\n     * @param {?} index\n     * @param {?} injectorIndex\n     * @param {?} directiveStart\n     * @param {?} directiveEnd\n     * @param {?} propertyMetadataStartIndex\n     * @param {?} propertyMetadataEndIndex\n     * @param {?} flags\n     * @param {?} providerIndexes\n     * @param {?} tagName\n     * @param {?} attrs\n     * @param {?} localNames\n     * @param {?} initialInputs\n     * @param {?} inputs\n     * @param {?} outputs\n     * @param {?} tViews\n     * @param {?} next\n     * @param {?} projectionNext\n     * @param {?} child\n     * @param {?} parent\n     * @param {?} projection\n     * @param {?} styles\n     * @param {?} classes\n     */\n    constructor(tView_, //\n    type, //\n    index, //\n    injectorIndex, //\n    directiveStart, //\n    directiveEnd, //\n    propertyMetadataStartIndex, //\n    propertyMetadataEndIndex, //\n    flags, //\n    providerIndexes, //\n    tagName, //\n    attrs, //\n    localNames, //\n    initialInputs, //\n    inputs, //\n    outputs, //\n    tViews, //\n    next, //\n    projectionNext, //\n    child, //\n    parent, //\n    projection, //\n    styles, //\n    classes) {\n        this.tView_ = tView_;\n        this.type = type;\n        this.index = index;\n        this.injectorIndex = injectorIndex;\n        this.directiveStart = directiveStart;\n        this.directiveEnd = directiveEnd;\n        this.propertyMetadataStartIndex = propertyMetadataStartIndex;\n        this.propertyMetadataEndIndex = propertyMetadataEndIndex;\n        this.flags = flags;\n        this.providerIndexes = providerIndexes;\n        this.tagName = tagName;\n        this.attrs = attrs;\n        this.localNames = localNames;\n        this.initialInputs = initialInputs;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.tViews = tViews;\n        this.next = next;\n        this.projectionNext = projectionNext;\n        this.child = child;\n        this.parent = parent;\n        this.projection = projection;\n        this.styles = styles;\n        this.classes = classes;\n    }\n    /**\n     * @return {?}\n     */\n    get type_() {\n        switch (this.type) {\n            case 0 /* Container */:\n                return 'TNodeType.Container';\n            case 3 /* Element */:\n                return 'TNodeType.Element';\n            case 4 /* ElementContainer */:\n                return 'TNodeType.ElementContainer';\n            case 5 /* IcuContainer */:\n                return 'TNodeType.IcuContainer';\n            case 1 /* Projection */:\n                return 'TNodeType.Projection';\n            case 2 /* View */:\n                return 'TNodeType.View';\n            default:\n                return 'TNodeType.???';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get flags_() {\n        /** @type {?} */\n        const flags = [];\n        if (this.flags & 8 /* hasClassInput */)\n            flags.push('TNodeFlags.hasClassInput');\n        if (this.flags & 4 /* hasContentQuery */)\n            flags.push('TNodeFlags.hasContentQuery');\n        if (this.flags & 16 /* hasStyleInput */)\n            flags.push('TNodeFlags.hasStyleInput');\n        if (this.flags & 1 /* isComponent */)\n            flags.push('TNodeFlags.isComponent');\n        if (this.flags & 32 /* isDetached */)\n            flags.push('TNodeFlags.isDetached');\n        if (this.flags & 2 /* isProjected */)\n            flags.push('TNodeFlags.isProjected');\n        return flags.join('|');\n    }\n};\n/** @type {?} */\nconst TViewData = ngDevMode && createNamedArrayType('TViewData');\n/** @type {?} */\nlet TVIEWDATA_EMPTY;\n// can't initialize here or it will not be tree shaken, because `LView`\n// constructor could have side-effects.\n/**\n * This function clones a blueprint and creates TData.\n *\n * Simple slice will keep the same type, and we need it to be TData\n * @param {?} list\n * @return {?}\n */\nfunction cloneToTViewData(list) {\n    if (TVIEWDATA_EMPTY === undefined)\n        TVIEWDATA_EMPTY = new (/** @type {?} */ (TViewData))();\n    return (/** @type {?} */ (TVIEWDATA_EMPTY.concat(list)));\n}\n/** @type {?} */\nconst LViewBlueprint = ngDevMode && createNamedArrayType('LViewBlueprint');\n/** @type {?} */\nconst MatchesArray = ngDevMode && createNamedArrayType('MatchesArray');\n/** @type {?} */\nconst TViewComponents = ngDevMode && createNamedArrayType('TViewComponents');\n/** @type {?} */\nconst TNodeLocalNames = ngDevMode && createNamedArrayType('TNodeLocalNames');\n/** @type {?} */\nconst TNodeInitialInputs = ngDevMode && createNamedArrayType('TNodeInitialInputs');\n/** @type {?} */\nconst TNodeInitialData = ngDevMode && createNamedArrayType('TNodeInitialData');\n/** @type {?} */\nconst LCleanup = ngDevMode && createNamedArrayType('LCleanup');\n/** @type {?} */\nconst TCleanup = ngDevMode && createNamedArrayType('TCleanup');\n/**\n * @param {?} lView\n * @return {?}\n */\nfunction attachLViewDebug(lView) {\n    attachDebugObject(lView, new LViewDebug(lView));\n}\n/**\n * @param {?} lContainer\n * @return {?}\n */\nfunction attachLContainerDebug(lContainer) {\n    attachDebugObject(lContainer, new LContainerDebug(lContainer));\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction toDebug(obj) {\n    if (obj) {\n        /** @type {?} */\n        const debug = ((/** @type {?} */ (obj))).debug;\n        assertDefined(debug, 'Object does not have a debug representation.');\n        return debug;\n    }\n    else {\n        return obj;\n    }\n}\n/**\n * Use this method to unwrap a native element in `LView` and convert it into HTML for easier\n * reading.\n *\n * @param {?} value possibly wrapped native DOM node.\n * @param {?=} includeChildren If `true` then the serialized HTML form will include child elements (same\n * as `outerHTML`). If `false` then the serialized HTML form will only contain the element itself\n * (will not serialize child elements).\n * @return {?}\n */\nfunction toHtml(value, includeChildren = false) {\n    /** @type {?} */\n    const node = (/** @type {?} */ (unwrapRNode(value)));\n    if (node) {\n        /** @type {?} */\n        const isTextNode = node.nodeType === Node.TEXT_NODE;\n        /** @type {?} */\n        const outerHTML = (isTextNode ? node.textContent : node.outerHTML) || '';\n        if (includeChildren || isTextNode) {\n            return outerHTML;\n        }\n        else {\n            /** @type {?} */\n            const innerHTML = node.innerHTML;\n            return outerHTML.split(innerHTML)[0] || null;\n        }\n    }\n    else {\n        return null;\n    }\n}\nclass LViewDebug {\n    /**\n     * @param {?} _raw_lView\n     */\n    constructor(_raw_lView) {\n        this._raw_lView = _raw_lView;\n    }\n    /**\n     * Flags associated with the `LView` unpacked into a more readable state.\n     * @return {?}\n     */\n    get flags() {\n        /** @type {?} */\n        const flags = this._raw_lView[FLAGS];\n        return {\n            __raw__flags__: flags,\n            initPhaseState: flags & 3 /* InitPhaseStateMask */,\n            creationMode: !!(flags & 4 /* CreationMode */),\n            firstViewPass: !!(flags & 8 /* FirstLViewPass */),\n            checkAlways: !!(flags & 16 /* CheckAlways */),\n            dirty: !!(flags & 64 /* Dirty */),\n            attached: !!(flags & 128 /* Attached */),\n            destroyed: !!(flags & 256 /* Destroyed */),\n            isRoot: !!(flags & 512 /* IsRoot */),\n            indexWithinInitPhase: flags >> 10 /* IndexWithinInitPhaseShift */,\n        };\n    }\n    /**\n     * @return {?}\n     */\n    get parent() { return toDebug(this._raw_lView[PARENT]); }\n    /**\n     * @return {?}\n     */\n    get host() { return toHtml(this._raw_lView[HOST], true); }\n    /**\n     * @return {?}\n     */\n    get context() { return this._raw_lView[CONTEXT]; }\n    /**\n     * The tree of nodes associated with the current `LView`. The nodes have been normalized into a\n     * tree structure with relevant details pulled out for readability.\n     * @return {?}\n     */\n    get nodes() {\n        /** @type {?} */\n        const lView = this._raw_lView;\n        /** @type {?} */\n        const tNode = lView[TVIEW].firstChild;\n        return toDebugNodes(tNode, lView);\n    }\n    /**\n     * Additional information which is hidden behind a property. The extra level of indirection is\n     * done so that the debug view would not be cluttered with properties which are only rarely\n     * relevant to the developer.\n     * @return {?}\n     */\n    get __other__() {\n        return {\n            tView: this._raw_lView[TVIEW],\n            cleanup: this._raw_lView[CLEANUP],\n            injector: this._raw_lView[INJECTOR$1],\n            rendererFactory: this._raw_lView[RENDERER_FACTORY],\n            renderer: this._raw_lView[RENDERER],\n            sanitizer: this._raw_lView[SANITIZER],\n            childHead: toDebug(this._raw_lView[CHILD_HEAD]),\n            next: toDebug(this._raw_lView[NEXT]),\n            childTail: toDebug(this._raw_lView[CHILD_TAIL]),\n            declarationView: toDebug(this._raw_lView[DECLARATION_VIEW]),\n            queries: null,\n            tHost: this._raw_lView[T_HOST],\n            bindingIndex: this._raw_lView[BINDING_INDEX],\n        };\n    }\n    /**\n     * Normalized view of child views (and containers) attached at this location.\n     * @return {?}\n     */\n    get childViews() {\n        /** @type {?} */\n        const childViews = [];\n        /** @type {?} */\n        let child = this.__other__.childHead;\n        while (child) {\n            childViews.push(child);\n            child = child.__other__.next;\n        }\n        return childViews;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    LViewDebug.prototype._raw_lView;\n}\n/**\n * @record\n */\nfunction DebugNode() { }\nif (false) {\n    /** @type {?} */\n    DebugNode.prototype.html;\n    /** @type {?} */\n    DebugNode.prototype.native;\n    /** @type {?} */\n    DebugNode.prototype.styles;\n    /** @type {?} */\n    DebugNode.prototype.classes;\n    /** @type {?} */\n    DebugNode.prototype.nodes;\n    /** @type {?} */\n    DebugNode.prototype.component;\n}\n/**\n * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.\n *\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction toDebugNodes(tNode, lView) {\n    if (tNode) {\n        /** @type {?} */\n        const debugNodes = [];\n        /** @type {?} */\n        let tNodeCursor = tNode;\n        while (tNodeCursor) {\n            /** @type {?} */\n            const rawValue = lView[tNode.index];\n            /** @type {?} */\n            const native = unwrapRNode(rawValue);\n            /** @type {?} */\n            const componentLViewDebug = toDebug(readLViewValue(rawValue));\n            /** @type {?} */\n            const styles = isStylingContext(tNode.styles) ?\n                new NodeStylingDebug((/** @type {?} */ ((/** @type {?} */ (tNode.styles)))), lView) :\n                null;\n            /** @type {?} */\n            const classes = isStylingContext(tNode.classes) ?\n                new NodeStylingDebug((/** @type {?} */ ((/** @type {?} */ (tNode.classes)))), lView, true) :\n                null;\n            debugNodes.push({\n                html: toHtml(native),\n                native: (/** @type {?} */ (native)), styles, classes,\n                nodes: toDebugNodes(tNode.child, lView),\n                component: componentLViewDebug,\n            });\n            tNodeCursor = tNodeCursor.next;\n        }\n        return debugNodes;\n    }\n    else {\n        return null;\n    }\n}\nclass LContainerDebug {\n    /**\n     * @param {?} _raw_lContainer\n     */\n    constructor(_raw_lContainer) {\n        this._raw_lContainer = _raw_lContainer;\n    }\n    /**\n     * @return {?}\n     */\n    get activeIndex() { return this._raw_lContainer[ACTIVE_INDEX]; }\n    /**\n     * @return {?}\n     */\n    get views() {\n        return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET)\n            .map((/** @type {?} */ (toDebug)));\n    }\n    /**\n     * @return {?}\n     */\n    get parent() { return toDebug(this._raw_lContainer[PARENT]); }\n    /**\n     * @return {?}\n     */\n    get movedViews() { return this._raw_lContainer[MOVED_VIEWS]; }\n    /**\n     * @return {?}\n     */\n    get host() { return this._raw_lContainer[HOST]; }\n    /**\n     * @return {?}\n     */\n    get native() { return this._raw_lContainer[NATIVE]; }\n    /**\n     * @return {?}\n     */\n    get __other__() {\n        return {\n            next: toDebug(this._raw_lContainer[NEXT]),\n        };\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    LContainerDebug.prototype._raw_lContainer;\n}\n/**\n * Return an `LView` value if found.\n *\n * @param {?} value `LView` if any\n * @return {?}\n */\nfunction readLViewValue(value) {\n    while (Array.isArray(value)) {\n        // This check is not quite right, as it does not take into account `StylingContext`\n        // This is why it is in debug, not in util.ts\n        if (value.length >= HEADER_OFFSET - 1)\n            return (/** @type {?} */ (value));\n        value = value[HOST];\n    }\n    return null;\n}\nclass I18NDebugItem {\n    /**\n     * @param {?} __raw_opCode\n     * @param {?} _lView\n     * @param {?} nodeIndex\n     * @param {?} type\n     */\n    constructor(__raw_opCode, _lView, nodeIndex, type) {\n        this.__raw_opCode = __raw_opCode;\n        this._lView = _lView;\n        this.nodeIndex = nodeIndex;\n        this.type = type;\n    }\n    /**\n     * @return {?}\n     */\n    get tNode() { return getTNode(this.nodeIndex, this._lView); }\n}\nif (false) {\n    /** @type {?} */\n    I18NDebugItem.prototype.__raw_opCode;\n    /**\n     * @type {?}\n     * @private\n     */\n    I18NDebugItem.prototype._lView;\n    /** @type {?} */\n    I18NDebugItem.prototype.nodeIndex;\n    /** @type {?} */\n    I18NDebugItem.prototype.type;\n    /* Skipping unhandled member: [key: string]: any;*/\n}\n/**\n * Turns a list of \"Create\" & \"Update\" OpCodes into a human-readable list of operations for\n * debugging purposes.\n * @param {?} mutateOpCodes mutation opCodes to read\n * @param {?} updateOpCodes update opCodes to read\n * @param {?} icus list of ICU expressions\n * @param {?} lView The view the opCodes are acting on\n * @return {?}\n */\nfunction attachI18nOpCodesDebug(mutateOpCodes, updateOpCodes, icus, lView) {\n    attachDebugObject(mutateOpCodes, new I18nMutateOpCodesDebug(mutateOpCodes, lView));\n    attachDebugObject(updateOpCodes, new I18nUpdateOpCodesDebug(updateOpCodes, icus, lView));\n    if (icus) {\n        icus.forEach((/**\n         * @param {?} icu\n         * @return {?}\n         */\n        icu => {\n            icu.create.forEach((/**\n             * @param {?} icuCase\n             * @return {?}\n             */\n            icuCase => { attachDebugObject(icuCase, new I18nMutateOpCodesDebug(icuCase, lView)); }));\n            icu.update.forEach((/**\n             * @param {?} icuCase\n             * @return {?}\n             */\n            icuCase => {\n                attachDebugObject(icuCase, new I18nUpdateOpCodesDebug(icuCase, icus, lView));\n            }));\n        }));\n    }\n}\nclass I18nMutateOpCodesDebug {\n    /**\n     * @param {?} __raw_opCodes\n     * @param {?} __lView\n     */\n    constructor(__raw_opCodes, __lView) {\n        this.__raw_opCodes = __raw_opCodes;\n        this.__lView = __lView;\n    }\n    /**\n     * A list of operation information about how the OpCodes will act on the view.\n     * @return {?}\n     */\n    get operations() {\n        const { __lView, __raw_opCodes } = this;\n        /** @type {?} */\n        const results = [];\n        for (let i = 0; i < __raw_opCodes.length; i++) {\n            /** @type {?} */\n            const opCode = __raw_opCodes[i];\n            /** @type {?} */\n            let result;\n            if (typeof opCode === 'string') {\n                result = {\n                    __raw_opCode: opCode,\n                    type: 'Create Text Node',\n                    nodeIndex: __raw_opCodes[++i],\n                    text: opCode,\n                };\n            }\n            if (typeof opCode === 'number') {\n                switch (opCode & 7 /* MASK_OPCODE */) {\n                    case 1 /* AppendChild */:\n                        /** @type {?} */\n                        const destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                        result = new I18NDebugItem(opCode, __lView, destinationNodeIndex, 'AppendChild');\n                        break;\n                    case 0 /* Select */:\n                        /** @type {?} */\n                        const nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                        result = new I18NDebugItem(opCode, __lView, nodeIndex, 'Select');\n                        break;\n                    case 5 /* ElementEnd */:\n                        /** @type {?} */\n                        let elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                        result = new I18NDebugItem(opCode, __lView, elementIndex, 'ElementEnd');\n                        break;\n                    case 4 /* Attr */:\n                        elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                        result = new I18NDebugItem(opCode, __lView, elementIndex, 'Attr');\n                        result['attrName'] = __raw_opCodes[++i];\n                        result['attrValue'] = __raw_opCodes[++i];\n                        break;\n                }\n            }\n            if (!result) {\n                switch (opCode) {\n                    case COMMENT_MARKER:\n                        result = {\n                            __raw_opCode: opCode,\n                            type: 'COMMENT_MARKER',\n                            commentValue: __raw_opCodes[++i],\n                            nodeIndex: __raw_opCodes[++i],\n                        };\n                        break;\n                    case ELEMENT_MARKER:\n                        result = {\n                            __raw_opCode: opCode,\n                            type: 'ELEMENT_MARKER',\n                        };\n                        break;\n                }\n            }\n            if (!result) {\n                result = {\n                    __raw_opCode: opCode,\n                    type: 'Unknown Op Code',\n                    code: opCode,\n                };\n            }\n            results.push(result);\n        }\n        return results;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    I18nMutateOpCodesDebug.prototype.__raw_opCodes;\n    /**\n     * @type {?}\n     * @private\n     */\n    I18nMutateOpCodesDebug.prototype.__lView;\n}\nclass I18nUpdateOpCodesDebug {\n    /**\n     * @param {?} __raw_opCodes\n     * @param {?} icus\n     * @param {?} __lView\n     */\n    constructor(__raw_opCodes, icus, __lView) {\n        this.__raw_opCodes = __raw_opCodes;\n        this.icus = icus;\n        this.__lView = __lView;\n    }\n    /**\n     * A list of operation information about how the OpCodes will act on the view.\n     * @return {?}\n     */\n    get operations() {\n        const { __lView, __raw_opCodes, icus } = this;\n        /** @type {?} */\n        const results = [];\n        for (let i = 0; i < __raw_opCodes.length; i++) {\n            // bit code to check if we should apply the next update\n            /** @type {?} */\n            const checkBit = (/** @type {?} */ (__raw_opCodes[i]));\n            // Number of opCodes to skip until next set of update codes\n            /** @type {?} */\n            const skipCodes = (/** @type {?} */ (__raw_opCodes[++i]));\n            /** @type {?} */\n            let value = '';\n            for (let j = i + 1; j <= (i + skipCodes); j++) {\n                /** @type {?} */\n                const opCode = __raw_opCodes[j];\n                if (typeof opCode === 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // It's a binding index whose value is negative\n                        // We cannot know the value of the binding so we only show the index\n                        value += `ï¿½${-opCode - 1}ï¿½`;\n                    }\n                    else {\n                        /** @type {?} */\n                        const nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                        /** @type {?} */\n                        let tIcuIndex;\n                        /** @type {?} */\n                        let tIcu;\n                        switch (opCode & 3 /* MASK_OPCODE */) {\n                            case 1 /* Attr */:\n                                /** @type {?} */\n                                const attrName = (/** @type {?} */ (__raw_opCodes[++j]));\n                                /** @type {?} */\n                                const sanitizeFn = __raw_opCodes[++j];\n                                results.push({\n                                    __raw_opCode: opCode,\n                                    checkBit,\n                                    type: 'Attr',\n                                    attrValue: value, attrName, sanitizeFn,\n                                });\n                                break;\n                            case 0 /* Text */:\n                                results.push({\n                                    __raw_opCode: opCode,\n                                    checkBit,\n                                    type: 'Text', nodeIndex,\n                                    text: value,\n                                });\n                                break;\n                            case 2 /* IcuSwitch */:\n                                tIcuIndex = (/** @type {?} */ (__raw_opCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                /** @type {?} */\n                                let result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuSwitch');\n                                result['tIcuIndex'] = tIcuIndex;\n                                result['checkBit'] = checkBit;\n                                result['mainBinding'] = value;\n                                result['tIcu'] = tIcu;\n                                results.push(result);\n                                break;\n                            case 3 /* IcuUpdate */:\n                                tIcuIndex = (/** @type {?} */ (__raw_opCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuUpdate');\n                                result['tIcuIndex'] = tIcuIndex;\n                                result['checkBit'] = checkBit;\n                                result['tIcu'] = tIcu;\n                                results.push(result);\n                                break;\n                        }\n                    }\n                }\n            }\n            i += skipCodes;\n        }\n        return results;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    I18nUpdateOpCodesDebug.prototype.__raw_opCodes;\n    /**\n     * @type {?}\n     * @private\n     */\n    I18nUpdateOpCodesDebug.prototype.icus;\n    /**\n     * @type {?}\n     * @private\n     */\n    I18nUpdateOpCodesDebug.prototype.__lView;\n}\n/**\n * @record\n */\nfunction I18nOpCodesDebug() { }\nif (false) {\n    /** @type {?} */\n    I18nOpCodesDebug.prototype.operations;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Selects an element for later binding instructions.\n *\n * Used in conjunction with instructions like {\\@link property} to act on elements with specified\n * indices, for example those created with {\\@link element} or {\\@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     element(0, 'div');\n *   }\n *   if (rf & 2) {\n *     select(0); // Select the <div/> created above.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * \\@codeGenApi\n * @param {?} index the index of the item to act on with the following instructions\n *\n * @return {?}\n */\nfunction ÉµÉµselect(index) {\n    ngDevMode && assertGreaterThan(index, -1, 'Invalid index');\n    ngDevMode &&\n        assertLessThan(index, getLView().length - HEADER_OFFSET, 'Should be within range for the view data');\n    /** @type {?} */\n    const lView = getLView();\n    selectInternal(lView, index);\n}\n/**\n * @param {?} lView\n * @param {?} index\n * @return {?}\n */\nfunction selectInternal(lView, index) {\n    // Flush the initial hooks for elements in the view that have been added up to this point.\n    executePreOrderHooks(lView, lView[TVIEW], getCheckNoChangesMode(), index);\n    // We must set the selected index *after* running the hooks, because hooks may have side-effects\n    // that cause other template functions to run, thus updating the selected index, which is global\n    // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n    // will be altered by the time we leave the `ÉµÉµselect` instruction.\n    setSelectedIndex(index);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst Éµ0$5 = /**\n * @return {?}\n */\n() => Promise.resolve(null);\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n * @type {?}\n */\nconst _CLEAN_PROMISE = ((Éµ0$5))();\n/** @enum {number} */\nconst BindingDirection = {\n    Input: 0,\n    Output: 1,\n};\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDescendantViews(lView) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const creationMode = isCreationMode(lView);\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = false;\n    // Resetting the bindingIndex of the current LView as the next steps may trigger change detection.\n    lView[BINDING_INDEX] = tView.bindingStartIndex;\n    // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n    // This will be done in the update pass.\n    if (!creationMode) {\n        /** @type {?} */\n        const checkNoChangesMode = getCheckNoChangesMode();\n        executePreOrderHooks(lView, tView, checkNoChangesMode, undefined);\n        refreshDynamicEmbeddedViews(lView);\n        // Content query results must be refreshed before content hooks are called.\n        refreshContentQueries(tView, lView);\n        resetPreOrderHookFlags(lView);\n        executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode, 1 /* AfterContentInitHooksToBeRun */, undefined);\n        setHostBindings(tView, lView);\n    }\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (creationMode && tView.staticContentQueries) {\n        refreshContentQueries(tView, lView);\n    }\n    // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n    if (!creationMode || tView.staticViewQueries) {\n        executeViewQueryFn(2 /* Update */, tView, lView[CONTEXT]);\n    }\n    refreshChildComponents(lView, tView.components);\n}\n/**\n * Sets the host bindings for the current view.\n * @param {?} tView\n * @param {?} viewData\n * @return {?}\n */\nfunction setHostBindings(tView, viewData) {\n    /** @type {?} */\n    const selectedIndex = getSelectedIndex();\n    try {\n        if (tView.expandoInstructions) {\n            /** @type {?} */\n            let bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n            setBindingRoot(bindingRootIndex);\n            /** @type {?} */\n            let currentDirectiveIndex = -1;\n            /** @type {?} */\n            let currentElementIndex = -1;\n            for (let i = 0; i < tView.expandoInstructions.length; i++) {\n                /** @type {?} */\n                const instruction = tView.expandoInstructions[i];\n                if (typeof instruction === 'number') {\n                    if (instruction <= 0) {\n                        // Negative numbers mean that we are starting new EXPANDO block and need to update\n                        // the current element and directive index.\n                        currentElementIndex = -instruction;\n                        setActiveHostElement(currentElementIndex);\n                        // Injector block and providers are taken into account.\n                        /** @type {?} */\n                        const providerCount = ((/** @type {?} */ (tView.expandoInstructions[++i])));\n                        bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n                        currentDirectiveIndex = bindingRootIndex;\n                    }\n                    else {\n                        // This is either the injector size (so the binding root can skip over directives\n                        // and get to the first set of host bindings on this node) or the host var count\n                        // (to get to the next set of host bindings on this node).\n                        bindingRootIndex += instruction;\n                    }\n                    setBindingRoot(bindingRootIndex);\n                }\n                else {\n                    // If it's not a number, it's a host binding function that needs to be executed.\n                    if (instruction !== null) {\n                        viewData[BINDING_INDEX] = bindingRootIndex;\n                        /** @type {?} */\n                        const hostCtx = unwrapRNode(viewData[currentDirectiveIndex]);\n                        instruction(2 /* Update */, hostCtx, currentElementIndex);\n                        // Each directive gets a uniqueId value that is the same for both\n                        // create and update calls when the hostBindings function is called. The\n                        // directive uniqueId is not set anywhere--it is just incremented between\n                        // each hostBindings call and is useful for helping instruction code\n                        // uniquely determine which directive is currently active when executed.\n                        incrementActiveDirectiveId();\n                    }\n                    currentDirectiveIndex++;\n                }\n            }\n        }\n    }\n    finally {\n        setActiveHostElement(selectedIndex);\n    }\n}\n/**\n * Refreshes all content queries declared by directives in a given view\n * @param {?} tView\n * @param {?} lView\n * @return {?}\n */\nfunction refreshContentQueries(tView, lView) {\n    /** @type {?} */\n    const contentQueries = tView.contentQueries;\n    if (contentQueries !== null) {\n        for (let i = 0; i < contentQueries.length; i += 2) {\n            /** @type {?} */\n            const queryStartIdx = contentQueries[i];\n            /** @type {?} */\n            const directiveDefIdx = contentQueries[i + 1];\n            if (directiveDefIdx !== -1) {\n                /** @type {?} */\n                const directiveDef = (/** @type {?} */ (tView.data[directiveDefIdx]));\n                ngDevMode &&\n                    assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n                setCurrentQueryIndex(queryStartIdx);\n                (/** @type {?} */ (directiveDef.contentQueries))(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);\n            }\n        }\n    }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} hostLView\n * @param {?} components\n * @return {?}\n */\nfunction refreshChildComponents(hostLView, components) {\n    if (components != null) {\n        for (let i = 0; i < components.length; i++) {\n            componentRefresh(hostLView, components[i]);\n        }\n    }\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param {?} name the tag name\n * @param {?=} overriddenRenderer Optional A renderer to override the default one\n * @return {?} the element created\n */\nfunction elementCreate(name, overriddenRenderer) {\n    /** @type {?} */\n    let native;\n    /** @type {?} */\n    const rendererToUse = overriddenRenderer || getLView()[RENDERER];\n    /** @type {?} */\n    const namespace = getNamespace();\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, namespace);\n    }\n    else {\n        if (namespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(namespace, name);\n        }\n    }\n    return native;\n}\n/**\n * @template T\n * @param {?} parentLView\n * @param {?} tView\n * @param {?} context\n * @param {?} flags\n * @param {?} host\n * @param {?} tHostNode\n * @param {?=} rendererFactory\n * @param {?=} renderer\n * @param {?=} sanitizer\n * @param {?=} injector\n * @return {?}\n */\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {\n    /** @type {?} */\n    const lView = ngDevMode ? cloneToLView(tView.blueprint) : (/** @type {?} */ (tView.blueprint.slice()));\n    lView[HOST] = host;\n    lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;\n    resetPreOrderHookFlags(lView);\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[RENDERER_FACTORY] = (/** @type {?} */ ((rendererFactory || parentLView && parentLView[RENDERER_FACTORY])));\n    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n    lView[RENDERER] = (/** @type {?} */ ((renderer || parentLView && parentLView[RENDERER])));\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || (/** @type {?} */ (null));\n    lView[(/** @type {?} */ (INJECTOR$1))] = injector || parentLView && parentLView[INJECTOR$1] || null;\n    lView[T_HOST] = tHostNode;\n    ngDevMode && attachLViewDebug(lView);\n    return lView;\n}\n/**\n * @param {?} tView\n * @param {?} tHostNode\n * @param {?} index\n * @param {?} type\n * @param {?} name\n * @param {?} attrs\n * @return {?}\n */\nfunction getOrCreateTNode(tView, tHostNode, index, type, name, attrs) {\n    // Keep this function short, so that the VM will inline it.\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (tView.data[adjustedIndex])) ||\n        createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs, index);\n    setPreviousOrParentTNode(tNode, true);\n    return (/** @type {?} */ (tNode));\n}\n/**\n * @param {?} tView\n * @param {?} tHostNode\n * @param {?} adjustedIndex\n * @param {?} type\n * @param {?} name\n * @param {?} attrs\n * @param {?} index\n * @return {?}\n */\nfunction createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs, index) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const isParent = getIsParent();\n    /** @type {?} */\n    const parent = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n    // Parents cannot cross component boundaries because components will be used in multiple places,\n    // so it's only set if the view is the same.\n    /** @type {?} */\n    const parentInSameView = parent && parent !== tHostNode;\n    /** @type {?} */\n    const tParentNode = parentInSameView ? (/** @type {?} */ (parent)) : null;\n    /** @type {?} */\n    const tNode = tView.data[adjustedIndex] =\n        createTNode(tView, tParentNode, type, adjustedIndex, name, attrs);\n    // The first node is not always the one at index 0, in case of i18n, index 0 can be the\n    // instruction `i18nStart` and the first node has the index 1 or more\n    if (index === 0 || !tView.firstChild) {\n        tView.firstChild = tNode;\n    }\n    // Now link ourselves into the tree.\n    if (previousOrParentTNode) {\n        if (isParent && previousOrParentTNode.child == null &&\n            (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n            // We are in the same view, which means we are adding content node to the parent view.\n            previousOrParentTNode.child = tNode;\n        }\n        else if (!isParent) {\n            previousOrParentTNode.next = tNode;\n        }\n    }\n    return tNode;\n}\n/**\n * @param {?} tView\n * @param {?} tParentNode\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nfunction assignTViewNodeToLView(tView, tParentNode, index, lView) {\n    // View nodes are not stored in data because they can be added / removed at runtime (which\n    // would cause indices to change). Their TNodes are instead stored in tView.node.\n    /** @type {?} */\n    let tNode = tView.node;\n    if (tNode == null) {\n        ngDevMode && tParentNode &&\n            assertNodeOfPossibleTypes(tParentNode, 3 /* Element */, 0 /* Container */);\n        tView.node = tNode = (/** @type {?} */ (createTNode(tView, (/** @type {?} */ (tParentNode)), //\n        2 /* View */, index, null, null)));\n    }\n    return lView[T_HOST] = (/** @type {?} */ (tNode));\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n *\n * @param {?} view The LView containing the blueprint to adjust\n * @param {?} numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @return {?}\n */\nfunction allocExpando(view, numSlotsToAlloc) {\n    ngDevMode && assertGreaterThan(numSlotsToAlloc, 0, 'The number of slots to alloc should be greater than 0');\n    if (numSlotsToAlloc > 0) {\n        /** @type {?} */\n        const tView = view[TVIEW];\n        if (tView.firstTemplatePass) {\n            for (let i = 0; i < numSlotsToAlloc; i++) {\n                tView.blueprint.push(null);\n                tView.data.push(null);\n                view.push(null);\n            }\n            // We should only increment the expando start index if there aren't already directives\n            // and injectors saved in the \"expando\" section\n            if (!tView.expandoInstructions) {\n                tView.expandoStartIndex += numSlotsToAlloc;\n            }\n            else {\n                // Since we're adding the dynamic nodes into the expando section, we need to let the host\n                // bindings know that they should skip x slots\n                tView.expandoInstructions.push(numSlotsToAlloc);\n            }\n        }\n    }\n}\n//////////////////////////\n//// Render\n//////////////////////////\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n * @template T\n * @param {?} tView\n * @param {?} context\n * @param {?} declarationView\n * @param {?} injectorIndex\n * @return {?}\n */\nfunction createEmbeddedViewAndNode(tView, context, declarationView, injectorIndex) {\n    /** @type {?} */\n    const _isParent = getIsParent();\n    /** @type {?} */\n    const _previousOrParentTNode = getPreviousOrParentTNode();\n    setPreviousOrParentTNode((/** @type {?} */ (null)), true);\n    /** @type {?} */\n    const lView = createLView(declarationView, tView, context, 16 /* CheckAlways */, null, null);\n    lView[DECLARATION_VIEW] = declarationView;\n    assignTViewNodeToLView(tView, null, -1, lView);\n    if (tView.firstTemplatePass) {\n        (/** @type {?} */ (tView.node)).injectorIndex = injectorIndex;\n    }\n    setPreviousOrParentTNode(_previousOrParentTNode, _isParent);\n    return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor\n * inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n * @template T\n * @param {?} viewToRender\n * @param {?} tView\n * @param {?} context\n * @return {?}\n */\nfunction renderEmbeddedTemplate(viewToRender, tView, context) {\n    /** @type {?} */\n    const _isParent = getIsParent();\n    /** @type {?} */\n    const _previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    let oldView;\n    if (viewToRender[FLAGS] & 512 /* IsRoot */) {\n        // This is a root view inside the view tree\n        tickRootContext(getRootContext(viewToRender));\n    }\n    else {\n        // Will become true if the `try` block executes with no errors.\n        /** @type {?} */\n        let safeToRunHooks = false;\n        try {\n            setPreviousOrParentTNode((/** @type {?} */ (null)), true);\n            oldView = enterView(viewToRender, viewToRender[T_HOST]);\n            resetPreOrderHookFlags(viewToRender);\n            executeTemplate(viewToRender, (/** @type {?} */ (tView.template)), getRenderFlags(viewToRender), context);\n            // This must be set to false immediately after the first creation run because in an\n            // ngFor loop, all the views will be created together before update mode runs and turns\n            // off firstTemplatePass. If we don't set it here, instances will perform directive\n            // matching, etc again and again.\n            tView.firstTemplatePass = false;\n            refreshDescendantViews(viewToRender);\n            safeToRunHooks = true;\n        }\n        finally {\n            leaveView((/** @type {?} */ (oldView)), safeToRunHooks);\n            setPreviousOrParentTNode(_previousOrParentTNode, _isParent);\n        }\n    }\n}\n/**\n * @template T\n * @param {?} hostView\n * @param {?} context\n * @param {?=} templateFn\n * @return {?}\n */\nfunction renderComponentOrTemplate(hostView, context, templateFn) {\n    /** @type {?} */\n    const rendererFactory = hostView[RENDERER_FACTORY];\n    /** @type {?} */\n    const oldView = enterView(hostView, hostView[T_HOST]);\n    /** @type {?} */\n    const normalExecutionPath = !getCheckNoChangesMode();\n    /** @type {?} */\n    const creationModeIsActive = isCreationMode(hostView);\n    // Will become true if the `try` block executes with no errors.\n    /** @type {?} */\n    let safeToRunHooks = false;\n    try {\n        if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (creationModeIsActive) {\n            // creation mode pass\n            templateFn && executeTemplate(hostView, templateFn, 1 /* Create */, context);\n            refreshDescendantViews(hostView);\n            hostView[FLAGS] &= ~4 /* CreationMode */;\n        }\n        // update mode pass\n        resetPreOrderHookFlags(hostView);\n        templateFn && executeTemplate(hostView, templateFn, 2 /* Update */, context);\n        refreshDescendantViews(hostView);\n        safeToRunHooks = true;\n    }\n    finally {\n        if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView, safeToRunHooks);\n    }\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} templateFn\n * @param {?} rf\n * @param {?} context\n * @return {?}\n */\nfunction executeTemplate(lView, templateFn, rf, context) {\n    namespaceHTMLInternal();\n    /** @type {?} */\n    const prevSelectedIndex = getSelectedIndex();\n    try {\n        setActiveHostElement(null);\n        if (rf & 2 /* Update */) {\n            // When we're updating, have an inherent ÉµÉµselect(0) so we don't have to generate that\n            // instruction for most update blocks\n            selectInternal(lView, 0);\n        }\n        templateFn(rf, context);\n    }\n    finally {\n        setSelectedIndex(prevSelectedIndex);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. Update block and create block are\n * always run separately.\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n    return isCreationMode(view) ? 1 /* Create */ : 2 /* Update */;\n}\n//////////////////////////\n//// Element\n//////////////////////////\n/**\n * @param {?} tView\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction executeContentQueries(tView, tNode, lView) {\n    if (isContentQueryHost(tNode)) {\n        /** @type {?} */\n        const start = tNode.directiveStart;\n        /** @type {?} */\n        const end = tNode.directiveEnd;\n        for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (tView.data[directiveIndex]));\n            if (def.contentQueries) {\n                def.contentQueries(1 /* Create */, lView[directiveIndex], directiveIndex);\n            }\n        }\n    }\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param {?} tView\n * @param {?} lView\n * @param {?} tNode\n * @param {?=} localRefExtractor mapping function that extracts local ref value from TNode\n * @return {?}\n */\nfunction createDirectivesAndLocals(tView, lView, tNode, localRefExtractor = getNativeByTNode) {\n    if (!getBindingsEnabled())\n        return;\n    instantiateAllDirectives(tView, lView, tNode);\n    invokeDirectivesHostBindings(tView, lView, tNode);\n    saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n    setActiveHostElement(null);\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n * @param {?} viewData\n * @param {?} tNode\n * @param {?} localRefExtractor\n * @return {?}\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n    /** @type {?} */\n    const localNames = tNode.localNames;\n    if (localNames) {\n        /** @type {?} */\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < localNames.length; i += 2) {\n            /** @type {?} */\n            const index = (/** @type {?} */ (localNames[i + 1]));\n            /** @type {?} */\n            const value = index === -1 ?\n                localRefExtractor((/** @type {?} */ (tNode)), viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} def ComponentDef\n * @return {?} TView\n */\nfunction getOrCreateTView(def) {\n    return def.tView || (def.tView = createTView(-1, def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas));\n}\n/**\n * Creates a TView instance\n *\n * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param {?} templateFn Template function\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} directives Registry of directives for this view\n * @param {?} pipes Registry of pipes for this view\n * @param {?} viewQuery View queries for this view\n * @param {?} schemas Schemas for this view\n * @return {?}\n */\nfunction createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n    ngDevMode && ngDevMode.tView++;\n    /** @type {?} */\n    const bindingStartIndex = HEADER_OFFSET + consts;\n    // This length does not yet contain host bindings from child directives because at this point,\n    // we don't know which directives are active on this template. As soon as a directive is matched\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\n    /** @type {?} */\n    const initialViewLength = bindingStartIndex + vars;\n    /** @type {?} */\n    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[(/** @type {?} */ (TVIEW))] = ngDevMode ?\n        new TViewConstructor(viewIndex, // id: number,\n        blueprint, // blueprint: LView,\n        templateFn, // template: ComponentTemplate<{}>|null,\n        null, // queries: TQueries|null\n        viewQuery, (/** @type {?} */ (null)), // node: TViewNode|TElementNode|null,\n        cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,\n        bindingStartIndex, // bindingStartIndex: number,\n        initialViewLength, // expandoStartIndex: number,\n        null, // expandoInstructions: ExpandoInstructions|null,\n        true, // firstTemplatePass: boolean,\n        false, // staticViewQueries: boolean,\n        false, // staticContentQueries: boolean,\n        null, // preOrderHooks: HookData|null,\n        null, // preOrderCheckHooks: HookData|null,\n        null, // contentHooks: HookData|null,\n        null, // contentCheckHooks: HookData|null,\n        null, // viewHooks: HookData|null,\n        null, // viewCheckHooks: HookData|null,\n        null, // destroyHooks: HookData|null,\n        null, // cleanup: any[]|null,\n        null, // contentQueries: number[]|null,\n        null, // components: number[]|null,\n        typeof directives === 'function' ?\n            directives() :\n            directives, // directiveRegistry: DirectiveDefList|null,\n        typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,\n        null, // firstChild: TNode|null,\n        schemas) :\n        {\n            id: viewIndex,\n            blueprint: blueprint,\n            template: templateFn,\n            queries: null,\n            viewQuery: viewQuery,\n            node: (/** @type {?} */ (null)),\n            data: blueprint.slice().fill(null, bindingStartIndex),\n            bindingStartIndex: bindingStartIndex,\n            expandoStartIndex: initialViewLength,\n            expandoInstructions: null,\n            firstTemplatePass: true,\n            staticViewQueries: false,\n            staticContentQueries: false,\n            preOrderHooks: null,\n            preOrderCheckHooks: null,\n            contentHooks: null,\n            contentCheckHooks: null,\n            viewHooks: null,\n            viewCheckHooks: null,\n            destroyHooks: null,\n            cleanup: null,\n            contentQueries: null,\n            components: null,\n            directiveRegistry: typeof directives === 'function' ? directives() : directives,\n            pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n            firstChild: null,\n            schemas: schemas,\n        };\n}\n/**\n * @param {?} bindingStartIndex\n * @param {?} initialViewLength\n * @return {?}\n */\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    /** @type {?} */\n    const blueprint = (/** @type {?} */ (new (ngDevMode ? (/** @type {?} */ (LViewBlueprint)) : Array)(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex)));\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nfunction createError(text, token) {\n    return new Error(`Renderer: ${text} [${stringifyForError(token)}]`);\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nfunction locateHostElement(factory, elementOrSelector) {\n    /** @type {?} */\n    const defaultRenderer = factory.createRenderer(null, null);\n    /** @type {?} */\n    const rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n * @param {?} lView\n * @param {?} context\n * @param {?} cleanupFn\n * @return {?}\n */\nfunction storeCleanupWithContext(lView, context, cleanupFn) {\n    /** @type {?} */\n    const lCleanup = getCleanup(lView);\n    lCleanup.push(context);\n    if (lView[TVIEW].firstTemplatePass) {\n        getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n * @param {?} view\n * @param {?} cleanupFn\n * @return {?}\n */\nfunction storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push((/** @type {?} */ (view[CLEANUP])).length - 1, null);\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} tView `TView` to which this `TNode` belongs (used only in `ngDevMode`)\n * @param {?} tParent\n * @param {?} type The type of the node\n * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param {?} tagName The tag name of the node\n * @param {?} attrs The attributes defined on this node\n * @return {?} the TNode object\n */\nfunction createTNode(tView, tParent, type, adjustedIndex, tagName, attrs) {\n    ngDevMode && ngDevMode.tNode++;\n    /** @type {?} */\n    let injectorIndex = tParent ? tParent.injectorIndex : -1;\n    return ngDevMode ? new TNodeConstructor(tView, // tView_: TView\n    type, // type: TNodeType\n    adjustedIndex, // index: number\n    injectorIndex, // injectorIndex: number\n    -1, // directiveStart: number\n    -1, // directiveEnd: number\n    -1, // propertyMetadataStartIndex: number\n    -1, // propertyMetadataEndIndex: number\n    0, // flags: TNodeFlags\n    0, // providerIndexes: TNodeProviderIndexes\n    tagName, // tagName: string|null\n    attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null\n    null, // localNames: (string|number)[]|null\n    undefined, // initialInputs: (string[]|null)[]|null|undefined\n    undefined, // inputs: PropertyAliases|null|undefined\n    undefined, // outputs: PropertyAliases|null|undefined\n    null, // tViews: ITView|ITView[]|null\n    null, // next: ITNode|null\n    null, // projectionNext: ITNode|null\n    null, // child: ITNode|null\n    tParent, // parent: TElementNode|TContainerNode|null\n    null, // projection: number|(ITNode|RNode[])[]|null\n    null, // styles: TStylingContext|null\n    null) :\n        {\n            type: type,\n            index: adjustedIndex,\n            injectorIndex: injectorIndex,\n            directiveStart: -1,\n            directiveEnd: -1,\n            propertyMetadataStartIndex: -1,\n            propertyMetadataEndIndex: -1,\n            flags: 0,\n            providerIndexes: 0,\n            tagName: tagName,\n            attrs: attrs,\n            localNames: null,\n            initialInputs: undefined,\n            inputs: undefined,\n            outputs: undefined,\n            tViews: null,\n            next: null,\n            projectionNext: null,\n            child: null,\n            parent: tParent,\n            projection: null,\n            styles: null,\n            classes: null,\n        };\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNode\n * @param {?} direction whether to consider inputs or outputs\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNode, direction) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    /** @type {?} */\n    let propStore = null;\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    if (end > start) {\n        /** @type {?} */\n        const isInput = direction === 0 /* Input */;\n        /** @type {?} */\n        const defs = tView.data;\n        for (let i = start; i < end; i++) {\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (defs[i]));\n            /** @type {?} */\n            const propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (let publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    /** @type {?} */\n                    const internalName = propertyAliasMap[publicName];\n                    /** @type {?} */\n                    const hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, publicName, internalName) :\n                        (propStore[publicName] = [i, publicName, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n * @type {?}\n */\nconst ATTR_TO_PROP = {\n    'class': 'className',\n    'for': 'htmlFor',\n    'formaction': 'formAction',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\n/**\n * @template T\n * @param {?} index\n * @param {?} propName\n * @param {?} value\n * @param {?=} sanitizer\n * @param {?=} nativeOnly\n * @param {?=} loadRendererFn\n * @return {?}\n */\nfunction elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadRendererFn) {\n    ngDevMode && assertNotSame(value, (/** @type {?} */ (NO_CHANGE)), 'Incoming value should never be NO_CHANGE.');\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const element = (/** @type {?} */ (getNativeByIndex(index, lView)));\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    /** @type {?} */\n    let inputData;\n    /** @type {?} */\n    let dataValue;\n    if (!nativeOnly && (inputData = initializeTNodeInputs(tNode)) &&\n        (dataValue = inputData[propName])) {\n        setInputsForProperty(lView, dataValue, value);\n        if (isComponent(tNode))\n            markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n        if (ngDevMode) {\n            if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */) {\n                /**\n                 * dataValue is an array containing runtime input or output names for the directives:\n                 * i+0: directive instance index\n                 * i+1: publicName\n                 * i+2: privateName\n                 *\n                 * e.g. [0, 'change', 'change-minified']\n                 * we want to set the reflected property with the privateName: dataValue[i+2]\n                 */\n                for (let i = 0; i < dataValue.length; i += 3) {\n                    setNgReflectProperty(lView, element, tNode.type, (/** @type {?} */ (dataValue[i + 2])), value);\n                }\n            }\n        }\n    }\n    else if (tNode.type === 3 /* Element */) {\n        propName = ATTR_TO_PROP[propName] || propName;\n        if (ngDevMode) {\n            validateAgainstEventProperties(propName);\n            validateAgainstUnknownProperties(lView, element, propName, tNode);\n            ngDevMode.rendererSetProperty++;\n        }\n        savePropertyDebugData(tNode, lView, propName, lView[TVIEW].data, nativeOnly);\n        /** @type {?} */\n        const renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n        // It is assumed that the sanitizer is only added when the compiler determines that the\n        // property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? ((/** @type {?} */ (sanitizer(value, tNode.tagName || '', propName)))) : value;\n        if (isProceduralRenderer(renderer)) {\n            renderer.setProperty((/** @type {?} */ (element)), propName, value);\n        }\n        else if (!isAnimationProp(propName)) {\n            ((/** @type {?} */ (element))).setProperty ? ((/** @type {?} */ (element))).setProperty(propName, value) :\n                ((/** @type {?} */ (element)))[propName] = value;\n        }\n    }\n    else if (tNode.type === 0 /* Container */) {\n        // If the node is a container and the property didn't\n        // match any of the inputs or schemas we should throw.\n        if (ngDevMode && !matchingSchemas(lView, tNode.tagName)) {\n            throw createUnknownPropertyError(propName, tNode);\n        }\n    }\n}\n/**\n * If node is an OnPush component, marks its LView dirty.\n * @param {?} lView\n * @param {?} viewIndex\n * @return {?}\n */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n    ngDevMode && assertLView(lView);\n    /** @type {?} */\n    const childComponentLView = getComponentViewByIndex(viewIndex, lView);\n    if (!(childComponentLView[FLAGS] & 16 /* CheckAlways */)) {\n        childComponentLView[FLAGS] |= 64 /* Dirty */;\n    }\n}\n/**\n * @param {?} lView\n * @param {?} element\n * @param {?} type\n * @param {?} attrName\n * @param {?} value\n * @return {?}\n */\nfunction setNgReflectProperty(lView, element, type, attrName, value) {\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    attrName = normalizeDebugBindingName(attrName);\n    /** @type {?} */\n    const debugValue = normalizeDebugBindingValue(value);\n    if (type === 3 /* Element */) {\n        if (value == null) {\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(((/** @type {?} */ (element))), attrName) :\n                ((/** @type {?} */ (element))).removeAttribute(attrName);\n        }\n        else {\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(((/** @type {?} */ (element))), attrName, debugValue) :\n                ((/** @type {?} */ (element))).setAttribute(attrName, debugValue);\n        }\n    }\n    else {\n        /** @type {?} */\n        const textContent = `bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`;\n        if (isProceduralRenderer(renderer)) {\n            renderer.setValue(((/** @type {?} */ (element))), textContent);\n        }\n        else {\n            ((/** @type {?} */ (element))).textContent = textContent;\n        }\n    }\n}\n/**\n * @param {?} hostView\n * @param {?} element\n * @param {?} propName\n * @param {?} tNode\n * @return {?}\n */\nfunction validateAgainstUnknownProperties(hostView, element, propName, tNode) {\n    // If the tag matches any of the schemas we shouldn't throw.\n    if (matchingSchemas(hostView, tNode.tagName)) {\n        return;\n    }\n    // If prop is not a known property of the HTML element...\n    if (!(propName in element) &&\n        // and we are in a browser context... (web worker nodes should be skipped)\n        typeof Node === 'function' && element instanceof Node &&\n        // and isn't a synthetic animation property...\n        propName[0] !== ANIMATION_PROP_PREFIX) {\n        // ... it is probably a user error and we should throw.\n        throw createUnknownPropertyError(propName, tNode);\n    }\n}\n/**\n * @param {?} hostView\n * @param {?} tagName\n * @return {?}\n */\nfunction matchingSchemas(hostView, tagName) {\n    /** @type {?} */\n    const schemas = hostView[TVIEW].schemas;\n    if (schemas !== null) {\n        for (let i = 0; i < schemas.length; i++) {\n            /** @type {?} */\n            const schema = schemas[i];\n            if (schema === NO_ERRORS_SCHEMA ||\n                schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * Stores debugging data for this property binding on first template pass.\n * This enables features like DebugElement.properties.\n * @param {?} tNode\n * @param {?} lView\n * @param {?} propName\n * @param {?} tData\n * @param {?} nativeOnly\n * @return {?}\n */\nfunction savePropertyDebugData(tNode, lView, propName, tData, nativeOnly) {\n    /** @type {?} */\n    const lastBindingIndex = lView[BINDING_INDEX] - 1;\n    // Bind/interpolation functions save binding metadata in the last binding index,\n    // but leave the property name blank. If the interpolation delimiter is at the 0\n    // index, we know that this is our first pass and the property name still needs to\n    // be set.\n    /** @type {?} */\n    const bindingMetadata = (/** @type {?} */ (tData[lastBindingIndex]));\n    if (bindingMetadata[0] == INTERPOLATION_DELIMITER) {\n        tData[lastBindingIndex] = propName + bindingMetadata;\n        // We don't want to store indices for host bindings because they are stored in a\n        // different part of LView (the expando section).\n        if (!nativeOnly) {\n            if (tNode.propertyMetadataStartIndex == -1) {\n                tNode.propertyMetadataStartIndex = lastBindingIndex;\n            }\n            tNode.propertyMetadataEndIndex = lastBindingIndex + 1;\n        }\n    }\n}\n/**\n * Creates an error that should be thrown when encountering an unknown property on an element.\n * @param {?} propName Name of the invalid property.\n * @param {?} tNode Node on which we encountered the error.\n * @return {?}\n */\nfunction createUnknownPropertyError(propName, tNode) {\n    return new Error(`Template error: Can't bind to '${propName}' since it isn't a known property of '${tNode.tagName}'.`);\n}\n/**\n * Instantiate a root component.\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @return {?}\n */\nfunction instantiateRootComponent(tView, viewData, def) {\n    /** @type {?} */\n    const rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        if (def.providersResolver)\n            def.providersResolver(def);\n        generateExpandoInstructionBlock(tView, rootTNode, 1);\n        baseResolveDirective(tView, viewData, def, def.factory);\n    }\n    /** @type {?} */\n    const directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, (/** @type {?} */ (rootTNode)));\n    postProcessBaseDirective(viewData, rootTNode, directive);\n    return directive;\n}\n/**\n * Resolve the matched directives on a node.\n * @param {?} tView\n * @param {?} lView\n * @param {?} tNode\n * @param {?} localRefs\n * @return {?}\n */\nfunction resolveDirectives(tView, lView, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n    // tsickle.\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n    if (!getBindingsEnabled())\n        return;\n    /** @type {?} */\n    const directives = findDirectiveMatches(tView, lView, tNode);\n    /** @type {?} */\n    const exportsMap = localRefs ? { '': -1 } : null;\n    if (directives) {\n        initNodeFlags(tNode, tView.data.length, directives.length);\n        // When the same token is provided by several directives on the same node, some rules apply in\n        // the viewEngine:\n        // - viewProviders have priority over providers\n        // - the last directive in NgModule.declarations has priority over the previous one\n        // So to match these rules, the order in which providers are added in the arrays is very\n        // important.\n        for (let i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (directives[i]));\n            if (def.providersResolver)\n                def.providersResolver(def);\n        }\n        generateExpandoInstructionBlock(tView, tNode, directives.length);\n        /** @type {?} */\n        const initialPreOrderHooksLength = (tView.preOrderHooks && tView.preOrderHooks.length) || 0;\n        /** @type {?} */\n        const initialPreOrderCheckHooksLength = (tView.preOrderCheckHooks && tView.preOrderCheckHooks.length) || 0;\n        /** @type {?} */\n        const nodeIndex = tNode.index - HEADER_OFFSET;\n        for (let i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (directives[i]));\n            /** @type {?} */\n            const directiveDefIdx = tView.data.length;\n            baseResolveDirective(tView, lView, def, def.factory);\n            saveNameToExportMap((/** @type {?} */ (tView.data)).length - 1, def, exportsMap);\n            // Init hooks are queued now so ngOnInit is called in host components before\n            // any projected components.\n            registerPreOrderHooks(directiveDefIdx, def, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n * @param {?} tView\n * @param {?} lView\n * @param {?} tNode\n * @return {?}\n */\nfunction instantiateAllDirectives(tView, lView, tNode) {\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    if (!tView.firstTemplatePass && start < end) {\n        getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView);\n    }\n    for (let i = start; i < end; i++) {\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[i]));\n        if (isComponentDef(def)) {\n            addComponentLogic(lView, tNode, (/** @type {?} */ (def)));\n        }\n        /** @type {?} */\n        const directive = getNodeInjectable(tView.data, (/** @type {?} */ (lView)), i, (/** @type {?} */ (tNode)));\n        postProcessDirective(lView, directive, def, i);\n    }\n}\n/**\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction invokeDirectivesHostBindings(tView, viewData, tNode) {\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    /** @type {?} */\n    const expando = (/** @type {?} */ (tView.expandoInstructions));\n    /** @type {?} */\n    const firstTemplatePass = tView.firstTemplatePass;\n    /** @type {?} */\n    const elementIndex = tNode.index - HEADER_OFFSET;\n    /** @type {?} */\n    const selectedIndex = getSelectedIndex();\n    try {\n        setActiveHostElement(elementIndex);\n        for (let i = start; i < end; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (tView.data[i]));\n            /** @type {?} */\n            const directive = viewData[i];\n            if (def.hostBindings) {\n                invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass);\n                // Each directive gets a uniqueId value that is the same for both\n                // create and update calls when the hostBindings function is called. The\n                // directive uniqueId is not set anywhere--it is just incremented between\n                // each hostBindings call and is useful for helping instruction code\n                // uniquely determine which directive is currently active when executed.\n                incrementActiveDirectiveId();\n            }\n            else if (firstTemplatePass) {\n                expando.push(null);\n            }\n        }\n    }\n    finally {\n        setActiveHostElement(selectedIndex);\n    }\n}\n/**\n * @param {?} def\n * @param {?} expando\n * @param {?} directive\n * @param {?} tNode\n * @param {?} firstTemplatePass\n * @return {?}\n */\nfunction invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass) {\n    /** @type {?} */\n    const previousExpandoLength = expando.length;\n    setCurrentDirectiveDef(def);\n    /** @type {?} */\n    const elementIndex = tNode.index - HEADER_OFFSET;\n    (/** @type {?} */ (def.hostBindings))(1 /* Create */, directive, elementIndex);\n    setCurrentDirectiveDef(null);\n    // `hostBindings` function may or may not contain `allocHostVars` call\n    // (e.g. it may not if it only contains host listeners), so we need to check whether\n    // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n    // expando block, to make sure we execute it for DI cycle\n    if (previousExpandoLength === expando.length && firstTemplatePass) {\n        expando.push(def.hostBindings);\n    }\n}\n/**\n * Generates a new block in TView.expandoInstructions for this node.\n *\n * Each expando block starts with the element index (turned negative so we can distinguish\n * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n * @param {?} tView\n * @param {?} tNode\n * @param {?} directiveCount\n * @return {?}\n */\nfunction generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n    /** @type {?} */\n    const elementIndex = -(tNode.index - HEADER_OFFSET);\n    /** @type {?} */\n    const providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const providerCount = tView.data.length - providerStartIndex;\n    (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n}\n/**\n * Process a directive on the current node after its creation.\n * @template T\n * @param {?} viewData\n * @param {?} directive\n * @param {?} def\n * @param {?} directiveDefIdx\n * @return {?}\n */\nfunction postProcessDirective(viewData, directive, def, directiveDefIdx) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    postProcessBaseDirective(viewData, previousOrParentTNode, directive);\n    ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n    if (previousOrParentTNode && previousOrParentTNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, directive, def, previousOrParentTNode);\n    }\n    if (viewData[TVIEW].firstTemplatePass && def.contentQueries) {\n        previousOrParentTNode.flags |= 4 /* hasContentQuery */;\n    }\n    if (isComponentDef(def)) {\n        /** @type {?} */\n        const componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n        componentView[CONTEXT] = directive;\n    }\n}\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} directive\n * @return {?}\n */\nfunction postProcessBaseDirective(lView, previousOrParentTNode, directive) {\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    attachPatchData(directive, lView);\n    if (native) {\n        attachPatchData(native, lView);\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tView, viewData, tNode) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n    /** @type {?} */\n    const registry = tView.directiveRegistry;\n    /** @type {?} */\n    let matches = null;\n    if (registry) {\n        for (let i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (registry[i]));\n            if (isNodeMatchingSelectorList(tNode, (/** @type {?} */ (def.selectors)), /* isProjectionMode */ false)) {\n                matches || (matches = ngDevMode ? new (/** @type {?} */ (MatchesArray))() : []);\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);\n                if (isComponentDef(def)) {\n                    if (tNode.flags & 1 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 1 /* isComponent */;\n                    // The component is always stored first with directives after.\n                    matches.unshift(def);\n                }\n                else {\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nfunction queueComponentIndexForCheck(previousOrParentTNode) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    (tView.components || (tView.components = ngDevMode ? new (/** @type {?} */ (TViewComponents))() : [])).push(previousOrParentTNode.index);\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        /** @type {?} */\n        const localNames = tNode.localNames =\n            ngDevMode ? new (/** @type {?} */ (TNodeLocalNames))() : [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (let i = 0; i < localRefs.length; i += 2) {\n            /** @type {?} */\n            const index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(`Export of name '${localRefs[i + 1]}' not found!`);\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs) {\n            for (let i = 0; i < def.exportAs.length; i++) {\n                exportsMap[def.exportAs[i]] = index;\n            }\n        }\n        if (((/** @type {?} */ (def))).template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param {?} tNode\n * @param {?} index the initial index\n * @param {?} numberOfDirectives\n * @return {?}\n */\nfunction initNodeFlags(tNode, index, numberOfDirectives) {\n    /** @type {?} */\n    const flags = tNode.flags;\n    ngDevMode && assertEqual(flags === 0 || flags === 1 /* isComponent */, true, 'expected node flags to not be initialized');\n    ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n    // When the first directive is created on a node, save the index\n    tNode.flags = flags & 1 /* isComponent */;\n    tNode.directiveStart = index;\n    tNode.directiveEnd = index + numberOfDirectives;\n    tNode.providerIndexes = index;\n}\n/**\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @param {?} directiveFactory\n * @return {?}\n */\nfunction baseResolveDirective(tView, viewData, def, directiveFactory) {\n    tView.data.push(def);\n    /** @type {?} */\n    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n    tView.blueprint.push(nodeInjectorFactory);\n    viewData.push(nodeInjectorFactory);\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(lView, previousOrParentTNode, def) {\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    /** @type {?} */\n    const tView = getOrCreateTView(def);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    /** @type {?} */\n    const rendererFactory = lView[RENDERER_FACTORY];\n    /** @type {?} */\n    const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, lView[previousOrParentTNode.index], (/** @type {?} */ (previousOrParentTNode)), rendererFactory, rendererFactory.createRenderer((/** @type {?} */ (native)), def)));\n    componentView[T_HOST] = (/** @type {?} */ (previousOrParentTNode));\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    lView[previousOrParentTNode.index] = componentView;\n    if (lView[TVIEW].firstTemplatePass) {\n        queueComponentIndexForCheck(previousOrParentTNode);\n    }\n}\n/**\n * @param {?} index\n * @param {?} name\n * @param {?} value\n * @param {?} lView\n * @param {?=} sanitizer\n * @param {?=} namespace\n * @return {?}\n */\nfunction elementAttributeInternal(index, name, value, lView, sanitizer, namespace) {\n    ngDevMode && assertNotSame(value, (/** @type {?} */ (NO_CHANGE)), 'Incoming value should never be NO_CHANGE.');\n    ngDevMode && validateAgainstEventAttributes(name);\n    /** @type {?} */\n    const element = (/** @type {?} */ (getNativeByIndex(index, lView)));\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    if (value == null) {\n        ngDevMode && ngDevMode.rendererRemoveAttribute++;\n        isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) :\n            element.removeAttribute(name);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererSetAttribute++;\n        /** @type {?} */\n        const tNode = getTNode(index, lView);\n        /** @type {?} */\n        const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tNode.tagName || '', name);\n        if (isProceduralRenderer(renderer)) {\n            renderer.setAttribute(element, name, strValue, namespace);\n        }\n        else {\n            namespace ? element.setAttributeNS(namespace, name, strValue) :\n                element.setAttribute(name, strValue);\n        }\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} def The directive def that contains the list of inputs\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, def, tNode) {\n    /** @type {?} */\n    let initialInputData = (/** @type {?} */ (tNode.initialInputs));\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, def.inputs, tNode);\n    }\n    /** @type {?} */\n    const initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        /** @type {?} */\n        const setInput = def.setInput;\n        for (let i = 0; i < initialInputs.length;) {\n            /** @type {?} */\n            const publicName = initialInputs[i++];\n            /** @type {?} */\n            const privateName = initialInputs[i++];\n            /** @type {?} */\n            const value = initialInputs[i++];\n            if (setInput) {\n                (/** @type {?} */ (def.setInput))(instance, value, publicName, privateName);\n            }\n            else {\n                ((/** @type {?} */ (instance)))[privateName] = value;\n            }\n            if (ngDevMode) {\n                /** @type {?} */\n                const lView = getLView();\n                /** @type {?} */\n                const nativeElement = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n                setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n            }\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    /** @type {?} */\n    const initialInputData = tNode.initialInputs || (tNode.initialInputs = ngDevMode ? new (/** @type {?} */ (TNodeInitialInputs))() : []);\n    // Ensure that we don't create sparse arrays\n    for (let i = initialInputData.length; i <= directiveIndex; i++) {\n        initialInputData.push(null);\n    }\n    /** @type {?} */\n    const attrs = (/** @type {?} */ (tNode.attrs));\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const attrName = attrs[i];\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        else if (attrName === 5 /* ProjectAs */) {\n            // Skip over the `ngProjectAs` value.\n            i += 2;\n            continue;\n        }\n        // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n        if (typeof attrName === 'number')\n            break;\n        /** @type {?} */\n        const minifiedInputName = inputs[(/** @type {?} */ (attrName))];\n        /** @type {?} */\n        const attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            /** @type {?} */\n            const inputsToStore = initialInputData[directiveIndex] ||\n                (initialInputData[directiveIndex] = ngDevMode ? new (/** @type {?} */ (TNodeInitialData))() : []);\n            inputsToStore.push((/** @type {?} */ (attrName)), minifiedInputName, (/** @type {?} */ (attrValue)));\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n// Not sure why I need to do `any` here but TS complains later.\n/** @type {?} */\nconst LContainerArray = ngDevMode && createNamedArrayType('LContainer');\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param {?} hostNative The host element for the LContainer\n * @param {?} currentView The parent view of the LContainer\n * @param {?} native The native comment element\n * @param {?} tNode\n * @param {?=} isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @return {?} LContainer\n */\nfunction createLContainer(hostNative, currentView, native, tNode, isForViewContainerRef) {\n    ngDevMode && assertDomNode(native);\n    ngDevMode && assertLView(currentView);\n    // https://jsperf.com/array-literal-vs-new-array-really\n    /** @type {?} */\n    const lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native\n    true, // Boolean `true` in this position signifies that this is an `LContainer`\n    isForViewContainerRef ? -1 : 0, // active index\n    currentView, // parent\n    null, // next\n    null, // queries\n    tNode, // t_host\n    native, // native,\n    null);\n    ngDevMode && attachLContainerDebug(lContainer);\n    return lContainer;\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them\n * by executing an associated template function.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDynamicEmbeddedViews(lView) {\n    for (let current = lView[CHILD_HEAD]; current !== null; current = current[NEXT]) {\n        // Note: current can be an LView or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LView\n        // header.\n        if (current[ACTIVE_INDEX] === -1 && isLContainer(current)) {\n            for (let i = CONTAINER_HEADER_OFFSET; i < current.length; i++) {\n                /** @type {?} */\n                const dynamicViewData = current[i];\n                // The directives and pipes are not needed here as an existing view is only being\n                // refreshed.\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], (/** @type {?} */ (dynamicViewData[CONTEXT])));\n            }\n        }\n    }\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param {?} hostLView\n * @param {?} adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n * @return {?}\n */\nfunction componentRefresh(hostLView, adjustedElementIndex) {\n    ngDevMode && assertDataInRange(hostLView, adjustedElementIndex);\n    /** @type {?} */\n    const componentView = getComponentViewByIndex(adjustedElementIndex, hostLView);\n    ngDevMode &&\n        assertNodeType((/** @type {?} */ (hostLView[TVIEW].data[adjustedElementIndex])), 3 /* Element */);\n    // Only components in creation mode, attached CheckAlways\n    // components or attached, dirty OnPush components should be checked\n    if ((viewAttachedToChangeDetector(componentView) || isCreationMode(hostLView)) &&\n        componentView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {\n        syncViewWithBlueprint(componentView);\n        checkView(componentView, componentView[CONTEXT]);\n    }\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param {?} componentView The view to sync\n * @return {?}\n */\nfunction syncViewWithBlueprint(componentView) {\n    /** @type {?} */\n    const componentTView = componentView[TVIEW];\n    for (let i = componentView.length; i < componentTView.blueprint.length; i++) {\n        componentView[i] = componentTView.blueprint[i];\n    }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} lView The view where LView or LContainer should be added\n * @param {?} lViewOrLContainer The LView or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nfunction addToViewTree(lView, lViewOrLContainer) {\n    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n    // to\n    // the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n    // of\n    // order, the change detection will run out of order, as the act of retrieving the the\n    // LContainer\n    // from the RNode is what adds it to the queue.\n    if (lView[CHILD_HEAD]) {\n        (/** @type {?} */ (lView[CHILD_TAIL]))[NEXT] = lViewOrLContainer;\n    }\n    else {\n        lView[CHILD_HEAD] = lViewOrLContainer;\n    }\n    lView[CHILD_TAIL] = lViewOrLContainer;\n    return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param {?} lView The starting LView to mark dirty\n * @return {?} the root LView\n */\nfunction markViewDirty(lView) {\n    while (lView) {\n        lView[FLAGS] |= 64 /* Dirty */;\n        /** @type {?} */\n        const parent = getLViewParent(lView);\n        // Stop traversing up as soon as you find a root view that wasn't attached to any container\n        if (isRootView(lView) && !parent) {\n            return lView;\n        }\n        // continue otherwise\n        lView = (/** @type {?} */ (parent));\n    }\n    return null;\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @param {?} rootContext\n * @param {?} flags\n * @return {?}\n */\nfunction scheduleTick(rootContext, flags) {\n    /** @type {?} */\n    const nothingScheduled = rootContext.flags === 0 /* Empty */;\n    rootContext.flags |= flags;\n    if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n        /** @type {?} */\n        let res;\n        rootContext.clean = new Promise((/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => res = r));\n        rootContext.scheduler((/**\n         * @return {?}\n         */\n        () => {\n            if (rootContext.flags & 1 /* DetectChanges */) {\n                rootContext.flags &= ~1 /* DetectChanges */;\n                tickRootContext(rootContext);\n            }\n            if (rootContext.flags & 2 /* FlushPlayers */) {\n                rootContext.flags &= ~2 /* FlushPlayers */;\n                /** @type {?} */\n                const playerHandler = rootContext.playerHandler;\n                if (playerHandler) {\n                    playerHandler.flushPlayers();\n                }\n            }\n            rootContext.clean = _CLEAN_PROMISE;\n            (/** @type {?} */ (res))(null);\n        }));\n    }\n}\n/**\n * @param {?} rootContext\n * @return {?}\n */\nfunction tickRootContext(rootContext) {\n    for (let i = 0; i < rootContext.components.length; i++) {\n        /** @type {?} */\n        const rootComponent = rootContext.components[i];\n        renderComponentOrTemplate((/** @type {?} */ (readPatchedLView(rootComponent))), rootComponent);\n    }\n}\n/**\n * @template T\n * @param {?} view\n * @param {?} context\n * @return {?}\n */\nfunction detectChangesInternal(view, context) {\n    /** @type {?} */\n    const rendererFactory = view[RENDERER_FACTORY];\n    if (rendererFactory.begin)\n        rendererFactory.begin();\n    try {\n        if (isCreationMode(view)) {\n            checkView(view, context); // creation mode pass\n        }\n        checkView(view, context); // update mode pass\n    }\n    catch (error) {\n        handleError(view, error);\n        throw error;\n    }\n    finally {\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param {?} lView The view which the change detection should be performed on.\n * @return {?}\n */\nfunction detectChangesInRootView(lView) {\n    tickRootContext((/** @type {?} */ (lView[CONTEXT])));\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction checkNoChanges(component) {\n    /** @type {?} */\n    const view = getComponentViewByInstance(component);\n    checkNoChangesInternal(view, component);\n}\n/**\n * @template T\n * @param {?} view\n * @param {?} context\n * @return {?}\n */\nfunction checkNoChangesInternal(view, context) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInternal(view, context);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param {?} lView The view which the change detection should be checked on.\n * @return {?}\n */\nfunction checkNoChangesInRootView(lView) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInRootView(lView);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} component\n * @return {?}\n */\nfunction checkView(hostView, component) {\n    /** @type {?} */\n    const hostTView = hostView[TVIEW];\n    /** @type {?} */\n    const oldView = enterView(hostView, hostView[T_HOST]);\n    /** @type {?} */\n    const templateFn = (/** @type {?} */ (hostTView.template));\n    /** @type {?} */\n    const creationMode = isCreationMode(hostView);\n    // Will become true if the `try` block executes with no errors.\n    /** @type {?} */\n    let safeToRunHooks = false;\n    try {\n        resetPreOrderHookFlags(hostView);\n        creationMode && executeViewQueryFn(1 /* Create */, hostTView, component);\n        executeTemplate(hostView, templateFn, getRenderFlags(hostView), component);\n        refreshDescendantViews(hostView);\n        safeToRunHooks = true;\n    }\n    finally {\n        leaveView(oldView, safeToRunHooks);\n    }\n}\n/**\n * @template T\n * @param {?} flags\n * @param {?} tView\n * @param {?} component\n * @return {?}\n */\nfunction executeViewQueryFn(flags, tView, component) {\n    /** @type {?} */\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n        setCurrentQueryIndex(0);\n        viewQuery(flags, component);\n    }\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Creates binding metadata for a particular binding and stores it in\n * TView.data. These are generated in order to support DebugElement.properties.\n *\n * Each binding / interpolation will have one (including attribute bindings)\n * because at the time of binding, we don't know to which instruction the binding\n * belongs. It is always stored in TView.data at the index of the last binding\n * value in LView (e.g. for interpolation8, it would be stored at the index of\n * the 8th value).\n *\n * @param {?} lView The LView that contains the current binding index.\n * @param {?=} prefix The static prefix string\n * @param {?=} suffix The static suffix string\n *\n * @return {?} Newly created binding metadata string for this binding or null\n */\nfunction storeBindingMetadata(lView, prefix = '', suffix = '') {\n    /** @type {?} */\n    const tData = lView[TVIEW].data;\n    /** @type {?} */\n    const lastBindingIndex = lView[BINDING_INDEX] - 1;\n    /** @type {?} */\n    const value = INTERPOLATION_DELIMITER + prefix + INTERPOLATION_DELIMITER + suffix;\n    return tData[lastBindingIndex] == null ? (tData[lastBindingIndex] = value) : null;\n}\n/** @type {?} */\nconst CLEAN_PROMISE = _CLEAN_PROMISE;\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction initializeTNodeInputs(tNode) {\n    // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked.\n    if (tNode.inputs === undefined) {\n        // mark inputs as checked\n        tNode.inputs = generatePropertyAliases(tNode, 0 /* Input */);\n    }\n    return tNode.inputs;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new (/** @type {?} */ (LCleanup))() : []);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = ngDevMode ? new (/** @type {?} */ (TCleanup))() : []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction loadComponentRenderer(tNode, lView) {\n    /** @type {?} */\n    const componentLView = (/** @type {?} */ (lView[tNode.index]));\n    return componentLView[RENDERER];\n}\n/**\n * Handles an error thrown in an LView.\n * @param {?} lView\n * @param {?} error\n * @return {?}\n */\nfunction handleError(lView, error) {\n    /** @type {?} */\n    const injector = lView[INJECTOR$1];\n    /** @type {?} */\n    const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n    errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param {?} lView the `LView` which contains the directives.\n * @param {?} inputs mapping between the public \"input\" name and privately-known,\n * possibly minified, property names to write to.\n * @param {?} value Value to set.\n * @return {?}\n */\nfunction setInputsForProperty(lView, inputs, value) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    for (let i = 0; i < inputs.length;) {\n        /** @type {?} */\n        const index = (/** @type {?} */ (inputs[i++]));\n        /** @type {?} */\n        const publicName = (/** @type {?} */ (inputs[i++]));\n        /** @type {?} */\n        const privateName = (/** @type {?} */ (inputs[i++]));\n        /** @type {?} */\n        const instance = lView[index];\n        ngDevMode && assertDataInRange(lView, index);\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[index]));\n        /** @type {?} */\n        const setInput = def.setInput;\n        if (setInput) {\n            (/** @type {?} */ (def.setInput))(instance, value, publicName, privateName);\n        }\n        else {\n            instance[privateName] = value;\n        }\n    }\n}\n/**\n * Updates a text binding at a given index in a given LView.\n * @param {?} lView\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction textBindingInternal(lView, index, value) {\n    ngDevMode && assertNotSame(value, (/** @type {?} */ (NO_CHANGE)), 'value should not be NO_CHANGE');\n    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n    /** @type {?} */\n    const element = (/** @type {?} */ ((/** @type {?} */ (getNativeByIndex(index, lView)))));\n    ngDevMode && assertDefined(element, 'native element should exist');\n    ngDevMode && ngDevMode.rendererSetText++;\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    isProceduralRenderer(renderer) ? renderer.setValue(element, value) : element.textContent = value;\n}\n/**\n * Renders all initial styling (class and style values) on to the element from the tNode.\n *\n * All initial styling data (i.e. any values extracted from the `style` or `class` attributes\n * on an element) are collected into the `tNode.styles` and `tNode.classes` data structures.\n * These values are populated during the creation phase of an element and are then later\n * applied once the element is instantiated. This function applies each of the static\n * style and class entries to the element.\n * @param {?} renderer\n * @param {?} native\n * @param {?} tNode\n * @return {?}\n */\nfunction renderInitialStyling(renderer, native, tNode) {\n    renderStylingMap(renderer, native, tNode.classes, true);\n    renderStylingMap(renderer, native, tNode.styles, false);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd;\n/**\n * @param {?} tNode\n * @param {?} embeddedView\n * @return {?}\n */\nfunction getLContainer(tNode, embeddedView) {\n    ngDevMode && assertLView(embeddedView);\n    /** @type {?} */\n    const container = (/** @type {?} */ (embeddedView[PARENT]));\n    if (tNode.index === -1) {\n        // This is a dynamically created view inside a dynamic container.\n        // The parent isn't an LContainer if the embedded view hasn't been attached yet.\n        return isLContainer(container) ? container : null;\n    }\n    else {\n        ngDevMode && assertLContainer(container);\n        // This is a inline view node (e.g. embeddedViewStart)\n        return container;\n    }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n * @param {?} tViewNode\n * @param {?} view\n * @return {?}\n */\nfunction getContainerRenderParent(tViewNode, view) {\n    /** @type {?} */\n    const container = getLContainer(tViewNode, view);\n    return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;\n}\n/** @enum {number} */\nconst WalkTNodeTreeAction = {\n    /** node insert in the native environment */\n    Insert: 0,\n    /** node detach from the native environment */\n    Detach: 1,\n    /** node destruction using the renderer's API */\n    Destroy: 2,\n};\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n * @param {?} action\n * @param {?} renderer\n * @param {?} parent\n * @param {?} lNodeToHandle\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction executeActionOnElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n    // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n    // won't be created until i18nApply() in the update block, so this node should be skipped.\n    // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n    // in `i18n_spec.ts`.\n    if (lNodeToHandle != null) {\n        /** @type {?} */\n        let lContainer;\n        /** @type {?} */\n        let isComponent = false;\n        // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n        // wrapped\n        // in an array which needs to be unwrapped. We need to know if it is a component and if\n        // it has LContainer so that we can process all of those cases appropriately.\n        if (isLContainer(lNodeToHandle)) {\n            lContainer = lNodeToHandle;\n        }\n        else if (isLView(lNodeToHandle)) {\n            isComponent = true;\n            ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n            lNodeToHandle = (/** @type {?} */ (lNodeToHandle[HOST]));\n        }\n        /** @type {?} */\n        const rNode = unwrapRNode(lNodeToHandle);\n        ngDevMode && assertDomNode(rNode);\n        if (action === 0 /* Insert */) {\n            nativeInsertBefore(renderer, (/** @type {?} */ (parent)), rNode, beforeNode || null);\n        }\n        else if (action === 1 /* Detach */) {\n            nativeRemoveNode(renderer, rNode, isComponent);\n        }\n        else if (action === 2 /* Destroy */) {\n            ngDevMode && ngDevMode.rendererDestroyNode++;\n            (/** @type {?} */ (((/** @type {?} */ (renderer))).destroyNode))(rNode);\n        }\n        if (lContainer != null) {\n            executeActionOnContainer(renderer, action, lContainer, parent, beforeNode);\n        }\n    }\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nfunction createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(renderStringify(value)) :\n        renderer.createTextNode(renderStringify(value));\n}\n/**\n * @param {?} lView\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction addRemoveViewFromContainer(lView, insertMode, beforeNode) {\n    /** @type {?} */\n    const renderParent = getContainerRenderParent((/** @type {?} */ (lView[TVIEW].node)), lView);\n    ngDevMode && assertNodeType((/** @type {?} */ (lView[TVIEW].node)), 2 /* View */);\n    if (renderParent) {\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        /** @type {?} */\n        const action = insertMode ? 0 /* Insert */ : 1 /* Detach */;\n        executeActionOnView(renderer, action, lView, renderParent, beforeNode);\n    }\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param {?} lView the `LView` to be detached.\n * @return {?}\n */\nfunction renderDetachView(lView) {\n    executeActionOnView(lView[RENDERER], 1 /* Detach */, lView, null, null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n * @param {?} rootView The view to destroy\n * @return {?}\n */\nfunction destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    /** @type {?} */\n    let lViewOrLContainer = rootView[CHILD_HEAD];\n    if (!lViewOrLContainer) {\n        return cleanUpView(rootView);\n    }\n    while (lViewOrLContainer) {\n        /** @type {?} */\n        let next = null;\n        if (isLView(lViewOrLContainer)) {\n            // If LView, traverse down to child.\n            next = lViewOrLContainer[CHILD_HEAD];\n        }\n        else {\n            ngDevMode && assertLContainer(lViewOrLContainer);\n            // If container, traverse down to its first LView.\n            /** @type {?} */\n            const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n            if (firstView)\n                next = firstView;\n        }\n        if (!next) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (lViewOrLContainer && !(/** @type {?} */ (lViewOrLContainer))[NEXT] && lViewOrLContainer !== rootView) {\n                cleanUpView(lViewOrLContainer);\n                lViewOrLContainer = getParentState(lViewOrLContainer, rootView);\n            }\n            cleanUpView(lViewOrLContainer || rootView);\n            next = lViewOrLContainer && (/** @type {?} */ (lViewOrLContainer))[NEXT];\n        }\n        lViewOrLContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} lView The view to insert\n * @param {?} lContainer The container into which the view should be inserted\n * @param {?} index Which index in the container to insert the child view into\n * @return {?}\n */\nfunction insertView(lView, lContainer, index) {\n    ngDevMode && assertLView(lView);\n    ngDevMode && assertLContainer(lContainer);\n    /** @type {?} */\n    const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n    /** @type {?} */\n    const containerLength = lContainer.length;\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        lContainer[indexInContainer - 1][NEXT] = lView;\n    }\n    if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n        lView[NEXT] = lContainer[indexInContainer];\n        addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n    }\n    else {\n        lContainer.push(lView);\n        lView[NEXT] = null;\n    }\n    lView[PARENT] = lContainer;\n    // track views where declaration and insertion points are different\n    /** @type {?} */\n    const declarationLContainer = lView[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n        trackMovedView(declarationLContainer, lView);\n    }\n    // notify query that a new view has been added\n    /** @type {?} */\n    const lQueries = lView[QUERIES];\n    if (lQueries !== null) {\n        lQueries.insertView(lView[TVIEW]);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 128 /* Attached */;\n}\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n * @param {?} declarationContainer\n * @param {?} lView\n * @return {?}\n */\nfunction trackMovedView(declarationContainer, lView) {\n    ngDevMode && assertLContainer(declarationContainer);\n    /** @type {?} */\n    const declaredViews = declarationContainer[MOVED_VIEWS];\n    if (declaredViews === null) {\n        declarationContainer[MOVED_VIEWS] = [lView];\n    }\n    else {\n        declaredViews.push(lView);\n    }\n}\n/**\n * @param {?} declarationContainer\n * @param {?} lView\n * @return {?}\n */\nfunction detachMovedView(declarationContainer, lView) {\n    ngDevMode && assertLContainer(declarationContainer);\n    ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n    /** @type {?} */\n    const projectedViews = (/** @type {?} */ (declarationContainer[MOVED_VIEWS]));\n    /** @type {?} */\n    const declaredViewIndex = projectedViews.indexOf(lView);\n    projectedViews.splice(declaredViewIndex, 1);\n}\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param {?} lContainer The container from which to detach a view\n * @param {?} removeIndex The index of the view to detach\n * @return {?} Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex) {\n    if (lContainer.length <= CONTAINER_HEADER_OFFSET)\n        return;\n    /** @type {?} */\n    const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n    /** @type {?} */\n    const viewToDetach = lContainer[indexInContainer];\n    if (viewToDetach) {\n        /** @type {?} */\n        const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n        if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n            detachMovedView(declarationLContainer, viewToDetach);\n        }\n        if (removeIndex > 0) {\n            lContainer[indexInContainer - 1][NEXT] = (/** @type {?} */ (viewToDetach[NEXT]));\n        }\n        /** @type {?} */\n        const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n        addRemoveViewFromContainer(viewToDetach, false);\n        // notify query that a view has been removed\n        /** @type {?} */\n        const lQueries = removedLView[QUERIES];\n        if (lQueries !== null) {\n            lQueries.detachView(removedLView[TVIEW]);\n        }\n        viewToDetach[PARENT] = null;\n        viewToDetach[NEXT] = null;\n        // Unsets the attached flag\n        viewToDetach[FLAGS] &= ~128 /* Attached */;\n    }\n    return viewToDetach;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param {?} lContainer The container from which to remove a view\n * @param {?} removeIndex The index of the view to remove\n * @return {?}\n */\nfunction removeView(lContainer, removeIndex) {\n    /** @type {?} */\n    const detachedView = detachView(lContainer, removeIndex);\n    detachedView && destroyLView(detachedView);\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param {?} lView The view to be destroyed.\n * @return {?}\n */\nfunction destroyLView(lView) {\n    if (!(lView[FLAGS] & 256 /* Destroyed */)) {\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n            executeActionOnView(renderer, 2 /* Destroy */, lView, null, null);\n        }\n        destroyViewTree(lView);\n    }\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} lViewOrLContainer The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nfunction getParentState(lViewOrLContainer, rootView) {\n    /** @type {?} */\n    let tNode;\n    if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) &&\n        tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return getLContainer((/** @type {?} */ (tNode)), lViewOrLContainer);\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];\n    }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to \\@Output listeners.\n *\n * @param {?} view The LView to clean up\n * @return {?}\n */\nfunction cleanUpView(view) {\n    if (isLView(view) && !(view[FLAGS] & 256 /* Destroyed */)) {\n        // Usually the Attached flag is removed when the view is detached from its parent, however\n        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n        view[FLAGS] &= ~128 /* Attached */;\n        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n        // really more of an \"afterDestroy\" hook if you think about it.\n        view[FLAGS] |= 256 /* Destroyed */;\n        executeOnDestroys(view);\n        removeListeners(view);\n        /** @type {?} */\n        const hostTNode = view[T_HOST];\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            ((/** @type {?} */ (view[RENDERER]))).destroy();\n        }\n        /** @type {?} */\n        const declarationContainer = view[DECLARATION_LCONTAINER];\n        // we are dealing with an embedded view that is still inserted into a container\n        if (declarationContainer !== null && isLContainer(view[PARENT])) {\n            // and this is a projected view\n            if (declarationContainer !== view[PARENT]) {\n                detachMovedView(declarationContainer, view);\n            }\n            // For embedded views still attached to a container: remove query result from this view.\n            /** @type {?} */\n            const lQueries = view[QUERIES];\n            if (lQueries !== null) {\n                lQueries.detachView(view[TVIEW]);\n            }\n        }\n    }\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} lView\n * @return {?}\n */\nfunction removeListeners(lView) {\n    /** @type {?} */\n    const tCleanup = lView[TVIEW].cleanup;\n    if (tCleanup !== null) {\n        /** @type {?} */\n        const lCleanup = (/** @type {?} */ (lView[CLEANUP]));\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            if (typeof tCleanup[i] === 'string') {\n                // This is a native DOM listener\n                /** @type {?} */\n                const idxOrTargetGetter = tCleanup[i + 1];\n                /** @type {?} */\n                const target = typeof idxOrTargetGetter === 'function' ?\n                    idxOrTargetGetter(lView) :\n                    unwrapRNode(lView[idxOrTargetGetter]);\n                /** @type {?} */\n                const listener = lCleanup[tCleanup[i + 2]];\n                /** @type {?} */\n                const useCaptureOrSubIdx = tCleanup[i + 3];\n                if (typeof useCaptureOrSubIdx === 'boolean') {\n                    // native DOM listener registered with Renderer3\n                    target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                }\n                else {\n                    if (useCaptureOrSubIdx >= 0) {\n                        // unregister\n                        lCleanup[useCaptureOrSubIdx]();\n                    }\n                    else {\n                        // Subscription\n                        lCleanup[-useCaptureOrSubIdx].unsubscribe();\n                    }\n                }\n                i += 2;\n            }\n            else {\n                // This is a cleanup function that is grouped with the index of its context\n                /** @type {?} */\n                const context = lCleanup[tCleanup[i + 1]];\n                tCleanup[i].call(context);\n            }\n        }\n        lView[CLEANUP] = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    /** @type {?} */\n    const tView = view[TVIEW];\n    /** @type {?} */\n    let destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        for (let i = 0; i < destroyHooks.length; i += 2) {\n            /** @type {?} */\n            const context = view[(/** @type {?} */ (destroyHooks[i]))];\n            // Only call the destroy hook if the context has been requested.\n            if (!(context instanceof NodeInjectorFactory)) {\n                ((/** @type {?} */ (destroyHooks[i + 1]))).call(context);\n            }\n        }\n    }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction getRenderParent(tNode, currentView) {\n    // Nodes of the top-most view can be inserted eagerly.\n    if (isRootView(currentView)) {\n        return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n    }\n    // Skip over element and ICU containers as those are represented by a comment node and\n    // can't be used as a render parent.\n    /** @type {?} */\n    const parent = getHighestElementOrICUContainer(tNode);\n    /** @type {?} */\n    const renderParent = parent.parent;\n    // If the parent is null, then we are inserting across views: either into an embedded view or a\n    // component view.\n    if (renderParent == null) {\n        /** @type {?} */\n        const hostTNode = (/** @type {?} */ (currentView[T_HOST]));\n        if (hostTNode.type === 2 /* View */) {\n            // We are inserting a root element of an embedded view We might delay insertion of children\n            // for a given view if it is disconnected. This might happen for 2 main reasons:\n            // - view is not inserted into any container(view was created but not inserted yet)\n            // - view is inserted into a container but the container itself is not inserted into the DOM\n            // (container might be part of projection or child of a view that is not inserted yet).\n            // In other words we can insert children of a given view if this view was inserted into a\n            // container and the container itself has its render parent determined.\n            return getContainerRenderParent((/** @type {?} */ (hostTNode)), currentView);\n        }\n        else {\n            // We are inserting a root element of the component view into the component host element and\n            // it should always be eager.\n            return getHostNative(currentView);\n        }\n    }\n    else {\n        /** @type {?} */\n        const isIcuCase = parent && parent.type === 5 /* IcuContainer */;\n        // If the parent of this node is an ICU container, then it is represented by comment node and we\n        // need to use it as an anchor. If it is projected then its direct parent node is the renderer.\n        if (isIcuCase && parent.flags & 2 /* isProjected */) {\n            return (/** @type {?} */ (getNativeByTNode(parent, currentView).parentNode));\n        }\n        ngDevMode && assertNodeType(renderParent, 3 /* Element */);\n        if (renderParent.flags & 1 /* isComponent */ && !isIcuCase) {\n            /** @type {?} */\n            const tData = currentView[TVIEW].data;\n            /** @type {?} */\n            const tNode = (/** @type {?} */ (tData[renderParent.index]));\n            /** @type {?} */\n            const encapsulation = ((/** @type {?} */ (tData[tNode.directiveStart]))).encapsulation;\n            // We've got a parent which is an element in the current view. We just need to verify if the\n            // parent element is not a component. Component's content nodes are not inserted immediately\n            // because they will be projected, and so doing insert at this point would be wasteful.\n            // Since the projection would then move it to its final destination. Note that we can't\n            // make this assumption when using the Shadow DOM, because the native projection placeholders\n            // (<content> or <slot>) have to be in place as elements are being inserted.\n            if (encapsulation !== ViewEncapsulation.ShadowDom &&\n                encapsulation !== ViewEncapsulation.Native) {\n                return null;\n            }\n        }\n        return (/** @type {?} */ (getNativeByTNode(renderParent, currentView)));\n    }\n}\n/**\n * Gets the native host element for a given view. Will return null if the current view does not have\n * a host element.\n * @param {?} currentView\n * @return {?}\n */\nfunction getHostNative(currentView) {\n    ngDevMode && assertLView(currentView);\n    /** @type {?} */\n    const hostTNode = currentView[T_HOST];\n    return hostTNode && hostTNode.type === 3 /* Element */ ?\n        ((/** @type {?} */ (getNativeByTNode(hostTNode, (/** @type {?} */ (getLViewParent(currentView))))))) :\n        null;\n}\n/**\n * Inserts a native node before another native node for a given parent using {\\@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode) {\n    ngDevMode && ngDevMode.rendererInsertBefore++;\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\n/**\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @return {?}\n */\nfunction nativeAppendChild(renderer, parent, child) {\n    ngDevMode && ngDevMode.rendererAppendChild++;\n    if (isProceduralRenderer(renderer)) {\n        renderer.appendChild(parent, child);\n    }\n    else {\n        parent.appendChild(child);\n    }\n}\n/**\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode) {\n    if (beforeNode !== null) {\n        nativeInsertBefore(renderer, parent, child, beforeNode);\n    }\n    else {\n        nativeAppendChild(renderer, parent, child);\n    }\n}\n/**\n * Removes a node from the DOM given its native parent.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?=} isHostElement\n * @return {?}\n */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.removeChild(parent, child, isHostElement);\n    }\n    else {\n        parent.removeChild(child);\n    }\n}\n/**\n * Returns a native parent of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nfunction nativeParentNode(renderer, node) {\n    return (/** @type {?} */ ((isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode)));\n}\n/**\n * Returns a native sibling of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nfunction nativeNextSibling(renderer, node) {\n    return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n/**\n * Finds a native \"anchor\" node for cases where we can't append a native child directly\n * (`appendChild`) and need to use a reference (anchor) node for the `insertBefore` operation.\n * @param {?} parentTNode\n * @param {?} lView\n * @return {?}\n */\nfunction getNativeAnchorNode(parentTNode, lView) {\n    if (parentTNode.type === 2 /* View */) {\n        /** @type {?} */\n        const lContainer = (/** @type {?} */ (getLContainer((/** @type {?} */ (parentTNode)), lView)));\n        /** @type {?} */\n        const index = lContainer.indexOf(lView, CONTAINER_HEADER_OFFSET) - CONTAINER_HEADER_OFFSET;\n        return getBeforeNodeForView(index, lContainer);\n    }\n    else if (parentTNode.type === 4 /* ElementContainer */ ||\n        parentTNode.type === 5 /* IcuContainer */) {\n        return getNativeByTNode(parentTNode, lView);\n    }\n    return null;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}.\n *\n * @param {?} childEl The native child (or children) that should be appended\n * @param {?} childTNode The TNode of the child element\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nfunction appendChild(childEl, childTNode, currentView) {\n    /** @type {?} */\n    const renderParent = getRenderParent(childTNode, currentView);\n    if (renderParent != null) {\n        /** @type {?} */\n        const renderer = currentView[RENDERER];\n        /** @type {?} */\n        const parentTNode = childTNode.parent || (/** @type {?} */ (currentView[T_HOST]));\n        /** @type {?} */\n        const anchorNode = getNativeAnchorNode(parentTNode, currentView);\n        if (Array.isArray(childEl)) {\n            for (let nativeNode of childEl) {\n                nativeAppendOrInsertBefore(renderer, renderParent, nativeNode, anchorNode);\n            }\n        }\n        else {\n            nativeAppendOrInsertBefore(renderer, renderParent, childEl, anchorNode);\n        }\n    }\n}\n/**\n * Gets the top-level element or an ICU container if those containers are nested.\n *\n * @param {?} tNode The starting TNode for which we should skip element and ICU containers\n * @return {?} The TNode of the highest level ICU container or element container\n */\nfunction getHighestElementOrICUContainer(tNode) {\n    while (tNode.parent != null && (tNode.parent.type === 4 /* ElementContainer */ ||\n        tNode.parent.type === 5 /* IcuContainer */)) {\n        tNode = tNode.parent;\n    }\n    return tNode;\n}\n/**\n * @param {?} viewIndexInContainer\n * @param {?} lContainer\n * @return {?}\n */\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\n    /** @type {?} */\n    const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n    if (nextViewIndex < lContainer.length) {\n        /** @type {?} */\n        const lView = (/** @type {?} */ (lContainer[nextViewIndex]));\n        ngDevMode && assertDefined(lView[T_HOST], 'Missing Host TNode');\n        /** @type {?} */\n        const tViewNodeChild = ((/** @type {?} */ (lView[T_HOST]))).child;\n        return tViewNodeChild !== null ? getNativeByTNodeOrNull(tViewNodeChild, lView) :\n            lContainer[NATIVE];\n    }\n    else {\n        return lContainer[NATIVE];\n    }\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param {?} renderer A renderer to be used\n * @param {?} rNode The native node that should be removed\n * @param {?=} isHostElement A flag indicating if a node to be removed is a host of a component.\n * @return {?}\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n    /** @type {?} */\n    const nativeParent = nativeParentNode(renderer, rNode);\n    if (nativeParent) {\n        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n    }\n}\n/**\n * Appends nodes to a target projection place. Nodes to insert were previously re-distribution and\n * stored on a component host level.\n * @param {?} lView A LView where nodes are inserted (target LView)\n * @param {?} tProjectionNode A projection node where previously re-distribution should be appended\n * (target insertion place)\n * @param {?} selectorIndex A bucket from where nodes to project should be taken\n * @param {?} componentView A where projectable nodes were initially created (source view)\n * @return {?}\n */\nfunction appendProjectedNodes(lView, tProjectionNode, selectorIndex, componentView) {\n    /** @type {?} */\n    const projectedView = (/** @type {?} */ ((/** @type {?} */ (componentView[PARENT]))));\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (componentView[T_HOST]));\n    /** @type {?} */\n    let nodeToProject = ((/** @type {?} */ (componentNode.projection)))[selectorIndex];\n    if (Array.isArray(nodeToProject)) {\n        appendChild(nodeToProject, tProjectionNode, lView);\n    }\n    else {\n        while (nodeToProject) {\n            if (!(nodeToProject.flags & 32 /* isDetached */)) {\n                if (nodeToProject.type === 1 /* Projection */) {\n                    appendProjectedNodes(lView, tProjectionNode, ((/** @type {?} */ (nodeToProject))).projection, findComponentView(projectedView));\n                }\n                else {\n                    // This flag must be set now or we won't know that this node is projected\n                    // if the nodes are inserted into a container later.\n                    nodeToProject.flags |= 2 /* isProjected */;\n                    appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n                }\n            }\n            nodeToProject = nodeToProject.projectionNext;\n        }\n    }\n}\n/**\n * Loops over all children of a TNode container and appends them to the DOM\n *\n * @param {?} ngContainerChildTNode The first child of the TNode container\n * @param {?} tProjectionNode The projection (ng-content) TNode\n * @param {?} currentView Current LView\n * @param {?} projectionView Projection view (view above current)\n * @return {?}\n */\nfunction appendProjectedChildren(ngContainerChildTNode, tProjectionNode, currentView, projectionView) {\n    while (ngContainerChildTNode) {\n        appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n        ngContainerChildTNode = ngContainerChildTNode.next;\n    }\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} projectedTNode The TNode to be projected\n * @param {?} tProjectionNode The projection (ng-content) TNode\n * @param {?} currentView Current LView\n * @param {?} projectionView Projection view (view above current)\n * @return {?}\n */\nfunction appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n    /** @type {?} */\n    const native = getNativeByTNode(projectedTNode, projectionView);\n    appendChild(native, tProjectionNode, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachPatchData(native, projectionView);\n    /** @type {?} */\n    const nodeOrContainer = projectionView[projectedTNode.index];\n    if (projectedTNode.type === 0 /* Container */) {\n        // The node we are adding is a container and we are adding it to an element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assign the final projection location in those cases.\n        for (let i = CONTAINER_HEADER_OFFSET; i < nodeOrContainer.length; i++) {\n            addRemoveViewFromContainer(nodeOrContainer[i], true, nodeOrContainer[NATIVE]);\n        }\n    }\n    else if (projectedTNode.type === 5 /* IcuContainer */) {\n        // The node we are adding is an ICU container which is why we also need to project all the\n        // children nodes that might have been created previously and are linked to this anchor\n        /** @type {?} */\n        let ngContainerChildTNode = (/** @type {?} */ (projectedTNode.child));\n        appendProjectedChildren(ngContainerChildTNode, ngContainerChildTNode, projectionView, projectionView);\n    }\n    else {\n        if (projectedTNode.type === 4 /* ElementContainer */) {\n            appendProjectedChildren(projectedTNode.child, tProjectionNode, currentView, projectionView);\n        }\n        if (isLContainer(nodeOrContainer)) {\n            appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n        }\n    }\n}\n/**\n * `executeActionOnView` performs an operation on the view as specified in `action` (insert, detach,\n * destroy)\n *\n * Inserting a view without projection or containers at top level is simple. Just iterate over the\n * root nodes of the View, and for each node perform the `action`.\n *\n * Things get more complicated with containers and projections. That is because coming across:\n * - Container: implies that we have to insert/remove/destroy the views of that container as well\n *              which in turn can have their own Containers at the View roots.\n * - Projection: implies that we have to insert/remove/destroy the nodes of the projection. The\n *               complication is that the nodes we are projecting can themselves have Containers\n *               or other Projections.\n *\n * As you can see this is a very recursive problem. While the recursive implementation is not the\n * most efficient one, trying to unroll the nodes non-recursively results in very complex code that\n * is very hard (to maintain). We are sacrificing a bit of performance for readability using a\n * recursive implementation.\n *\n * @param {?} renderer Renderer to use\n * @param {?} action action to perform (insert, detach, destroy)\n * @param {?} lView The LView which needs to be inserted, detached, destroyed.\n * @param {?} renderParent parent DOM element for insertion/removal.\n * @param {?} beforeNode Before which node the insertions should happen.\n * @return {?}\n */\nfunction executeActionOnView(renderer, action, lView, renderParent, beforeNode) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    ngDevMode && assertNodeType((/** @type {?} */ (tView.node)), 2 /* View */);\n    /** @type {?} */\n    let viewRootTNode = (/** @type {?} */ (tView.node)).child;\n    while (viewRootTNode !== null) {\n        executeActionOnNode(renderer, action, lView, viewRootTNode, renderParent, beforeNode);\n        viewRootTNode = viewRootTNode.next;\n    }\n}\n/**\n * `executeActionOnProjection` performs an operation on the projection specified by `action`\n * (insert, detach, destroy).\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param {?} renderer Renderer to use\n * @param {?} action action to perform (insert, detach, destroy)\n * @param {?} lView The LView which needs to be inserted, detached, destroyed.\n * @param {?} tProjectionNode projection TNode to process\n * @param {?} renderParent parent DOM element for insertion/removal.\n * @param {?} beforeNode Before which node the insertions should happen.\n * @return {?}\n */\nfunction executeActionOnProjection(renderer, action, lView, tProjectionNode, renderParent, beforeNode) {\n    /** @type {?} */\n    const componentLView = findComponentView(lView);\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (componentLView[T_HOST]));\n    ngDevMode && assertDefined(componentNode.projection, 'Element nodes for which projection is processed must have projection defined.');\n    /** @type {?} */\n    const nodeToProject = (/** @type {?} */ (componentNode.projection))[tProjectionNode.projection];\n    if (nodeToProject !== undefined) {\n        if (Array.isArray(nodeToProject)) {\n            for (let i = 0; i < nodeToProject.length; i++) {\n                /** @type {?} */\n                const rNode = nodeToProject[i];\n                ngDevMode && assertDomNode(rNode);\n                executeActionOnElementOrContainer(action, renderer, renderParent, rNode, beforeNode);\n            }\n        }\n        else {\n            /** @type {?} */\n            let projectionTNode = nodeToProject;\n            /** @type {?} */\n            const projectedComponentLView = (/** @type {?} */ (componentLView[PARENT]));\n            while (projectionTNode !== null) {\n                executeActionOnNode(renderer, action, projectedComponentLView, projectionTNode, renderParent, beforeNode);\n                projectionTNode = projectionTNode.projectionNext;\n            }\n        }\n    }\n}\n/**\n * `executeActionOnContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param {?} renderer Renderer to use\n * @param {?} action action to perform (insert, detach, destroy)\n * @param {?} lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param {?} renderParent parent DOM element for insertion/removal.\n * @param {?} beforeNode Before which node the insertions should happen.\n * @return {?}\n */\nfunction executeActionOnContainer(renderer, action, lContainer, renderParent, beforeNode) {\n    ngDevMode && assertLContainer(lContainer);\n    /** @type {?} */\n    const anchor = lContainer[NATIVE];\n    // LContainer has its own before node.\n    /** @type {?} */\n    const native = unwrapRNode(lContainer);\n    // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n    // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor node\n    // (comment in the DOM) that will be different from the LContainer's host node. In this particular\n    // case we need to execute action on 2 nodes:\n    // - container's host node (this is done in the executeNodeAction)\n    // - container's host node (this is done here)\n    if (anchor !== native) {\n        executeActionOnElementOrContainer(action, renderer, renderParent, anchor, beforeNode);\n    }\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        /** @type {?} */\n        const lView = (/** @type {?} */ (lContainer[i]));\n        executeActionOnView(renderer, action, lView, renderParent, anchor);\n    }\n}\n/**\n * `executeActionOnElementContainerOrIcuContainer` performs an operation on the ng-container node\n * and its child nodes as specified by the `action` (insert, detach, destroy).\n *\n * @param {?} renderer Renderer to use\n * @param {?} action action to perform (insert, detach, destroy)\n * @param {?} lView The LView which needs to be inserted, detached, destroyed.\n * @param {?} tNode The TNode associated with the `ElementContainer` or `IcuContainer`.\n * @param {?} renderParent parent DOM element for insertion/removal.\n * @param {?} beforeNode Before which node the insertions should happen.\n * @return {?}\n */\nfunction executeActionOnElementContainerOrIcuContainer(renderer, action, lView, tNode, renderParent, beforeNode) {\n    /** @type {?} */\n    const node = lView[tNode.index];\n    executeActionOnElementOrContainer(action, renderer, renderParent, node, beforeNode);\n    /** @type {?} */\n    let childTNode = tNode.child;\n    while (childTNode) {\n        executeActionOnNode(renderer, action, lView, childTNode, renderParent, beforeNode);\n        childTNode = childTNode.next;\n    }\n}\n/**\n * @param {?} renderer\n * @param {?} action\n * @param {?} lView\n * @param {?} tNode\n * @param {?} renderParent\n * @param {?} beforeNode\n * @return {?}\n */\nfunction executeActionOnNode(renderer, action, lView, tNode, renderParent, beforeNode) {\n    /** @type {?} */\n    const nodeType = tNode.type;\n    if (!(tNode.flags & 32 /* isDetached */)) {\n        if (nodeType === 4 /* ElementContainer */ || nodeType === 5 /* IcuContainer */) {\n            executeActionOnElementContainerOrIcuContainer(renderer, action, lView, (/** @type {?} */ (tNode)), renderParent, beforeNode);\n        }\n        else if (nodeType === 1 /* Projection */) {\n            executeActionOnProjection(renderer, action, lView, (/** @type {?} */ (tNode)), renderParent, beforeNode);\n        }\n        else {\n            ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */);\n            executeActionOnElementOrContainer(action, renderer, renderParent, lView[tNode.index], beforeNode);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @param {?} startTNode The TNode instance of the starting element\n * @return {?} The TNode of the parent injector\n */\nfunction getParentInjectorTNode(location, startView, startTNode) {\n    if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n        // view offset is 0\n        /** @type {?} */\n        const injectorIndex = startTNode.parent.injectorIndex;\n        /** @type {?} */\n        let parentTNode = startTNode.parent;\n        while (parentTNode.parent != null && injectorIndex == parentTNode.injectorIndex) {\n            parentTNode = parentTNode.parent;\n        }\n        return parentTNode;\n    }\n    /** @type {?} */\n    let viewOffset = getParentInjectorViewOffset(location);\n    // view offset is 1\n    /** @type {?} */\n    let parentView = startView;\n    /** @type {?} */\n    let parentTNode = (/** @type {?} */ (startView[T_HOST]));\n    // view offset is superior to 1\n    while (viewOffset > 1) {\n        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));\n        parentTNode = (/** @type {?} */ (parentView[T_HOST]));\n        viewOffset--;\n    }\n    return parentTNode;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction viewEngine_ChangeDetectorRef_interface() { }\n/**\n * @template T\n */\nclass ViewRef {\n    /**\n     * @param {?} _lView\n     * @param {?} _context\n     * @param {?} _componentIndex\n     */\n    constructor(_lView, _context, _componentIndex) {\n        this._context = _context;\n        this._componentIndex = _componentIndex;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * \\@internal\n         */\n        this._tViewNode = null;\n        this._lView = _lView;\n    }\n    /**\n     * @return {?}\n     */\n    get rootNodes() {\n        if (this._lView[HOST] == null) {\n            /** @type {?} */\n            const tView = (/** @type {?} */ (this._lView[T_HOST]));\n            return collectNativeNodes(this._lView, tView, []);\n        }\n        return [];\n    }\n    /**\n     * @return {?}\n     */\n    get context() { return this._context ? this._context : this._lookUpContext(); }\n    /**\n     * @return {?}\n     */\n    get destroyed() {\n        return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(this);\n            if (index > -1) {\n                this._viewContainerRef.detach(index);\n            }\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._lView);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { storeCleanupFn(this._lView, callback); }\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    markForCheck() { markViewDirty(this._lView); }\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *  /\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    detach() { this._lView[FLAGS] &= ~128 /* Attached */; }\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *  /\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    reattach() { this._lView[FLAGS] |= 128 /* Attached */; }\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    detectChanges() { detectChangesInternal(this._lView, this.context); }\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    checkNoChanges() { checkNoChangesInternal(this._lView, this.context); }\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    attachToViewContainerRef(vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    }\n    /**\n     * @return {?}\n     */\n    detachFromAppRef() {\n        this._appRef = null;\n        renderDetachView(this._lView);\n    }\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    attachToAppRef(appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _lookUpContext() {\n        return this._context = (/** @type {?} */ ((/** @type {?} */ (getLViewParent(this._lView)))[this._componentIndex]));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewRef.prototype._appRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewRef.prototype._viewContainerRef;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._tViewNode;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._lView;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewRef.prototype._context;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewRef.prototype._componentIndex;\n}\n/**\n * \\@internal\n * @template T\n */\nclass RootViewRef extends ViewRef {\n    /**\n     * @param {?} _view\n     */\n    constructor(_view) {\n        super(_view, null, -1);\n        this._view = _view;\n    }\n    /**\n     * @return {?}\n     */\n    detectChanges() { detectChangesInRootView(this._view); }\n    /**\n     * @return {?}\n     */\n    checkNoChanges() { checkNoChangesInRootView(this._view); }\n    /**\n     * @return {?}\n     */\n    get context() { return (/** @type {?} */ (null)); }\n}\nif (false) {\n    /** @type {?} */\n    RootViewRef.prototype._view;\n}\n/**\n * @param {?} lView\n * @param {?} parentTNode\n * @param {?} result\n * @return {?}\n */\nfunction collectNativeNodes(lView, parentTNode, result) {\n    /** @type {?} */\n    let tNodeChild = parentTNode.child;\n    while (tNodeChild) {\n        /** @type {?} */\n        const nativeNode = getNativeByTNodeOrNull(tNodeChild, lView);\n        nativeNode && result.push(nativeNode);\n        if (tNodeChild.type === 4 /* ElementContainer */) {\n            collectNativeNodes(lView, tNodeChild, result);\n        }\n        else if (tNodeChild.type === 1 /* Projection */) {\n            /** @type {?} */\n            const componentView = findComponentView(lView);\n            /** @type {?} */\n            const componentHost = (/** @type {?} */ (componentView[T_HOST]));\n            /** @type {?} */\n            const parentView = getLViewParent(componentView);\n            /** @type {?} */\n            let currentProjectedNode = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNodeChild.projection))];\n            while (currentProjectedNode && parentView) {\n                result.push(getNativeByTNode(currentProjectedNode, parentView));\n                currentProjectedNode = currentProjectedNode.next;\n            }\n        }\n        tNodeChild = tNodeChild.next;\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @param {?} ElementRefToken\n * @return {?} The ElementRef instance to use\n */\nfunction injectElementRef(ElementRefToken) {\n    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/** @type {?} */\nlet R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} tNode The node for which you'd like an ElementRef\n * @param {?} view The view to which the node belongs\n * @return {?} The ElementRef instance to use\n */\nfunction createElementRef(ElementRefToken, tNode, view) {\n    if (!R3ElementRef) {\n        // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n        R3ElementRef = class ElementRef_ extends ElementRefToken {\n        };\n    }\n    return new R3ElementRef((/** @type {?} */ (getNativeByTNode(tNode, view))));\n}\n/** @type {?} */\nlet R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @template T\n * @param {?} TemplateRefToken\n * @param {?} ElementRefToken\n * @return {?} The TemplateRef instance to use\n */\nfunction injectTemplateRef(TemplateRefToken, ElementRefToken) {\n    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @template T\n * @param {?} TemplateRefToken The TemplateRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node on which a TemplateRef is requested\n * @param {?} hostView The view to which the node belongs\n * @return {?} The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nfunction createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3TemplateRef) {\n        // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n        R3TemplateRef = class TemplateRef_ extends TemplateRefToken {\n            /**\n             * @param {?} _declarationView\n             * @param {?} _declarationTContainer\n             * @param {?} elementRef\n             */\n            constructor(_declarationView, _declarationTContainer, elementRef) {\n                super();\n                this._declarationView = _declarationView;\n                this._declarationTContainer = _declarationTContainer;\n                this.elementRef = elementRef;\n            }\n            /**\n             * @param {?} context\n             * @return {?}\n             */\n            createEmbeddedView(context) {\n                /** @type {?} */\n                const embeddedTView = (/** @type {?} */ (this._declarationTContainer.tViews));\n                /** @type {?} */\n                const lView = createEmbeddedViewAndNode(embeddedTView, context, this._declarationView, this._declarationTContainer.injectorIndex);\n                /** @type {?} */\n                const declarationLContainer = this._declarationView[this._declarationTContainer.index];\n                ngDevMode && assertLContainer(declarationLContainer);\n                lView[DECLARATION_LCONTAINER] = declarationLContainer;\n                /** @type {?} */\n                const declarationViewLQueries = this._declarationView[QUERIES];\n                if (declarationViewLQueries !== null) {\n                    lView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n                }\n                renderEmbeddedTemplate(lView, embeddedTView, context);\n                /** @type {?} */\n                const viewRef = new ViewRef(lView, context, -1);\n                viewRef._tViewNode = (/** @type {?} */ (lView[T_HOST]));\n                return viewRef;\n            }\n        };\n    }\n    if (hostTNode.type === 0 /* Container */) {\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        return new R3TemplateRef(hostView, (/** @type {?} */ (hostTNode)), createElementRef(ElementRefToken, hostTNode, hostView));\n    }\n    else {\n        return null;\n    }\n}\n/** @type {?} */\nlet R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} ViewContainerRefToken\n * @param {?} ElementRefToken\n * @return {?} The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n    /** @type {?} */\n    const previousTNode = (/** @type {?} */ (getPreviousOrParentTNode()));\n    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param {?} ViewContainerRefToken The ViewContainerRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a ViewContainerRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The ViewContainerRef instance to use\n */\nfunction createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3ViewContainerRef) {\n        // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n        R3ViewContainerRef = class ViewContainerRef_ extends ViewContainerRefToken {\n            /**\n             * @param {?} _lContainer\n             * @param {?} _hostTNode\n             * @param {?} _hostView\n             */\n            constructor(_lContainer, _hostTNode, _hostView) {\n                super();\n                this._lContainer = _lContainer;\n                this._hostTNode = _hostTNode;\n                this._hostView = _hostView;\n            }\n            /**\n             * @return {?}\n             */\n            get element() {\n                return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n            }\n            /**\n             * @return {?}\n             */\n            get injector() { return new NodeInjector(this._hostTNode, this._hostView); }\n            /**\n             * @deprecated No replacement\n             * @return {?}\n             */\n            get parentInjector() {\n                /** @type {?} */\n                const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                /** @type {?} */\n                const parentView = getParentInjectorView(parentLocation, this._hostView);\n                /** @type {?} */\n                const parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                return !hasParentInjector(parentLocation) || parentTNode == null ?\n                    new NodeInjector(null, this._hostView) :\n                    new NodeInjector(parentTNode, parentView);\n            }\n            /**\n             * @return {?}\n             */\n            clear() {\n                while (this.length > 0) {\n                    this.remove(this.length - 1);\n                }\n            }\n            /**\n             * @param {?} index\n             * @return {?}\n             */\n            get(index) {\n                return this._lContainer[VIEW_REFS] !== null && (/** @type {?} */ (this._lContainer[VIEW_REFS]))[index] || null;\n            }\n            /**\n             * @return {?}\n             */\n            get length() { return this._lContainer.length - CONTAINER_HEADER_OFFSET; }\n            /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            createEmbeddedView(templateRef, context, index) {\n                /** @type {?} */\n                const viewRef = templateRef.createEmbeddedView(context || (/** @type {?} */ ({})));\n                this.insert(viewRef, index);\n                return viewRef;\n            }\n            /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                /** @type {?} */\n                const contextInjector = injector || this.parentInjector;\n                if (!ngModuleRef && ((/** @type {?} */ (componentFactory))).ngModule == null && contextInjector) {\n                    ngModuleRef = contextInjector.get(NgModuleRef, null);\n                }\n                /** @type {?} */\n                const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            insert(viewRef, index) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                }\n                this.allocateContainerIfNeeded();\n                /** @type {?} */\n                const lView = (/** @type {?} */ (((/** @type {?} */ (viewRef)))._lView));\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index);\n                if (viewAttachedToContainer(lView)) {\n                    // If view is already attached, fall back to move() so we clean up\n                    // references appropriately.\n                    return this.move(viewRef, adjustedIdx);\n                }\n                insertView(lView, this._lContainer, adjustedIdx);\n                /** @type {?} */\n                const beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer);\n                addRemoveViewFromContainer(lView, true, beforeNode);\n                ((/** @type {?} */ (viewRef))).attachToViewContainerRef(this);\n                addToArray((/** @type {?} */ (this._lContainer[VIEW_REFS])), adjustedIdx, viewRef);\n                return viewRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            move(viewRef, newIndex) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                const index = this.indexOf(viewRef);\n                if (index !== -1)\n                    this.detach(index);\n                this.insert(viewRef, newIndex);\n                return viewRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            indexOf(viewRef) {\n                return this._lContainer[VIEW_REFS] !== null ?\n                    (/** @type {?} */ (this._lContainer[VIEW_REFS])).indexOf(viewRef) :\n                    0;\n            }\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            remove(index) {\n                this.allocateContainerIfNeeded();\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index, -1);\n                removeView(this._lContainer, adjustedIdx);\n                removeFromArray((/** @type {?} */ (this._lContainer[VIEW_REFS])), adjustedIdx);\n            }\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            detach(index) {\n                this.allocateContainerIfNeeded();\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index, -1);\n                /** @type {?} */\n                const view = detachView(this._lContainer, adjustedIdx);\n                /** @type {?} */\n                const wasDetached = view && removeFromArray((/** @type {?} */ (this._lContainer[VIEW_REFS])), adjustedIdx) != null;\n                return wasDetached ? new ViewRef((/** @type {?} */ (view)), (/** @type {?} */ (view))[CONTEXT], -1) : null;\n            }\n            /**\n             * @private\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            _adjustIndex(index, shift = 0) {\n                if (index == null) {\n                    return this.length + shift;\n                }\n                if (ngDevMode) {\n                    assertGreaterThan(index, -1, 'index must be positive');\n                    // +1 because it's legal to insert at the end.\n                    assertLessThan(index, this.length + 1 + shift, 'index');\n                }\n                return index;\n            }\n            /**\n             * @private\n             * @return {?}\n             */\n            allocateContainerIfNeeded() {\n                if (this._lContainer[VIEW_REFS] === null) {\n                    this._lContainer[VIEW_REFS] = [];\n                }\n            }\n        };\n    }\n    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    /** @type {?} */\n    let lContainer;\n    /** @type {?} */\n    const slotValue = hostView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n        lContainer[ACTIVE_INDEX] = -1;\n    }\n    else {\n        /** @type {?} */\n        let commentNode;\n        // If the host is an element container, the native host element is guaranteed to be a\n        // comment and we can reuse that comment as anchor element for the new LContainer.\n        if (hostTNode.type === 4 /* ElementContainer */) {\n            commentNode = (/** @type {?} */ (unwrapRNode(slotValue)));\n        }\n        else {\n            ngDevMode && ngDevMode.rendererCreateComment++;\n            commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        }\n        // A container can be created on the root (topmost / bootstrapped) component and in this case we\n        // can't use LTree to insert container's marker node (both parent of a comment node and the\n        // commend node itself is located outside of elements hold by LTree). In this specific case we\n        // use low-level DOM manipulation to insert container's marker (comment) node.\n        if (isRootView(hostView)) {\n            /** @type {?} */\n            const renderer = hostView[RENDERER];\n            /** @type {?} */\n            const hostNative = (/** @type {?} */ (getNativeByTNode(hostTNode, hostView)));\n            /** @type {?} */\n            const parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, (/** @type {?} */ (parentOfHostNative)), commentNode, nativeNextSibling(renderer, hostNative));\n        }\n        else {\n            appendChild(commentNode, hostTNode, hostView);\n        }\n        hostView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostView, commentNode, hostTNode, true);\n        addToViewTree(hostView, lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @param {?=} isPipe\n * @return {?}\n */\nfunction injectChangeDetectorRef(isPipe = false) {\n    return createViewRef(getPreviousOrParentTNode(), getLView(), isPipe);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param {?} hostTNode The node that is requesting a ChangeDetectorRef\n * @param {?} hostView The view to which the node belongs\n * @param {?} isPipe Whether the view is being injected into a pipe.\n * @return {?} The ChangeDetectorRef to use\n */\nfunction createViewRef(hostTNode, hostView, isPipe) {\n    if (isComponent(hostTNode) && !isPipe) {\n        /** @type {?} */\n        const componentIndex = hostTNode.directiveStart;\n        /** @type {?} */\n        const componentView = getComponentViewByIndex(hostTNode.index, hostView);\n        return new ViewRef(componentView, null, componentIndex);\n    }\n    else if (hostTNode.type === 3 /* Element */ || hostTNode.type === 0 /* Container */ ||\n        hostTNode.type === 4 /* ElementContainer */) {\n        /** @type {?} */\n        const hostComponentView = findComponentView(hostView);\n        return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n    }\n    return (/** @type {?} */ (null));\n}\n/**\n * Returns a Renderer2 (or throws when application was bootstrapped with Renderer3)\n * @param {?} view\n * @return {?}\n */\nfunction getOrCreateRenderer2(view) {\n    /** @type {?} */\n    const renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return (/** @type {?} */ (renderer));\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/**\n * Injects a Renderer2 for the current component.\n * @return {?}\n */\nfunction injectRenderer2() {\n    // We need the Renderer to be based on the component that it's being injected into, however since\n    // DI happens before we've entered its view, `getLView` will return the parent view instead.\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const nodeAtIndex = getComponentViewByIndex(tNode.index, lView);\n    return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * \\@usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * \\@publicApi\n * @abstract\n */\nclass ChangeDetectorRef {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nChangeDetectorRef.__NG_ELEMENT_ID__ = (/**\n * @return {?}\n */\n() => SWITCH_CHANGE_DETECTOR_REF_FACTORY());\nif (false) {\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    ChangeDetectorRef.__NG_ELEMENT_ID__;\n    /**\n     * When a view uses the {\\@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n     * change detection strategy, explicitly marks the view as changed so that\n     * it can be checked again.\n     *\n     * Components are normally marked as dirty (in need of rerendering) when inputs\n     * have changed or events have fired in the view. Call this method to ensure that\n     * a component is checked even if these triggers have not occured.\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.markForCheck = function () { };\n    /**\n     * Detaches this view from the change-detection tree.\n     * A detached view is  not checked until it is reattached.\n     * Use in combination with `detectChanges()` to implement local change detection checks.\n     *\n     * Detached views are not checked during change detection runs until they are\n     * re-attached, even if they are marked as dirty.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.detach = function () { };\n    /**\n     * Checks this view and its children. Use in combination with {\\@link ChangeDetectorRef#detach\n     * detach}\n     * to implement local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.detectChanges = function () { };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * Use in development mode to verify that running change detection doesn't introduce\n     * other changes.\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.checkNoChanges = function () { };\n    /**\n     * Re-attaches the previously detached view to the change detection tree.\n     * Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.reattach = function () { };\n}\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = (/**\n * @param {...?} args\n * @return {?}\n */\n(...args) => { });\nconst Éµ0$6 = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nconst Type = Function;\nfunction isType(v) {\n    return typeof v === 'function';\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Attention: These regex has to hold even if the code is minified!\n */\nconst DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\nconst INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\nconst INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\nconst INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{\\s+super\\(\\.\\.\\.arguments\\)/;\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\nfunction isDelegateCtor(typeStr) {\n    return DELEGATE_CTOR.test(typeStr) || INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||\n        (INHERITED_CLASS.test(typeStr) && !INHERITED_CLASS_WITH_CTOR.test(typeStr));\n}\nclass ReflectionCapabilities {\n    constructor(reflect) { this._reflect = reflect || _global['Reflect']; }\n    isReflectionEnabled() { return true; }\n    factory(t) { return (...args) => new t(...args); }\n    /** @internal */\n    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n        let result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (let i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] && paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    }\n    _ownParameters(type, parentCtor) {\n        const typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (isDelegateCtor(typeStr)) {\n            return null;\n        }\n        // Prefer the direct API.\n        if (type.parameters && type.parameters !== parentCtor.parameters) {\n            return type.parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        const tsickleCtorParams = type.ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);\n            const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // API for metadata created by invoking the decorators.\n        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n        const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array(type.length).fill(undefined);\n    }\n    parameters(type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(type);\n        let parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    }\n    _ownAnnotations(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n            let annotations = typeOrFunc.annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return typeOrFunc[ANNOTATIONS];\n        }\n        return null;\n    }\n    annotations(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    }\n    _ownPropMetadata(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.propMetadata &&\n            typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n            let propMetadata = typeOrFunc.propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.propDecorators &&\n            typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n            const propDecorators = typeOrFunc.propDecorators;\n            const propMetadata = {};\n            Object.keys(propDecorators).forEach(prop => {\n                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n            });\n            return propMetadata;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return typeOrFunc[PROP_METADATA];\n        }\n        return null;\n    }\n    propMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const propMetadata = {};\n        if (parentCtor !== Object) {\n            const parentPropMetadata = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata).forEach((propName) => {\n                propMetadata[propName] = parentPropMetadata[propName];\n            });\n        }\n        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach((propName) => {\n                const decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push(...propMetadata[propName]);\n                }\n                decorators.push(...ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    }\n    ownPropMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n    }\n    hasLifecycleHook(type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    }\n    guards(type) { return {}; }\n    getter(name) { return new Function('o', 'return o.' + name + ';'); }\n    setter(name) {\n        return new Function('o', 'v', 'return o.' + name + ' = v;');\n    }\n    method(name) {\n        const functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n        return new Function('o', 'args', functionBody);\n    }\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    importUri(type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return `./${stringify(type)}`;\n    }\n    resourceUri(type) { return `./${stringify(type)}`; }\n    resolveIdentifier(name, moduleUrl, members, runtime) {\n        return runtime;\n    }\n    resolveEnum(enumIdentifier, name) { return enumIdentifier[name]; }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(decoratorInvocation => {\n        const decoratorType = decoratorInvocation.type;\n        const annotationCls = decoratorType.annotationCls;\n        const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new annotationCls(...annotationArgs);\n    });\n}\nfunction getParentCtor(ctor) {\n    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    const parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _reflect = null;\n/**\n * @return {?}\n */\nfunction getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nfunction convertDependencies(deps) {\n    /** @type {?} */\n    const compiler = getCompilerFacade();\n    return deps.map((/**\n     * @param {?} dep\n     * @return {?}\n     */\n    dep => reflectDependency(compiler, dep)));\n}\n/**\n * @param {?} compiler\n * @param {?} dep\n * @return {?}\n */\nfunction reflectDependency(compiler, dep) {\n    /** @type {?} */\n    const meta = {\n        token: null,\n        host: false,\n        optional: false,\n        resolved: compiler.R3ResolvedDependencyType.Token,\n        self: false,\n        skipSelf: false,\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function setTokenAndResolvedType(token) {\n        meta.resolved = compiler.R3ResolvedDependencyType.Token;\n        meta.token = token;\n    }\n    if (Array.isArray(dep)) {\n        if (dep.length === 0) {\n            throw new Error('Dependency array must have arguments.');\n        }\n        for (let j = 0; j < dep.length; j++) {\n            /** @type {?} */\n            const param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new Error(`Attribute name must be defined.`);\n                }\n                meta.token = param.attributeName;\n                meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n            }\n            else if (param === ChangeDetectorRef) {\n                meta.token = param;\n                meta.resolved = compiler.R3ResolvedDependencyType.ChangeDetectorRef;\n            }\n            else {\n                setTokenAndResolvedType(param);\n            }\n        }\n    }\n    else {\n        setTokenAndResolvedType(dep);\n    }\n    return meta;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n * @param {?} type\n * @param {?=} srcMeta\n * @return {?}\n */\nfunction compileInjectable(type, srcMeta) {\n    /** @type {?} */\n    let def = null;\n    // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n    if (type.hasOwnProperty(NG_INJECTABLE_DEF))\n        return;\n    Object.defineProperty(type, NG_INJECTABLE_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (def === null) {\n                // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n                /** @type {?} */\n                const meta = srcMeta || { providedIn: null };\n                /** @type {?} */\n                const hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n                    isUseValueProvider(meta) || isUseExistingProvider(meta);\n                /** @type {?} */\n                const compilerMeta = {\n                    name: type.name,\n                    type: type,\n                    typeArgumentCount: 0,\n                    providedIn: meta.providedIn,\n                    ctorDeps: reflectDependencies(type),\n                    userDeps: undefined,\n                };\n                if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n                    compilerMeta.userDeps = convertDependencies(meta.deps);\n                }\n                if (!hasAProvider) {\n                    // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                    // The deps will have been reflected above, causing the factory to create the class by\n                    // calling\n                    // its constructor with injected deps.\n                    compilerMeta.useClass = type;\n                }\n                else if (isUseClassProvider(meta)) {\n                    // The user explicitly specified useClass, and may or may not have provided deps.\n                    compilerMeta.useClass = meta.useClass;\n                }\n                else if (isUseValueProvider(meta)) {\n                    // The user explicitly specified useValue.\n                    compilerMeta.useValue = meta.useValue;\n                }\n                else if (isUseFactoryProvider(meta)) {\n                    // The user explicitly specified useFactory.\n                    compilerMeta.useFactory = meta.useFactory;\n                }\n                else if (isUseExistingProvider(meta)) {\n                    // The user explicitly specified useExisting.\n                    compilerMeta.useExisting = meta.useExisting;\n                }\n                else {\n                    // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                    throw new Error(`Unreachable state.`);\n                }\n                def = getCompilerFacade().compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ngInjectableDef.js`, compilerMeta);\n            }\n            return def;\n        }),\n    });\n}\nconst Éµ0$7 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: Éµ0$7 });\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseClassProvider(meta) {\n    return ((/** @type {?} */ (meta))).useClass !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseValueProvider(meta) {\n    return USE_VALUE$1 in meta;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseFactoryProvider(meta) {\n    return ((/** @type {?} */ (meta))).useFactory !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseExistingProvider(meta) {\n    return ((/** @type {?} */ (meta))).useExisting !== undefined;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst Éµ0$8 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE$2 = getClosureSafeProperty({ provide: String, useValue: Éµ0$8 });\n/** @type {?} */\nconst EMPTY_ARRAY$1 = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nfunction convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        /** @type {?} */\n        const reflectionCapabilities = new ReflectionCapabilities();\n        /** @type {?} */\n        const deps = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return (/**\n         * @return {?}\n         */\n        () => new type(...injectArgs((/** @type {?} */ (deps)))));\n    }\n    if (USE_VALUE$2 in provider) {\n        /** @type {?} */\n        const valueProvider = ((/** @type {?} */ (provider)));\n        return (/**\n         * @return {?}\n         */\n        () => valueProvider.useValue);\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        /** @type {?} */\n        const existingProvider = ((/** @type {?} */ (provider)));\n        return (/**\n         * @return {?}\n         */\n        () => ÉµÉµinject(existingProvider.useExisting));\n    }\n    else if (((/** @type {?} */ (provider))).useFactory) {\n        /** @type {?} */\n        const factoryProvider = ((/** @type {?} */ (provider)));\n        return (/**\n         * @return {?}\n         */\n        () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY$1)));\n    }\n    else if (((/** @type {?} */ (provider))).useClass) {\n        /** @type {?} */\n        const classProvider = ((/** @type {?} */ (provider)));\n        /** @type {?} */\n        let deps = ((/** @type {?} */ (provider))).deps;\n        if (!deps) {\n            /** @type {?} */\n            const reflectionCapabilities = new ReflectionCapabilities();\n            deps = reflectionCapabilities.parameters(type);\n        }\n        return (/**\n         * @return {?}\n         */\n        () => new classProvider.useClass(...injectArgs(deps)));\n    }\n    else {\n        /** @type {?} */\n        let deps = ((/** @type {?} */ (provider))).deps;\n        if (!deps) {\n            /** @type {?} */\n            const reflectionCapabilities = new ReflectionCapabilities();\n            deps = reflectionCapabilities.parameters(type);\n        }\n        return (/**\n         * @return {?}\n         */\n        () => new type(...injectArgs((/** @type {?} */ (deps)))));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction InjectableDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ0$9 = /**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\n(type, meta) => SWITCH_COMPILE_INJECTABLE((/** @type {?} */ (type)), meta);\n/**\n * Injectable decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (Éµ0$9));\n/**\n * Type representing injectable service.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction InjectableType() { }\nif (false) {\n    /** @type {?} */\n    InjectableType.prototype.ngInjectableDef;\n}\n/**\n * Supports \\@Injectable() in JIT mode for Render2.\n * @param {?} injectableType\n * @param {?=} options\n * @return {?}\n */\nfunction render2CompileInjectable(injectableType, options) {\n    if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n        ((/** @type {?} */ (injectableType))).ngInjectableDef = ÉµÉµdefineInjectable({\n            token: injectableType,\n            providedIn: options.providedIn,\n            factory: convertInjectableProviderToFactory(injectableType, options),\n        });\n    }\n}\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n * @type {?}\n */\nconst APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n * @type {?}\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n * @type {?}\n */\nconst CIRCULAR = {};\n/** @type {?} */\nconst EMPTY_ARRAY$2 = (/** @type {?} */ ([]));\n/**\n * A lazily initialized NullInjector.\n * @type {?}\n */\nlet NULL_INJECTOR = undefined;\n/**\n * @return {?}\n */\nfunction getNullInjector() {\n    if (NULL_INJECTOR === undefined) {\n        NULL_INJECTOR = new NullInjector();\n    }\n    return NULL_INJECTOR;\n}\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n * @record\n * @template T\n */\nfunction Record() { }\nif (false) {\n    /** @type {?} */\n    Record.prototype.factory;\n    /** @type {?} */\n    Record.prototype.value;\n    /** @type {?} */\n    Record.prototype.multi;\n}\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * \\@publicApi\n * @param {?} defType\n * @param {?=} parent\n * @param {?=} additionalProviders\n * @param {?=} name\n * @return {?}\n */\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent, name);\n}\nclass R3Injector {\n    /**\n     * @param {?} def\n     * @param {?} additionalProviders\n     * @param {?} parent\n     * @param {?=} source\n     */\n    constructor(def, additionalProviders, parent, source = null) {\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        this._destroyed = false;\n        // Start off by creating Records for every provider declared in every InjectorType\n        // included transitively in `def`.\n        /** @type {?} */\n        const dedupStack = [];\n        deepForEach([def], (/**\n         * @param {?} injectorDef\n         * @return {?}\n         */\n        injectorDef => this.processInjectorType(injectorDef, [], dedupStack)));\n        additionalProviders && deepForEach(additionalProviders, (/**\n         * @param {?} provider\n         * @return {?}\n         */\n        provider => this.processProvider(provider, def, additionalProviders)));\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach((/**\n         * @param {?} defType\n         * @return {?}\n         */\n        defType => this.get(defType)));\n        // Source name, used for debugging\n        this.source = source || (typeof def === 'object' ? null : stringify(def));\n    }\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     * @return {?}\n     */\n    get destroyed() { return this._destroyed; }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    destroy() {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this._destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach((/**\n             * @param {?} service\n             * @return {?}\n             */\n            service => service.ngOnDestroy()));\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    }\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        this.assertNotDestroyed();\n        // Set the injection context.\n        /** @type {?} */\n        const previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                // SkipSelf isn't set, check if the record belongs to this injector.\n                /** @type {?} */\n                let record = this.records.get(token);\n                if (record === undefined) {\n                    // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n                    // with a scope matching this injector.\n                    /** @type {?} */\n                    const def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            // Select the next injector based on the Self flag - if self is set, the next injector is\n            // the NullInjector, otherwise it's the parent.\n            /** @type {?} */\n            const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            return nextInjector.get(token, flags & InjectFlags.Optional ? null : notFoundValue);\n        }\n        catch (e) {\n            if (e.name === 'NullInjectorError') {\n                /** @type {?} */\n                const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                path.unshift(stringify(token));\n                if (previousInjector) {\n                    // We still have a parent injector, keep throwing\n                    throw e;\n                }\n                else {\n                    // Format & throw the final error message when we don't have any previous injector\n                    return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                }\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const tokens = (/** @type {?} */ ([]));\n        /** @type {?} */\n        const records = this.records;\n        records.forEach((/**\n         * @param {?} v\n         * @param {?} token\n         * @return {?}\n         */\n        (v, token) => tokens.push(stringify(token))));\n        return `R3Injector[${tokens.join(', ')}]`;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    assertNotDestroyed() {\n        if (this._destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    }\n    /**\n     * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     *\n     * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n     * the function will return \"true\" to indicate that the providers of the type definition need\n     * to be processed. This allows us to process providers of injector types after all imports of\n     * an injector definition are processed. (following View Engine semantics: see FW-1349)\n     * @private\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @param {?} dedupStack\n     * @return {?}\n     */\n    processInjectorType(defOrWrappedDef, parents, dedupStack) {\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        if (!defOrWrappedDef)\n            return false;\n        // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n        // read, so care is taken to only do the read once.\n        // First attempt to read the ngInjectorDef.\n        /** @type {?} */\n        let def = getInjectorDef(defOrWrappedDef);\n        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n        /** @type {?} */\n        const ngModule = (def == null) && ((/** @type {?} */ (defOrWrappedDef))).ngModule || undefined;\n        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n        // is the `ngModule`.\n        /** @type {?} */\n        const defType = (ngModule === undefined) ? ((/** @type {?} */ (defOrWrappedDef))) : ngModule;\n        // Check for circular dependencies.\n        if (ngDevMode && parents.indexOf(defType) !== -1) {\n            /** @type {?} */\n            const defName = stringify(defType);\n            throw new Error(`Circular dependency in DI detected for type ${defName}. Dependency path: ${parents.map((/**\n             * @param {?} defType\n             * @return {?}\n             */\n            defType => stringify(defType))).join(' > ')} > ${defName}.`);\n        }\n        // Check for multiple imports of the same module\n        /** @type {?} */\n        const isDuplicate = dedupStack.indexOf(defType) !== -1;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = getInjectorDef(ngModule);\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return false;\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory, NOT_YET));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedupStack.push(defType);\n            /** @type {?} */\n            let importTypesWithProviders;\n            try {\n                deepForEach(def.imports, (/**\n                 * @param {?} imported\n                 * @return {?}\n                 */\n                imported => {\n                    if (this.processInjectorType(imported, parents, dedupStack)) {\n                        if (importTypesWithProviders === undefined)\n                            importTypesWithProviders = [];\n                        // If the processed import is an injector type with providers, we store it in the\n                        // list of import types with providers, so that we can process those afterwards.\n                        importTypesWithProviders.push(imported);\n                    }\n                }));\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n            // Imports which are declared with providers (TypeWithProviders) need to be processed\n            // after all imported modules are processed. This is similar to how View Engine\n            // processes/merges module imports in the metadata resolver. See: FW-1349.\n            if (importTypesWithProviders !== undefined) {\n                for (let i = 0; i < importTypesWithProviders.length; i++) {\n                    const { ngModule, providers } = importTypesWithProviders[i];\n                    deepForEach((/** @type {?} */ (providers)), (/**\n                     * @param {?} provider\n                     * @return {?}\n                     */\n                    provider => this.processProvider(provider, ngModule, providers || EMPTY_ARRAY$2)));\n                }\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        /** @type {?} */\n        const defProviders = def.providers;\n        if (defProviders != null && !isDuplicate) {\n            /** @type {?} */\n            const injectorType = (/** @type {?} */ (defOrWrappedDef));\n            deepForEach(defProviders, (/**\n             * @param {?} provider\n             * @return {?}\n             */\n            provider => this.processProvider(provider, injectorType, defProviders)));\n        }\n        return (ngModule !== undefined &&\n            ((/** @type {?} */ (defOrWrappedDef))).providers !== undefined);\n    }\n    /**\n     * Process a `SingleProvider` and add it.\n     * @private\n     * @param {?} provider\n     * @param {?} ngModuleType\n     * @param {?} providers\n     * @return {?}\n     */\n    processProvider(provider, ngModuleType, providers) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        /** @type {?} */\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n        // Construct a `Record` for the provider.\n        /** @type {?} */\n        const record = providerToRecord(provider, ngModuleType, providers);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            // If the provider indicates that it's a multi-provider, process it specially.\n            // First check whether it's been defined already.\n            /** @type {?} */\n            let multiRecord = this.records.get(token);\n            if (multiRecord) {\n                // It has. Throw a nice error if\n                if (multiRecord.multi === undefined) {\n                    throwMixedMultiProviderError();\n                }\n            }\n            else {\n                multiRecord = makeRecord(undefined, NOT_YET, true);\n                multiRecord.factory = (/**\n                 * @return {?}\n                 */\n                () => injectArgs((/** @type {?} */ ((/** @type {?} */ (multiRecord)).multi))));\n                this.records.set(token, multiRecord);\n            }\n            token = provider;\n            (/** @type {?} */ (multiRecord.multi)).push(provider);\n        }\n        else {\n            /** @type {?} */\n            const existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throwMixedMultiProviderError();\n            }\n        }\n        this.records.set(token, record);\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    hydrate(token, record) {\n        if (record.value === CIRCULAR) {\n            throwCyclicDependencyError(stringify(token));\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR;\n            record.value = (/** @type {?} */ (record.factory))();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return (/** @type {?} */ (record.value));\n    }\n    /**\n     * @private\n     * @param {?} def\n     * @return {?}\n     */\n    injectableDefInScope(def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    }\n}\nif (false) {\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     * @type {?}\n     * @private\n     */\n    R3Injector.prototype.records;\n    /**\n     * The transitive set of `InjectorType`s which define this injector.\n     * @type {?}\n     * @private\n     */\n    R3Injector.prototype.injectorDefTypes;\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     * @type {?}\n     * @private\n     */\n    R3Injector.prototype.onDestroy;\n    /**\n     * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n     * root scope.\n     * @type {?}\n     * @private\n     */\n    R3Injector.prototype.isRootInjector;\n    /** @type {?} */\n    R3Injector.prototype.source;\n    /**\n     * @type {?}\n     * @private\n     */\n    R3Injector.prototype._destroyed;\n    /** @type {?} */\n    R3Injector.prototype.parent;\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction injectableDefOrInjectorDefFactory(token) {\n    // Most tokens will have an ngInjectableDef directly on them, which specifies a factory directly.\n    /** @type {?} */\n    const injectableDef = getInjectableDef(token);\n    if (injectableDef !== null) {\n        return injectableDef.factory;\n    }\n    // If the token is an NgModule, it's also injectable but the factory is on its ngInjectorDef.\n    /** @type {?} */\n    const injectorDef = getInjectorDef(token);\n    if (injectorDef !== null) {\n        return injectorDef.factory;\n    }\n    // InjectionTokens should have an ngInjectableDef and thus should be handled above.\n    // If it's missing that, it's an error.\n    if (token instanceof InjectionToken) {\n        throw new Error(`Token ${stringify(token)} is missing an ngInjectableDef definition.`);\n    }\n    // Undecorated types can sometimes be created if they have no constructor arguments.\n    if (token instanceof Function) {\n        return getUndecoratedInjectableFactory(token);\n    }\n    // There was no way to resolve a factory for this token.\n    throw new Error('unreachable');\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction getUndecoratedInjectableFactory(token) {\n    // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n    /** @type {?} */\n    const paramLength = token.length;\n    if (paramLength > 0) {\n        /** @type {?} */\n        const args = new Array(paramLength).fill('?');\n        throw new Error(`Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n    }\n    // The constructor function appears to have no parameters.\n    // This might be because it inherits from a super-class. In which case, use an ngInjectableDef\n    // from an ancestor if there is one.\n    // Otherwise this really is a simple class with no dependencies, so return a factory that\n    // just instantiates the zero-arg constructor.\n    /** @type {?} */\n    const inheritedInjectableDef = getInheritedInjectableDef(token);\n    if (inheritedInjectableDef !== null) {\n        return (/**\n         * @return {?}\n         */\n        () => inheritedInjectableDef.factory((/** @type {?} */ (token))));\n    }\n    else {\n        return (/**\n         * @return {?}\n         */\n        () => new ((/** @type {?} */ (token)))());\n    }\n}\n/**\n * @param {?} provider\n * @param {?} ngModuleType\n * @param {?} providers\n * @return {?}\n */\nfunction providerToRecord(provider, ngModuleType, providers) {\n    /** @type {?} */\n    let factory = providerToFactory(provider, ngModuleType, providers);\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param {?} provider provider to convert to factory\n * @param {?=} ngModuleType\n * @param {?=} providers\n * @return {?}\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n    /** @type {?} */\n    let factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = (/**\n             * @return {?}\n             */\n            () => resolveForwardRef(provider.useValue));\n        }\n        else if (isExistingProvider(provider)) {\n            factory = (/**\n             * @return {?}\n             */\n            () => ÉµÉµinject(resolveForwardRef(provider.useExisting)));\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = (/**\n             * @return {?}\n             */\n            () => provider.useFactory(...injectArgs(provider.deps || [])));\n        }\n        else {\n            /** @type {?} */\n            const classRef = resolveForwardRef(provider &&\n                (((/** @type {?} */ (provider))).useClass || provider.provide));\n            if (!classRef) {\n                throwInvalidProviderError(ngModuleType, providers, provider);\n            }\n            if (hasDeps(provider)) {\n                factory = (/**\n                 * @return {?}\n                 */\n                () => new (classRef)(...injectArgs(provider.deps)));\n            }\n            else {\n                return injectableDefOrInjectorDefFactory(classRef);\n            }\n        }\n    }\n    return factory;\n}\n/**\n * @template T\n * @param {?} factory\n * @param {?} value\n * @param {?=} multi\n * @return {?}\n */\nfunction makeRecord(factory, value, multi = false) {\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValueProvider(value) {\n    return value !== null && typeof value == 'object' && USE_VALUE in value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isExistingProvider(value) {\n    return !!(value && ((/** @type {?} */ (value))).useExisting);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFactoryProvider(value) {\n    return !!(value && ((/** @type {?} */ (value))).useFactory);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isTypeProvider(value) {\n    return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isClassProvider(value) {\n    return !!((/** @type {?} */ (value))).useClass;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasDeps(value) {\n    return !!((/** @type {?} */ (value))).deps;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasOnDestroy(value) {\n    return value !== null && typeof value === 'object' &&\n        typeof ((/** @type {?} */ (value))).ngOnDestroy === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} providers\n * @param {?} parent\n * @param {?} name\n * @return {?}\n */\nfunction INJECTOR_IMPL__PRE_R3__(providers, parent, name) {\n    return new StaticInjector(providers, parent, name);\n}\n/**\n * @param {?} providers\n * @param {?} parent\n * @param {?} name\n * @return {?}\n */\nfunction INJECTOR_IMPL__POST_R3__(providers, parent, name) {\n    return createInjector({ name: name }, parent, providers, name);\n}\n/** @type {?} */\nconst INJECTOR_IMPL = INJECTOR_IMPL__PRE_R3__;\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * \\@publicApi\n * @abstract\n */\nclass Injector {\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(options, parent) {\n        if (Array.isArray(options)) {\n            return INJECTOR_IMPL(options, parent, '');\n        }\n        else {\n            return INJECTOR_IMPL(options.providers, options.parent, options.name || '');\n        }\n    }\n}\nInjector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\nInjector.NULL = new NullInjector();\n/** @nocollapse */\n/** @nocollapse */ Injector.ngInjectableDef = ÉµÉµdefineInjectable({\n    token: Injector,\n    providedIn: (/** @type {?} */ ('any')),\n    factory: (/**\n     * @return {?}\n     */\n    () => ÉµÉµinject(INJECTOR)),\n});\n/**\n * \\@internal\n * @nocollapse\n */\nInjector.__NG_ELEMENT_ID__ = -1;\nif (false) {\n    /** @type {?} */\n    Injector.THROW_IF_NOT_FOUND;\n    /** @type {?} */\n    Injector.NULL;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    Injector.ngInjectableDef;\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    Injector.__NG_ELEMENT_ID__;\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     * @abstract\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?} The instance from the injector if defined, otherwise the `notFoundValue`.\n     */\n    Injector.prototype.get = function (token, notFoundValue, flags) { };\n    /**\n     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n     * @suppress {duplicate}\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector.prototype.get = function (token, notFoundValue) { };\n}\n/** @type {?} */\nconst IDENT = (/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction (value) {\n    return value;\n});\nconst Éµ0$a = IDENT;\n/** @type {?} */\nconst EMPTY = (/** @type {?} */ ([]));\n/** @type {?} */\nconst CIRCULAR$1 = IDENT;\n/** @type {?} */\nconst MULTI_PROVIDER_FN = (/**\n * @return {?}\n */\nfunction () {\n    return Array.prototype.slice.call(arguments);\n});\nconst Éµ1$2 = MULTI_PROVIDER_FN;\n/** @enum {number} */\nconst OptionFlags = {\n    Optional: 1,\n    CheckSelf: 2,\n    CheckParent: 4,\n    Default: 6,\n};\n/** @type {?} */\nconst NO_NEW_LINE$1 = 'Éµ';\nclass StaticInjector {\n    /**\n     * @param {?} providers\n     * @param {?=} parent\n     * @param {?=} source\n     */\n    constructor(providers, parent = Injector.NULL, source = null) {\n        this.parent = parent;\n        this.source = source;\n        /** @type {?} */\n        const records = this._records = new Map();\n        records.set(Injector, (/** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false })));\n        records.set(INJECTOR, (/** @type {?} */ ({ token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false })));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    get(token, notFoundValue, flags = InjectFlags.Default) {\n        /** @type {?} */\n        const record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            return catchInjectorError(e, token, 'StaticInjectorError', this.source);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const tokens = (/** @type {?} */ ([]));\n        /** @type {?} */\n        const records = this._records;\n        records.forEach((/**\n         * @param {?} v\n         * @param {?} token\n         * @return {?}\n         */\n        (v, token) => tokens.push(stringify(token))));\n        return `StaticInjector[${tokens.join(', ')}]`;\n    }\n}\nif (false) {\n    /** @type {?} */\n    StaticInjector.prototype.parent;\n    /** @type {?} */\n    StaticInjector.prototype.source;\n    /**\n     * @type {?}\n     * @private\n     */\n    StaticInjector.prototype._records;\n}\n/**\n * @record\n */\nfunction Record$1() { }\nif (false) {\n    /** @type {?} */\n    Record$1.prototype.fn;\n    /** @type {?} */\n    Record$1.prototype.useNew;\n    /** @type {?} */\n    Record$1.prototype.deps;\n    /** @type {?} */\n    Record$1.prototype.value;\n}\n/**\n * @record\n */\nfunction DependencyRecord() { }\nif (false) {\n    /** @type {?} */\n    DependencyRecord.prototype.token;\n    /** @type {?} */\n    DependencyRecord.prototype.options;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    /** @type {?} */\n    const deps = computeDeps(provider);\n    /** @type {?} */\n    let fn = IDENT;\n    /** @type {?} */\n    let value = EMPTY;\n    /** @type {?} */\n    let useNew = false;\n    /** @type {?} */\n    let provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = ((/** @type {?} */ (provider))).useValue;\n    }\n    else if (((/** @type {?} */ (provider))).useFactory) {\n        fn = ((/** @type {?} */ (provider))).useFactory;\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        // Just use IDENT\n    }\n    else if (((/** @type {?} */ (provider))).useClass) {\n        useNew = true;\n        fn = resolveForwardRef(((/** @type {?} */ (provider))).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps, fn, useNew, value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (let i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            /** @type {?} */\n            let token = resolveForwardRef(provider.provide);\n            /** @type {?} */\n            const resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                /** @type {?} */\n                let multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = (/** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    })));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token, options: 6 /* Default */ });\n            }\n            /** @type {?} */\n            const record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        /** @type {?} */\n        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR$1) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    /** @type {?} */\n    let value;\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR$1) {\n            throw Error(NO_NEW_LINE$1 + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR$1;\n            /** @type {?} */\n            let obj = undefined;\n            /** @type {?} */\n            let useNew = record.useNew;\n            /** @type {?} */\n            let fn = record.fn;\n            /** @type {?} */\n            let depRecords = record.deps;\n            /** @type {?} */\n            let deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (let i = 0; i < depRecords.length; i++) {\n                    /** @type {?} */\n                    const depRecord = depRecords[i];\n                    /** @type {?} */\n                    const options = depRecord.options;\n                    /** @type {?} */\n                    const childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, \n                    // A record which describes how to resolve the token.\n                    // If undefined, this means we don't have such a record\n                    childRecord, \n                    // Other records we know about.\n                    records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? Injector.NULL : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new ((/** @type {?} */ (fn)))(...deps) : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n    }\n    return value;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    /** @type {?} */\n    let deps = EMPTY;\n    /** @type {?} */\n    const providerDeps = ((/** @type {?} */ (provider))).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (let i = 0; i < providerDeps.length; i++) {\n            /** @type {?} */\n            let options = 6 /* Default */;\n            /** @type {?} */\n            let token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (let j = 0, annotations = token; j < annotations.length; j++) {\n                    /** @type {?} */\n                    const annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = ((/** @type {?} */ (annotation))).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token, options });\n        }\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        /** @type {?} */\n        const token = resolveForwardRef(((/** @type {?} */ (provider))).useExisting);\n        deps = [{ token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj, 'StaticInjectorError'));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n    /** @type {?} */\n    const res = [];\n    for (let i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        /** @type {?} */\n        const reversed = findFirstClosedCycle(keys.slice().reverse());\n        /** @type {?} */\n        const tokenStrs = reversed.map((/**\n         * @param {?} k\n         * @return {?}\n         */\n        k => stringify(k.token)));\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\n/**\n * @record\n */\nfunction InjectionError() { }\nif (false) {\n    /** @type {?} */\n    InjectionError.prototype.keys;\n    /** @type {?} */\n    InjectionError.prototype.injectors;\n    /** @type {?} */\n    InjectionError.prototype.constructResolvingMessage;\n    /**\n     * @param {?} injector\n     * @param {?} key\n     * @return {?}\n     */\n    InjectionError.prototype.addKey = function (injector, key) { };\n}\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    /** @type {?} */\n    const keys = [key];\n    /** @type {?} */\n    const errMsg = constructResolvingMessage(keys);\n    /** @type {?} */\n    const error = (/** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg))));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction noProviderError(injector, key) {\n    return injectionError(injector, key, (/**\n     * @param {?} keys\n     * @return {?}\n     */\n    function (keys) {\n        /** @type {?} */\n        const first = stringify(keys[0].token);\n        return `No provider for ${first}!${constructResolvingPath(keys)}`;\n    }));\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, (/**\n     * @param {?} keys\n     * @return {?}\n     */\n    function (keys) {\n        return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n    }));\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nfunction instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, (/**\n     * @param {?} keys\n     * @return {?}\n     */\n    function (keys) {\n        /** @type {?} */\n        const first = stringify(keys[0].token);\n        return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n    }), originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nfunction invalidProviderError(provider) {\n    return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nfunction noAnnotationError(typeOrFunc, params) {\n    /** @type {?} */\n    const signature = [];\n    for (let i = 0, ii = params.length; i < ii; i++) {\n        /** @type {?} */\n        const parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n * @param {?} index\n * @return {?}\n */\nfunction outOfBoundsError(index) {\n    return Error(`Index ${index} is out-of-bounds.`);\n}\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nclass ReflectiveKey {\n    /**\n     * Private\n     * @param {?} token\n     * @param {?} id\n     */\n    constructor(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    static get(token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    }\n    /**\n     * @return {?} the number of keys registered in the system.\n     */\n    static get numberOfKeys() { return _globalKeyRegistry.numberOfKeys; }\n}\nif (false) {\n    /** @type {?} */\n    ReflectiveKey.prototype.displayName;\n    /** @type {?} */\n    ReflectiveKey.prototype.token;\n    /** @type {?} */\n    ReflectiveKey.prototype.id;\n}\nclass KeyRegistry {\n    constructor() {\n        this._allKeys = new Map();\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    get(token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return (/** @type {?} */ (this._allKeys.get(token)));\n        }\n        /** @type {?} */\n        const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    }\n    /**\n     * @return {?}\n     */\n    get numberOfKeys() { return this._allKeys.size; }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    KeyRegistry.prototype._allKeys;\n}\n/** @type {?} */\nconst _globalKeyRegistry = new KeyRegistry();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nclass Reflector {\n    constructor(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    updateCapabilities(caps) { this.reflectionCapabilities = caps; }\n    factory(type) { return this.reflectionCapabilities.factory(type); }\n    parameters(typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    }\n    annotations(typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    }\n    propMetadata(typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    }\n    hasLifecycleHook(type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    }\n    getter(name) { return this.reflectionCapabilities.getter(name); }\n    setter(name) { return this.reflectionCapabilities.setter(name); }\n    method(name) { return this.reflectionCapabilities.method(name); }\n    importUri(type) { return this.reflectionCapabilities.importUri(type); }\n    resourceUri(type) { return this.reflectionCapabilities.resourceUri(type); }\n    resolveIdentifier(name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    }\n    resolveEnum(identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The {@link Reflector} used internally in Angular to access metadata\n * about symbols.\n */\nconst reflector = new Reflector(new ReflectionCapabilities());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction NormalizedProvider() { }\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nclass ReflectiveDependency {\n    /**\n     * @param {?} key\n     * @param {?} optional\n     * @param {?} visibility\n     */\n    constructor(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    static fromKey(key) {\n        return new ReflectiveDependency(key, false, null);\n    }\n}\nif (false) {\n    /** @type {?} */\n    ReflectiveDependency.prototype.key;\n    /** @type {?} */\n    ReflectiveDependency.prototype.optional;\n    /** @type {?} */\n    ReflectiveDependency.prototype.visibility;\n}\n/** @type {?} */\nconst _EMPTY_LIST = [];\n/**\n * An internal resolved representation of a `Provider` used by the `Injector`.\n *\n * \\@usageNotes\n * This is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * \\@publicApi\n * @record\n */\nfunction ResolvedReflectiveProvider() { }\nif (false) {\n    /**\n     * A key, usually a `Type<any>`.\n     * @type {?}\n     */\n    ResolvedReflectiveProvider.prototype.key;\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     * @type {?}\n     */\n    ResolvedReflectiveProvider.prototype.resolvedFactories;\n    /**\n     * Indicates if the provider is a multi-provider or a regular provider.\n     * @type {?}\n     */\n    ResolvedReflectiveProvider.prototype.multiProvider;\n}\nclass ResolvedReflectiveProvider_ {\n    /**\n     * @param {?} key\n     * @param {?} resolvedFactories\n     * @param {?} multiProvider\n     */\n    constructor(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n}\nif (false) {\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactory;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.key;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactories;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.multiProvider;\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nclass ResolvedReflectiveFactory {\n    /**\n     * @param {?} factory\n     * @param {?} dependencies\n     */\n    constructor(factory, dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n}\nif (false) {\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.factory;\n    /**\n     * Arguments (dependencies) to the `factory` function.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.dependencies;\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n    /** @type {?} */\n    let factoryFn;\n    /** @type {?} */\n    let resolvedDeps;\n    if (provider.useClass) {\n        /** @type {?} */\n        const useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = (/**\n         * @param {?} aliasInstance\n         * @return {?}\n         */\n        (aliasInstance) => aliasInstance);\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = (/**\n         * @return {?}\n         */\n        () => provider.useValue);\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nfunction resolveReflectiveProviders(providers) {\n    /** @type {?} */\n    const normalized = _normalizeProviders(providers, []);\n    /** @type {?} */\n    const resolved = normalized.map(resolveReflectiveProvider);\n    /** @type {?} */\n    const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (let i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        const provider = providers[i];\n        /** @type {?} */\n        const existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (let j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            /** @type {?} */\n            let resolvedProvider;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n    providers.forEach((/**\n     * @param {?} b\n     * @return {?}\n     */\n    b => {\n        if (b instanceof Type) {\n            res.push((/** @type {?} */ ({ provide: b, useClass: b })));\n        }\n        else if (b && typeof b == 'object' && ((/** @type {?} */ (b))).provide !== undefined) {\n            res.push((/** @type {?} */ (b)));\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    }));\n    return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nfunction constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        /** @type {?} */\n        const params = dependencies.map((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => [t]));\n        return dependencies.map((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => _extractToken(typeOrFunc, t, params)));\n    }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n    /** @type {?} */\n    const params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some((/**\n     * @param {?} p\n     * @return {?}\n     */\n    p => p == null))) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map((/**\n     * @param {?} p\n     * @return {?}\n     */\n    p => _extractToken(typeOrFunc, p, params)));\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n    /** @type {?} */\n    let token = null;\n    /** @type {?} */\n    let optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    /** @type {?} */\n    let visibility = null;\n    for (let i = 0; i < metadata.length; ++i) {\n        /** @type {?} */\n        const paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Threshold for the dynamic version\n/** @type {?} */\nconst UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nclass ReflectiveInjector {\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    static resolve(providers) {\n        return resolveReflectiveProviders(providers);\n    }\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    static resolveAndCreate(providers, parent) {\n        /** @type {?} */\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    }\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    static fromResolvedProviders(providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    }\n}\nif (false) {\n    /**\n     * Parent of this injector.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     * @abstract\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.parent = function () { };\n    /**\n     * Resolves an array of providers and creates a child injector from those providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n     * var child = parent.resolveAndCreateChild([ChildProvider]);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n    /**\n     * Creates a child injector from previously resolved providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n     *\n     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n     * var child = parent.createChildFromResolved(childProviders);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n    /**\n     * Resolves a provider and instantiates an object in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     *\n     * var car = injector.resolveAndInstantiate(Car);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n    /**\n     * Instantiates an object using a resolved provider in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     * var carProvider = ReflectiveInjector.resolve([Car])[0];\n     * var car = injector.instantiateResolved(carProvider);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n    /**\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n}\nclass ReflectiveInjector_ {\n    /**\n     * Private\n     * @param {?} _providers\n     * @param {?=} _parent\n     */\n    constructor(_providers, _parent) {\n        /**\n         * \\@internal\n         */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        /** @type {?} */\n        const len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    }\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    resolveAndCreateChild(providers) {\n        /** @type {?} */\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    }\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    createChildFromResolved(providers) {\n        /** @type {?} */\n        const inj = new ReflectiveInjector_(providers);\n        ((/** @type {?} */ (inj))).parent = this;\n        return inj;\n    }\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    resolveAndInstantiate(provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    }\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    instantiateResolved(provider) {\n        return this._instantiateProvider(provider);\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    getProviderAtIndex(index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    }\n    /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    _new(provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getMaxNumberOfObjects() { return this.objs.length; }\n    /**\n     * @private\n     * @param {?} provider\n     * @return {?}\n     */\n    _instantiateProvider(provider) {\n        if (provider.multiProvider) {\n            /** @type {?} */\n            const res = new Array(provider.resolvedFactories.length);\n            for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    }\n    /**\n     * @private\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    _instantiate(provider, ResolvedReflectiveFactory) {\n        /** @type {?} */\n        const factory = ResolvedReflectiveFactory.factory;\n        /** @type {?} */\n        let deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map((/**\n                 * @param {?} dep\n                 * @return {?}\n                 */\n                dep => this._getByReflectiveDependency(dep)));\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        /** @type {?} */\n        let obj;\n        try {\n            obj = factory(...deps);\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    }\n    /**\n     * @private\n     * @param {?} dep\n     * @return {?}\n     */\n    _getByReflectiveDependency(dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _getByKey(key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    }\n    /**\n     * @private\n     * @param {?} keyId\n     * @return {?}\n     */\n    _getObjByKeyId(keyId) {\n        for (let i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _throwOrNull(key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _getByKeySelf(key, notFoundValue) {\n        /** @type {?} */\n        const obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    _getByKeyDefault(key, notFoundValue, visibility) {\n        /** @type {?} */\n        let inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            /** @type {?} */\n            const inj_ = (/** @type {?} */ (inj));\n            /** @type {?} */\n            const obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get displayName() {\n        /** @type {?} */\n        const providers = _mapProviders(this, (/**\n         * @param {?} b\n         * @return {?}\n         */\n        (b) => ' \"' + b.key.displayName + '\" '))\n            .join(', ');\n        return `ReflectiveInjector(providers: [${providers}])`;\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return this.displayName; }\n}\nReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ReflectiveInjector_.INJECTOR_KEY;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._constructionCounter;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._providers;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.parent;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.keyIds;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.objs;\n}\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n    /** @type {?} */\n    const res = new Array(injector._providers.length);\n    for (let i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the `entryComponents` field of components and NgModules\n * based on its `useValue` property value.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) are added to the `entryComponents` property.\n *\n * \\@usageNotes\n *\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * \\@NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n/**\n * Type of the `Attribute` decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction AttributeDecorator$1() { }\n/**\n * Type of the Attribute metadata.\n *\n * \\@publicApi\n * @record\n */\nfunction Attribute$1() { }\nif (false) {\n    /**\n     * The name of the attribute to be injected into the constructor.\n     * @type {?|undefined}\n     */\n    Attribute$1.prototype.attributeName;\n}\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * \\@publicApi\n * @abstract\n */\nclass Query {\n}\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * @see `ContentChildren`.\n * \\@publicApi\n * @record\n */\nfunction ContentChildrenDecorator() { }\nconst Éµ0$b = /**\n * @param {?=} selector\n * @param {?=} data\n * @return {?}\n */\n(selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: false, descendants: false }, data));\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ContentChildren = makePropDecorator('ContentChildren', (Éµ0$b), Query);\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction ContentChildDecorator() { }\nconst Éµ1$3 = /**\n * @param {?=} selector\n * @param {?=} data\n * @return {?}\n */\n(selector, data = {}) => (Object.assign({ selector, first: true, isViewQuery: false, descendants: true }, data));\n/**\n * ContentChild decorator and metadata.\n *\n *\n * \\@Annotation\n *\n * \\@publicApi\n * @type {?}\n */\nconst ContentChild = makePropDecorator('ContentChild', (Éµ1$3), Query);\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * @see `ViewChildren`.\n *\n * \\@publicApi\n * @record\n */\nfunction ViewChildrenDecorator() { }\nconst Éµ2 = /**\n * @param {?=} selector\n * @param {?=} data\n * @return {?}\n */\n(selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: true, descendants: true }, data));\n/**\n * ViewChildren decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ViewChildren = makePropDecorator('ViewChildren', (Éµ2), Query);\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * @see `ViewChild`.\n * \\@publicApi\n * @record\n */\nfunction ViewChildDecorator() { }\nconst Éµ3 = /**\n * @param {?} selector\n * @param {?} data\n * @return {?}\n */\n(selector, data) => (Object.assign({ selector, first: true, isViewQuery: true, descendants: true }, data));\n/**\n * ViewChild decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ViewChild = makePropDecorator('ViewChild', (Éµ3), Query);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `\\@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * \\@Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `\\@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `\\@Component.templateUrl` into\n * // `\\@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param {?} resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n * @return {?}\n */\nfunction resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    /** @type {?} */\n    const componentResolved = [];\n    // Cache so that we don't fetch the same resource more than once.\n    /** @type {?} */\n    const urlMap = new Map();\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function cachedResourceResolve(url) {\n        /** @type {?} */\n        let promise = urlMap.get(url);\n        if (!promise) {\n            /** @type {?} */\n            const resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach((/**\n     * @param {?} component\n     * @param {?} type\n     * @return {?}\n     */\n    (component, type) => {\n        /** @type {?} */\n        const promises = [];\n        if (component.templateUrl) {\n            promises.push(cachedResourceResolve(component.templateUrl).then((/**\n             * @param {?} template\n             * @return {?}\n             */\n            (template) => {\n                component.template = template;\n            })));\n        }\n        /** @type {?} */\n        const styleUrls = component.styleUrls;\n        /** @type {?} */\n        const styles = component.styles || (component.styles = []);\n        /** @type {?} */\n        const styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach((/**\n         * @param {?} styleUrl\n         * @param {?} index\n         * @return {?}\n         */\n        (styleUrl, index) => {\n            styles.push(''); // pre-allocate array.\n            promises.push(cachedResourceResolve(styleUrl).then((/**\n             * @param {?} style\n             * @return {?}\n             */\n            (style) => {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            })));\n        }));\n        /** @type {?} */\n        const fullyResolved = Promise.all(promises).then((/**\n         * @return {?}\n         */\n        () => componentDefResolved(type)));\n        componentResolved.push(fullyResolved);\n    }));\n    clearResolutionOfComponentResourcesQueue();\n    return Promise.all(componentResolved).then((/**\n     * @return {?}\n     */\n    () => undefined));\n}\n/** @type {?} */\nlet componentResourceResolutionQueue = new Map();\n// Track when existing ngComponentDef for a Type is waiting on resources.\n/** @type {?} */\nconst componentDefPendingResolution = new Set();\n/**\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.set(type, metadata);\n        componentDefPendingResolution.add(type);\n    }\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction isComponentDefPendingResolution(type) {\n    return componentDefPendingResolution.has(type);\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction componentNeedsResolution(component) {\n    return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n        component.styleUrls && component.styleUrls.length);\n}\n/**\n * @return {?}\n */\nfunction clearResolutionOfComponentResourcesQueue() {\n    /** @type {?} */\n    const old = componentResourceResolutionQueue;\n    componentResourceResolutionQueue = new Map();\n    return old;\n}\n/**\n * @param {?} queue\n * @return {?}\n */\nfunction restoreComponentResolutionQueue(queue) {\n    componentDefPendingResolution.clear();\n    queue.forEach((/**\n     * @param {?} _\n     * @param {?} type\n     * @return {?}\n     */\n    (_, type) => componentDefPendingResolution.add(type)));\n    componentResourceResolutionQueue = queue;\n}\n/**\n * @return {?}\n */\nfunction isComponentResourceResolutionQueueEmpty() {\n    return componentResourceResolutionQueue.size === 0;\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction componentDefResolved(type) {\n    componentDefPendingResolution.delete(type);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Allocates the necessary amount of slots for host vars.\n *\n * \\@codeGenApi\n * @param {?} count Amount of vars to be allocated\n *\n * @return {?}\n */\nfunction ÉµÉµallocHostVars(count) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (!tView.firstTemplatePass)\n        return;\n    queueHostBindingForCheck(tView, (/** @type {?} */ (getCurrentDirectiveDef())), count);\n    prefillHostVars(tView, lView, count);\n}\n/**\n * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n * CD.\n * @param {?} tView\n * @param {?} def\n * @param {?} hostVars\n * @return {?}\n */\nfunction queueHostBindingForCheck(tView, def, hostVars) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    /** @type {?} */\n    const expando = (/** @type {?} */ (tView.expandoInstructions));\n    /** @type {?} */\n    const length = expando.length;\n    // Check whether a given `hostBindings` function already exists in expandoInstructions,\n    // which can happen in case directive definition was extended from base definition (as a part of\n    // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n    // list, we just increase the number of host vars associated with that function, but do not add it\n    // into the list again.\n    if (length >= 2 && expando[length - 2] === def.hostBindings) {\n        expando[length - 1] = ((/** @type {?} */ (expando[length - 1]))) + hostVars;\n    }\n    else {\n        expando.push((/** @type {?} */ (def.hostBindings)), hostVars);\n    }\n}\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n * @param {?} tView\n * @param {?} lView\n * @param {?} totalHostVars\n * @return {?}\n */\nfunction prefillHostVars(tView, lView, totalHostVars) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    for (let i = 0; i < totalHostVars; i++) {\n        lView.push(NO_CHANGE);\n        tView.blueprint.push(NO_CHANGE);\n        tView.data.push(null);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _symbolIterator = null;\nfunction getSymbolIterator() {\n    if (!_symbolIterator) {\n        const Symbol = _global['Symbol'];\n        if (Symbol && Symbol.iterator) {\n            _symbolIterator = Symbol.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            const keys = Object.getOwnPropertyNames(Map.prototype);\n            for (let i = 0; i < keys.length; ++i) {\n                const key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    Map.prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\nfunction areIterablesEqual(a, b, comparator) {\n    const iterator1 = a[getSymbolIterator()]();\n    const iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        const item1 = iterator1.next();\n        const item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\nfunction iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        const iterator = obj[getSymbolIterator()]();\n        let item;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\nfunction isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// JS has NaN !== NaN\nfunction looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\nfunction devModeEqual(a, b) {\n    const isListLikeIterableA = isListLikeIterable(a);\n    const isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction devModeEqual$1(a, b) {\n    /** @type {?} */\n    const isListLikeIterableA = isListLikeIterable$1(a);\n    /** @type {?} */\n    const isListLikeIterableB = isListLikeIterable$1(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual$1(a, b, devModeEqual$1);\n    }\n    else {\n        /** @type {?} */\n        const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        /** @type {?} */\n        const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nclass WrappedValue {\n    /**\n     * @param {?} value\n     */\n    constructor(value) { this.wrapped = value; }\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    static wrap(value) { return new WrappedValue(value); }\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    static unwrap(value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; }\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    static isWrapped(value) { return value instanceof WrappedValue; }\n}\nif (false) {\n    /**\n     * @deprecated from 5.3, use `unwrap()` instead - will switch to protected\n     * @type {?}\n     */\n    WrappedValue.prototype.wrapped;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isListLikeIterable$1(obj) {\n    if (!isJsObject$1(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nfunction areIterablesEqual$1(a, b, comparator) {\n    /** @type {?} */\n    const iterator1 = a[getSymbolIterator()]();\n    /** @type {?} */\n    const iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        /** @type {?} */\n        const item1 = iterator1.next();\n        /** @type {?} */\n        const item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nfunction iterateListLike$1(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        /** @type {?} */\n        const iterator = obj[getSymbolIterator()]();\n        /** @type {?} */\n        let item;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isJsObject$1(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(misko): consider inlining\n/**\n * Updates binding and returns the value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nfunction updateBinding(lView, bindingIndex, value) {\n    return lView[bindingIndex] = value;\n}\n/**\n * Gets the current binding value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction getBinding(lView, bindingIndex) {\n    ngDevMode && assertDataInRange(lView, bindingIndex);\n    ngDevMode &&\n        assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode &&\n        assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n    /** @type {?} */\n    const oldValue = lView[bindingIndex];\n    if (isDifferent(oldValue, value)) {\n        if (ngDevMode && getCheckNoChangesMode()) {\n            // View engine didn't report undefined values as changed on the first checkNoChanges pass\n            // (before the change detection was run).\n            /** @type {?} */\n            const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n            if (!devModeEqual$1(oldValueToCompare, value)) {\n                throwErrorIfNoChangesMode(oldValue === NO_CHANGE, oldValueToCompare, value);\n            }\n        }\n        lView[bindingIndex] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n    /** @type {?} */\n    const different = bindingUpdated(lView, bindingIndex, exp1);\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/**\n * Updates 3 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @return {?}\n */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {\\@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled\n *\n * \\@codeGenApi\n * @template T\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?} This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n */\nfunction ÉµÉµproperty(propName, value, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    ngDevMode && assertNotEqual(index, -1, 'selected index cannot be -1');\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindReconciledValue = bind(lView, value);\n    if (bindReconciledValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, bindReconciledValue, sanitizer);\n    }\n    return ÉµÉµproperty;\n}\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} lView Current view\n * @param {?} value Value to diff\n * @return {?}\n */\nfunction bind(lView, value) {\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX]++;\n    storeBindingMetadata(lView);\n    return bindingUpdated(lView, bindingIndex, value) ? value : NO_CHANGE;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * \\@codeGenApi\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} namespace Optional namespace to use when setting the attribute.\n *\n * @return {?}\n */\nfunction ÉµÉµattribute(name, value, sanitizer, namespace) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bound = bind(lView, value);\n    if (bound !== NO_CHANGE) {\n        elementAttributeInternal(index, name, bound, lView, sanitizer, namespace);\n    }\n    return ÉµÉµattribute;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} lView\n * @param {?} values\n * @return {?}\n */\nfunction interpolationV(lView, values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    /** @type {?} */\n    let isBindingUpdated = false;\n    /** @type {?} */\n    const tData = lView[TVIEW].data;\n    /** @type {?} */\n    let bindingIndex = lView[BINDING_INDEX];\n    if (tData[bindingIndex] == null) {\n        // 2 is the index of the first static interstitial value (ie. not prefix)\n        for (let i = 2; i < values.length; i += 2) {\n            tData[bindingIndex++] = values[i];\n        }\n        bindingIndex = lView[BINDING_INDEX];\n    }\n    for (let i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n    }\n    lView[BINDING_INDEX] = bindingIndex;\n    storeBindingMetadata(lView, values[0], values[values.length - 1]);\n    if (!isBindingUpdated) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    /** @type {?} */\n    let content = values[0];\n    for (let i = 1; i < values.length; i += 2) {\n        content += renderStringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} lView\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nfunction interpolation1(lView, prefix, v0, suffix) {\n    /** @type {?} */\n    const different = bindingUpdated(lView, lView[BINDING_INDEX]++, v0);\n    storeBindingMetadata(lView, prefix, suffix);\n    return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} lView\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n    lView[BINDING_INDEX] += 2;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        lView[TVIEW].data[bindingIndex] = i0;\n    }\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n * @param {?} lView\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n    lView[BINDING_INDEX] += 3;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} lView\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    lView[BINDING_INDEX] += 4;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} lView\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n    lView[BINDING_INDEX] += 5;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} lView\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n    lView[BINDING_INDEX] += 6;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} lView\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n    lView[BINDING_INDEX] += 7;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n        tData[bindingIndex + 5] = i5;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n            renderStringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} lView\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n    lView[BINDING_INDEX] += 8;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n        tData[bindingIndex + 5] = i5;\n        tData[bindingIndex + 6] = i6;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n            renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n        NO_CHANGE;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} attrName The name of the attribute to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @param {?=} namespace\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n    }\n    return ÉµÉµattributeInterpolate1;\n}\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} attrName The name of the attribute to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @param {?=} namespace\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n    }\n    return ÉµÉµattributeInterpolate2;\n}\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} attrName The name of the attribute to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @param {?=} namespace\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n    }\n    return ÉµÉµattributeInterpolate3;\n}\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} attrName The name of the attribute to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @param {?=} namespace\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n    }\n    return ÉµÉµattributeInterpolate4;\n}\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} attrName The name of the attribute to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @param {?=} namespace\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n    }\n    return ÉµÉµattributeInterpolate5;\n}\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} attrName The name of the attribute to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @param {?=} namespace\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n    }\n    return ÉµÉµattributeInterpolate6;\n}\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} attrName The name of the attribute to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} i5 Static value used for concatenation only.\n * @param {?} v6 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @param {?=} namespace\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n    }\n    return ÉµÉµattributeInterpolate7;\n}\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} attrName The name of the attribute to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} i5 Static value used for concatenation only.\n * @param {?} v6 Value checked for change.\n * @param {?} i6 Static value used for concatenation only.\n * @param {?} v7 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @param {?=} namespace\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n    }\n    return ÉµÉµattributeInterpolate8;\n}\n/**\n * Update an interpolated attribute on an element with 8 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 7.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * \\@codeGenApi\n * @param {?} attrName The name of the attribute to update.\n * @param {?} values The a collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param {?=} sanitizer An optional sanitizer function\n * @param {?=} namespace\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµattributeInterpolateV(attrName, values, sanitizer, namespace) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolated = interpolationV(lView, values);\n    if (interpolated !== NO_CHANGE) {\n        elementAttributeInternal(index, attrName, interpolated, lView, sanitizer, namespace);\n    }\n    return ÉµÉµattributeInterpolateV;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nfunction detectChanges(component) {\n    /** @type {?} */\n    const view = getComponentViewByInstance(component);\n    detectChangesInternal(view, component);\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * \\@publicApi\n * @template T\n * @param {?} component Component to mark as dirty.\n *\n * @return {?}\n */\nfunction markDirty(component) {\n    ngDevMode && assertDefined(component, 'component');\n    /** @type {?} */\n    const rootView = (/** @type {?} */ (markViewDirty(getComponentViewByInstance(component))));\n    ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');\n    scheduleTick((/** @type {?} */ (rootView[CONTEXT])), 1 /* DetectChanges */);\n}\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction tick(component) {\n    /** @type {?} */\n    const rootView = getRootView(component);\n    /** @type {?} */\n    const rootContext = (/** @type {?} */ (rootView[CONTEXT]));\n    tickRootContext(rootContext);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * \\@codeGenApi\n * @param {?} index The index of the container in the data array\n *\n * @return {?}\n */\nfunction ÉµÉµcontainer(index) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = containerInternal(lView, index, null, null);\n    if (lView[TVIEW].firstTemplatePass) {\n        tNode.tViews = [];\n    }\n    setIsNotParent();\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * \\@codeGenApi\n * @param {?} index The index of the container in the data array\n * @param {?} templateFn Inline template\n * @param {?} consts The number of nodes, local refs, and pipes for this template\n * @param {?} vars The number of bindings for this template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @param {?=} localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @return {?}\n */\nfunction ÉµÉµtemplate(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // TODO: consider a separate node type for templates\n    /** @type {?} */\n    const tContainerNode = containerInternal(lView, index, tagName || null, attrs || null);\n    if (tView.firstTemplatePass) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, lView, tContainerNode, localRefs || null);\n        /** @type {?} */\n        const embeddedTView = tContainerNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n        if (tView.queries !== null) {\n            tView.queries.template(tView, tContainerNode);\n            embeddedTView.queries = tView.queries.embeddedTView(tContainerNode);\n        }\n    }\n    createDirectivesAndLocals(tView, lView, tContainerNode, localRefExtractor);\n    attachPatchData(getNativeByTNode(tContainerNode, lView), lView);\n    registerPostOrderHooks(tView, tContainerNode);\n    setIsNotParent();\n}\n/**\n * Sets a container up to receive views.\n *\n * \\@codeGenApi\n * @param {?} index The index of the container in the data array\n *\n * @return {?}\n */\nfunction ÉµÉµcontainerRefreshStart(index) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    let previousOrParentTNode = (/** @type {?} */ (loadInternal(tView.data, index)));\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    setPreviousOrParentTNode(previousOrParentTNode, true);\n    lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n    // We need to execute init hooks here so ngOnInit hooks are called in top level views\n    // before they are called in embedded views (for backwards compatibility).\n    executePreOrderHooks(lView, tView, getCheckNoChangesMode(), undefined);\n}\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµcontainerRefreshEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsNotParent();\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode, false);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    /** @type {?} */\n    const lContainer = getLView()[previousOrParentTNode.index];\n    /** @type {?} */\n    const nextIndex = lContainer[ACTIVE_INDEX];\n    // remove extra views at the end of the container\n    while (nextIndex < lContainer.length - CONTAINER_HEADER_OFFSET) {\n        removeView(lContainer, nextIndex);\n    }\n}\n/**\n * @param {?} lView\n * @param {?} nodeIndex\n * @param {?} tagName\n * @param {?} attrs\n * @return {?}\n */\nfunction containerInternal(lView, nodeIndex, tagName, attrs) {\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n    /** @type {?} */\n    const adjustedIndex = nodeIndex + HEADER_OFFSET;\n    ngDevMode && assertDataInRange(lView, nodeIndex + HEADER_OFFSET);\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    const comment = lView[adjustedIndex] =\n        lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    /** @type {?} */\n    const tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], nodeIndex, 0 /* Container */, tagName, attrs);\n    /** @type {?} */\n    const lContainer = lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode);\n    appendChild(comment, tNode, lView);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(lView, lContainer);\n    ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n    return tNode;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction store(index, value) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (adjustedIndex >= tView.data.length) {\n        tView.data[adjustedIndex] = null;\n        tView.blueprint[adjustedIndex] = null;\n    }\n    lView[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} index The index of the local ref in contextViewData.\n *\n * @return {?}\n */\nfunction ÉµÉµreference(index) {\n    /** @type {?} */\n    const contextLView = getContextLView();\n    return loadInternal(contextLView, index);\n}\n/**\n * Retrieves a value from current `viewData`.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} index\n * @return {?}\n */\nfunction ÉµÉµload(index) {\n    return loadInternal(getLView(), index);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction ÉµÉµdirectiveInject(token, flags = InjectFlags.Default) {\n    token = resolveForwardRef(token);\n    /** @type {?} */\n    const lView = getLView();\n    // Fall back to inject() if view hasn't been created. This situation can happen in tests\n    // if inject utilities are used before bootstrapping.\n    if (lView == null)\n        return ÉµÉµinject(token, flags);\n    return getOrCreateInjectable((/** @type {?} */ (getPreviousOrParentTNode())), lView, token, flags);\n}\n/**\n * Facade for the attribute injection from DI.\n *\n * \\@codeGenApi\n * @param {?} attrNameToInject\n * @return {?}\n */\nfunction ÉµÉµinjectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * --------\n *\n * This file contains the core logic for how styling instructions are processed in Angular.\n *\n * To learn more about the algorithm see `TStylingContext`.\n *\n * --------\n */\n/**\n * Temporary function to bridge styling functionality between this new\n * refactor (which is here inside of `styling_next/`) and the old\n * implementation (which lives inside of `styling/`).\n *\n * This function is executed during the creation block of an element.\n * Because the existing styling implementation issues a call to the\n * `styling()` instruction, this instruction will also get run. The\n * central idea here is that the directive index values are bound\n * into the context. The directive index is temporary and is only\n * required until the `select(n)` instruction is fully functional.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµstyling() {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    if (tView.firstTemplatePass) {\n        updateLastDirectiveIndex$1(getPreviousOrParentTNode(), getActiveDirectiveStylingIndex());\n    }\n}\n/**\n * Sets the current style sanitizer function which will then be used\n * within all follow-up prop and map-based style binding instructions\n * for the given element.\n *\n * Note that once styling has been applied to the element (i.e. once\n * `select(n)` is executed or the hostBindings/template function exits)\n * then the active `sanitizerFn` will be set to `null`. This means that\n * once styling is applied to another element then a another call to\n * `styleSanitizer` will need to be made.\n *\n * \\@codeGenApi\n * @param {?} sanitizer\n * @return {?}\n */\nfunction ÉµÉµstyleSanitizer(sanitizer) {\n    setCurrentStyleSanitizer(sanitizer);\n}\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * \\@codeGenApi\n * @param {?} prop A valid CSS property.\n * @param {?} value New value to write (`null` or an empty string to remove).\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding.\n *\n * @return {?}\n */\nfunction ÉµÉµstyleProp(prop, value, suffix) {\n    stylePropInternal(getSelectedIndex(), prop, value, suffix);\n}\n/**\n * @param {?} elementIndex\n * @param {?} prop\n * @param {?} value\n * @param {?=} suffix\n * @return {?}\n */\nfunction stylePropInternal(elementIndex, prop, value, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    // if a value is interpolated then it may render a `NO_CHANGE` value.\n    // in this case we do not need to do anything, but the binding index\n    // still needs to be incremented because all styling binding values\n    // are stored inside of the lView.\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX]++;\n    /** @type {?} */\n    const updated = _stylingProp(elementIndex, bindingIndex, prop, resolveStylePropValue(value, suffix), false, deferStylingUpdate());\n    if (ngDevMode) {\n        ngDevMode.styleProp++;\n        if (updated) {\n            ngDevMode.stylePropCacheMiss++;\n        }\n    }\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * \\@codeGenApi\n * @param {?} className\n * @param {?} value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding.\n *\n * @return {?}\n */\nfunction ÉµÉµclassProp(className, value) {\n    /** @type {?} */\n    const lView = getLView();\n    // if a value is interpolated then it may render a `NO_CHANGE` value.\n    // in this case we do not need to do anything, but the binding index\n    // still needs to be incremented because all styling binding values\n    // are stored inside of the lView.\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX]++;\n    /** @type {?} */\n    const updated = _stylingProp(getSelectedIndex(), bindingIndex, className, value, true, deferStylingUpdate());\n    if (ngDevMode) {\n        ngDevMode.classProp++;\n        if (updated) {\n            ngDevMode.classPropCacheMiss++;\n        }\n    }\n}\n/**\n * Shared function used to update a prop-based styling binding for an element.\n * @param {?} elementIndex\n * @param {?} bindingIndex\n * @param {?} prop\n * @param {?} value\n * @param {?} isClassBased\n * @param {?} defer\n * @return {?}\n */\nfunction _stylingProp(elementIndex, bindingIndex, prop, value, isClassBased, defer) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getTNode(elementIndex, lView);\n    /** @type {?} */\n    const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n    /** @type {?} */\n    let updated = false;\n    if (value !== NO_CHANGE) {\n        if (isClassBased) {\n            updated = updateClassBinding(getClassesContext(tNode), lView, native, prop, bindingIndex, (/** @type {?} */ (value)), defer, false);\n        }\n        else {\n            /** @type {?} */\n            const sanitizer = getCurrentStyleSanitizer();\n            updated = updateStyleBinding(getStylesContext(tNode), lView, native, prop, bindingIndex, (/** @type {?} */ (value)), sanitizer, defer, false);\n        }\n    }\n    return updated;\n}\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * \\@codeGenApi\n * @param {?} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @return {?}\n */\nfunction ÉµÉµstyleMap(styles) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    /** @type {?} */\n    const context = getStylesContext(tNode);\n    /** @type {?} */\n    const directiveIndex = getActiveDirectiveStylingIndex();\n    // if a value is interpolated then it may render a `NO_CHANGE` value.\n    // in this case we do not need to do anything, but the binding index\n    // still needs to be incremented because all styling binding values\n    // are stored inside of the lView.\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX]++;\n    // inputs are only evaluated from a template binding into a directive, therefore,\n    // there should not be a situation where a directive host bindings function\n    // evaluates the inputs (this should only happen in the template function)\n    if (!directiveIndex && hasStyleInput(tNode) && styles !== NO_CHANGE) {\n        updateDirectiveInputValue(context, lView, tNode, bindingIndex, styles, false);\n        styles = NO_CHANGE;\n    }\n    /** @type {?} */\n    const updated = _stylingMap(index, context, bindingIndex, styles, false, deferStylingUpdate());\n    if (ngDevMode) {\n        ngDevMode.styleMap++;\n        if (updated) {\n            ngDevMode.styleMapCacheMiss++;\n        }\n    }\n}\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * \\@codeGenApi\n * @param {?} classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @return {?}\n */\nfunction ÉµÉµclassMap(classes) {\n    classMapInternal(getSelectedIndex(), classes);\n}\n/**\n * @param {?} elementIndex\n * @param {?} classes\n * @return {?}\n */\nfunction classMapInternal(elementIndex, classes) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getTNode(elementIndex, lView);\n    /** @type {?} */\n    const context = getClassesContext(tNode);\n    /** @type {?} */\n    const directiveIndex = getActiveDirectiveStylingIndex();\n    // if a value is interpolated then it may render a `NO_CHANGE` value.\n    // in this case we do not need to do anything, but the binding index\n    // still needs to be incremented because all styling binding values\n    // are stored inside of the lView.\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX]++;\n    // inputs are only evaluated from a template binding into a directive, therefore,\n    // there should not be a situation where a directive host bindings function\n    // evaluates the inputs (this should only happen in the template function)\n    if (!directiveIndex && hasClassInput(tNode) && classes !== NO_CHANGE) {\n        updateDirectiveInputValue(context, lView, tNode, bindingIndex, classes, true);\n        classes = NO_CHANGE;\n    }\n    /** @type {?} */\n    const updated = _stylingMap(elementIndex, context, bindingIndex, classes, true, deferStylingUpdate());\n    if (ngDevMode) {\n        ngDevMode.classMap++;\n        if (updated) {\n            ngDevMode.classMapCacheMiss++;\n        }\n    }\n}\n/**\n * Shared function used to update a map-based styling binding for an element.\n *\n * When this function is called it will activate support for `[style]` and\n * `[class]` bindings in Angular.\n * @param {?} elementIndex\n * @param {?} context\n * @param {?} bindingIndex\n * @param {?} value\n * @param {?} isClassBased\n * @param {?} defer\n * @return {?}\n */\nfunction _stylingMap(elementIndex, context, bindingIndex, value, isClassBased, defer) {\n    activateStylingMapFeature();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let valueHasChanged = false;\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        const tNode = getTNode(elementIndex, lView);\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        /** @type {?} */\n        const oldValue = lView[bindingIndex];\n        valueHasChanged = hasValueChanged(oldValue, value);\n        /** @type {?} */\n        const stylingMapArr = normalizeIntoStylingMap(oldValue, value, !isClassBased);\n        if (isClassBased) {\n            updateClassBinding(context, lView, native, null, bindingIndex, stylingMapArr, defer, valueHasChanged);\n        }\n        else {\n            /** @type {?} */\n            const sanitizer = getCurrentStyleSanitizer();\n            updateStyleBinding(context, lView, native, null, bindingIndex, stylingMapArr, sanitizer, defer, valueHasChanged);\n        }\n    }\n    return valueHasChanged;\n}\n/**\n * Writes a value to a directive's `style` or `class` input binding (if it has changed).\n *\n * If a directive has a `\\@Input` binding that is set on `style` or `class` then that value\n * will take priority over the underlying style/class styling bindings. This value will\n * be updated for the binding each time during change detection.\n *\n * When this occurs this function will attempt to write the value to the input binding\n * depending on the following situations:\n *\n * - If `oldValue !== newValue`\n * - If `newValue` is `null` (but this is skipped if it is during the first update pass--\n *    which is when the context is not locked yet)\n * @param {?} context\n * @param {?} lView\n * @param {?} tNode\n * @param {?} bindingIndex\n * @param {?} newValue\n * @param {?} isClassBased\n * @return {?}\n */\nfunction updateDirectiveInputValue(context, lView, tNode, bindingIndex, newValue, isClassBased) {\n    /** @type {?} */\n    const oldValue = lView[bindingIndex];\n    if (oldValue !== newValue) {\n        // even if the value has changed we may not want to emit it to the\n        // directive input(s) in the event that it is falsy during the\n        // first update pass.\n        if (newValue || isContextLocked(context)) {\n            /** @type {?} */\n            const inputs = (/** @type {?} */ ((/** @type {?} */ (tNode.inputs))[isClassBased ? 'class' : 'style']));\n            /** @type {?} */\n            const initialValue = getInitialStylingValue(context);\n            /** @type {?} */\n            const value = normalizeStylingDirectiveInputValue(initialValue, newValue, isClassBased);\n            setInputsForProperty(lView, inputs, value);\n        }\n        lView[bindingIndex] = newValue;\n    }\n}\n/**\n * Returns the appropriate directive input value for `style` or `class`.\n *\n * Earlier versions of Angular expect a binding value to be passed into directive code\n * exactly as it is unless there is a static value present (in which case both values\n * will be stringified and concatenated).\n * @param {?} initialValue\n * @param {?} bindingValue\n * @param {?} isClassBased\n * @return {?}\n */\nfunction normalizeStylingDirectiveInputValue(initialValue, bindingValue, isClassBased) {\n    /** @type {?} */\n    let value = bindingValue;\n    // we only concat values if there is an initial value, otherwise we return the value as is.\n    // Note that this is to satisfy backwards-compatibility in Angular.\n    if (initialValue.length > 0) {\n        if (isClassBased) {\n            value = concatString(initialValue, forceClassesAsString(bindingValue));\n        }\n        else {\n            value = concatString(initialValue, forceStylesAsString((/** @type {?} */ (bindingValue))), ';');\n        }\n    }\n    return value;\n}\n/**\n * Flushes all styling code to the element.\n *\n * This function is designed to be called from the template and hostBindings\n * functions and may be called multiple times depending whether multiple\n * sources of styling exist. If called multiple times, only the last call\n * to `stlyingApply()` will render styling to the element.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµstylingApply() {\n    /** @type {?} */\n    const elementIndex = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getTNode(elementIndex, lView);\n    /** @type {?} */\n    const renderer = getRenderer(tNode, lView);\n    /** @type {?} */\n    const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n    /** @type {?} */\n    const directiveIndex = getActiveDirectiveStylingIndex();\n    /** @type {?} */\n    const sanitizer = getCurrentStyleSanitizer();\n    flushStyling(renderer, lView, getClassesContext(tNode), getStylesContext(tNode), native, directiveIndex, sanitizer);\n    setCurrentStyleSanitizer(null);\n}\n/**\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction getRenderer(tNode, lView) {\n    return tNode.type === 3 /* Element */ ? lView[RENDERER] : null;\n}\n/**\n * Searches and assigns provided all static style/class entries (found in the `attrs` value)\n * and registers them in their respective styling contexts.\n * @param {?} tNode\n * @param {?} attrs\n * @param {?} startIndex\n * @return {?}\n */\nfunction registerInitialStylingOnTNode(tNode, attrs, startIndex) {\n    /** @type {?} */\n    let hasAdditionalInitialStyling = false;\n    /** @type {?} */\n    let styles = getStylingMapArray(tNode.styles);\n    /** @type {?} */\n    let classes = getStylingMapArray(tNode.classes);\n    /** @type {?} */\n    let mode = -1;\n    for (let i = startIndex; i < attrs.length; i++) {\n        /** @type {?} */\n        const attr = (/** @type {?} */ (attrs[i]));\n        if (typeof attr == 'number') {\n            mode = attr;\n        }\n        else if (mode == 1 /* Classes */) {\n            classes = classes || [''];\n            addItemToStylingMap(classes, attr, true);\n            hasAdditionalInitialStyling = true;\n        }\n        else if (mode == 2 /* Styles */) {\n            /** @type {?} */\n            const value = (/** @type {?} */ (attrs[++i]));\n            styles = styles || [''];\n            addItemToStylingMap(styles, attr, value);\n            hasAdditionalInitialStyling = true;\n        }\n    }\n    if (classes && classes.length > 1 /* ValuesStartPosition */) {\n        if (!tNode.classes) {\n            tNode.classes = classes;\n        }\n        updateRawValueOnContext(tNode.classes, stylingMapToString(classes, true));\n    }\n    if (styles && styles.length > 1 /* ValuesStartPosition */) {\n        if (!tNode.styles) {\n            tNode.styles = styles;\n        }\n        updateRawValueOnContext(tNode.styles, stylingMapToString(styles, false));\n    }\n    return hasAdditionalInitialStyling;\n}\n/**\n * @param {?} context\n * @param {?} value\n * @return {?}\n */\nfunction updateRawValueOnContext(context, value) {\n    /** @type {?} */\n    const stylingMapArr = (/** @type {?} */ (getStylingMapArray(context)));\n    stylingMapArr[0 /* RawValuePosition */] = value;\n}\n/**\n * @return {?}\n */\nfunction getActiveDirectiveStylingIndex() {\n    // whenever a directive's hostBindings function is called a uniqueId value\n    // is assigned. Normally this is enough to help distinguish one directive\n    // from another for the styling context, but there are situations where a\n    // sub-class directive could inherit and assign styling in concert with a\n    // parent directive. To help the styling code distinguish between a parent\n    // sub-classed directive the inheritance depth is taken into account as well.\n    return getActiveDirectiveId() + getActiveDirectiveSuperClassDepth();\n}\n/**\n * Temporary function that will update the max directive index value in\n * both the classes and styles contexts present on the provided `tNode`.\n *\n * This code is only used because the `select(n)` code functionality is not\n * yet 100% functional. The `select(n)` instruction cannot yet evaluate host\n * bindings function code in sync with the associated template function code.\n * For this reason the styling algorithm needs to track the last directive index\n * value so that it knows exactly when to render styling to the element since\n * `stylingApply()` is called multiple times per CD (`stylingApply` will be\n * removed once `select(n)` is fixed).\n * @param {?} tNode\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction updateLastDirectiveIndex$1(tNode, directiveIndex) {\n    updateLastDirectiveIndex(getClassesContext(tNode), directiveIndex);\n    updateLastDirectiveIndex(getStylesContext(tNode), directiveIndex);\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction getStylesContext(tNode) {\n    return getContext(tNode, false);\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction getClassesContext(tNode) {\n    return getContext(tNode, true);\n}\n/**\n * Returns/instantiates a styling context from/to a `tNode` instance.\n * @param {?} tNode\n * @param {?} isClassBased\n * @return {?}\n */\nfunction getContext(tNode, isClassBased) {\n    /** @type {?} */\n    let context = isClassBased ? tNode.classes : tNode.styles;\n    if (!isStylingContext(context)) {\n        context = allocTStylingContext(context);\n        if (ngDevMode) {\n            attachStylingDebugObject((/** @type {?} */ (context)));\n        }\n        if (isClassBased) {\n            tNode.classes = context;\n        }\n        else {\n            tNode.styles = context;\n        }\n    }\n    return (/** @type {?} */ (context));\n}\n/**\n * @param {?} value\n * @param {?} suffix\n * @return {?}\n */\nfunction resolveStylePropValue(value, suffix) {\n    if (value === NO_CHANGE)\n        return value;\n    /** @type {?} */\n    let resolvedValue = null;\n    if (value !== null) {\n        if (suffix) {\n            // when a suffix is applied then it will bypass\n            // sanitization entirely (b/c a new string is created)\n            resolvedValue = renderStringify(value) + suffix;\n        }\n        else {\n            // sanitization happens by dealing with a String value\n            // this means that the string value will be passed through\n            // into the style rendering later (which is where the value\n            // will be sanitized before it is applied)\n            resolvedValue = (/** @type {?} */ ((/** @type {?} */ (value))));\n        }\n    }\n    return resolvedValue;\n}\n/**\n * Whether or not a style/class binding update should be applied later.\n *\n * This function will decide whether a binding should be applied immediately\n * or later (just before the styles/classes are flushed to the element). The\n * reason why this feature exists is because of super/sub directive inheritance.\n * Angular will evaluate host bindings on the super directive first and the sub\n * directive, but the styling bindings on the sub directive are of higher priority\n * than the super directive. For this reason all styling bindings that take place\n * in this circumstance will need to be deferred until later so that they can be\n * applied together and in a different order (the algorithm handles that part).\n * @return {?}\n */\nfunction deferStylingUpdate() {\n    return getActiveDirectiveSuperClassHeight() > 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * \\@codeGenApi\n * @param {?} index Index of the element in the LView array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @return {?}\n */\nfunction ÉµÉµelementStart(index, name, attrs, localRefs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n    /** @type {?} */\n    const native = lView[index + HEADER_OFFSET] = elementCreate(name);\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    /** @type {?} */\n    const tNode = getOrCreateTNode(tView, lView[T_HOST], index, 3 /* Element */, name, attrs || null);\n    if (attrs != null) {\n        /** @type {?} */\n        const lastAttrIndex = setUpAttributes(native, attrs);\n        if (tView.firstTemplatePass) {\n            registerInitialStylingOnTNode(tNode, attrs, lastAttrIndex);\n        }\n    }\n    renderInitialStyling(renderer, native, tNode);\n    appendChild(native, tNode, lView);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n    // if a directive contains a host binding for \"class\" then all class-based data will\n    // flow through that (except for `[class.prop]` bindings). This also includes initial\n    // static class values as well. (Note that this will be fixed once map-based `[style]`\n    // and `[class]` bindings work for multiple directives.)\n    if (tView.firstTemplatePass) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, lView, tNode, localRefs || null);\n        /** @type {?} */\n        const inputData = initializeTNodeInputs(tNode);\n        if (inputData && inputData.hasOwnProperty('class')) {\n            tNode.flags |= 8 /* hasClassInput */;\n        }\n        if (inputData && inputData.hasOwnProperty('style')) {\n            tNode.flags |= 16 /* hasStyleInput */;\n        }\n        if (tView.queries !== null) {\n            tView.queries.elementStart(tView, tNode);\n        }\n    }\n    createDirectivesAndLocals(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n}\n/**\n * Mark the end of the element.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµelementEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    ngDevMode && assertDefined(previousOrParentTNode, 'No parent node to close.');\n    if (getIsParent()) {\n        setIsNotParent();\n    }\n    else {\n        ngDevMode && assertHasParent(getPreviousOrParentTNode());\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode, false);\n    }\n    /** @type {?} */\n    const tNode = previousOrParentTNode;\n    ngDevMode && assertNodeType(tNode, 3 /* Element */);\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    registerPostOrderHooks(tView, previousOrParentTNode);\n    decreaseElementDepthCount();\n    if (tView.firstTemplatePass && tView.queries !== null &&\n        isContentQueryHost(previousOrParentTNode)) {\n        (/** @type {?} */ (tView.queries)).elementEnd(previousOrParentTNode);\n    }\n    if (hasClassInput(tNode) && tNode.classes) {\n        setDirectiveStylingInput(tNode.classes, lView, (/** @type {?} */ (tNode.inputs))['class']);\n    }\n    if (hasStyleInput(tNode) && tNode.styles) {\n        setDirectiveStylingInput(tNode.styles, lView, (/** @type {?} */ (tNode.inputs))['style']);\n    }\n}\n/**\n * Creates an empty element using {\\@link elementStart} and {\\@link elementEnd}\n *\n * \\@codeGenApi\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * @return {?}\n */\nfunction ÉµÉµelement(index, name, attrs, localRefs) {\n    ÉµÉµelementStart(index, name, attrs, localRefs);\n    ÉµÉµelementEnd();\n}\n/**\n * Assign static attribute values to a host element.\n *\n * This instruction will assign static attribute values as well as class and style\n * values to an element within the host bindings function. Since attribute values\n * can consist of different types of values, the `attrs` array must include the values in\n * the following format:\n *\n * attrs = [\n *   // static attributes (like `title`, `name`, `id`...)\n *   attr1, value1, attr2, value,\n *\n *   // a single namespace value (like `x:id`)\n *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n *\n *   // another single namespace value (like `x:name`)\n *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n *\n *   // a series of CSS classes that will be applied to the element (no spaces)\n *   CLASSES_MARKER, class1, class2, class3,\n *\n *   // a series of CSS styles (property + value) that will be applied to the element\n *   STYLES_MARKER, prop1, value1, prop2, value2\n * ]\n *\n * All non-class and non-style attributes must be defined at the start of the list\n * first before all class and style values are set. When there is a change in value\n * type (like when classes and styles are introduced) a marker must be used to separate\n * the entries. The marker values themselves are set via entries found in the\n * [AttributeMarker] enum.\n *\n * NOTE: This instruction is meant to used from `hostBindings` function only.\n *\n * \\@codeGenApi\n * @param {?} attrs An array of static values (attributes, classes and styles) with the correct marker\n * values.\n *\n * @return {?}\n */\nfunction ÉµÉµelementHostAttrs(attrs) {\n    /** @type {?} */\n    const hostElementIndex = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = getTNode(hostElementIndex, lView);\n    // non-element nodes (e.g. `<ng-container>`) are not rendered as actual\n    // element nodes and adding styles/classes on to them will cause runtime\n    // errors...\n    if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        /** @type {?} */\n        const lastAttrIndex = setUpAttributes(native, attrs);\n        if (tView.firstTemplatePass) {\n            /** @type {?} */\n            const stylingNeedsToBeRendered = registerInitialStylingOnTNode(tNode, attrs, lastAttrIndex);\n            // this is only called during the first template pass in the\n            // event that this current directive assigned initial style/class\n            // host attribute values to the element. Because initial styling\n            // values are applied before directives are first rendered (within\n            // `createElement`) this means that initial styling for any directives\n            // still needs to be applied. Note that this will only happen during\n            // the first template pass and not each time a directive applies its\n            // attribute values to the element.\n            if (stylingNeedsToBeRendered) {\n                /** @type {?} */\n                const renderer = lView[RENDERER];\n                renderInitialStyling(renderer, native, tNode);\n            }\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} lView\n * @param {?} stylingInputs\n * @return {?}\n */\nfunction setDirectiveStylingInput(context, lView, stylingInputs) {\n    // older versions of Angular treat the input as `null` in the\n    // event that the value does not exist at all. For this reason\n    // we can't have a styling value be an empty string.\n    /** @type {?} */\n    const value = getInitialStylingValue(context) || null;\n    // Ivy does an extra `[class]` write with a falsy value since the value\n    // is applied during creation mode. This is a deviation from VE and should\n    // be (Jira Issue = FW-1467).\n    setInputsForProperty(lView, stylingInputs, value);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * \\@codeGenApi\n * @param {?} index Index of the element in the LView array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @return {?}\n */\nfunction ÉµÉµelementContainerStart(index, attrs, localRefs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    /** @type {?} */\n    const tagName = 'ng-container';\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n    /** @type {?} */\n    const native = lView[index + HEADER_OFFSET] = renderer.createComment(ngDevMode ? tagName : '');\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    const tNode = getOrCreateTNode(tView, lView[T_HOST], index, 4 /* ElementContainer */, tagName, attrs || null);\n    if (attrs && tView.firstTemplatePass) {\n        // While ng-container doesn't necessarily support styling, we use the style context to identify\n        // and execute directives on the ng-container.\n        registerInitialStylingOnTNode(tNode, (/** @type {?} */ (attrs)), 0);\n    }\n    appendChild(native, tNode, lView);\n    if (tView.firstTemplatePass) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, lView, tNode, localRefs || null);\n        if (tView.queries) {\n            tView.queries.elementStart(tView, tNode);\n        }\n    }\n    createDirectivesAndLocals(tView, lView, tNode);\n    attachPatchData(native, lView);\n    executeContentQueries(tView, tNode, lView);\n}\n/**\n * Mark the end of the <ng-container>.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµelementContainerEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (getIsParent()) {\n        setIsNotParent();\n    }\n    else {\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode, false);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n    registerPostOrderHooks(tView, previousOrParentTNode);\n    if (tView.firstTemplatePass && tView.queries !== null &&\n        isContentQueryHost(previousOrParentTNode)) {\n        tView.queries.elementEnd(previousOrParentTNode);\n    }\n}\n/**\n * Creates an empty logical container using {\\@link elementContainerStart}\n * and {\\@link elementContainerEnd}\n *\n * \\@codeGenApi\n * @param {?} index Index of the element in the LView array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * @return {?}\n */\nfunction ÉµÉµelementContainer(index, attrs, localRefs) {\n    ÉµÉµelementContainerStart(index, attrs, localRefs);\n    ÉµÉµelementContainerEnd();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marks the start of an embedded view.\n *\n * \\@codeGenApi\n * @param {?} viewBlockId The ID of this view\n * @param {?} consts\n * @param {?} vars\n * @return {?} boolean Whether or not this view is in creation mode\n *\n */\nfunction ÉµÉµembeddedViewStart(viewBlockId, consts, vars) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    // The previous node can be a view node if we are processing an inline for loop\n    /** @type {?} */\n    const containerTNode = previousOrParentTNode.type === 2 /* View */ ?\n        (/** @type {?} */ (previousOrParentTNode.parent)) :\n        previousOrParentTNode;\n    /** @type {?} */\n    const lContainer = (/** @type {?} */ (lView[containerTNode.index]));\n    ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n    /** @type {?} */\n    let viewToRender = scanForView(lContainer, (/** @type {?} */ (lContainer[ACTIVE_INDEX])), viewBlockId);\n    if (viewToRender) {\n        setIsParent();\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, consts, vars, (/** @type {?} */ (containerTNode))), null, 16 /* CheckAlways */, null, null);\n        /** @type {?} */\n        const tParentNode = getIsParent() ? previousOrParentTNode :\n            previousOrParentTNode && previousOrParentTNode.parent;\n        assignTViewNodeToLView(viewToRender[TVIEW], tParentNode, viewBlockId, viewToRender);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    if (lContainer) {\n        if (isCreationMode(viewToRender)) {\n            // it is a new view, insert it into collection of views for a given container\n            insertView(viewToRender, lContainer, (/** @type {?} */ (lContainer[ACTIVE_INDEX])));\n        }\n        (/** @type {?} */ (lContainer[ACTIVE_INDEX]))++;\n    }\n    return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param {?} viewIndex The index of the TView in TNode.tViews\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars The number of bindings and pure function bindings in this template\n * @param {?} parent\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    /** @type {?} */\n    const containerTViews = (/** @type {?} */ (parent.tViews));\n    ngDevMode && assertDefined(containerTViews, 'TView expected');\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n        containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n    }\n    return containerTViews[viewIndex];\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} lContainer to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?}\n */\nfunction scanForView(lContainer, startIdx, viewBlockId) {\n    for (let i = startIdx + CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        /** @type {?} */\n        const viewAtPositionId = lContainer[i][TVIEW].id;\n        if (viewAtPositionId === viewBlockId) {\n            return lContainer[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(lContainer, i - CONTAINER_HEADER_OFFSET);\n        }\n        else {\n            // found a view with id greater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the searchdef.cont here\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Marks the end of an embedded view.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµembeddedViewEnd() {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const viewHost = lView[T_HOST];\n    if (isCreationMode(lView)) {\n        refreshDescendantViews(lView); // creation mode pass\n        lView[FLAGS] &= ~4 /* CreationMode */;\n    }\n    resetPreOrderHookFlags(lView);\n    refreshDescendantViews(lView); // update mode pass\n    // update mode pass\n    /** @type {?} */\n    const lContainer = (/** @type {?} */ (lView[PARENT]));\n    ngDevMode && assertLContainerOrUndefined(lContainer);\n    // It's always safe to run hooks here, as `leaveView` is not called during the 'finally' block\n    // of a try-catch-finally statement, so it can never be reached while unwinding the stack due to\n    // an error being thrown.\n    leaveView((/** @type {?} */ (lContainer[PARENT])), /* safeToRunHooks */ true);\n    setPreviousOrParentTNode((/** @type {?} */ (viewHost)), false);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµgetCurrentView() {\n    return (/** @type {?} */ ((/** @type {?} */ (getLView()))));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is an Observable\n */\nfunction isObservable(obj) {\n    // TODO: use isObservable once we update pass rxjs 6.1\n    // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n    return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * \\@codeGenApi\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener\n * @param {?=} eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @return {?}\n */\nfunction ÉµÉµlistener(eventName, listenerFn, useCapture = false, eventTargetResolver) {\n    listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver);\n}\n/**\n * Registers a synthetic host listener (e.g. `(\\@foo.start)`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `\\@HostListener('\\@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation \\@triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * \\@codeGenApi\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener\n * @param {?=} eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @return {?}\n */\nfunction ÉµÉµcomponentHostSyntheticListener(eventName, listenerFn, useCapture = false, eventTargetResolver) {\n    listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver, loadComponentRenderer);\n}\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n * @param {?} lView\n * @param {?} eventName\n * @param {?} tNodeIdx\n * @return {?}\n */\nfunction findExistingListener(lView, eventName, tNodeIdx) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const tCleanup = tView.cleanup;\n    if (tCleanup != null) {\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            /** @type {?} */\n            const cleanupEventName = tCleanup[i];\n            if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n                // We have found a matching event name on the same node but it might not have been\n                // registered yet, so we must explicitly verify entries in the LView cleanup data\n                // structures.\n                /** @type {?} */\n                const lCleanup = (/** @type {?} */ (lView[CLEANUP]));\n                /** @type {?} */\n                const listenerIdxInLCleanup = tCleanup[i + 2];\n                return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n            }\n            // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n            // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n            // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n            // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n            // documentation of TView.cleanup for more details of this data structure layout.\n            if (typeof cleanupEventName === 'string') {\n                i += 2;\n            }\n        }\n    }\n    return null;\n}\n/**\n * @param {?} eventName\n * @param {?} listenerFn\n * @param {?=} useCapture\n * @param {?=} eventTargetResolver\n * @param {?=} loadRendererFn\n * @return {?}\n */\nfunction listenerInternal(eventName, listenerFn, useCapture = false, eventTargetResolver, loadRendererFn) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const firstTemplatePass = tView.firstTemplatePass;\n    /** @type {?} */\n    const tCleanup = firstTemplatePass && (tView.cleanup || (tView.cleanup = []));\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n    /** @type {?} */\n    let processOutputs = true;\n    // add native event listener - applicable to elements only\n    if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        /** @type {?} */\n        const resolved = eventTargetResolver ? eventTargetResolver(native) : (/** @type {?} */ (EMPTY_OBJ));\n        /** @type {?} */\n        const target = resolved.target || native;\n        /** @type {?} */\n        const renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n        /** @type {?} */\n        const lCleanup = getCleanup(lView);\n        /** @type {?} */\n        const lCleanupIndex = lCleanup.length;\n        /** @type {?} */\n        const idxOrTargetGetter = eventTargetResolver ?\n            (/**\n             * @param {?} _lView\n             * @return {?}\n             */\n            (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])).target) :\n            tNode.index;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        if (isProceduralRenderer(renderer)) {\n            // There might be cases where multiple directives on the same element try to register an event\n            // handler function for the same event. In this situation we want to avoid registration of\n            // several native listeners as each registration would be intercepted by NgZone and\n            // trigger change detection. This would mean that a single user action would result in several\n            // change detections being invoked. To avoid this situation we want to have only one call to\n            // native handler registration (for the same element and same type of event).\n            //\n            // In order to have just one native event handler in presence of multiple handler functions,\n            // we just register a first handler function as a native event listener and then chain\n            // (coalesce) other handler functions on top of the first native handler function.\n            /** @type {?} */\n            let existingListener = null;\n            // Please note that the coalescing described here doesn't happen for events specifying an\n            // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n            // view engine.\n            // Also, we don't have to search for existing listeners is there are no directives\n            // matching on a given node as we can't register multiple event handlers for the same event in\n            // a template (this would mean having duplicate attributes).\n            if (!eventTargetResolver && hasDirectives(tNode)) {\n                existingListener = findExistingListener(lView, eventName, tNode.index);\n            }\n            if (existingListener !== null) {\n                // Attach a new listener at the head of the coalesced listeners list.\n                ((/** @type {?} */ (listenerFn))).__ngNextListenerFn__ = ((/** @type {?} */ (existingListener))).__ngNextListenerFn__;\n                ((/** @type {?} */ (existingListener))).__ngNextListenerFn__ = listenerFn;\n                processOutputs = false;\n            }\n            else {\n                // The first argument of `listen` function in Procedural Renderer is:\n                // - either a target name (as a string) in case of global target (window, document, body)\n                // - or element reference (in all other cases)\n                listenerFn = wrapListener(tNode, lView, listenerFn, false /** preventDefault */);\n                /** @type {?} */\n                const cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);\n                ngDevMode && ngDevMode.rendererAddEventListener++;\n                lCleanup.push(listenerFn, cleanupFn);\n                tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n            }\n        }\n        else {\n            listenerFn = wrapListener(tNode, lView, listenerFn, true /** preventDefault */);\n            target.addEventListener(eventName, listenerFn, useCapture);\n            ngDevMode && ngDevMode.rendererAddEventListener++;\n            lCleanup.push(listenerFn);\n            tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);\n        }\n    }\n    // subscribe to directive outputs\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(tNode, 1 /* Output */);\n    }\n    /** @type {?} */\n    const outputs = tNode.outputs;\n    /** @type {?} */\n    let props;\n    if (processOutputs && outputs && (props = outputs[eventName])) {\n        /** @type {?} */\n        const propsLength = props.length;\n        if (propsLength) {\n            /** @type {?} */\n            const lCleanup = getCleanup(lView);\n            for (let i = 0; i < propsLength; i += 3) {\n                /** @type {?} */\n                const index = (/** @type {?} */ (props[i]));\n                ngDevMode && assertDataInRange(lView, index);\n                /** @type {?} */\n                const minifiedName = props[i + 2];\n                /** @type {?} */\n                const directiveInstance = lView[index];\n                /** @type {?} */\n                const output = directiveInstance[minifiedName];\n                if (ngDevMode && !isObservable(output)) {\n                    throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);\n                }\n                /** @type {?} */\n                const subscription = output.subscribe(listenerFn);\n                /** @type {?} */\n                const idx = lCleanup.length;\n                lCleanup.push(listenerFn, subscription);\n                tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n            }\n        }\n    }\n}\n/**\n * @param {?} lView\n * @param {?} listenerFn\n * @param {?} e\n * @return {?}\n */\nfunction executeListenerWithErrorHandling(lView, listenerFn, e) {\n    try {\n        // Only explicitly returning false from a listener should preventDefault\n        return listenerFn(e) !== false;\n    }\n    catch (error) {\n        handleError(lView, error);\n        return false;\n    }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param {?} tNode The TNode associated with this listener\n * @param {?} lView The LView that contains this listener\n * @param {?} listenerFn The listener function to call\n * @param {?} wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n * @return {?}\n */\nfunction wrapListener(tNode, lView, listenerFn, wrapWithPreventDefault) {\n    // Note: we are performing most of the work in the listener function itself\n    // to optimize listener registration.\n    return (/**\n     * @param {?} e\n     * @return {?}\n     */\n    function wrapListenerIn_markDirtyAndPreventDefault(e) {\n        // In order to be backwards compatible with View Engine, events on component host nodes\n        // must also mark the component view itself dirty (i.e. the view that it owns).\n        /** @type {?} */\n        const startView = tNode.flags & 1 /* isComponent */ ? getComponentViewByIndex(tNode.index, lView) : lView;\n        // See interfaces/view.ts for more on LViewFlags.ManualOnPush\n        if ((lView[FLAGS] & 32 /* ManualOnPush */) === 0) {\n            markViewDirty(startView);\n        }\n        /** @type {?} */\n        let result = executeListenerWithErrorHandling(lView, listenerFn, e);\n        // A just-invoked listener function might have coalesced listeners so we need to check for\n        // their presence and invoke as needed.\n        /** @type {?} */\n        let nextListenerFn = ((/** @type {?} */ (wrapListenerIn_markDirtyAndPreventDefault))).__ngNextListenerFn__;\n        while (nextListenerFn) {\n            // We should prevent default if any of the listeners explicitly return false\n            result = executeListenerWithErrorHandling(lView, nextListenerFn, e) && result;\n            nextListenerFn = ((/** @type {?} */ (nextListenerFn))).__ngNextListenerFn__;\n        }\n        if (wrapWithPreventDefault && result === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n        return result;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * \\@codeGenApi\n * @template T\n * @param {?=} level The relative level of the view from which to grab context compared to contextVewData\n * @return {?} context\n *\n */\nfunction ÉµÉµnextContext(level = 1) {\n    return nextContextImpl(level);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n * @param {?} tNode\n * @param {?} projectionSlots\n * @return {?}\n */\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\n    /** @type {?} */\n    let wildcardNgContentIndex = null;\n    /** @type {?} */\n    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (let i = 0; i < projectionSlots.length; i++) {\n        /** @type {?} */\n        const slotValue = projectionSlots[i];\n        // The last wildcard projection slot should match all nodes which aren't matching\n        // any selector. This is necessary to be backwards compatible with view engine.\n        if (slotValue === '*') {\n            wildcardNgContentIndex = i;\n            continue;\n        }\n        // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n        // to the list of selectors, otherwise we fall back to matching against the node.\n        if (ngProjectAsAttrVal === null ?\n            isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :\n            isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n            return i; // first matching selector \"captures\" a given node\n        }\n    }\n    return wildcardNgContentIndex;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * \\@codeGenApi\n * @param {?=} projectionSlots\n * @return {?}\n */\nfunction ÉµÉµprojectionDef(projectionSlots) {\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (findComponentView(getLView())[T_HOST]));\n    if (!componentNode.projection) {\n        // If no explicit projection slots are defined, fall back to a single\n        // projection slot with the wildcard selector.\n        /** @type {?} */\n        const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n        /** @type {?} */\n        const projectionHeads = componentNode.projection =\n            new Array(numProjectionSlots).fill(null);\n        /** @type {?} */\n        const tails = projectionHeads.slice();\n        /** @type {?} */\n        let componentChild = componentNode.child;\n        while (componentChild !== null) {\n            /** @type {?} */\n            const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n            if (slotIndex !== null) {\n                if (tails[slotIndex]) {\n                    (/** @type {?} */ (tails[slotIndex])).projectionNext = componentChild;\n                }\n                else {\n                    projectionHeads[slotIndex] = componentChild;\n                }\n                tails[slotIndex] = componentChild;\n            }\n            componentChild = componentChild.next;\n        }\n    }\n}\n/** @type {?} */\nlet delayProjection = false;\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setDelayProjection(value) {\n    delayProjection = value;\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * \\@codeGenApi\n * @param {?} nodeIndex\n * @param {?=} selectorIndex\n * @param {?=} attrs\n * @return {?}\n */\nfunction ÉµÉµprojection(nodeIndex, selectorIndex = 0, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tProjectionNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], nodeIndex, 1 /* Projection */, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setIsNotParent();\n    // We might need to delay the projection of nodes if they are in the middle of an i18n block\n    if (!delayProjection) {\n        // re-distribution of projectable nodes is stored on a component's view level\n        appendProjectedNodes(lView, tProjectionNode, selectorIndex, findComponentView(lView));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} v0 Value checked for change.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµpropertyInterpolate(propName, v0, sanitizer) {\n    ÉµÉµpropertyInterpolate1(propName, '', v0, '', sanitizer);\n    return ÉµÉµpropertyInterpolate;\n}\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const interpolatedValue = interpolation1(getLView(), prefix, v0, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n    }\n    return ÉµÉµpropertyInterpolate1;\n}\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const interpolatedValue = interpolation2(getLView(), prefix, v0, i0, v1, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n    }\n    return ÉµÉµpropertyInterpolate2;\n}\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const interpolatedValue = interpolation3(getLView(), prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n    }\n    return ÉµÉµpropertyInterpolate3;\n}\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const interpolatedValue = interpolation4(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n    }\n    return ÉµÉµpropertyInterpolate4;\n}\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const interpolatedValue = interpolation5(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n    }\n    return ÉµÉµpropertyInterpolate5;\n}\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const interpolatedValue = interpolation6(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n    }\n    return ÉµÉµpropertyInterpolate6;\n}\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} i5 Static value used for concatenation only.\n * @param {?} v6 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const interpolatedValue = interpolation7(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n    }\n    return ÉµÉµpropertyInterpolate7;\n}\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} i5 Static value used for concatenation only.\n * @param {?} v6 Value checked for change.\n * @param {?} i6 Static value used for concatenation only.\n * @param {?} v7 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const interpolatedValue = interpolation8(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n    }\n    return ÉµÉµpropertyInterpolate8;\n}\n/**\n * Update an interpolated property on an element with 8 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 7.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ÉµÉµpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update.\n * @param {?} values The a collection of values and the strings inbetween those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµpropertyInterpolateV(propName, values, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const interpolatedValue = interpolationV(getLView(), values);\n    if (interpolatedValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n    }\n    return ÉµÉµpropertyInterpolateV;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create static text node\n *\n * \\@codeGenApi\n * @param {?} index Index of the node in the data array\n * @param {?=} value Value to write. This value will be stringified.\n *\n * @return {?}\n */\nfunction ÉµÉµtext(index, value) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n    /** @type {?} */\n    const textNative = lView[index + HEADER_OFFSET] = createTextNode(value, lView[RENDERER]);\n    ngDevMode && ngDevMode.rendererSetText++;\n    /** @type {?} */\n    const tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], index, 3 /* Element */, null, null);\n    // Text nodes are self closing.\n    setIsNotParent();\n    appendChild(textNative, tNode, lView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * \\@codeGenApi\n * @template T\n * @param {?} value Stringified value to write.\n *\n * @return {?}\n */\nfunction ÉµÉµtextBinding(value) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const bound = bind(lView, value);\n    if (bound !== NO_CHANGE) {\n        textBindingInternal(lView, index, renderStringify(bound));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµtextInterpolate(v0);\n * ```\n * @see textInterpolateV\n * \\@codeGenApi\n * @param {?} v0\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµtextInterpolate(v0) {\n    ÉµÉµtextInterpolate1('', v0, '');\n    return ÉµÉµtextInterpolate;\n}\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @see textInterpolateV\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} suffix\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµtextInterpolate1(prefix, v0, suffix) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolated = interpolation1(lView, prefix, v0, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, index, (/** @type {?} */ (interpolated)));\n    }\n    return ÉµÉµtextInterpolate1;\n}\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @see textInterpolateV\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµtextInterpolate2(prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, index, (/** @type {?} */ (interpolated)));\n    }\n    return ÉµÉµtextInterpolate2;\n}\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @see textInterpolateV\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, index, (/** @type {?} */ (interpolated)));\n    }\n    return ÉµÉµtextInterpolate3;\n}\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @see ÉµÉµtextInterpolateV\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, index, (/** @type {?} */ (interpolated)));\n    }\n    return ÉµÉµtextInterpolate4;\n}\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @see textInterpolateV\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, index, (/** @type {?} */ (interpolated)));\n    }\n    return ÉµÉµtextInterpolate5;\n}\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @see textInterpolateV\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change. \\@returns itself, so that it may be chained.\n * @param {?} suffix\n * @return {?}\n */\nfunction ÉµÉµtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, index, (/** @type {?} */ (interpolated)));\n    }\n    return ÉµÉµtextInterpolate6;\n}\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @see textInterpolateV\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, index, (/** @type {?} */ (interpolated)));\n    }\n    return ÉµÉµtextInterpolate7;\n}\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @see textInterpolateV\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, index, (/** @type {?} */ (interpolated)));\n    }\n    return ÉµÉµtextInterpolate8;\n}\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n * .\n * \\@codeGenApi\n * @param {?} values The a collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµtextInterpolateV(values) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolated = interpolationV(lView, values);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, index, (/** @type {?} */ (interpolated)));\n    }\n    return ÉµÉµtextInterpolateV;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @return {?}\n */\nfunction ÉµÉµclassMapInterpolate1(prefix, v0, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    classMapInternal(getSelectedIndex(), interpolatedValue);\n}\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @return {?}\n */\nfunction ÉµÉµclassMapInterpolate2(prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    classMapInternal(getSelectedIndex(), interpolatedValue);\n}\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @return {?}\n */\nfunction ÉµÉµclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    classMapInternal(getSelectedIndex(), interpolatedValue);\n}\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @return {?}\n */\nfunction ÉµÉµclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    classMapInternal(getSelectedIndex(), interpolatedValue);\n}\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @return {?}\n */\nfunction ÉµÉµclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    classMapInternal(getSelectedIndex(), interpolatedValue);\n}\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @return {?}\n */\nfunction ÉµÉµclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    classMapInternal(getSelectedIndex(), interpolatedValue);\n}\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} i5 Static value used for concatenation only.\n * @param {?} v6 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @return {?}\n */\nfunction ÉµÉµclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    classMapInternal(getSelectedIndex(), interpolatedValue);\n}\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} i5 Static value used for concatenation only.\n * @param {?} v6 Value checked for change.\n * @param {?} i6 Static value used for concatenation only.\n * @param {?} v7 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @return {?}\n */\nfunction ÉµÉµclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    classMapInternal(getSelectedIndex(), interpolatedValue);\n}\n/**\n * Update an interpolated class on an element with 8 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 7.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n * .\n * \\@codeGenApi\n * @param {?} values The a collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @return {?}\n */\nfunction ÉµÉµclassMapInterpolateV(values) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolationV(lView, values);\n    classMapInternal(getSelectedIndex(), interpolatedValue);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prop\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    stylePropInternal(getSelectedIndex(), prop, (/** @type {?} */ (interpolatedValue)), valueSuffix);\n    return ÉµÉµstylePropInterpolate1;\n}\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prop\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    stylePropInternal(getSelectedIndex(), prop, (/** @type {?} */ (interpolatedValue)), valueSuffix);\n    return ÉµÉµstylePropInterpolate2;\n}\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prop\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    stylePropInternal(getSelectedIndex(), prop, (/** @type {?} */ (interpolatedValue)), valueSuffix);\n    return ÉµÉµstylePropInterpolate3;\n}\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prop\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    stylePropInternal(getSelectedIndex(), prop, (/** @type {?} */ (interpolatedValue)), valueSuffix);\n    return ÉµÉµstylePropInterpolate4;\n}\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prop\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    stylePropInternal(getSelectedIndex(), prop, (/** @type {?} */ (interpolatedValue)), valueSuffix);\n    return ÉµÉµstylePropInterpolate5;\n}\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prop\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    stylePropInternal(getSelectedIndex(), prop, (/** @type {?} */ (interpolatedValue)), valueSuffix);\n    return ÉµÉµstylePropInterpolate6;\n}\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prop\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} i5 Static value used for concatenation only.\n * @param {?} v6 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    stylePropInternal(getSelectedIndex(), prop, (/** @type {?} */ (interpolatedValue)), valueSuffix);\n    return ÉµÉµstylePropInterpolate7;\n}\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * ```\n *\n * \\@codeGenApi\n * @param {?} prop\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} i5 Static value used for concatenation only.\n * @param {?} v6 Value checked for change.\n * @param {?} i6 Static value used for concatenation only.\n * @param {?} v7 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    stylePropInternal(getSelectedIndex(), prop, (/** @type {?} */ (interpolatedValue)), valueSuffix);\n    return ÉµÉµstylePropInterpolate8;\n}\n/**\n * Update an interpolated style property on an element with 8 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 7.\n *\n * ```html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ÉµÉµstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * \\@codeGenApi\n * @param {?} prop\n * @param {?} values The a collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @return {?} itself, so that it may be chained.\n */\nfunction ÉµÉµstylePropInterpolateV(prop, values, valueSuffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const interpolatedValue = interpolationV(lView, values);\n    stylePropInternal(getSelectedIndex(), prop, (/** @type {?} */ (interpolatedValue)), valueSuffix);\n    return ÉµÉµstylePropInterpolateV;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {\\@link select} instruction.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?} This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n */\nfunction ÉµÉµhostProperty(propName, value, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    ngDevMode && assertNotEqual(index, -1, 'selected index cannot be -1');\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindReconciledValue = bind(lView, value);\n    if (bindReconciledValue !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, bindReconciledValue, sanitizer, true);\n    }\n    return ÉµÉµhostProperty;\n}\n/**\n * Updates a synthetic host binding (e.g. `[\\@foo]`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `\\@HostBinding('\\@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation \\@triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n *\n * @return {?}\n */\nfunction ÉµÉµupdateSyntheticHostBinding(propName, value, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    // TODO(benlesh): remove bind call here.\n    /** @type {?} */\n    const bound = bind(lView, value);\n    if (bound !== NO_CHANGE) {\n        elementPropertyInternal(index, propName, bound, sanitizer, true, loadComponentRenderer);\n    }\n    return ÉµÉµupdateSyntheticHostBinding;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nfunction getComponent(element) {\n    /** @type {?} */\n    const context = loadLContextFromNode(element);\n    if (context.component === undefined) {\n        context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n    }\n    return (/** @type {?} */ (context.component));\n}\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nfunction getContext$1(element) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContextFromNode(element)));\n    return (/** @type {?} */ (context.lView[CONTEXT]));\n}\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * \\@publicApi\n * @template T\n * @param {?} element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @return {?}\n */\nfunction getViewComponent(element) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(element)));\n    /** @type {?} */\n    let lView = context.lView;\n    /** @type {?} */\n    let parent;\n    ngDevMode && assertLView(lView);\n    while (lView[HOST] === null && (parent = (/** @type {?} */ (getLViewParent(lView))))) {\n        // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n        lView = parent;\n    }\n    return lView[FLAGS] & 512 /* IsRoot */ ? null : (/** @type {?} */ (lView[CONTEXT]));\n}\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getRootComponents(target) {\n    return [...getRootContext(target).components];\n}\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getInjector(target) {\n    /** @type {?} */\n    const context = loadLContext(target);\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (context.lView[TVIEW].data[context.nodeIndex]));\n    return new NodeInjector(tNode, context.lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * \\@publicApi\n * @param {?} element Element for which the injection tokens should be retrieved.\n * @return {?}\n */\nfunction getInjectionTokens(element) {\n    /** @type {?} */\n    const context = loadLContext(element, false);\n    if (!context)\n        return [];\n    /** @type {?} */\n    const lView = context.lView;\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (tView.data[context.nodeIndex]));\n    /** @type {?} */\n    const providerTokens = [];\n    /** @type {?} */\n    const startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const endIndex = tNode.directiveEnd;\n    for (let i = startIndex; i < endIndex; i++) {\n        /** @type {?} */\n        let value = tView.data[i];\n        if (isDirectiveDefHack(value)) {\n            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n            // design flaw.  We should always store same type so that we can be monomorphic. The issue\n            // is that for Components/Directives we store the def instead the type. The correct behavior\n            // is that we should always be storing injectable type in this location.\n            value = value.type;\n        }\n        providerTokens.push(value);\n    }\n    return providerTokens;\n}\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getDirectives(target) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(target)));\n    if (context.directives === undefined) {\n        context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n    }\n    return context.directives || [];\n}\n/**\n * @param {?} target\n * @param {?=} throwOnNotFound\n * @return {?}\n */\nfunction loadLContext(target, throwOnNotFound = true) {\n    /** @type {?} */\n    const context = getLContext(target);\n    if (!context && throwOnNotFound) {\n        throw new Error(ngDevMode ? `Unable to find context associated with ${stringifyForError(target)}` :\n            'Invalid ng target');\n    }\n    return context;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getLocalRefs(target) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(target)));\n    if (context.localRefs === undefined) {\n        context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * \\@publicApi\n * @template T\n * @param {?} directive Component or Directive for which the host element should be retrieved.\n *\n * @return {?}\n */\nfunction getHostElement(directive) {\n    return (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (getLContext(directive))).native))));\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param {?} component The component to return the content text for.\n * @return {?}\n */\nfunction getRenderedText(component) {\n    /** @type {?} */\n    const hostElement = getHostElement(component);\n    return hostElement.textContent || '';\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction loadLContextFromNode(node) {\n    if (!(node instanceof Node))\n        throw new Error('Expecting instance of DOM Node');\n    return (/** @type {?} */ (loadLContext(node)));\n}\n/**\n * @record\n */\nfunction Listener() { }\nif (false) {\n    /** @type {?} */\n    Listener.prototype.name;\n    /** @type {?} */\n    Listener.prototype.element;\n    /** @type {?} */\n    Listener.prototype.callback;\n    /** @type {?} */\n    Listener.prototype.useCapture;\n}\n/**\n * @param {?} listener\n * @return {?}\n */\nfunction isBrowserEvents(listener) {\n    // Browser events are those which don't have `useCapture` as boolean.\n    return typeof listener.useCapture === 'boolean';\n}\n/**\n * Retrieves a list of DOM listeners.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div (click)=\"doSomething()\">\n *     </div>\n * </mp-app>\n *\n * expect(getListeners(<div>)).toEqual({\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * });\n * ```\n *\n * \\@publicApi\n * @param {?} element Element for which the DOM listeners should be retrieved.\n * @return {?}\n */\nfunction getListeners(element) {\n    /** @type {?} */\n    const lContext = loadLContextFromNode(element);\n    /** @type {?} */\n    const lView = lContext.lView;\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const lCleanup = lView[CLEANUP];\n    /** @type {?} */\n    const tCleanup = tView.cleanup;\n    /** @type {?} */\n    const listeners = [];\n    if (tCleanup && lCleanup) {\n        for (let i = 0; i < tCleanup.length;) {\n            /** @type {?} */\n            const firstParam = tCleanup[i++];\n            /** @type {?} */\n            const secondParam = tCleanup[i++];\n            if (typeof firstParam === 'string') {\n                /** @type {?} */\n                const name = firstParam;\n                /** @type {?} */\n                const listenerElement = (/** @type {?} */ ((/** @type {?} */ (unwrapRNode(lView[secondParam])))));\n                /** @type {?} */\n                const callback = lCleanup[tCleanup[i++]];\n                /** @type {?} */\n                const useCaptureOrIndx = tCleanup[i++];\n                // if useCaptureOrIndx is boolean then report it as is.\n                // if useCaptureOrIndx is positive number then it in unsubscribe method\n                // if useCaptureOrIndx is negative number then it is a Subscription\n                /** @type {?} */\n                const useCapture = typeof useCaptureOrIndx === 'boolean' ?\n                    useCaptureOrIndx :\n                    (useCaptureOrIndx >= 0 ? false : null);\n                if (element == listenerElement) {\n                    listeners.push({ element, name, callback, useCapture });\n                }\n            }\n        }\n    }\n    listeners.sort(sortListeners);\n    return listeners;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortListeners(a, b) {\n    if (a.name == b.name)\n        return 0;\n    return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n * @param {?} obj\n * @return {?}\n */\nfunction isDirectiveDefHack(obj) {\n    return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n *\n * @type {?}\n */\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n/** @type {?} */\nlet _published = false;\n/**\n * Publishes a collection of default debug tools onto`window.ng`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n * @return {?}\n */\nfunction publishDefaultGlobalUtils() {\n    if (!_published) {\n        _published = true;\n        publishGlobalUtil('getComponent', getComponent);\n        publishGlobalUtil('getContext', getContext$1);\n        publishGlobalUtil('getListeners', getListeners);\n        publishGlobalUtil('getViewComponent', getViewComponent);\n        publishGlobalUtil('getHostElement', getHostElement);\n        publishGlobalUtil('getInjector', getInjector);\n        publishGlobalUtil('getRootComponents', getRootComponents);\n        publishGlobalUtil('getDirectives', getDirectives);\n        publishGlobalUtil('markDirty', markDirty);\n    }\n}\n/**\n * Publishes the given function to `window.ng` so that it can be\n * used from the browser console when an application is not in production.\n * @param {?} name\n * @param {?} fn\n * @return {?}\n */\nfunction publishGlobalUtil(name, fn) {\n    /** @type {?} */\n    const w = (/** @type {?} */ ((/** @type {?} */ (_global))));\n    ngDevMode && assertDefined(fn, 'function not defined');\n    if (w) {\n        /** @type {?} */\n        let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n        if (!container) {\n            container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n        }\n        container[name] = fn;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options that control how the component should be bootstrapped.\n * @record\n */\nfunction CreateComponentOptions() { }\nif (false) {\n    /**\n     * Which renderer factory to use.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.rendererFactory;\n    /**\n     * A custom sanitizer instance\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.sanitizer;\n    /**\n     * A custom animation player handler\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.playerHandler;\n    /**\n     * Host element on which the component will be bootstrapped. If not specified,\n     * the component definition's `tag` is used to query the existing DOM for the\n     * element to bootstrap.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.host;\n    /**\n     * Module injector for the component. If unspecified, the injector will be NULL_INJECTOR.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.injector;\n    /**\n     * List of features to be applied to the created component. Features are simply\n     * functions that decorate a component with a certain behavior.\n     *\n     * Typically, the features in this list are features that cannot be added to the\n     * other features list in the component definition because they rely on other factors.\n     *\n     * Example: `LifecycleHooksFeature` is a function that adds lifecycle hook capabilities\n     * to root components in a tree-shakable way. It cannot be added to the component\n     * features list because there's no way of knowing when the component will be used as\n     * a root component.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.hostFeatures;\n    /**\n     * A function which is used to schedule change detection work in the future.\n     *\n     * When marking components as dirty, it is necessary to schedule the work of\n     * change detection in the future. This is done to coalesce multiple\n     * {\\@link markDirty} calls into a single changed detection processing.\n     *\n     * The default value of the scheduler is the `requestAnimationFrame` function.\n     *\n     * It is also useful to override this function for testing purposes.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.scheduler;\n}\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nconst Éµ0$c = /**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\n(token, notFoundValue) => {\n    throw new Error('NullInjector: Not found: ' + stringifyForError(token));\n};\n/** @type {?} */\nconst NULL_INJECTOR$1 = {\n    get: (Éµ0$c)\n};\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nfunction renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts = {}) {\n    ngDevMode && publishDefaultGlobalUtils();\n    ngDevMode && assertComponentType(componentType);\n    // this is preemptively set to avoid having test and debug code accidentally\n    // read data from a previous application state...\n    setActiveHostElement(null);\n    /** @type {?} */\n    const rendererFactory = opts.rendererFactory || domRendererFactory3;\n    /** @type {?} */\n    const sanitizer = opts.sanitizer || null;\n    /** @type {?} */\n    const componentDef = (/** @type {?} */ (getComponentDef(componentType)));\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    // The first index of the first selector is the tag name.\n    /** @type {?} */\n    const componentTag = (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (componentDef.selectors))[0]))[0]));\n    /** @type {?} */\n    const hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    /** @type {?} */\n    const rootFlags = componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n        16 /* CheckAlways */ | 512 /* IsRoot */;\n    /** @type {?} */\n    const rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n    /** @type {?} */\n    const renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n    /** @type {?} */\n    const rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, undefined, opts.injector || null);\n    /** @type {?} */\n    const oldView = enterView(rootView, null);\n    /** @type {?} */\n    let component;\n    // Will become true if the `try` block executes with no errors.\n    /** @type {?} */\n    let safeToRunHooks = false;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        /** @type {?} */\n        const componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n        addToViewTree(rootView, componentView);\n        refreshDescendantViews(rootView); // creation mode pass\n        rootView[FLAGS] &= ~4 /* CreationMode */;\n        resetPreOrderHookFlags(rootView);\n        refreshDescendantViews(rootView); // update mode pass\n        safeToRunHooks = true;\n    }\n    finally {\n        leaveView(oldView, safeToRunHooks);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n * @param {?} rootView The parent view where the host node is stored\n * @param {?} rendererFactory\n * @param {?} renderer The current renderer\n * @param {?=} sanitizer The sanitizer, if provided\n *\n * @return {?} Component view created\n */\nfunction createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n    resetComponentState();\n    /** @type {?} */\n    const tView = rootView[TVIEW];\n    ngDevMode && assertDataInRange(rootView, 0 + HEADER_OFFSET);\n    rootView[0 + HEADER_OFFSET] = rNode;\n    /** @type {?} */\n    const tNode = getOrCreateTNode(tView, null, 0, 3 /* Element */, null, null);\n    /** @type {?} */\n    const componentView = createLView(rootView, getOrCreateTView(def), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[HEADER_OFFSET], tNode, rendererFactory, renderer, sanitizer);\n    if (tView.firstTemplatePass) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);\n        tNode.flags = 1 /* isComponent */;\n        initNodeFlags(tNode, rootView.length, 1);\n        queueComponentIndexForCheck(tNode);\n    }\n    // Store component view at node index, with node as the HOST\n    return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n * @template T\n * @param {?} componentView\n * @param {?} componentDef\n * @param {?} rootView\n * @param {?} rootContext\n * @param {?} hostFeatures\n * @return {?}\n */\nfunction createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n    /** @type {?} */\n    const tView = rootView[TVIEW];\n    // Create directive instance with factory() and store at next index in viewData\n    /** @type {?} */\n    const component = instantiateRootComponent(tView, rootView, componentDef);\n    rootContext.components.push(component);\n    componentView[CONTEXT] = component;\n    hostFeatures && hostFeatures.forEach((/**\n     * @param {?} feature\n     * @return {?}\n     */\n    (feature) => feature(component, componentDef)));\n    // We want to generate an empty QueryList for root content queries for backwards\n    // compatibility with ViewEngine.\n    if (componentDef.contentQueries) {\n        componentDef.contentQueries(1 /* Create */, component, rootView.length - 1);\n    }\n    /** @type {?} */\n    const rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass && componentDef.hostBindings) {\n        /** @type {?} */\n        const elementIndex = rootTNode.index - HEADER_OFFSET;\n        setActiveHostElement(elementIndex);\n        /** @type {?} */\n        const expando = (/** @type {?} */ (tView.expandoInstructions));\n        invokeHostBindingsInCreationMode(componentDef, expando, component, rootTNode, tView.firstTemplatePass);\n        setActiveHostElement(null);\n    }\n    return component;\n}\n/**\n * @param {?=} scheduler\n * @param {?=} playerHandler\n * @return {?}\n */\nfunction createRootContext(scheduler, playerHandler) {\n    return {\n        components: [],\n        scheduler: scheduler || defaultScheduler,\n        clean: CLEAN_PROMISE,\n        playerHandler: playerHandler || null,\n        flags: 0 /* Empty */\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nfunction LifecycleHooksFeature(component, def) {\n    /** @type {?} */\n    const rootTView = (/** @type {?} */ (readPatchedLView(component)))[TVIEW];\n    /** @type {?} */\n    const dirIndex = rootTView.data.length - 1;\n    registerPreOrderHooks(dirIndex, def, rootTView, -1, -1, -1);\n    // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n    // LNode).\n    registerPostOrderHooks(rootTView, (/** @type {?} */ ({ directiveStart: dirIndex, directiveEnd: dirIndex + 1 })));\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nfunction whenRendered(component) {\n    return getRootContext(component).clean;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nclass SimpleChange {\n    constructor(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    isFirstChange() { return this.firstChange; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PRIVATE_PREFIX = '__ngOnChanges_';\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {\\@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature()]\n * });\n * ```\n *\n * \\@codeGenApi\n * @template T\n * @return {?}\n */\nfunction ÉµÉµNgOnChangesFeature() {\n    // This option ensures that the ngOnChanges lifecycle hook will be inherited\n    // from superclasses (in InheritDefinitionFeature).\n    ((/** @type {?} */ (NgOnChangesFeatureImpl))).ngInherit = true;\n    return NgOnChangesFeatureImpl;\n}\n/**\n * @template T\n * @param {?} definition\n * @return {?}\n */\nfunction NgOnChangesFeatureImpl(definition) {\n    if (definition.type.prototype.ngOnChanges) {\n        definition.setInput = ngOnChangesSetInput;\n        definition.onChanges = wrapOnChanges();\n    }\n}\n/**\n * @return {?}\n */\nfunction wrapOnChanges() {\n    return (/**\n     * @this {?}\n     * @return {?}\n     */\n    function wrapOnChangesHook_inPreviousChangesStorage() {\n        /** @type {?} */\n        const simpleChangesStore = getSimpleChangesStore(this);\n        /** @type {?} */\n        const current = simpleChangesStore && simpleChangesStore.current;\n        if (current) {\n            /** @type {?} */\n            const previous = (/** @type {?} */ (simpleChangesStore)).previous;\n            if (previous === EMPTY_OBJ) {\n                (/** @type {?} */ (simpleChangesStore)).previous = current;\n            }\n            else {\n                // New changes are copied to the previous store, so that we don't lose history for inputs\n                // which were not changed this time\n                for (let key in current) {\n                    previous[key] = current[key];\n                }\n            }\n            (/** @type {?} */ (simpleChangesStore)).current = null;\n            this.ngOnChanges(current);\n        }\n    });\n}\n/**\n * @template T\n * @this {?}\n * @param {?} instance\n * @param {?} value\n * @param {?} publicName\n * @param {?} privateName\n * @return {?}\n */\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n    /** @type {?} */\n    const simpleChangesStore = getSimpleChangesStore(instance) ||\n        setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\n    /** @type {?} */\n    const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n    /** @type {?} */\n    const previous = simpleChangesStore.previous;\n    /** @type {?} */\n    const declaredName = ((/** @type {?} */ (this.declaredInputs)))[publicName];\n    /** @type {?} */\n    const previousChange = previous[declaredName];\n    current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n    ((/** @type {?} */ (instance)))[privateName] = value;\n}\n/** @type {?} */\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction getSimpleChangesStore(instance) {\n    return instance[SIMPLE_CHANGES_STORE] || null;\n}\n/**\n * @param {?} instance\n * @param {?} store\n * @return {?}\n */\nfunction setSimpleChangesStore(instance, store) {\n    return instance[SIMPLE_CHANGES_STORE] = store;\n}\n/**\n * @record\n */\nfunction NgSimpleChangesStore() { }\nif (false) {\n    /** @type {?} */\n    NgSimpleChangesStore.prototype.previous;\n    /** @type {?} */\n    NgSimpleChangesStore.prototype.current;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * \\@codeGenApi\n * @param {?} definition The definition that is a SubClass of another directive of component\n *\n * @return {?}\n */\nfunction ÉµÉµInheritDefinitionFeature(definition) {\n    /** @type {?} */\n    let superType = getSuperType(definition.type);\n    while (superType) {\n        /** @type {?} */\n        let superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n        }\n        else {\n            if (superType.ngComponentDef) {\n                throw new Error('Directives cannot inherit Components');\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngDirectiveDef;\n        }\n        /** @nocollapse @type {?} */\n        const baseDef = ((/** @type {?} */ (superType))).ngBaseDef;\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        if (baseDef || superDef) {\n            /** @type {?} */\n            const writeableDef = (/** @type {?} */ (definition));\n            writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n            writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n            writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        }\n        if (baseDef) {\n            /** @type {?} */\n            const baseViewQuery = baseDef.viewQuery;\n            /** @type {?} */\n            const baseContentQueries = baseDef.contentQueries;\n            /** @type {?} */\n            const baseHostBindings = baseDef.hostBindings;\n            baseHostBindings && inheritHostBindings(definition, baseHostBindings);\n            baseViewQuery && inheritViewQuery(definition, baseViewQuery);\n            baseContentQueries && inheritContentQueries(definition, baseContentQueries);\n            fillProperties(definition.inputs, baseDef.inputs);\n            fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n            fillProperties(definition.outputs, baseDef.outputs);\n        }\n        if (superDef) {\n            // Merge hostBindings\n            /** @type {?} */\n            const superHostBindings = superDef.hostBindings;\n            superHostBindings && inheritHostBindings(definition, superHostBindings);\n            // Merge queries\n            /** @type {?} */\n            const superViewQuery = superDef.viewQuery;\n            /** @type {?} */\n            const superContentQueries = superDef.contentQueries;\n            superViewQuery && inheritViewQuery(definition, superViewQuery);\n            superContentQueries && inheritContentQueries(definition, superContentQueries);\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, superDef.inputs);\n            fillProperties(definition.declaredInputs, superDef.declaredInputs);\n            fillProperties(definition.outputs, superDef.outputs);\n            // Inherit hooks\n            // Assume super class inheritance feature has already run.\n            definition.afterContentChecked =\n                definition.afterContentChecked || superDef.afterContentChecked;\n            definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n            definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n            definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n            definition.doCheck = definition.doCheck || superDef.doCheck;\n            definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n            definition.onInit = definition.onInit || superDef.onInit;\n            // Run parent features\n            /** @type {?} */\n            const features = superDef.features;\n            if (features) {\n                for (const feature of features) {\n                    if (feature && feature.ngInherit) {\n                        ((/** @type {?} */ (feature)))(definition);\n                    }\n                }\n            }\n        }\n        else {\n            // Even if we don't have a definition, check the type for the hooks and use those if need be\n            /** @type {?} */\n            const superPrototype = superType.prototype;\n            if (superPrototype) {\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superPrototype.ngAfterContentChecked;\n                definition.afterContentInit =\n                    definition.afterContentInit || superPrototype.ngAfterContentInit;\n                definition.afterViewChecked =\n                    definition.afterViewChecked || superPrototype.ngAfterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superPrototype.ngAfterViewInit;\n                definition.doCheck = definition.doCheck || superPrototype.ngDoCheck;\n                definition.onDestroy = definition.onDestroy || superPrototype.ngOnDestroy;\n                definition.onInit = definition.onInit || superPrototype.ngOnInit;\n                if (superPrototype.ngOnChanges) {\n                    ÉµÉµNgOnChangesFeature()(definition);\n                }\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY_OBJ) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\n/**\n * @param {?} definition\n * @param {?} superViewQuery\n * @return {?}\n */\nfunction inheritViewQuery(definition, superViewQuery) {\n    /** @type {?} */\n    const prevViewQuery = definition.viewQuery;\n    if (prevViewQuery) {\n        definition.viewQuery = (/**\n         * @param {?} rf\n         * @param {?} ctx\n         * @return {?}\n         */\n        (rf, ctx) => {\n            superViewQuery(rf, ctx);\n            prevViewQuery(rf, ctx);\n        });\n    }\n    else {\n        definition.viewQuery = superViewQuery;\n    }\n}\n/**\n * @param {?} definition\n * @param {?} superContentQueries\n * @return {?}\n */\nfunction inheritContentQueries(definition, superContentQueries) {\n    /** @type {?} */\n    const prevContentQueries = definition.contentQueries;\n    if (prevContentQueries) {\n        definition.contentQueries = (/**\n         * @param {?} rf\n         * @param {?} ctx\n         * @param {?} directiveIndex\n         * @return {?}\n         */\n        (rf, ctx, directiveIndex) => {\n            superContentQueries(rf, ctx, directiveIndex);\n            prevContentQueries(rf, ctx, directiveIndex);\n        });\n    }\n    else {\n        definition.contentQueries = superContentQueries;\n    }\n}\n/**\n * @param {?} definition\n * @param {?} superHostBindings\n * @return {?}\n */\nfunction inheritHostBindings(definition, superHostBindings) {\n    /** @type {?} */\n    const prevHostBindings = definition.hostBindings;\n    // If the subclass does not have a host bindings function, we set the subclass host binding\n    // function to be the superclass's (in this feature). We should check if they're the same here\n    // to ensure we don't inherit it twice.\n    if (superHostBindings !== prevHostBindings) {\n        if (prevHostBindings) {\n            // because inheritance is unknown during compile time, the runtime code\n            // needs to be informed of the super-class depth so that instruction code\n            // can distinguish one host bindings function from another. The reason why\n            // relying on the directive uniqueId exclusively is not enough is because the\n            // uniqueId value and the directive instance stay the same between hostBindings\n            // calls throughout the directive inheritance chain. This means that without\n            // a super-class depth value, there is no way to know whether a parent or\n            // sub-class host bindings function is currently being executed.\n            definition.hostBindings = (/**\n             * @param {?} rf\n             * @param {?} ctx\n             * @param {?} elementIndex\n             * @return {?}\n             */\n            (rf, ctx, elementIndex) => {\n                // The reason why we increment first and then decrement is so that parent\n                // hostBindings calls have a higher id value compared to sub-class hostBindings\n                // calls (this way the leaf directive is always at a super-class depth of 0).\n                adjustActiveDirectiveSuperClassDepthPosition(1);\n                try {\n                    superHostBindings(rf, ctx, elementIndex);\n                }\n                finally {\n                    adjustActiveDirectiveSuperClassDepthPosition(-1);\n                }\n                prevHostBindings(rf, ctx, elementIndex);\n            });\n        }\n        else {\n            definition.hostBindings = superHostBindings;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @template T\n * @param {?} def the directive definition\n * @param {?} providers\n * @param {?} viewProviders\n * @return {?}\n */\nfunction providersResolver(def, providers, viewProviders) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const isComponent = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider$1(providers, tView.data, tView.blueprint, isComponent, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n * @param {?} provider\n * @param {?} tInjectables\n * @param {?} lInjectablesBlueprint\n * @param {?} isComponent\n * @param {?} isViewProvider\n * @return {?}\n */\nfunction resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (let i = 0; i < provider.length; i++) {\n            resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n        }\n    }\n    else {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        const tView = lView[TVIEW];\n        /** @type {?} */\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        let providerFactory = providerToFactory(provider);\n        /** @type {?} */\n        const tNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        const beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        /** @type {?} */\n        const endIndex = tNode.directiveStart;\n        /** @type {?} */\n        const cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n        if (isClassProvider(provider) || isTypeProvider(provider)) {\n            /** @type {?} */\n            const prototype = (((/** @type {?} */ (provider))).useClass || provider).prototype;\n            /** @type {?} */\n            const ngOnDestroy = prototype.ngOnDestroy;\n            if (ngOnDestroy) {\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(tInjectables.length, ngOnDestroy);\n            }\n        }\n        if (isTypeProvider(provider) || !provider.multi) {\n            // Single provider case: the factory is created and pushed immediately\n            /** @type {?} */\n            const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ÉµÉµdirectiveInject);\n            /** @type {?} */\n            const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex == -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), tView, token);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                lView[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            // Multi provider case:\n            // We create a multi factory which is going to aggregate all the values.\n            // Since the output of such a factory depends on content or view injection,\n            // we create two of them, which are linked together.\n            //\n            // The first one (for view providers) is always in the first block of the injectables array,\n            // and the second one (for providers) is always in the second block.\n            // This is important because view providers have higher priority. When a multi token\n            // is being looked up, the view providers should be found first.\n            // Note that it is not possible to have a multi factory in the third block (directive block).\n            //\n            // The algorithm to process multi providers is as follows:\n            // 1) If the multi provider comes from the `viewProviders` of the component:\n            //   a) If the special view providers factory doesn't exist, it is created and pushed.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            // 2) If the multi provider comes from the `providers` of the component or of another\n            // directive:\n            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n            //      It is also linked to the multi factory for view providers, if it exists.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            /** @type {?} */\n            const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            /** @type {?} */\n            const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            /** @type {?} */\n            const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            /** @type {?} */\n            const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), tView, token);\n                /** @type {?} */\n                const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                multiFactoryAdd((/** @type {?} */ (lInjectablesBlueprint))[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n            }\n            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                (/** @type {?} */ (lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders))++;\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n * @param {?} multiFactory\n * @param {?} factory\n * @param {?} isComponentProvider\n * @return {?}\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    (/** @type {?} */ (multiFactory.multi)).push(factory);\n    if (isComponentProvider) {\n        (/** @type {?} */ (multiFactory.componentProviders))++;\n    }\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n * @param {?} item\n * @param {?} arr\n * @param {?} begin\n * @param {?} end\n * @return {?}\n */\nfunction indexOf(item, arr, begin, end) {\n    for (let i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve((/** @type {?} */ (this.multi)), []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n    /** @type {?} */\n    const factories = (/** @type {?} */ (this.multi));\n    /** @type {?} */\n    let result;\n    if (this.providerFactory) {\n        /** @type {?} */\n        const componentCount = (/** @type {?} */ (this.providerFactory.componentProviders));\n        /** @type {?} */\n        const multiProviders = getNodeInjectable(tData, lData, (/** @type {?} */ ((/** @type {?} */ (this.providerFactory)).index)), tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (let i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n * @param {?} factories\n * @param {?} result\n * @return {?}\n */\nfunction multiResolve(factories, result) {\n    for (let i = 0; i < factories.length; i++) {\n        /** @type {?} */\n        const factory = (/** @type {?} */ ((/** @type {?} */ (factories[i]))));\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n * @param {?} factoryFn\n * @param {?} index\n * @param {?} isViewProvider\n * @param {?} isComponent\n * @param {?} f\n * @return {?}\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n    /** @type {?} */\n    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ÉµÉµdirectiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n    return factory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ngComponentDef = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    consts: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ÉµÉµtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ÉµÉµselect(0);\n *        ÉµÉµtextBinding(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * \\@codeGenApi\n * @template T\n * @param {?} providers\n * @param {?=} viewProviders\n * @return {?}\n */\nfunction ÉµÉµProvidersFeature(providers, viewProviders = []) {\n    return (/**\n     * @param {?} definition\n     * @return {?}\n     */\n    (definition) => {\n        definition.providersResolver =\n            (/**\n             * @param {?} def\n             * @param {?=} processProvidersFn\n             * @return {?}\n             */\n            (def, processProvidersFn) => {\n                return providersResolver(def, //\n                processProvidersFn ? processProvidersFn(providers) : providers, //\n                viewProviders);\n            });\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass ComponentRef {\n}\nif (false) {\n    /**\n     * The host or anchor [element](guide/glossary#element) for this component instance.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.location = function () { };\n    /**\n     * The [dependency injector](guide/glossary#injector) for this component instance.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.injector = function () { };\n    /**\n     * This component instance.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.instance = function () { };\n    /**\n     * The [host view](guide/glossary#view-tree) defined by the template\n     * for this component instance.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.hostView = function () { };\n    /**\n     * The change detector for this component instance.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.changeDetectorRef = function () { };\n    /**\n     * The type of this component (as created by a `ComponentFactory` class).\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.componentType = function () { };\n    /**\n     * Destroys the component instance and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.destroy = function () { };\n    /**\n     * A lifecycle hook that provides additional developer-defined cleanup\n     * functionality for the component.\n     * @abstract\n     * @param {?} callback A handler function that cleans up developer-defined data\n     * associated with this component. Called when the `destroy()` method is invoked.\n     * @return {?}\n     */\n    ComponentRef.prototype.onDestroy = function (callback) { };\n}\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass ComponentFactory {\n}\nif (false) {\n    /**\n     * The component's HTML selector.\n     * @abstract\n     * @return {?}\n     */\n    ComponentFactory.prototype.selector = function () { };\n    /**\n     * The type of component the factory will create.\n     * @abstract\n     * @return {?}\n     */\n    ComponentFactory.prototype.componentType = function () { };\n    /**\n     * Selector for all <ng-content> elements in the component.\n     * @abstract\n     * @return {?}\n     */\n    ComponentFactory.prototype.ngContentSelectors = function () { };\n    /**\n     * The inputs of the component.\n     * @abstract\n     * @return {?}\n     */\n    ComponentFactory.prototype.inputs = function () { };\n    /**\n     * The outputs of the component.\n     * @abstract\n     * @return {?}\n     */\n    ComponentFactory.prototype.outputs = function () { };\n    /**\n     * Creates a new component.\n     * @abstract\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} component\n * @return {?}\n */\nfunction noComponentFactoryError(component) {\n    /** @type {?} */\n    const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n    ((/** @type {?} */ (error)))[ERROR_COMPONENT] = component;\n    return error;\n}\n/** @type {?} */\nconst ERROR_COMPONENT = 'ngComponent';\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getComponent$1(error) {\n    return ((/** @type {?} */ (error)))[ERROR_COMPONENT];\n}\nclass _NullComponentFactoryResolver {\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        throw noComponentFactoryError(component);\n    }\n}\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n * \\@publicApi\n * @abstract\n */\nclass ComponentFactoryResolver {\n}\nComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\nif (false) {\n    /** @type {?} */\n    ComponentFactoryResolver.NULL;\n    /**\n     * Retrieves the factory object that creates a component of the given type.\n     * @abstract\n     * @template T\n     * @param {?} component The component type.\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n}\nclass CodegenComponentFactoryResolver {\n    /**\n     * @param {?} factories\n     * @param {?} _parent\n     * @param {?} _ngModule\n     */\n    constructor(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (let i = 0; i < factories.length; i++) {\n            /** @type {?} */\n            const factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        /** @type {?} */\n        let factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CodegenComponentFactoryResolver.prototype._factories;\n    /**\n     * @type {?}\n     * @private\n     */\n    CodegenComponentFactoryResolver.prototype._parent;\n    /**\n     * @type {?}\n     * @private\n     */\n    CodegenComponentFactoryResolver.prototype._ngModule;\n}\n/**\n * @template C\n */\nclass ComponentFactoryBoundToModule extends ComponentFactory {\n    /**\n     * @param {?} factory\n     * @param {?} ngModule\n     */\n    constructor(factory, ngModule) {\n        super();\n        this.factory = factory;\n        this.ngModule = ngModule;\n        this.selector = factory.selector;\n        this.componentType = factory.componentType;\n        this.ngContentSelectors = factory.ngContentSelectors;\n        this.inputs = factory.inputs;\n        this.outputs = factory.outputs;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    }\n}\nif (false) {\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.selector;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.componentType;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.inputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.outputs;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactoryBoundToModule.prototype.factory;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactoryBoundToModule.prototype.ngModule;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction noop(...args) {\n    // Do nothing.\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @template T\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n    /**\n     * @param {?} nativeElement\n     */\n    constructor(nativeElement) { this.nativeElement = nativeElement; }\n}\n/**\n * \\@internal\n * @nocollapse\n */\nElementRef.__NG_ELEMENT_ID__ = (/**\n * @return {?}\n */\n() => SWITCH_ELEMENT_REF_FACTORY(ElementRef));\nif (false) {\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    ElementRef.__NG_ELEMENT_ID__;\n    /**\n     * The underlying native element or `null` if direct access to native elements is not supported\n     * (e.g. when the application runs in a web worker).\n     *\n     * <div class=\"callout is-critical\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. Alternatively you can take a look at {\\@link\n     * Renderer2}\n     *    which provides API that can safely be used even when direct access to native elements is not\n     *    supported.\n     *   </p>\n     *   <p>\n     *    Relying on direct DOM access creates tight coupling between your application and rendering\n     *    layers which will make it impossible to separate the two and deploy your application into a\n     *    web worker.\n     *   </p>\n     * </div>\n     *\n     * @type {?}\n     */\n    ElementRef.prototype.nativeElement;\n}\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nclass RenderComponentType {\n    /**\n     * @param {?} id\n     * @param {?} templateUrl\n     * @param {?} slotCount\n     * @param {?} encapsulation\n     * @param {?} styles\n     * @param {?} animations\n     */\n    constructor(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n}\nif (false) {\n    /** @type {?} */\n    RenderComponentType.prototype.id;\n    /** @type {?} */\n    RenderComponentType.prototype.templateUrl;\n    /** @type {?} */\n    RenderComponentType.prototype.slotCount;\n    /** @type {?} */\n    RenderComponentType.prototype.encapsulation;\n    /** @type {?} */\n    RenderComponentType.prototype.styles;\n    /** @type {?} */\n    RenderComponentType.prototype.animations;\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nclass RenderDebugInfo {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.source = function () { };\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @record\n */\nfunction DirectRenderer() { }\nif (false) {\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DirectRenderer.prototype.remove = function (node) { };\n    /**\n     * @param {?} node\n     * @param {?} parent\n     * @return {?}\n     */\n    DirectRenderer.prototype.appendChild = function (node, parent) { };\n    /**\n     * @param {?} node\n     * @param {?} refNode\n     * @return {?}\n     */\n    DirectRenderer.prototype.insertBefore = function (node, refNode) { };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DirectRenderer.prototype.nextSibling = function (node) { };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DirectRenderer.prototype.parentElement = function (node) { };\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nclass Renderer {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} selectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @return {?}\n     */\n    Renderer.prototype.createViewRoot = function (hostElement) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} value\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.detachView = function (viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listen = function (renderElement, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listenGlobal = function (target, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} attributeName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n    /**\n     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?=} args\n     * @return {?}\n     */\n    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n    /**\n     * @abstract\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    Renderer.prototype.setText = function (renderNode, text) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n}\n/** @type {?} */\nconst Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nclass RootRenderer {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} componentType\n     * @return {?}\n     */\n    RootRenderer.prototype.renderComponent = function (componentType) { };\n}\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n * \\@publicApi\n * @record\n */\nfunction RendererType2() { }\nif (false) {\n    /**\n     * A unique identifying string for the new renderer, used when creating\n     * unique styles for encapsulation.\n     * @type {?}\n     */\n    RendererType2.prototype.id;\n    /**\n     * The view encapsulation type, which determines how styles are applied to\n     * DOM elements. One of\n     * - `Emulated` (default): Emulate native scoping of styles.\n     * - `Native`: Use the native encapsulation mechanism of the renderer.\n     * - `ShadowDom`: Use modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * create a ShadowRoot for component's host element.\n     * - `None`: Do not provide any template or style encapsulation.\n     * @type {?}\n     */\n    RendererType2.prototype.encapsulation;\n    /**\n     * Defines CSS styles to be stored on a renderer instance.\n     * @type {?}\n     */\n    RendererType2.prototype.styles;\n    /**\n     * Defines arbitrary developer-defined data to be stored on a renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     * @type {?}\n     */\n    RendererType2.prototype.data;\n}\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nclass RendererFactory2 {\n}\nif (false) {\n    /**\n     * Creates and initializes a custom renderer for a host DOM element.\n     * @abstract\n     * @param {?} hostElement The element to render.\n     * @param {?} type The base class to implement.\n     * @return {?} The new custom renderer instance.\n     */\n    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };\n    /**\n     * A callback invoked when rendering has begun.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.begin = function () { };\n    /**\n     * A callback invoked when rendering has completed.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.end = function () { };\n    /**\n     * Use with animations test-only mode. Notifies the test when rendering has completed.\n     * @abstract\n     * @return {?} The asynchronous result of the developer-defined function.\n     */\n    RendererFactory2.prototype.whenRenderingDone = function () { };\n}\n/** @enum {number} */\nconst RendererStyleFlags2 = {\n    /**\n     * Marks a style as important.\n     */\n    Important: 1,\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    DashCase: 2,\n};\nRendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@publicApi\n * @abstract\n */\nclass Renderer2 {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nRenderer2.__NG_ELEMENT_ID__ = (/**\n * @return {?}\n */\n() => SWITCH_RENDERER2_FACTORY());\nif (false) {\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    Renderer2.__NG_ELEMENT_ID__;\n    /**\n     * If null or undefined, the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?}\n     */\n    Renderer2.prototype.destroyNode;\n    /**\n     * Use to store arbitrary developer-defined data on a renderer instance,\n     * as an object containing key-value pairs.\n     * This is useful for renderers that delegate to other renderers.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.data = function () { };\n    /**\n     * Implement this callback to destroy the renderer or the host element.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.destroy = function () { };\n    /**\n     * Implement this callback to create an instance of the host element.\n     * @abstract\n     * @param {?} name An identifying name for the new element, unique within the namespace.\n     * @param {?=} namespace The namespace for the new element.\n     * @return {?} The new element.\n     */\n    Renderer2.prototype.createElement = function (name, namespace) { };\n    /**\n     * Implement this callback to add a comment to the DOM of the host element.\n     * @abstract\n     * @param {?} value The comment text.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createComment = function (value) { };\n    /**\n     * Implement this callback to add text to the DOM of the host element.\n     * @abstract\n     * @param {?} value The text string.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createText = function (value) { };\n    /**\n     * Appends a child to a given parent node in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child node.\n     * @return {?}\n     */\n    Renderer2.prototype.appendChild = function (parent, newChild) { };\n    /**\n     * Implement this callback to insert a child node at a given position in a parent node\n     * in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child nodes.\n     * @param {?} refChild The existing child node that should precede the new node.\n     * @return {?}\n     */\n    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };\n    /**\n     * Implement this callback to remove a child node from the host element's DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} oldChild The child node to remove.\n     * @param {?=} isHostElement Optionally signal to the renderer whether this element is a host element\n     * or not\n     * @return {?}\n     */\n    Renderer2.prototype.removeChild = function (parent, oldChild, isHostElement) { };\n    /**\n     * Implement this callback to prepare an element to be bootstrapped\n     * as a root element, and return the element instance.\n     * @abstract\n     * @param {?} selectorOrNode The DOM element.\n     * @param {?=} preserveContent Whether the contents of the root element\n     * should be preserved, or cleared upon bootstrap (default behavior).\n     * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n     * content projection via `<slot>` elements.\n     * @return {?} The root element.\n     */\n    Renderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) { };\n    /**\n     * Implement this callback to get the parent of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node The child node to query.\n     * @return {?} The parent node, or null if there is no parent.\n     * For WebWorkers, always returns true.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.parentNode = function (node) { };\n    /**\n     * Implement this callback to get the next sibling node of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node\n     * @return {?} The sibling node, or null if there is no sibling.\n     * For WebWorkers, always returns a value.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.nextSibling = function (node) { };\n    /**\n     * Implement this callback to set an attribute value for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?} value The new value.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };\n    /**\n     * Implement this callback to remove an attribute from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };\n    /**\n     * Implement this callback to add a class to an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.addClass = function (el, name) { };\n    /**\n     * Implement this callback to remove a class from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.removeClass = function (el, name) { };\n    /**\n     * Implement this callback to set a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?} value The new value.\n     * @param {?=} flags Flags for style variations. No flags are set by default.\n     * @return {?}\n     */\n    Renderer2.prototype.setStyle = function (el, style, value, flags) { };\n    /**\n     * Implement this callback to remove the value from a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?=} flags Flags for style variations to remove, if set. ???\n     * @return {?}\n     */\n    Renderer2.prototype.removeStyle = function (el, style, flags) { };\n    /**\n     * Implement this callback to set the value of a property of an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The property name.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setProperty = function (el, name, value) { };\n    /**\n     * Implement this callback to set the value of a node in the host element.\n     * @abstract\n     * @param {?} node The node.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setValue = function (node, value) { };\n    /**\n     * Implement this callback to start an event listener.\n     * @abstract\n     * @param {?} target The context in which to listen for events. Can be\n     * the entire window or document, the body of the document, or a specific\n     * DOM element.\n     * @param {?} eventName The event to listen for.\n     * @param {?} callback A handler function to invoke when the event occurs.\n     * @return {?} An \"unlisten\" function for disposing of this handler.\n     */\n    Renderer2.prototype.listen = function (target, eventName, callback) { };\n}\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nclass Version {\n    /**\n     * @param {?} full\n     */\n    constructor(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n}\nif (false) {\n    /** @type {?} */\n    Version.prototype.major;\n    /** @type {?} */\n    Version.prototype.minor;\n    /** @type {?} */\n    Version.prototype.patch;\n    /** @type {?} */\n    Version.prototype.full;\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('8.2.14');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DefaultIterableDifferFactory {\n    constructor() { }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return isListLikeIterable$1(obj); }\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    create(trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    }\n}\n/** @type {?} */\nconst trackByIdentity = (/**\n * @param {?} index\n * @param {?} item\n * @return {?}\n */\n(index, item) => item);\nconst Éµ0$d = trackByIdentity;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nclass DefaultIterableDiffer {\n    /**\n     * @param {?=} trackByFn\n     */\n    constructor(trackByFn) {\n        this.length = 0;\n        // Keeps track of the used records at any point in time (during & across `_check()` calls)\n        this._linkedRecords = null;\n        // Keeps track of the removed records at any point in time during `_check()` calls.\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        // Keeps track of records where custom track by is the same, but item identity has changed\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachOperation(fn) {\n        /** @type {?} */\n        let nextIt = this._itHead;\n        /** @type {?} */\n        let nextRemove = this._removalsHead;\n        /** @type {?} */\n        let addRemoveOffset = 0;\n        /** @type {?} */\n        let moveOffsets = null;\n        while (nextIt || nextRemove) {\n            // Figure out which is the next record to process\n            // Order: remove, add, move\n            /** @type {?} */\n            const record = !nextRemove ||\n                nextIt &&\n                    (/** @type {?} */ (nextIt.currentIndex)) <\n                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                (/** @type {?} */ (nextIt)) :\n                nextRemove;\n            /** @type {?} */\n            const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            /** @type {?} */\n            const currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = (/** @type {?} */ (nextIt))._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    /** @type {?} */\n                    const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    /** @type {?} */\n                    const localCurrentIndex = (/** @type {?} */ (currentIndex)) - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (let i = 0; i < localMovePreviousIndex; i++) {\n                            /** @type {?} */\n                            const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            /** @type {?} */\n                            const index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        /** @type {?} */\n                        const previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachPreviousItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachAddedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachMovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachRemovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachIdentityChange(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    diff(collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable$1(collection)) {\n            throw new Error(`Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onDestroy() { }\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    check(collection) {\n        this._reset();\n        /** @type {?} */\n        let record = this._itHead;\n        /** @type {?} */\n        let mayBeDirty = false;\n        /** @type {?} */\n        let index;\n        /** @type {?} */\n        let item;\n        /** @type {?} */\n        let itemTrackBy;\n        if (Array.isArray(collection)) {\n            ((/** @type {?} */ (this))).length = collection.length;\n            for (let index = 0; index < this.length; index++) {\n                item = collection[index];\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike$1(collection, (/**\n             * @param {?} item\n             * @return {?}\n             */\n            (item) => {\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            }));\n            ((/** @type {?} */ (this))).length = index;\n        }\n        this._truncate(record);\n        ((/** @type {?} */ (this))).collection = collection;\n        return this.isDirty;\n    }\n    /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n       * changes.\n       */\n    /**\n     * @return {?}\n     */\n    get isDirty() {\n        return this._additionsHead !== null || this._movesHead !== null ||\n            this._removalsHead !== null || this._identityChangesHead !== null;\n    }\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    _reset() {\n        if (this.isDirty) {\n            /** @type {?} */\n            let record;\n            /** @type {?} */\n            let nextRecord;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    }\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    _mismatch(record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        /** @type {?} */\n        let previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    }\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    _verifyReinsertion(record, item, itemTrackBy, index) {\n        /** @type {?} */\n        let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, (/** @type {?} */ (record._prev)), index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    }\n    /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _truncate(record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            /** @type {?} */\n            const nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _reinsertAfter(record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        /** @type {?} */\n        const prev = record._prevRemoved;\n        /** @type {?} */\n        const next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _moveAfter(record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _addAfter(record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _insertAfter(record, prevRecord, index) {\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        /** @type {?} */\n        const next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _remove(record) {\n        return this._addToRemovals(this._unlink(record));\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _unlink(record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        /** @type {?} */\n        const prev = record._prev;\n        /** @type {?} */\n        const next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    _addToMoves(record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToRemovals(record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    _addIdentityChange(record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    }\n}\nif (false) {\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.length;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.collection;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._linkedRecords;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._unlinkedRecords;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._previousItHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._itHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._itTail;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._additionsHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._additionsTail;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._movesHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._movesTail;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._removalsHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._removalsTail;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._identityChangesHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._identityChangesTail;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultIterableDiffer.prototype._trackByFn;\n}\n/**\n * @template V\n */\nclass IterableChangeRecord_ {\n    /**\n     * @param {?} item\n     * @param {?} trackById\n     */\n    constructor(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prevDup = null;\n        /**\n         * \\@internal\n         */\n        this._nextDup = null;\n        /**\n         * \\@internal\n         */\n        this._prevRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextMoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextIdentityChange = null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    IterableChangeRecord_.prototype.currentIndex;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.previousIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextMoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextIdentityChange;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.item;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.trackById;\n}\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\n/**\n * @template V\n */\nclass _DuplicateItemRecordList {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._head = null;\n        /**\n         * \\@internal\n         */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    add(record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            (/** @type {?} */ (this._tail))._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    }\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    get(trackById, atOrAfterIndex) {\n        /** @type {?} */\n        let record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= (/** @type {?} */ (record.currentIndex))) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    }\n    /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    remove(record) {\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        /** @type {?} */\n        const prev = record._prevDup;\n        /** @type {?} */\n        const next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._head;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._tail;\n}\n/**\n * @template V\n */\nclass _DuplicateMap {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    put(record) {\n        /** @type {?} */\n        const key = record.trackById;\n        /** @type {?} */\n        let duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    }\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    get(trackById, atOrAfterIndex) {\n        /** @type {?} */\n        const key = trackById;\n        /** @type {?} */\n        const recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    }\n    /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    remove(record) {\n        /** @type {?} */\n        const key = record.trackById;\n        /** @type {?} */\n        const recordList = (/** @type {?} */ (this.map.get(key)));\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    }\n    /**\n     * @return {?}\n     */\n    get isEmpty() { return this.map.size === 0; }\n    /**\n     * @return {?}\n     */\n    clear() { this.map.clear(); }\n}\nif (false) {\n    /** @type {?} */\n    _DuplicateMap.prototype.map;\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    /** @type {?} */\n    const previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    /** @type {?} */\n    let moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template K, V\n */\nclass DefaultKeyValueDifferFactory {\n    constructor() { }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return obj instanceof Map || isJsObject$1(obj); }\n    /**\n     * @template K, V\n     * @return {?}\n     */\n    create() { return new DefaultKeyValueDiffer(); }\n}\n/**\n * @template K, V\n */\nclass DefaultKeyValueDiffer {\n    constructor() {\n        this._records = new Map();\n        this._mapHead = null;\n        // _appendAfter is used in the check loop\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    /**\n     * @return {?}\n     */\n    get isDirty() {\n        return this._additionsHead !== null || this._changesHead !== null ||\n            this._removalsHead !== null;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachPreviousItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachChangedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachAddedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachRemovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?=} map\n     * @return {?}\n     */\n    diff(map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject$1(map))) {\n            throw new Error(`Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n        }\n        return this.check(map) ? this : null;\n    }\n    /**\n     * @return {?}\n     */\n    onDestroy() { }\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    check(map) {\n        this._reset();\n        /** @type {?} */\n        let insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, (/**\n         * @param {?} value\n         * @param {?} key\n         * @return {?}\n         */\n        (value, key) => {\n            if (insertBefore && insertBefore.key === key) {\n                this._maybeAddToChanges(insertBefore, value);\n                this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                /** @type {?} */\n                const record = this._getOrCreateRecordForKey(key, value);\n                insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n            }\n        }));\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (let record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    }\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @private\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    _insertBeforeOrAppend(before, record) {\n        if (before) {\n            /** @type {?} */\n            const prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    _getOrCreateRecordForKey(key, value) {\n        if (this._records.has(key)) {\n            /** @type {?} */\n            const record = (/** @type {?} */ (this._records.get(key)));\n            this._maybeAddToChanges(record, value);\n            /** @type {?} */\n            const prev = record._prev;\n            /** @type {?} */\n            const next = record._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record._next = null;\n            record._prev = null;\n            return record;\n        }\n        /** @type {?} */\n        const record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _reset() {\n        if (this.isDirty) {\n            /** @type {?} */\n            let record;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    }\n    // Add the record or a given key to the list of changes only when the value has actually changed\n    /**\n     * @private\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    _maybeAddToChanges(record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToAdditions(record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            (/** @type {?} */ (this._additionsTail))._nextAdded = record;\n            this._additionsTail = record;\n        }\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToChanges(record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            (/** @type {?} */ (this._changesTail))._nextChanged = record;\n            this._changesTail = record;\n        }\n    }\n    /**\n     * \\@internal\n     * @private\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    _forEach(obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach((/**\n             * @param {?} k\n             * @return {?}\n             */\n            k => fn(obj[k], k)));\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultKeyValueDiffer.prototype._records;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultKeyValueDiffer.prototype._mapHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultKeyValueDiffer.prototype._appendAfter;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultKeyValueDiffer.prototype._previousMapHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultKeyValueDiffer.prototype._changesHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultKeyValueDiffer.prototype._changesTail;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultKeyValueDiffer.prototype._additionsHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultKeyValueDiffer.prototype._additionsTail;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultKeyValueDiffer.prototype._removalsHead;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultKeyValueDiffer.prototype._removalsTail;\n}\n/**\n * @template K, V\n */\nclass KeyValueChangeRecord_ {\n    /**\n     * @param {?} key\n     */\n    constructor(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextChanged = null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.previousValue;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.currentValue;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextChanged;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.key;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A strategy for tracking changes over time to an iterable. Used by {\\@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * \\@publicApi\n * @record\n * @template V\n */\nfunction IterableDiffer() { }\nif (false) {\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * @param {?} object containing the new value.\n     * @return {?} an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     */\n    IterableDiffer.prototype.diff = function (object) { };\n}\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * \\@publicApi\n * @record\n * @template V\n */\nfunction IterableChanges() { }\nif (false) {\n    /**\n     * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n     * to each item.\n     * @param {?} fn\n     * @return {?}\n     */\n    IterableChanges.prototype.forEachItem = function (fn) { };\n    /**\n     * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n     * new `Iterable`.\n     *\n     * NOTE: These are not necessarily the actual operations which were applied to the original\n     * `Iterable`, rather these are a set of computed operations which may not be the same as the\n     * ones applied.\n     *\n     * @param {?} fn\n     * @return {?}\n     */\n    IterableChanges.prototype.forEachOperation = function (fn) { };\n    /**\n     * Iterate over changes in the order of original `Iterable` showing where the original items\n     * have moved.\n     * @param {?} fn\n     * @return {?}\n     */\n    IterableChanges.prototype.forEachPreviousItem = function (fn) { };\n    /**\n     * Iterate over all added items.\n     * @param {?} fn\n     * @return {?}\n     */\n    IterableChanges.prototype.forEachAddedItem = function (fn) { };\n    /**\n     * Iterate over all moved items.\n     * @param {?} fn\n     * @return {?}\n     */\n    IterableChanges.prototype.forEachMovedItem = function (fn) { };\n    /**\n     * Iterate over all removed items.\n     * @param {?} fn\n     * @return {?}\n     */\n    IterableChanges.prototype.forEachRemovedItem = function (fn) { };\n    /**\n     * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n     * changed.\n     * @param {?} fn\n     * @return {?}\n     */\n    IterableChanges.prototype.forEachIdentityChange = function (fn) { };\n}\n/**\n * Record representing the item change information.\n *\n * \\@publicApi\n * @record\n * @template V\n */\nfunction IterableChangeRecord() { }\nif (false) {\n    /**\n     * Current index of the item in `Iterable` or null if removed.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.currentIndex;\n    /**\n     * Previous index of the item in `Iterable` or null if added.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.previousIndex;\n    /**\n     * The item.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.item;\n    /**\n     * Track by identity as computed by the `TrackByFunction`.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.trackById;\n}\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n * \\@publicApi\n * @record\n * @template V\n */\nfunction CollectionChangeRecord() { }\n/**\n * An optional function passed into the `NgForOf` directive that defines how to track\n * changes for items in an iterable.\n * The function takes the iteration index and item ID.\n * When supplied, Angular tracks changes by the return value of the function.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction TrackByFunction() { }\n/**\n * Provides a factory for {\\@link IterableDiffer}.\n *\n * \\@publicApi\n * @record\n */\nfunction IterableDifferFactory() { }\nif (false) {\n    /**\n     * @param {?} objects\n     * @return {?}\n     */\n    IterableDifferFactory.prototype.supports = function (objects) { };\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    IterableDifferFactory.prototype.create = function (trackByFn) { };\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * \\@publicApi\n */\nclass IterableDiffers {\n    /**\n     * @param {?} factories\n     */\n    constructor(factories) { this.factories = factories; }\n    /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(factories, parent) {\n        if (parent != null) {\n            /** @type {?} */\n            const copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    }\n    /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    static extend(factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: (/**\n             * @param {?} parent\n             * @return {?}\n             */\n            (parent) => {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            }),\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    }\n    /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    find(iterable) {\n        /** @type {?} */\n        const factory = this.factories.find((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => f.supports(iterable)));\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(`Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n        }\n    }\n}\n/** @nocollapse */\n/** @nocollapse */ IterableDiffers.ngInjectableDef = ÉµÉµdefineInjectable({\n    token: IterableDiffers,\n    providedIn: 'root',\n    factory: (/**\n     * @nocollapse @return {?}\n     */\n    () => new IterableDiffers([new DefaultIterableDifferFactory()]))\n});\nif (false) {\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    IterableDiffers.ngInjectableDef;\n    /**\n     * @deprecated v4.0.0 - Should be private\n     * @type {?}\n     */\n    IterableDiffers.prototype.factories;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A differ that tracks changes made to an object over time.\n *\n * \\@publicApi\n * @record\n * @template K, V\n */\nfunction KeyValueDiffer() { }\nif (false) {\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * @param {?} object containing the new value.\n     * @return {?} an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     */\n    KeyValueDiffer.prototype.diff = function (object) { };\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * @param {?} object containing the new value.\n     * @return {?} an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     */\n    KeyValueDiffer.prototype.diff = function (object) { };\n}\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * \\@publicApi\n * @record\n * @template K, V\n */\nfunction KeyValueChanges() { }\nif (false) {\n    /**\n     * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n     * to each item.\n     * @param {?} fn\n     * @return {?}\n     */\n    KeyValueChanges.prototype.forEachItem = function (fn) { };\n    /**\n     * Iterate over changes in the order of original Map showing where the original items\n     * have moved.\n     * @param {?} fn\n     * @return {?}\n     */\n    KeyValueChanges.prototype.forEachPreviousItem = function (fn) { };\n    /**\n     * Iterate over all keys for which values have changed.\n     * @param {?} fn\n     * @return {?}\n     */\n    KeyValueChanges.prototype.forEachChangedItem = function (fn) { };\n    /**\n     * Iterate over all added items.\n     * @param {?} fn\n     * @return {?}\n     */\n    KeyValueChanges.prototype.forEachAddedItem = function (fn) { };\n    /**\n     * Iterate over all removed items.\n     * @param {?} fn\n     * @return {?}\n     */\n    KeyValueChanges.prototype.forEachRemovedItem = function (fn) { };\n}\n/**\n * Record representing the item change information.\n *\n * \\@publicApi\n * @record\n * @template K, V\n */\nfunction KeyValueChangeRecord() { }\nif (false) {\n    /**\n     * Current key in the Map.\n     * @type {?}\n     */\n    KeyValueChangeRecord.prototype.key;\n    /**\n     * Current value for the key or `null` if removed.\n     * @type {?}\n     */\n    KeyValueChangeRecord.prototype.currentValue;\n    /**\n     * Previous value for the key or `null` if added.\n     * @type {?}\n     */\n    KeyValueChangeRecord.prototype.previousValue;\n}\n/**\n * Provides a factory for {\\@link KeyValueDiffer}.\n *\n * \\@publicApi\n * @record\n */\nfunction KeyValueDifferFactory() { }\nif (false) {\n    /**\n     * Test to see if the differ knows how to diff this kind of object.\n     * @param {?} objects\n     * @return {?}\n     */\n    KeyValueDifferFactory.prototype.supports = function (objects) { };\n    /**\n     * Create a `KeyValueDiffer`.\n     * @template K, V\n     * @return {?}\n     */\n    KeyValueDifferFactory.prototype.create = function () { };\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * \\@publicApi\n */\nclass KeyValueDiffers {\n    /**\n     * @param {?} factories\n     */\n    constructor(factories) { this.factories = factories; }\n    /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(factories, parent) {\n        if (parent) {\n            /** @type {?} */\n            const copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    }\n    /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    static extend(factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: (/**\n             * @param {?} parent\n             * @return {?}\n             */\n            (parent) => {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            }),\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    }\n    /**\n     * @param {?} kv\n     * @return {?}\n     */\n    find(kv) {\n        /** @type {?} */\n        const factory = this.factories.find((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => f.supports(kv)));\n        if (factory) {\n            return factory;\n        }\n        throw new Error(`Cannot find a differ supporting object '${kv}'`);\n    }\n}\n/** @nocollapse */\n/** @nocollapse */ KeyValueDiffers.ngInjectableDef = ÉµÉµdefineInjectable({\n    token: KeyValueDiffers,\n    providedIn: 'root',\n    factory: (/**\n     * @nocollapse @return {?}\n     */\n    () => new KeyValueDiffers([new DefaultKeyValueDifferFactory()]))\n});\nif (false) {\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    KeyValueDiffers.ngInjectableDef;\n    /**\n     * @deprecated v4.0.0 - Should be private.\n     * @type {?}\n     */\n    KeyValueDiffers.prototype.factories;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Structural diffing for `Object`s and `Map`s.\n * @type {?}\n */\nconst keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n * @type {?}\n */\nconst iterableDiff = [new DefaultIterableDifferFactory()];\n/** @type {?} */\nconst defaultIterableDiffers = new IterableDiffers(iterableDiff);\n/** @type {?} */\nconst defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass TemplateRef {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nTemplateRef.__NG_ELEMENT_ID__ = (/**\n * @return {?}\n */\n() => SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef));\nif (false) {\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    TemplateRef.__NG_ELEMENT_ID__;\n    /**\n     * The anchor element in the parent view for this embedded view.\n     *\n     * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n     * inherit from the contexts of this location.\n     *\n     * Typically new embedded views are attached to the view container of this location, but in\n     * advanced use-cases, the view can be attached to a different container while keeping the\n     * data-binding and injection context from the original location.\n     *\n     * @abstract\n     * @return {?}\n     */\n    TemplateRef.prototype.elementRef = function () { };\n    /**\n     * Instantiates an embedded view based on this template,\n     * and attaches it to the view container.\n     * @abstract\n     * @param {?} context The data-binding context of the embedded view, as declared\n     * in the `<ng-template>` usage.\n     * @return {?} The new embedded view object.\n     */\n    TemplateRef.prototype.createEmbeddedView = function (context) { };\n}\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewContainerRef {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nViewContainerRef.__NG_ELEMENT_ID__ = (/**\n * @return {?}\n */\n() => SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef));\nif (false) {\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    ViewContainerRef.__NG_ELEMENT_ID__;\n    /**\n     * Anchor element that specifies the location of this container in the containing view.\n     * Each view container can have only one anchor element, and each anchor element\n     * can have only a single view container.\n     *\n     * Root elements of views attached to this container become siblings of the anchor element in\n     * the rendered view.\n     *\n     * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n     * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n     *\n     * <!-- TODO: rename to anchorElement -->\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.element = function () { };\n    /**\n     * The [dependency injector](guide/glossary#injector) for this view container.\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.injector = function () { };\n    /**\n     * @deprecated No replacement\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.parentInjector = function () { };\n    /**\n     * Destroys all views in this container.\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.clear = function () { };\n    /**\n     * Retrieves a view from this container.\n     * @abstract\n     * @param {?} index The 0-based index of the view to retrieve.\n     * @return {?} The `ViewRef` instance, or null if the index is out of range.\n     */\n    ViewContainerRef.prototype.get = function (index) { };\n    /**\n     * Reports how many views are currently attached to this container.\n     * @abstract\n     * @return {?} The number of views.\n     */\n    ViewContainerRef.prototype.length = function () { };\n    /**\n     * Instantiates an embedded view and inserts it\n     * into this container.\n     * @abstract\n     * @template C\n     * @param {?} templateRef The HTML template that defines the view.\n     * @param {?=} context\n     * @param {?=} index The 0-based index at which to insert the new view into this container.\n     * If not specified, appends the new view as the last entry.\n     *\n     * @return {?} The `ViewRef` instance for the newly created view.\n     */\n    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };\n    /**\n     * Instantiates a single component and inserts its host view into this container.\n     *\n     * @abstract\n     * @template C\n     * @param {?} componentFactory The factory to use.\n     * @param {?=} index The index at which to insert the new component's host view into this container.\n     * If not specified, appends the new view as the last entry.\n     * @param {?=} injector The injector to use as the parent for the new component.\n     * @param {?=} projectableNodes\n     * @param {?=} ngModule\n     *\n     * @return {?} The new component instance, containing the host view.\n     *\n     */\n    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };\n    /**\n     * Inserts a view into this container.\n     * @abstract\n     * @param {?} viewRef The view to insert.\n     * @param {?=} index The 0-based index at which to insert the view.\n     * If not specified, appends the new view as the last entry.\n     * @return {?} The inserted `ViewRef` instance.\n     *\n     */\n    ViewContainerRef.prototype.insert = function (viewRef, index) { };\n    /**\n     * Moves a view to a new location in this container.\n     * @abstract\n     * @param {?} viewRef The view to move.\n     * @param {?} currentIndex\n     * @return {?} The moved `ViewRef` instance.\n     */\n    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };\n    /**\n     * Returns the index of a view within the current container.\n     * @abstract\n     * @param {?} viewRef The view to query.\n     * @return {?} The 0-based index of the view's position in this container,\n     * or `-1` if this container doesn't contain the view.\n     */\n    ViewContainerRef.prototype.indexOf = function (viewRef) { };\n    /**\n     * Destroys a view attached to this container\n     * @abstract\n     * @param {?=} index The 0-based index of the view to destroy.\n     * If not specified, the last view in the container is removed.\n     * @return {?}\n     */\n    ViewContainerRef.prototype.remove = function (index) { };\n    /**\n     * Detaches a view from this container without destroying it.\n     * Use along with `insert()` to move a view within the current container.\n     * @abstract\n     * @param {?=} index The 0-based index of the view to detach.\n     * If not specified, the last view in the container is detached.\n     * @return {?}\n     */\n    ViewContainerRef.prototype.detach = function (index) { };\n}\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nfunction expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    /** @type {?} */\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n    if (isFirstCheck) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook ?`;\n    }\n    return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nfunction viewDebugError(msg, context) {\n    /** @type {?} */\n    const err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n    ((/** @type {?} */ (err)))[ERROR_DEBUG_CONTEXT] = context;\n    ((/** @type {?} */ (err)))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nfunction isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction viewDestroyedError(action) {\n    return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Factory for ViewDefinitions/NgModuleDefinitions.\n * We use a function so we can reexeute it in case an error happens and use the given logger\n * function to log the error from the definition of the node, which is shown in all browser\n * logs.\n * @record\n * @template D\n */\nfunction DefinitionFactory() { }\n/**\n * Function to call console.error at the right source location. This is an indirection\n * via another function as browser will log the location that actually called\n * `console.error`.\n * @record\n */\nfunction NodeLogger() { }\n/**\n * @record\n * @template DF\n */\nfunction Definition() { }\nif (false) {\n    /** @type {?} */\n    Definition.prototype.factory;\n}\n/**\n * @record\n */\nfunction NgModuleDefinition() { }\nif (false) {\n    /** @type {?} */\n    NgModuleDefinition.prototype.providers;\n    /** @type {?} */\n    NgModuleDefinition.prototype.providersByKey;\n    /** @type {?} */\n    NgModuleDefinition.prototype.modules;\n    /** @type {?} */\n    NgModuleDefinition.prototype.isRoot;\n}\n/**\n * @record\n */\nfunction NgModuleDefinitionFactory() { }\n/**\n * @record\n */\nfunction ViewDefinition() { }\nif (false) {\n    /** @type {?} */\n    ViewDefinition.prototype.flags;\n    /** @type {?} */\n    ViewDefinition.prototype.updateDirectives;\n    /** @type {?} */\n    ViewDefinition.prototype.updateRenderer;\n    /** @type {?} */\n    ViewDefinition.prototype.handleEvent;\n    /**\n     * Order: Depth first.\n     * Especially providers are before elements / anchors.\n     * @type {?}\n     */\n    ViewDefinition.prototype.nodes;\n    /**\n     * aggregated NodeFlags for all nodes *\n     * @type {?}\n     */\n    ViewDefinition.prototype.nodeFlags;\n    /** @type {?} */\n    ViewDefinition.prototype.rootNodeFlags;\n    /** @type {?} */\n    ViewDefinition.prototype.lastRenderRootNode;\n    /** @type {?} */\n    ViewDefinition.prototype.bindingCount;\n    /** @type {?} */\n    ViewDefinition.prototype.outputCount;\n    /**\n     * Binary or of all query ids that are matched by one of the nodes.\n     * This includes query ids from templates as well.\n     * Used as a bloom filter.\n     * @type {?}\n     */\n    ViewDefinition.prototype.nodeMatchedQueries;\n}\n/**\n * @record\n */\nfunction ViewDefinitionFactory() { }\n/**\n * @record\n */\nfunction ViewUpdateFn() { }\n/**\n * @record\n */\nfunction NodeCheckFn() { }\n/** @enum {number} */\nconst ArgumentType = {\n    Inline: 0, Dynamic: 1,\n};\n/**\n * @record\n */\nfunction ViewHandleEventFn() { }\n/** @enum {number} */\nconst ViewFlags = {\n    None: 0,\n    OnPush: 2,\n};\n/**\n * A node definition in the view.\n *\n * Note: We use one type for all nodes so that loops that loop over all nodes\n * of a ViewDefinition stay monomorphic!\n * @record\n */\nfunction NodeDef() { }\nif (false) {\n    /** @type {?} */\n    NodeDef.prototype.flags;\n    /** @type {?} */\n    NodeDef.prototype.nodeIndex;\n    /** @type {?} */\n    NodeDef.prototype.checkIndex;\n    /** @type {?} */\n    NodeDef.prototype.parent;\n    /** @type {?} */\n    NodeDef.prototype.renderParent;\n    /**\n     * this is checked against NgContentDef.index to find matched nodes\n     * @type {?}\n     */\n    NodeDef.prototype.ngContentIndex;\n    /**\n     * number of transitive children\n     * @type {?}\n     */\n    NodeDef.prototype.childCount;\n    /**\n     * aggregated NodeFlags for all transitive children (does not include self) *\n     * @type {?}\n     */\n    NodeDef.prototype.childFlags;\n    /**\n     * aggregated NodeFlags for all direct children (does not include self) *\n     * @type {?}\n     */\n    NodeDef.prototype.directChildFlags;\n    /** @type {?} */\n    NodeDef.prototype.bindingIndex;\n    /** @type {?} */\n    NodeDef.prototype.bindings;\n    /** @type {?} */\n    NodeDef.prototype.bindingFlags;\n    /** @type {?} */\n    NodeDef.prototype.outputIndex;\n    /** @type {?} */\n    NodeDef.prototype.outputs;\n    /**\n     * references that the user placed on the element\n     * @type {?}\n     */\n    NodeDef.prototype.references;\n    /**\n     * ids and value types of all queries that are matched by this node.\n     * @type {?}\n     */\n    NodeDef.prototype.matchedQueries;\n    /**\n     * Binary or of all matched query ids of this node.\n     * @type {?}\n     */\n    NodeDef.prototype.matchedQueryIds;\n    /**\n     * Binary or of all query ids that are matched by one of the children.\n     * This includes query ids from templates as well.\n     * Used as a bloom filter.\n     * @type {?}\n     */\n    NodeDef.prototype.childMatchedQueries;\n    /** @type {?} */\n    NodeDef.prototype.element;\n    /** @type {?} */\n    NodeDef.prototype.provider;\n    /** @type {?} */\n    NodeDef.prototype.text;\n    /** @type {?} */\n    NodeDef.prototype.query;\n    /** @type {?} */\n    NodeDef.prototype.ngContent;\n}\n/** @enum {number} */\nconst NodeFlags = {\n    None: 0,\n    TypeElement: 1,\n    TypeText: 2,\n    ProjectedTemplate: 4,\n    CatRenderNode: 3,\n    TypeNgContent: 8,\n    TypePipe: 16,\n    TypePureArray: 32,\n    TypePureObject: 64,\n    TypePurePipe: 128,\n    CatPureExpression: 224,\n    TypeValueProvider: 256,\n    TypeClassProvider: 512,\n    TypeFactoryProvider: 1024,\n    TypeUseExistingProvider: 2048,\n    LazyProvider: 4096,\n    PrivateProvider: 8192,\n    TypeDirective: 16384,\n    Component: 32768,\n    CatProviderNoDirective: 3840,\n    CatProvider: 20224,\n    OnInit: 65536,\n    OnDestroy: 131072,\n    DoCheck: 262144,\n    OnChanges: 524288,\n    AfterContentInit: 1048576,\n    AfterContentChecked: 2097152,\n    AfterViewInit: 4194304,\n    AfterViewChecked: 8388608,\n    EmbeddedViews: 16777216,\n    ComponentView: 33554432,\n    TypeContentQuery: 67108864,\n    TypeViewQuery: 134217728,\n    StaticQuery: 268435456,\n    DynamicQuery: 536870912,\n    TypeNgModule: 1073741824,\n    CatQuery: 201326592,\n    // mutually exclusive values...\n    Types: 201347067,\n};\n/**\n * @record\n */\nfunction BindingDef() { }\nif (false) {\n    /** @type {?} */\n    BindingDef.prototype.flags;\n    /** @type {?} */\n    BindingDef.prototype.ns;\n    /** @type {?} */\n    BindingDef.prototype.name;\n    /** @type {?} */\n    BindingDef.prototype.nonMinifiedName;\n    /** @type {?} */\n    BindingDef.prototype.securityContext;\n    /** @type {?} */\n    BindingDef.prototype.suffix;\n}\n/** @enum {number} */\nconst BindingFlags = {\n    TypeElementAttribute: 1,\n    TypeElementClass: 2,\n    TypeElementStyle: 4,\n    TypeProperty: 8,\n    SyntheticProperty: 16,\n    SyntheticHostProperty: 32,\n    CatSyntheticProperty: 48,\n    // mutually exclusive values...\n    Types: 15,\n};\n/**\n * @record\n */\nfunction OutputDef() { }\nif (false) {\n    /** @type {?} */\n    OutputDef.prototype.type;\n    /** @type {?} */\n    OutputDef.prototype.target;\n    /** @type {?} */\n    OutputDef.prototype.eventName;\n    /** @type {?} */\n    OutputDef.prototype.propName;\n}\n/** @enum {number} */\nconst OutputType = {\n    ElementOutput: 0, DirectiveOutput: 1,\n};\n/** @enum {number} */\nconst QueryValueType = {\n    ElementRef: 0,\n    RenderElement: 1,\n    TemplateRef: 2,\n    ViewContainerRef: 3,\n    Provider: 4,\n};\n/**\n * @record\n */\nfunction ElementDef() { }\nif (false) {\n    /** @type {?} */\n    ElementDef.prototype.name;\n    /** @type {?} */\n    ElementDef.prototype.ns;\n    /**\n     * ns, name, value\n     * @type {?}\n     */\n    ElementDef.prototype.attrs;\n    /** @type {?} */\n    ElementDef.prototype.template;\n    /** @type {?} */\n    ElementDef.prototype.componentProvider;\n    /** @type {?} */\n    ElementDef.prototype.componentRendererType;\n    /** @type {?} */\n    ElementDef.prototype.componentView;\n    /**\n     * visible public providers for DI in the view,\n     * as see from this element. This does not include private providers.\n     * @type {?}\n     */\n    ElementDef.prototype.publicProviders;\n    /**\n     * same as visiblePublicProviders, but also includes private providers\n     * that are located on this element.\n     * @type {?}\n     */\n    ElementDef.prototype.allProviders;\n    /** @type {?} */\n    ElementDef.prototype.handleEvent;\n}\n/**\n * @record\n */\nfunction ElementHandleEventFn() { }\n/**\n * @record\n */\nfunction ProviderDef() { }\nif (false) {\n    /** @type {?} */\n    ProviderDef.prototype.token;\n    /** @type {?} */\n    ProviderDef.prototype.value;\n    /** @type {?} */\n    ProviderDef.prototype.deps;\n}\n/**\n * @record\n */\nfunction NgModuleProviderDef() { }\nif (false) {\n    /** @type {?} */\n    NgModuleProviderDef.prototype.flags;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.index;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.token;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.value;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.deps;\n}\n/**\n * @record\n */\nfunction DepDef() { }\nif (false) {\n    /** @type {?} */\n    DepDef.prototype.flags;\n    /** @type {?} */\n    DepDef.prototype.token;\n    /** @type {?} */\n    DepDef.prototype.tokenKey;\n}\n/** @enum {number} */\nconst DepFlags = {\n    None: 0,\n    SkipSelf: 1,\n    Optional: 2,\n    Self: 4,\n    Value: 8,\n};\n/**\n * @record\n */\nfunction TextDef() { }\nif (false) {\n    /** @type {?} */\n    TextDef.prototype.prefix;\n}\n/**\n * @record\n */\nfunction QueryDef() { }\nif (false) {\n    /** @type {?} */\n    QueryDef.prototype.id;\n    /** @type {?} */\n    QueryDef.prototype.filterId;\n    /** @type {?} */\n    QueryDef.prototype.bindings;\n}\n/**\n * @record\n */\nfunction QueryBindingDef() { }\nif (false) {\n    /** @type {?} */\n    QueryBindingDef.prototype.propName;\n    /** @type {?} */\n    QueryBindingDef.prototype.bindingType;\n}\n/** @enum {number} */\nconst QueryBindingType = {\n    First: 0, All: 1,\n};\n/**\n * @record\n */\nfunction NgContentDef() { }\nif (false) {\n    /**\n     * this index is checked against NodeDef.ngContentIndex to find the nodes\n     * that are matched by this ng-content.\n     * Note that a NodeDef with an ng-content can be reprojected, i.e.\n     * have a ngContentIndex on its own.\n     * @type {?}\n     */\n    NgContentDef.prototype.index;\n}\n/**\n * @record\n */\nfunction NgModuleData() { }\nif (false) {\n    /** @type {?} */\n    NgModuleData.prototype._def;\n    /** @type {?} */\n    NgModuleData.prototype._parent;\n    /** @type {?} */\n    NgModuleData.prototype._providers;\n}\n/**\n * View instance data.\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nfunction ViewData() { }\nif (false) {\n    /** @type {?} */\n    ViewData.prototype.def;\n    /** @type {?} */\n    ViewData.prototype.root;\n    /** @type {?} */\n    ViewData.prototype.renderer;\n    /** @type {?} */\n    ViewData.prototype.parentNodeDef;\n    /** @type {?} */\n    ViewData.prototype.parent;\n    /** @type {?} */\n    ViewData.prototype.viewContainerParent;\n    /** @type {?} */\n    ViewData.prototype.component;\n    /** @type {?} */\n    ViewData.prototype.context;\n    /** @type {?} */\n    ViewData.prototype.nodes;\n    /** @type {?} */\n    ViewData.prototype.state;\n    /** @type {?} */\n    ViewData.prototype.oldValues;\n    /** @type {?} */\n    ViewData.prototype.disposables;\n    /** @type {?} */\n    ViewData.prototype.initIndex;\n}\n/** @enum {number} */\nconst ViewState = {\n    BeforeFirstCheck: 1,\n    FirstCheck: 2,\n    Attached: 4,\n    ChecksEnabled: 8,\n    IsProjectedView: 16,\n    CheckProjectedView: 32,\n    CheckProjectedViews: 64,\n    Destroyed: 128,\n    // InitState Uses 3 bits\n    InitState_Mask: 1792,\n    InitState_BeforeInit: 0,\n    InitState_CallingOnInit: 256,\n    InitState_CallingAfterContentInit: 512,\n    InitState_CallingAfterViewInit: 768,\n    InitState_AfterInit: 1024,\n    CatDetectChanges: 12,\n    CatInit: 13,\n};\n// Called before each cycle of a view's check to detect whether this is in the\n// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\n// lifecycle methods. Returns true if this check cycle should call lifecycle\n// methods.\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nfunction shiftInitState(view, priorInitState, newInitState) {\n    // Only update the InitState if we are currently in the prior state.\n    // For example, only move into CallingInit if we are in BeforeInit. Only\n    // move into CallingContentInit if we are in CallingInit. Normally this will\n    // always be true because of how checkCycle is called in checkAndUpdateView.\n    // However, if checkAndUpdateView is called recursively or if an exception is\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n    // from the beginning. This ensures the state is monotonically increasing,\n    // terminating in the AfterInit state, which ensures the Init methods are called\n    // at least once and only once.\n    /** @type {?} */\n    const state = view.state;\n    /** @type {?} */\n    const initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n// Returns true if the lifecycle init method should be called for the node with\n// the given init index.\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nfunction shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * @record\n */\nfunction DisposableFn() { }\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nclass NodeData {\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NodeData.prototype.__brand;\n}\n/**\n * Data for an instantiated NodeType.Text.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nfunction TextData() { }\nif (false) {\n    /** @type {?} */\n    TextData.prototype.renderText;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asTextData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Data for an instantiated NodeType.Element.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nfunction ElementData() { }\nif (false) {\n    /** @type {?} */\n    ElementData.prototype.renderElement;\n    /** @type {?} */\n    ElementData.prototype.componentView;\n    /** @type {?} */\n    ElementData.prototype.viewContainer;\n    /** @type {?} */\n    ElementData.prototype.template;\n}\n/**\n * @record\n */\nfunction ViewContainerData() { }\nif (false) {\n    /** @type {?} */\n    ViewContainerData.prototype._embeddedViews;\n}\n/**\n * @record\n */\nfunction TemplateData() { }\nif (false) {\n    /** @type {?} */\n    TemplateData.prototype._projectedViews;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asElementData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Data for an instantiated NodeType.Provider.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nfunction ProviderData() { }\nif (false) {\n    /** @type {?} */\n    ProviderData.prototype.instance;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asProviderData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Data for an instantiated NodeType.PureExpression.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nfunction PureExpressionData() { }\nif (false) {\n    /** @type {?} */\n    PureExpressionData.prototype.value;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asPureExpressionData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asQueryList(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * @record\n */\nfunction RootData() { }\nif (false) {\n    /** @type {?} */\n    RootData.prototype.injector;\n    /** @type {?} */\n    RootData.prototype.ngModule;\n    /** @type {?} */\n    RootData.prototype.projectableNodes;\n    /** @type {?} */\n    RootData.prototype.selectorOrNode;\n    /** @type {?} */\n    RootData.prototype.renderer;\n    /** @type {?} */\n    RootData.prototype.rendererFactory;\n    /** @type {?} */\n    RootData.prototype.errorHandler;\n    /** @type {?} */\n    RootData.prototype.sanitizer;\n}\n/**\n * @abstract\n */\nclass DebugContext {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.view = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.nodeIndex = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.componentRenderElement = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.renderNode = function () { };\n    /**\n     * @abstract\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext.prototype.logError = function (console, values) { };\n}\n/** @enum {number} */\nconst CheckType = {\n    CheckAndUpdate: 0, CheckNoChanges: 1,\n};\n/**\n * @record\n */\nfunction ProviderOverride() { }\nif (false) {\n    /** @type {?} */\n    ProviderOverride.prototype.token;\n    /** @type {?} */\n    ProviderOverride.prototype.flags;\n    /** @type {?} */\n    ProviderOverride.prototype.value;\n    /** @type {?} */\n    ProviderOverride.prototype.deps;\n    /** @type {?} */\n    ProviderOverride.prototype.deprecatedBehavior;\n}\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n * @type {?}\n */\nconst Services = {\n    setCurrentNode: (/** @type {?} */ (undefined)),\n    createRootView: (/** @type {?} */ (undefined)),\n    createEmbeddedView: (/** @type {?} */ (undefined)),\n    createComponentView: (/** @type {?} */ (undefined)),\n    createNgModuleRef: (/** @type {?} */ (undefined)),\n    overrideProvider: (/** @type {?} */ (undefined)),\n    overrideComponentView: (/** @type {?} */ (undefined)),\n    clearOverrides: (/** @type {?} */ (undefined)),\n    checkAndUpdateView: (/** @type {?} */ (undefined)),\n    checkNoChangesView: (/** @type {?} */ (undefined)),\n    destroyView: (/** @type {?} */ (undefined)),\n    resolveDep: (/** @type {?} */ (undefined)),\n    createDebugContext: (/** @type {?} */ (undefined)),\n    handleEvent: (/** @type {?} */ (undefined)),\n    updateDirectives: (/** @type {?} */ (undefined)),\n    updateRenderer: (/** @type {?} */ (undefined)),\n    dirtyParentQueries: (/** @type {?} */ (undefined)),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NOOP = (/**\n * @return {?}\n */\n() => { });\n/** @type {?} */\nconst _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nfunction tokenKey(token) {\n    /** @type {?} */\n    let key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        /** @type {?} */\n        const globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        /** @type {?} */\n        const oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\n/** @type {?} */\nconst UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n/** @type {?} */\nconst EMPTY_RENDERER_TYPE_ID = '$$empty';\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} values\n * @return {?}\n */\nfunction createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\n/** @type {?} */\nlet _renderCompCount$1 = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nfunction resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        // first time we see this RendererType2. Initialize it...\n        /** @type {?} */\n        const isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = `c${_renderCompCount$1++}`;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkBinding(view, def, bindingIdx, value) {\n    /** @type {?} */\n    const oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkBindingNoChanges(view, def, bindingIdx, value) {\n    /** @type {?} */\n    const oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual$1(oldValue, value)) {\n        /** @type {?} */\n        const bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), `${bindingName}: ${oldValue}`, `${bindingName}: ${value}`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markParentViewsForCheck(view) {\n    /** @type {?} */\n    let currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nfunction markParentViewsForCheckProjectedViews(view, endView) {\n    /** @type {?} */\n    let currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        const startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction declaredViewContainer(view) {\n    if (view.parent) {\n        /** @type {?} */\n        const parentView = view.parent;\n        return asElementData(parentView, (/** @type {?} */ (view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nfunction viewParentEl(view) {\n    /** @type {?} */\n    const parentView = view.parent;\n    if (parentView) {\n        return (/** @type {?} */ (view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nfunction elementEventFullName(target, name) {\n    return target ? `${target}:${name}` : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction isComponentView(view) {\n    return !!view.parent && !!((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction isEmbeddedView(view) {\n    return !!view.parent && !((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nfunction filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nfunction splitMatchedQueriesDsl(matchedQueriesDsl) {\n    /** @type {?} */\n    const matchedQueries = {};\n    /** @type {?} */\n    let matchedQueryIds = 0;\n    /** @type {?} */\n    const references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([queryId, valueType]) => {\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        }));\n    }\n    return { matchedQueries, references, matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nfunction splitDepsDsl(deps, sourceName) {\n    return deps.map((/**\n     * @param {?} value\n     * @return {?}\n     */\n    value => {\n        /** @type {?} */\n        let token;\n        /** @type {?} */\n        let flags;\n        if (Array.isArray(value)) {\n            [flags, token] = value;\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags, token, tokenKey: tokenKey(token) };\n    }));\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction getParentRenderElement(view, renderHost, def) {\n    /** @type {?} */\n    let renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            ((/** @type {?} */ (renderParent.element)).componentRendererType &&\n                (/** @type {?} */ ((/** @type {?} */ (renderParent.element)).componentRendererType)).encapsulation ===\n                    ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, (/** @type {?} */ (def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\n/** @type {?} */\nconst DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nfunction resolveDefinition(factory) {\n    /** @type {?} */\n    let value = (/** @type {?} */ ((/** @type {?} */ (DEFINITION_CACHE.get(factory)))));\n    if (!value) {\n        value = factory((/**\n         * @return {?}\n         */\n        () => NOOP));\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction rootRenderNodes(view) {\n    /** @type {?} */\n    const renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/** @enum {number} */\nconst RenderNodeAction = {\n    Collect: 0, AppendChild: 1, InsertBefore: 2, RemoveChild: 3,\n};\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, (/** @type {?} */ (view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    let compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    const hostView = (/** @type {?} */ (compView)).parent;\n    /** @type {?} */\n    const hostElDef = viewParentEl((/** @type {?} */ (compView)));\n    /** @type {?} */\n    const startIndex = (/** @type {?} */ (hostElDef)).nodeIndex + 1;\n    /** @type {?} */\n    const endIndex = (/** @type {?} */ (hostElDef)).nodeIndex + (/** @type {?} */ (hostElDef)).childCount;\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = (/** @type {?} */ (hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode((/** @type {?} */ (hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!(/** @type {?} */ (hostView)).parent) {\n        // a root view\n        /** @type {?} */\n        const projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (let i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, (/** @type {?} */ (nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        /** @type {?} */\n        const rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                /** @type {?} */\n                const compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            const embeddedViews = (/** @type {?} */ (asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (let k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !(/** @type {?} */ (nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    const renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            (/** @type {?} */ (target)).push(renderNode);\n            break;\n    }\n}\n/** @type {?} */\nconst NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nfunction splitNamespace(name) {\n    if (name[0] === ':') {\n        /** @type {?} */\n        const match = (/** @type {?} */ (name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nfunction calcBindingFlags(bindings) {\n    /** @type {?} */\n    let flags = 0;\n    for (let i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nfunction interpolate(valueCount, constAndInterp) {\n    /** @type {?} */\n    let result = '';\n    for (let i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nfunction inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(`Does not support more than 9 expressions`);\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\n/** @type {?} */\nconst EMPTY_ARRAY$3 = [];\n/** @type {?} */\nconst EMPTY_MAP = {};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst UNDEFINED_VALUE = new Object();\n/** @type {?} */\nconst InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey = tokenKey(INJECTOR);\n/** @type {?} */\nconst NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nfunction moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    const depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags, token, value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nfunction moduleDef(providers) {\n    /** @type {?} */\n    const providersByKey = {};\n    /** @type {?} */\n    const modules = [];\n    /** @type {?} */\n    let isRoot = false;\n    for (let i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        const provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey,\n        providers,\n        modules,\n        isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction initNgModule(data) {\n    /** @type {?} */\n    const def = data._def;\n    /** @type {?} */\n    const providers = data._providers = new Array(def.providers.length);\n    for (let i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        const provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nfunction resolveNgModuleDep(data, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    /** @type {?} */\n    const former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        /** @type {?} */\n        const tokenKey = depDef.tokenKey;\n        switch (tokenKey) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        /** @type {?} */\n        const providerDef = data._def.providersByKey[tokenKey];\n        /** @type {?} */\n        let injectableDef;\n        if (providerDef) {\n            /** @type {?} */\n            let providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n            /** @type {?} */\n            const index = data._providers.length;\n            data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    /** @type {?} */\n    let injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = new Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new ctor(...depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory(...depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callNgModuleLifecycle(ngModule, lifecycles) {\n    /** @type {?} */\n    const def = ngModule._def;\n    /** @type {?} */\n    const destroyed = new Set();\n    for (let i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        const provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            /** @type {?} */\n            const instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                /** @type {?} */\n                const onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    /** @type {?} */\n    let embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, (/** @type {?} */ (viewIndex)), view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    /** @type {?} */\n    const prevView = (/** @type {?} */ (viewIndex)) > 0 ? embeddedViews[(/** @type {?} */ (viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n    /** @type {?} */\n    const dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    /** @type {?} */\n    let projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate((/** @type {?} */ (view.parent)).def, (/** @type {?} */ (view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    /** @type {?} */\n    let parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nfunction detachEmbeddedView(elementData, viewIndex) {\n    /** @type {?} */\n    const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    /** @type {?} */\n    const view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView$1(view);\n    return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    /** @type {?} */\n    const dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        /** @type {?} */\n        const projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nfunction moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    /** @type {?} */\n    const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    /** @type {?} */\n    const view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView$1(view);\n    /** @type {?} */\n    const prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    /** @type {?} */\n    const prevRenderNode = prevView ? renderNode(prevView, (/** @type {?} */ (prevView.def.lastRenderRootNode))) :\n        elementData.renderElement;\n    /** @type {?} */\n    const parentNode = view.renderer.parentNode(prevRenderNode);\n    /** @type {?} */\n    const nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction renderDetachView$1(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_CONTEXT = new Object();\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nfunction getComponentViewDefinitionFactory(componentFactory) {\n    return ((/** @type {?} */ (componentFactory))).viewDefFactory;\n}\nclass ComponentFactory_ extends ComponentFactory {\n    /**\n     * @param {?} selector\n     * @param {?} componentType\n     * @param {?} viewDefFactory\n     * @param {?} _inputs\n     * @param {?} _outputs\n     * @param {?} ngContentSelectors\n     */\n    constructor(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        super();\n        this.selector = selector;\n        this.componentType = componentType;\n        this._inputs = _inputs;\n        this._outputs = _outputs;\n        this.ngContentSelectors = ngContentSelectors;\n        this.viewDefFactory = viewDefFactory;\n    }\n    /**\n     * @return {?}\n     */\n    get inputs() {\n        /** @type {?} */\n        const inputsArr = [];\n        /** @type {?} */\n        const inputs = (/** @type {?} */ (this._inputs));\n        for (let propName in inputs) {\n            /** @type {?} */\n            const templateName = inputs[propName];\n            inputsArr.push({ propName, templateName });\n        }\n        return inputsArr;\n    }\n    /**\n     * @return {?}\n     */\n    get outputs() {\n        /** @type {?} */\n        const outputsArr = [];\n        for (let propName in this._outputs) {\n            /** @type {?} */\n            const templateName = this._outputs[propName];\n            outputsArr.push({ propName, templateName });\n        }\n        return outputsArr;\n    }\n    /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        /** @type {?} */\n        const viewDef = resolveDefinition(this.viewDefFactory);\n        /** @type {?} */\n        const componentNodeIndex = (/** @type {?} */ ((/** @type {?} */ (viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n        /** @type {?} */\n        const view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        /** @type {?} */\n        const component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ComponentFactory_.prototype.viewDefFactory;\n    /** @type {?} */\n    ComponentFactory_.prototype.selector;\n    /** @type {?} */\n    ComponentFactory_.prototype.componentType;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactory_.prototype._inputs;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactory_.prototype._outputs;\n    /** @type {?} */\n    ComponentFactory_.prototype.ngContentSelectors;\n}\nclass ComponentRef_ extends ComponentRef {\n    /**\n     * @param {?} _view\n     * @param {?} _viewRef\n     * @param {?} _component\n     */\n    constructor(_view, _viewRef, _component) {\n        super();\n        this._view = _view;\n        this._viewRef = _viewRef;\n        this._component = _component;\n        this._elDef = this._view.def.nodes[0];\n        this.hostView = _viewRef;\n        this.changeDetectorRef = _viewRef;\n        this.instance = _component;\n    }\n    /**\n     * @return {?}\n     */\n    get location() {\n        return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return new Injector_(this._view, this._elDef); }\n    /**\n     * @return {?}\n     */\n    get componentType() { return (/** @type {?} */ (this._component.constructor)); }\n    /**\n     * @return {?}\n     */\n    destroy() { this._viewRef.destroy(); }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._viewRef.onDestroy(callback); }\n}\nif (false) {\n    /** @type {?} */\n    ComponentRef_.prototype.hostView;\n    /** @type {?} */\n    ComponentRef_.prototype.instance;\n    /** @type {?} */\n    ComponentRef_.prototype.changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentRef_.prototype._elDef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentRef_.prototype._view;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentRef_.prototype._viewRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentRef_.prototype._component;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nfunction createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nclass ViewContainerRef_ {\n    /**\n     * @param {?} _view\n     * @param {?} _elDef\n     * @param {?} _data\n     */\n    constructor(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * \\@internal\n         */\n        this._embeddedViews = [];\n    }\n    /**\n     * @return {?}\n     */\n    get element() { return new ElementRef(this._data.renderElement); }\n    /**\n     * @return {?}\n     */\n    get injector() { return new Injector_(this._view, this._elDef); }\n    /**\n     * @deprecated No replacement\n     * @return {?}\n     */\n    get parentInjector() {\n        /** @type {?} */\n        let view = this._view;\n        /** @type {?} */\n        let elDef = this._elDef.parent;\n        while (!elDef && view) {\n            elDef = viewParentEl(view);\n            view = (/** @type {?} */ (view.parent));\n        }\n        return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n    }\n    /**\n     * @return {?}\n     */\n    clear() {\n        /** @type {?} */\n        const len = this._embeddedViews.length;\n        for (let i = len - 1; i >= 0; i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (detachEmbeddedView(this._data, i)));\n            Services.destroyView(view);\n        }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    get(index) {\n        /** @type {?} */\n        const view = this._embeddedViews[index];\n        if (view) {\n            /** @type {?} */\n            const ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    get length() { return this._embeddedViews.length; }\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    createEmbeddedView(templateRef, context, index) {\n        /** @type {?} */\n        const viewRef = templateRef.createEmbeddedView(context || (/** @type {?} */ ({})));\n        this.insert(viewRef, index);\n        return viewRef;\n    }\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        /** @type {?} */\n        const contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        /** @type {?} */\n        const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    insert(viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        const viewRef_ = (/** @type {?} */ (viewRef));\n        /** @type {?} */\n        const viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    move(viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        const previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    indexOf(viewRef) {\n        return this._embeddedViews.indexOf(((/** @type {?} */ (viewRef)))._view);\n    }\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    remove(index) {\n        /** @type {?} */\n        const viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    }\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    detach(index) {\n        /** @type {?} */\n        const view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewContainerRef_.prototype._embeddedViews;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewContainerRef_.prototype._view;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewContainerRef_.prototype._elDef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewContainerRef_.prototype._data;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nclass ViewRef_ {\n    /**\n     * @param {?} _view\n     */\n    constructor(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    /**\n     * @return {?}\n     */\n    get rootNodes() { return rootRenderNodes(this._view); }\n    /**\n     * @return {?}\n     */\n    get context() { return this._view.context; }\n    /**\n     * @return {?}\n     */\n    get destroyed() { return (this._view.state & 128 /* Destroyed */) !== 0; }\n    /**\n     * @return {?}\n     */\n    markForCheck() { markParentViewsForCheck(this._view); }\n    /**\n     * @return {?}\n     */\n    detach() { this._view.state &= ~4 /* Attached */; }\n    /**\n     * @return {?}\n     */\n    detectChanges() {\n        /** @type {?} */\n        const fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    checkNoChanges() { Services.checkNoChangesView(this._view); }\n    /**\n     * @return {?}\n     */\n    reattach() { this._view.state |= 4 /* Attached */; }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push((/** @type {?} */ (callback)));\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    }\n    /**\n     * @return {?}\n     */\n    detachFromAppRef() {\n        this._appRef = null;\n        renderDetachView$1(this._view);\n        Services.dirtyParentQueries(this._view);\n    }\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    attachToAppRef(appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    attachToViewContainerRef(vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef_.prototype._view;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewRef_.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewRef_.prototype._appRef;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nclass TemplateRef_ extends TemplateRef {\n    /**\n     * @param {?} _parentView\n     * @param {?} _def\n     */\n    constructor(_parentView, _def) {\n        super();\n        this._parentView = _parentView;\n        this._def = _def;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    createEmbeddedView(context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, (/** @type {?} */ ((/** @type {?} */ (this._def.element)).template)), context));\n    }\n    /**\n     * @return {?}\n     */\n    get elementRef() {\n        return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TemplateRef_.prototype._projectedViews;\n    /**\n     * @type {?}\n     * @private\n     */\n    TemplateRef_.prototype._parentView;\n    /**\n     * @type {?}\n     * @private\n     */\n    TemplateRef_.prototype._def;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nfunction createInjector$1(view, elDef) {\n    return new Injector_(view, elDef);\n}\nclass Injector_ {\n    /**\n     * @param {?} view\n     * @param {?} elDef\n     */\n    constructor(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n        /** @type {?} */\n        const allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token, tokenKey: tokenKey(token) }, notFoundValue);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Injector_.prototype.view;\n    /**\n     * @type {?}\n     * @private\n     */\n    Injector_.prototype.elDef;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction nodeValue(view, index) {\n    /** @type {?} */\n    const def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        /** @type {?} */\n        const elData = asElementData(view, def.nodeIndex);\n        return (/** @type {?} */ (def.element)).template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(`Illegal state: read nodeValue for node index ${index}`);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nclass RendererAdapter {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    createElement(parent, namespaceAndName) {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        /** @type {?} */\n        const el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    }\n    /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    createViewRoot(hostElement) { return hostElement; }\n    /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    createTemplateAnchor(parentElement) {\n        /** @type {?} */\n        const comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    }\n    /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    createText(parentElement, value) {\n        /** @type {?} */\n        const node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    }\n    /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    projectNodes(parentElement, nodes) {\n        for (let i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    }\n    /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    attachViewAfter(node, viewRootNodes) {\n        /** @type {?} */\n        const parentElement = this.delegate.parentNode(node);\n        /** @type {?} */\n        const nextSibling = this.delegate.nextSibling(node);\n        for (let i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    }\n    /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    detachView(viewRootNodes) {\n        for (let i = 0; i < viewRootNodes.length; i++) {\n            /** @type {?} */\n            const node = viewRootNodes[i];\n            /** @type {?} */\n            const parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    destroyView(hostElement, viewAllNodes) {\n        for (let i = 0; i < viewAllNodes.length; i++) {\n            (/** @type {?} */ (this.delegate.destroyNode))(viewAllNodes[i]);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, (/** @type {?} */ (callback)));\n    }\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    listenGlobal(target, name, callback) {\n        return this.delegate.listen(target, name, (/** @type {?} */ (callback)));\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    setElementProperty(renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    setElementAttribute(renderElement, namespaceAndName, attributeValue) {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    setBindingDebugInfo(renderElement, propertyName, propertyValue) { }\n    /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    setElementClass(renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    setElementStyle(renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    invokeElementMethod(renderElement, methodName, args) {\n        ((/** @type {?} */ (renderElement)))[methodName].apply(renderElement, args);\n    }\n    /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    setText(renderNode, text) { this.delegate.setValue(renderNode, text); }\n    /**\n     * @return {?}\n     */\n    animate() { throw new Error('Renderer.animate is no longer supported!'); }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RendererAdapter.prototype.delegate;\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nclass NgModuleRef_ {\n    /**\n     * @param {?} _moduleType\n     * @param {?} _parent\n     * @param {?} _bootstrapComponents\n     * @param {?} _def\n     */\n    constructor(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {\n        /** @type {?} */\n        let flags = 0 /* None */;\n        if (injectFlags & InjectFlags.SkipSelf) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & InjectFlags.Self) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    }\n    /**\n     * @return {?}\n     */\n    get instance() { return this.get(this._moduleType); }\n    /**\n     * @return {?}\n     */\n    get componentFactoryResolver() { return this.get(ComponentFactoryResolver); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._destroyed) {\n            throw new Error(`The ng module ${stringify(this.instance.constructor)} has already been destroyed.`);\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        (listener) => listener()));\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._destroyListeners.push(callback); }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgModuleRef_.prototype._destroyListeners;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgModuleRef_.prototype._destroyed;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._providers;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._modules;\n    /** @type {?} */\n    NgModuleRef_.prototype.injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgModuleRef_.prototype._moduleType;\n    /** @type {?} */\n    NgModuleRef_.prototype._parent;\n    /** @type {?} */\n    NgModuleRef_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef_.prototype._def;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RendererV1TokenKey = tokenKey(Renderer);\n/** @type {?} */\nconst Renderer2TokenKey = tokenKey(Renderer2);\n/** @type {?} */\nconst ElementRefTokenKey = tokenKey(ElementRef);\n/** @type {?} */\nconst ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n/** @type {?} */\nconst TemplateRefTokenKey = tokenKey(TemplateRef);\n/** @type {?} */\nconst ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n/** @type {?} */\nconst InjectorRefTokenKey$1 = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey$1 = tokenKey(INJECTOR);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nfunction directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    /** @type {?} */\n    const bindings = [];\n    if (props) {\n        for (let prop in props) {\n            const [bindingIndex, nonMinifiedName] = props[prop];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    /** @type {?} */\n    const outputDefs = [];\n    if (outputs) {\n        for (let propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nfunction providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nfunction _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    const depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references,\n        ngContentIndex: -1, childCount, bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs,\n        element: null,\n        provider: { token, value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createProviderInstance(view, def) {\n    return _createProviderInstance$1(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createPipeInstance(view, def) {\n    // deps are looked up from component.\n    /** @type {?} */\n    let compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    // pipes can see the private services of the component\n    /** @type {?} */\n    const allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass((/** @type {?} */ (compView.parent)), (/** @type {?} */ (viewParentEl(compView))), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createDirectiveInstance(view, def) {\n    // components can see other private services, other directives can't.\n    /** @type {?} */\n    const allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    // directives are always eager and classes!\n    /** @type {?} */\n    const instance = createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);\n    if (def.outputs.length) {\n        for (let i = 0; i < def.outputs.length; i++) {\n            /** @type {?} */\n            const output = def.outputs[i];\n            /** @type {?} */\n            const outputObservable = instance[(/** @type {?} */ (output.propName))];\n            if (isObservable(outputObservable)) {\n                /** @type {?} */\n                const subscription = outputObservable.subscribe(eventHandlerClosure(view, (/** @type {?} */ (def.parent)).nodeIndex, output.eventName));\n                (/** @type {?} */ (view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(`@Output ${output.propName} not initialized in '${instance.constructor.name}'.`);\n            }\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return (/**\n     * @param {?} event\n     * @return {?}\n     */\n    (event) => dispatchEvent(view, index, eventName, event));\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    const directive = providerData.instance;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    let changes = (/** @type {?} */ (undefined));\n    /** @type {?} */\n    const bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateDirectiveDynamic(view, def, values) {\n    /** @type {?} */\n    const providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    const directive = providerData.instance;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    let changes = (/** @type {?} */ (undefined));\n    for (let i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance$1(view, def) {\n    // private services can see other private services\n    /** @type {?} */\n    const allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    /** @type {?} */\n    const providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return (/** @type {?} */ (providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = new Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new ctor(...depValues);\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory(...depValues);\n    }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\n/** @type {?} */\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nfunction resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    /** @type {?} */\n    const startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    /** @type {?} */\n    const tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && (/** @type {?} */ (elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = (/** @type {?} */ (elDef.parent));\n    }\n    /** @type {?} */\n    let searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    /** @type {?} */\n                    const compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    /** @type {?} */\n                    const compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if ((/** @type {?} */ (elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    /** @type {?} */\n                    let cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey$1:\n                case INJECTORRefTokenKey$1:\n                    return createInjector$1(searchView, elDef);\n                default:\n                    /** @type {?} */\n                    const providerDef = (/** @type {?} */ ((allowPrivateServices ? (/** @type {?} */ (elDef.element)).allProviders :\n                        (/** @type {?} */ (elDef.element)).publicProviders)))[tokenKey];\n                    if (providerDef) {\n                        /** @type {?} */\n                        let providerData = asProviderData(searchView, providerDef.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance$1(searchView, providerDef) };\n                            searchView.nodes[providerDef.nodeIndex] = (/** @type {?} */ (providerData));\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = (/** @type {?} */ (viewParentEl(searchView)));\n        searchView = (/** @type {?} */ (searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    /** @type {?} */\n    const value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    /** @type {?} */\n    let compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        /** @type {?} */\n        const compView = asElementData(view, (/** @type {?} */ (def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    /** @type {?} */\n    const binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    const propName = (/** @type {?} */ (binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        /** @type {?} */\n        const oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        /** @type {?} */\n        const binding = def.bindings[bindingIdx];\n        changes[(/** @type {?} */ (binding.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n// called during a pre-order traversal of the view tree (that is calling the\n// parent hooks before the child hooks) these events are sent in using a\n// post-order traversal of the tree (children before parents). This changes the\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n// expected nodeIndex which a ngOnInit should be called. When sending\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\n// ensure that despite being called recursively or after picking up after an\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n// correct nodes. Consider for example, the following (where E is an element\n// and D is a directive)\n//  Tree:       pre-order index  post-order index\n//    E1        0                6\n//      E2      1                1\n//       D3     2                0\n//      E4      3                5\n//       E5     4                4\n//        E6    5                2\n//        E7    6                3\n// As can be seen, the post-order index has an unclear relationship to the\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n// are stable (will be the same for the same view regardless of exceptions or\n// recursion) we just need to count them which will roughly correspond to the\n// post-order index (it skips elements and directives that do not have\n// lifecycle hooks).\n//\n// For example, if an exception is raised in the E6.onAfterViewInit() the\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\n// the view will begin getting ngAfterViewInit() called until a check and\n// pass is complete.\n//\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\n// has already been called in the recursively called checkAnUpdateView().\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    /** @type {?} */\n    const nodes = view.def.nodes;\n    /** @type {?} */\n    let initIndex = 0;\n    for (let i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = nodes[i];\n        /** @type {?} */\n        let parent = nodeDef.parent;\n        if (!parent && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent && (parent.flags & 1 /* TypeElement */) &&\n            i === parent.nodeIndex + parent.childCount) {\n            // last child of an element\n            if (parent.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);\n            }\n            parent = parent.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (let i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    /** @type {?} */\n    const providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    /** @type {?} */\n    const provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ComponentFactoryResolver$1 extends ComponentFactoryResolver {\n    /**\n     * @param {?=} ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    constructor(ngModule) {\n        super();\n        this.ngModule = ngModule;\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        ngDevMode && assertComponentType(component);\n        /** @type {?} */\n        const componentDef = (/** @type {?} */ (getComponentDef(component)));\n        return new ComponentFactory$1(componentDef, this.ngModule);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactoryResolver$1.prototype.ngModule;\n}\n/**\n * @param {?} map\n * @return {?}\n */\nfunction toRefArray(map) {\n    /** @type {?} */\n    const array = [];\n    for (let nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            /** @type {?} */\n            const minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/**\n * A change detection scheduler token for {\\@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {\\@link ROOT_CONTEXT} token.\n * @type {?}\n */\nconst SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => defaultScheduler),\n});\n/**\n * @param {?} rootViewInjector\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction createChainedInjector(rootViewInjector, moduleInjector) {\n    return {\n        get: (/**\n         * @template T\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @param {?=} flags\n         * @return {?}\n         */\n        (token, notFoundValue, flags) => {\n            /** @type {?} */\n            const value = rootViewInjector.get(token, (/** @type {?} */ (NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)), flags);\n            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                // Return the value from the root element injector when\n                // - it provides it\n                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                // - the module injector should not be checked\n                //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                return value;\n            }\n            return moduleInjector.get(token, notFoundValue, flags);\n        })\n    };\n}\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nclass ComponentFactory$1 extends ComponentFactory {\n    /**\n     * @param {?} componentDef The component definition.\n     * @param {?=} ngModule The NgModuleRef to which the factory is bound.\n     */\n    constructor(componentDef, ngModule) {\n        super();\n        this.componentDef = componentDef;\n        this.ngModule = ngModule;\n        this.componentType = componentDef.type;\n        // default to 'div' in case this component has an attribute selector\n        this.selector = (/** @type {?} */ (componentDef.selectors[0][0])) || 'div';\n        this.ngContentSelectors =\n            componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n        this.isBoundToModule = !!ngModule;\n    }\n    /**\n     * @return {?}\n     */\n    get inputs() {\n        return toRefArray(this.componentDef.inputs);\n    }\n    /**\n     * @return {?}\n     */\n    get outputs() {\n        return toRefArray(this.componentDef.outputs);\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        ngModule = ngModule || this.ngModule;\n        /** @type {?} */\n        const rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n        /** @type {?} */\n        const rendererFactory = (/** @type {?} */ (rootViewInjector.get(RendererFactory2, domRendererFactory3)));\n        /** @type {?} */\n        const sanitizer = rootViewInjector.get(Sanitizer, null);\n        // Ensure that the namespace for the root node is correct,\n        // otherwise the browser might not render out the element properly.\n        namespaceHTMLInternal();\n        /** @type {?} */\n        const hostRNode = rootSelectorOrNode ?\n            locateHostElement(rendererFactory, rootSelectorOrNode) :\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef));\n        /** @type {?} */\n        const rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n            16 /* CheckAlways */ | 512 /* IsRoot */;\n        // Check whether this Component needs to be isolated from other components, i.e. whether it\n        // should be placed into its own (empty) root context or existing root context should be used.\n        // Note: this is internal-only convention and might change in the future, so it should not be\n        // relied upon externally.\n        /** @type {?} */\n        const isIsolated = typeof rootSelectorOrNode === 'string' &&\n            /^#root-ng-internal-isolated-\\d+/.test(rootSelectorOrNode);\n        /** @type {?} */\n        const rootContext = createRootContext();\n        /** @type {?} */\n        const renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        if (rootSelectorOrNode && hostRNode) {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                hostRNode.setAttribute('ng-version', VERSION.full);\n        }\n        // Create the root view. Uses empty TView and ContentTemplate.\n        /** @type {?} */\n        const rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, sanitizer, rootViewInjector);\n        // rootView is the parent when bootstrapping\n        /** @type {?} */\n        const oldLView = enterView(rootLView, null);\n        /** @type {?} */\n        let component;\n        /** @type {?} */\n        let tElementNode;\n        // Will become true if the `try` block executes with no errors.\n        /** @type {?} */\n        let safeToRunHooks = false;\n        try {\n            /** @type {?} */\n            const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n            tElementNode = (/** @type {?} */ (getTNode(0, rootLView)));\n            if (projectableNodes) {\n                // projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n                // case). Here we do normalize passed data structure to be an array of arrays to avoid\n                // complex checks down the line.\n                tElementNode.projection =\n                    projectableNodes.map((/**\n                     * @param {?} nodesforSlot\n                     * @return {?}\n                     */\n                    (nodesforSlot) => { return Array.from(nodesforSlot); }));\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n            addToViewTree(rootLView, componentView);\n            refreshDescendantViews(rootLView);\n            safeToRunHooks = true;\n        }\n        finally {\n            leaveView(oldLView, safeToRunHooks);\n        }\n        /** @type {?} */\n        const componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n        if (!rootSelectorOrNode || isIsolated) {\n            // The host element of the internal or isolated root view is attached to the component's host\n            // view node.\n            (/** @type {?} */ (componentRef.hostView._tViewNode)).child = tElementNode;\n        }\n        return componentRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    ComponentFactory$1.prototype.selector;\n    /** @type {?} */\n    ComponentFactory$1.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory$1.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactory$1.prototype.isBoundToModule;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactory$1.prototype.componentDef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactory$1.prototype.ngModule;\n}\n/** @type {?} */\nconst componentFactoryResolver = new ComponentFactoryResolver$1();\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @return {?} The ComponentFactoryResolver instance to use\n */\nfunction injectComponentFactoryResolver() {\n    return componentFactoryResolver;\n}\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nclass ComponentRef$1 extends ComponentRef {\n    /**\n     * @param {?} componentType\n     * @param {?} instance\n     * @param {?} location\n     * @param {?} _rootLView\n     * @param {?} _tNode\n     */\n    constructor(componentType, instance, location, _rootLView, _tNode) {\n        super();\n        this.location = location;\n        this._rootLView = _rootLView;\n        this._tNode = _tNode;\n        this.destroyCbs = [];\n        this.instance = instance;\n        this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n        this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);\n        this.componentType = componentType;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return new NodeInjector(this._tNode, this._rootLView); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this.destroyCbs) {\n            this.destroyCbs.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            fn => fn()));\n            this.destroyCbs = null;\n            !this.hostView.destroyed && this.hostView.destroy();\n        }\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        if (this.destroyCbs) {\n            this.destroyCbs.push(callback);\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    ComponentRef$1.prototype.destroyCbs;\n    /** @type {?} */\n    ComponentRef$1.prototype.instance;\n    /** @type {?} */\n    ComponentRef$1.prototype.hostView;\n    /** @type {?} */\n    ComponentRef$1.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef$1.prototype.componentType;\n    /** @type {?} */\n    ComponentRef$1.prototype.location;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentRef$1.prototype._rootLView;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentRef$1.prototype._tNode;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngI18nClosureMode === 'undefined') {\n    // These property accesses can be ignored because ngI18nClosureMode will be set to false\n    // when optimizing code and the whole if statement will be dropped.\n    // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n    // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n    (function () {\n        // tslint:disable-next-line:no-toplevel-property-access\n        _global['ngI18nClosureMode'] =\n            // TODO(FW-1250): validate that this actually, you know, works.\n            // tslint:disable-next-line:no-toplevel-property-access\n            typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n    })();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n * @type {?}\n */\nconst LOCALE_DATA = {};\n/** @enum {number} */\nconst LocaleDataIndex = {\n    LocaleId: 0,\n    DayPeriodsFormat: 1,\n    DayPeriodsStandalone: 2,\n    DaysFormat: 3,\n    DaysStandalone: 4,\n    MonthsFormat: 5,\n    MonthsStandalone: 6,\n    Eras: 7,\n    FirstDayOfWeek: 8,\n    WeekendRange: 9,\n    DateFormat: 10,\n    TimeFormat: 11,\n    DateTimeFormat: 12,\n    NumberSymbols: 13,\n    NumberFormats: 14,\n    CurrencySymbol: 15,\n    CurrencyName: 16,\n    Currencies: 17,\n    PluralCase: 18,\n    ExtraData: 19,\n};\nLocaleDataIndex[LocaleDataIndex.LocaleId] = 'LocaleId';\nLocaleDataIndex[LocaleDataIndex.DayPeriodsFormat] = 'DayPeriodsFormat';\nLocaleDataIndex[LocaleDataIndex.DayPeriodsStandalone] = 'DayPeriodsStandalone';\nLocaleDataIndex[LocaleDataIndex.DaysFormat] = 'DaysFormat';\nLocaleDataIndex[LocaleDataIndex.DaysStandalone] = 'DaysStandalone';\nLocaleDataIndex[LocaleDataIndex.MonthsFormat] = 'MonthsFormat';\nLocaleDataIndex[LocaleDataIndex.MonthsStandalone] = 'MonthsStandalone';\nLocaleDataIndex[LocaleDataIndex.Eras] = 'Eras';\nLocaleDataIndex[LocaleDataIndex.FirstDayOfWeek] = 'FirstDayOfWeek';\nLocaleDataIndex[LocaleDataIndex.WeekendRange] = 'WeekendRange';\nLocaleDataIndex[LocaleDataIndex.DateFormat] = 'DateFormat';\nLocaleDataIndex[LocaleDataIndex.TimeFormat] = 'TimeFormat';\nLocaleDataIndex[LocaleDataIndex.DateTimeFormat] = 'DateTimeFormat';\nLocaleDataIndex[LocaleDataIndex.NumberSymbols] = 'NumberSymbols';\nLocaleDataIndex[LocaleDataIndex.NumberFormats] = 'NumberFormats';\nLocaleDataIndex[LocaleDataIndex.CurrencySymbol] = 'CurrencySymbol';\nLocaleDataIndex[LocaleDataIndex.CurrencyName] = 'CurrencyName';\nLocaleDataIndex[LocaleDataIndex.Currencies] = 'Currencies';\nLocaleDataIndex[LocaleDataIndex.PluralCase] = 'PluralCase';\nLocaleDataIndex[LocaleDataIndex.ExtraData] = 'ExtraData';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n/** @type {?} */\nconst u = undefined;\n/**\n * @param {?} n\n * @return {?}\n */\nfunction plural(n) {\n    /** @type {?} */\n    let i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    let v = n.toString().replace(/^[^.]*\\.?/, '').length;\n    if (i === 1 && v === 0)\n        return 1;\n    return 5;\n}\nvar localeEn = [\n    'en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u],\n    [\n        ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n        ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n    ],\n    u,\n    [\n        ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        [\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n            'October', 'November', 'December'\n        ]\n    ],\n    u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n    ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n    ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n    ['.', ',', ';', '%', '+', '-', 'E', 'Ã', 'â°', 'â', 'NaN', ':'],\n    ['#,##0.###', '#,##0%', 'Â¤#,##0.00', '#E0'], '$', 'US Dollar', {}, plural\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @see `NgPlural` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The plural function for the locale.\n */\nfunction getLocalePluralCase(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[LocaleDataIndex.PluralCase];\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * @param {?} locale The locale code.\n * @return {?} The locale data.\n */\nfunction findLocaleData(locale) {\n    /** @type {?} */\n    const normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n    /** @type {?} */\n    let match = LOCALE_DATA[normalizedLocale];\n    if (match) {\n        return match;\n    }\n    // let's try to find a parent locale\n    /** @type {?} */\n    const parentLocale = normalizedLocale.split('-')[0];\n    match = LOCALE_DATA[parentLocale];\n    if (match) {\n        return match;\n    }\n    if (parentLocale === 'en') {\n        return localeEn;\n    }\n    throw new Error(`Missing locale data for the locale \"${locale}\".`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the plural case based on the locale\n * @param {?} value\n * @param {?} locale\n * @return {?}\n */\nfunction getPluralCase(value, locale) {\n    /** @type {?} */\n    const plural = getLocalePluralCase(locale)(value);\n    switch (plural) {\n        case 0:\n            return 'zero';\n        case 1:\n            return 'one';\n        case 2:\n            return 'two';\n        case 3:\n            return 'few';\n        case 4:\n            return 'many';\n        default:\n            return 'other';\n    }\n}\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n * @type {?}\n */\nconst DEFAULT_LOCALE_ID = 'en-US';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MARKER = `ï¿½`;\n/** @type {?} */\nconst ICU_BLOCK_REGEXP = /^\\s*(ï¿½\\d+:?\\d*ï¿½)\\s*,\\s*(select|plural)\\s*,/;\n/** @type {?} */\nconst SUBTEMPLATE_REGEXP = /ï¿½\\/?\\*(\\d+:\\d+)ï¿½/gi;\n/** @type {?} */\nconst PH_REGEXP = /ï¿½(\\/?[#*!]\\d+):?\\d*ï¿½/gi;\n/** @type {?} */\nconst BINDING_REGEXP = /ï¿½(\\d+):?\\d*ï¿½/gi;\n/** @type {?} */\nconst ICU_REGEXP = /({\\s*ï¿½\\d+:?\\d*ï¿½\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n/** @enum {string} */\nconst TagType = {\n    ELEMENT: '#',\n    TEMPLATE: '*',\n    PROJECTION: '!',\n};\n// i18nPostprocess consts\n/** @type {?} */\nconst ROOT_TEMPLATE_ID = 0;\n/** @type {?} */\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(ï¿½.+?ï¿½?)\\]/;\n/** @type {?} */\nconst PP_PLACEHOLDERS_REGEXP = /\\[(ï¿½.+?ï¿½?)\\]|(ï¿½\\/?\\*\\d+:\\d+ï¿½)/g;\n/** @type {?} */\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\n/** @type {?} */\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\n/** @type {?} */\nconst PP_ICUS_REGEXP = /ï¿½I18N_EXP_(ICU(_\\d+)?)ï¿½/g;\n/** @type {?} */\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\n/** @type {?} */\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * @record\n */\nfunction IcuExpression() { }\nif (false) {\n    /** @type {?} */\n    IcuExpression.prototype.type;\n    /** @type {?} */\n    IcuExpression.prototype.mainBinding;\n    /** @type {?} */\n    IcuExpression.prototype.cases;\n    /** @type {?} */\n    IcuExpression.prototype.values;\n}\n/**\n * @record\n */\nfunction IcuCase() { }\nif (false) {\n    /**\n     * Number of slots to allocate in expando for this case.\n     *\n     * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n     * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n     * write into them.\n     * @type {?}\n     */\n    IcuCase.prototype.vars;\n    /**\n     * An optional array of child/sub ICUs.\n     * @type {?}\n     */\n    IcuCase.prototype.childIcus;\n    /**\n     * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n     * @type {?}\n     */\n    IcuCase.prototype.create;\n    /**\n     * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n     * @type {?}\n     */\n    IcuCase.prototype.remove;\n    /**\n     * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n     * @type {?}\n     */\n    IcuCase.prototype.update;\n}\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n * keys and cases.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern (sub)Pattern to be broken.\n *\n * @return {?}\n */\nfunction extractParts(pattern) {\n    if (!pattern) {\n        return [];\n    }\n    /** @type {?} */\n    let prevPos = 0;\n    /** @type {?} */\n    const braceStack = [];\n    /** @type {?} */\n    const results = [];\n    /** @type {?} */\n    const braces = /[{}]/g;\n    // lastIndex doesn't get set to 0 so we have to.\n    braces.lastIndex = 0;\n    /** @type {?} */\n    let match;\n    while (match = braces.exec(pattern)) {\n        /** @type {?} */\n        const pos = match.index;\n        if (match[0] == '}') {\n            braceStack.pop();\n            if (braceStack.length == 0) {\n                // End of the block.\n                /** @type {?} */\n                const block = pattern.substring(prevPos, pos);\n                if (ICU_BLOCK_REGEXP.test(block)) {\n                    results.push(parseICUBlock(block));\n                }\n                else {\n                    results.push(block);\n                }\n                prevPos = pos + 1;\n            }\n        }\n        else {\n            if (braceStack.length == 0) {\n                /** @type {?} */\n                const substring = pattern.substring(prevPos, pos);\n                results.push(substring);\n                prevPos = pos + 1;\n            }\n            braceStack.push('{');\n        }\n    }\n    /** @type {?} */\n    const substring = pattern.substring(prevPos);\n    results.push(substring);\n    return results;\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern Text containing an ICU expression that needs to be parsed.\n *\n * @return {?}\n */\nfunction parseICUBlock(pattern) {\n    /** @type {?} */\n    const cases = [];\n    /** @type {?} */\n    const values = [];\n    /** @type {?} */\n    let icuType = 1 /* plural */;\n    /** @type {?} */\n    let mainBinding = 0;\n    pattern = pattern.replace(ICU_BLOCK_REGEXP, (/**\n     * @param {?} str\n     * @param {?} binding\n     * @param {?} type\n     * @return {?}\n     */\n    function (str, binding, type) {\n        if (type === 'select') {\n            icuType = 0 /* select */;\n        }\n        else {\n            icuType = 1 /* plural */;\n        }\n        mainBinding = parseInt(binding.substr(1), 10);\n        return '';\n    }));\n    /** @type {?} */\n    const parts = (/** @type {?} */ (extractParts(pattern)));\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n    for (let pos = 0; pos < parts.length;) {\n        /** @type {?} */\n        let key = parts[pos++].trim();\n        if (icuType === 1 /* plural */) {\n            // Key can be \"=x\", we just want \"x\"\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n        }\n        if (key.length) {\n            cases.push(key);\n        }\n        /** @type {?} */\n        const blocks = (/** @type {?} */ (extractParts(parts[pos++])));\n        if (cases.length > values.length) {\n            values.push(blocks);\n        }\n    }\n    assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\n    return { type: icuType, mainBinding: mainBinding, cases, values };\n}\n/**\n * Removes everything inside the sub-templates of a message.\n * @param {?} message\n * @return {?}\n */\nfunction removeInnerTemplateTranslation(message) {\n    /** @type {?} */\n    let match;\n    /** @type {?} */\n    let res = '';\n    /** @type {?} */\n    let index = 0;\n    /** @type {?} */\n    let inTemplate = false;\n    /** @type {?} */\n    let tagMatched;\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n        if (!inTemplate) {\n            res += message.substring(index, match.index + match[0].length);\n            tagMatched = match[1];\n            inTemplate = true;\n        }\n        else {\n            if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n                index = match.index;\n                inTemplate = false;\n            }\n        }\n    }\n    ngDevMode &&\n        assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n    res += message.substr(index);\n    return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A translated\n * message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param {?} message The message to crop\n * @param {?=} subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n * @return {?}\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n    if (typeof subTemplateIndex !== 'number') {\n        // We want the root template message, ignore all sub-templates\n        return removeInnerTemplateTranslation(message);\n    }\n    else {\n        // We want a specific sub-template\n        /** @type {?} */\n        const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n        /** @type {?} */\n        const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n        return removeInnerTemplateTranslation(message.substring(start, end));\n    }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param {?} str The string containing the bindings.\n * @param {?} destinationNode Index of the destination node which will receive the binding.\n * @param {?=} attrName Name of the attribute, if the string belongs to an attribute.\n * @param {?=} sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @return {?}\n */\nfunction generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn = null) {\n    /** @type {?} */\n    const updateOpCodes = [null, null];\n    // Alloc space for mask and size\n    /** @type {?} */\n    const textParts = str.split(BINDING_REGEXP);\n    /** @type {?} */\n    let mask = 0;\n    for (let j = 0; j < textParts.length; j++) {\n        /** @type {?} */\n        const textValue = textParts[j];\n        if (j & 1) {\n            // Odd indexes are bindings\n            /** @type {?} */\n            const bindingIndex = parseInt(textValue, 10);\n            updateOpCodes.push(-1 - bindingIndex);\n            mask = mask | toMaskBit(bindingIndex);\n        }\n        else if (textValue !== '') {\n            // Even indexes are text\n            updateOpCodes.push(textValue);\n        }\n    }\n    updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |\n        (attrName ? 1 /* Attr */ : 0 /* Text */));\n    if (attrName) {\n        updateOpCodes.push(attrName, sanitizeFn);\n    }\n    updateOpCodes[0] = mask;\n    updateOpCodes[1] = updateOpCodes.length - 2;\n    return updateOpCodes;\n}\n/**\n * @param {?} icuExpression\n * @param {?=} mask\n * @return {?}\n */\nfunction getBindingMask(icuExpression, mask = 0) {\n    mask = mask | toMaskBit(icuExpression.mainBinding);\n    /** @type {?} */\n    let match;\n    for (let i = 0; i < icuExpression.values.length; i++) {\n        /** @type {?} */\n        const valueArr = icuExpression.values[i];\n        for (let j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            const value = valueArr[j];\n            if (typeof value === 'string') {\n                while (match = BINDING_REGEXP.exec(value)) {\n                    mask = mask | toMaskBit(parseInt(match[1], 10));\n                }\n            }\n            else {\n                mask = getBindingMask((/** @type {?} */ (value)), mask);\n            }\n        }\n    }\n    return mask;\n}\n/** @type {?} */\nconst i18nIndexStack = [];\n/** @type {?} */\nlet i18nIndexStackPointer = -1;\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n * that we will execute binding code more often than necessary. (penalty of performance)\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction toMaskBit(bindingIndex) {\n    return 1 << Math.min(bindingIndex, 31);\n}\n/** @type {?} */\nconst parentIndexStack = [];\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `ï¿½{index}(:{block})ï¿½`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `ï¿½#{index}(:{block})ï¿½`/`ï¿½/#{index}(:{block})ï¿½`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `ï¿½!{index}(:{block})ï¿½`/`ï¿½/!{index}(:{block})ï¿½`: *Projection Placeholder*:  Marks the\n *   beginning and end of <ng-content> that was embedded in the original translation block.\n *   The placeholder `index` points to the element index in the template instructions set.\n *   An optional `block` that matches the sub-template in which it was declared.\n * - `ï¿½*{index}:{block}ï¿½`/`ï¿½/*{index}:{block}ï¿½`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * \\@codeGenApi\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n *\n * @return {?}\n */\nfunction ÉµÉµi18nStart(index, message, subTemplateIndex) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nIndexStack[++i18nIndexStackPointer] = index;\n    // We need to delay projections until `i18nEnd`\n    setDelayProjection(true);\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nStartFirstPass(tView, index, message, subTemplateIndex);\n    }\n}\n// Count for the number of vars that will be allocated for each i18n block.\n// It is global because this is used in multiple functions that include loops and recursive calls.\n// This is reset to 0 when `i18nStartFirstPass` is called.\n/** @type {?} */\nlet i18nVarsCount;\n/**\n * See `i18nStart` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} message\n * @param {?=} subTemplateIndex\n * @return {?}\n */\nfunction i18nStartFirstPass(tView, index, message, subTemplateIndex) {\n    /** @type {?} */\n    const viewData = getLView();\n    /** @type {?} */\n    const startIndex = tView.blueprint.length - HEADER_OFFSET;\n    i18nVarsCount = 0;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const parentTNode = getIsParent() ? getPreviousOrParentTNode() :\n        previousOrParentTNode && previousOrParentTNode.parent;\n    /** @type {?} */\n    let parentIndex = parentTNode && parentTNode !== viewData[T_HOST] ? parentTNode.index - HEADER_OFFSET : index;\n    /** @type {?} */\n    let parentIndexPointer = 0;\n    parentIndexStack[parentIndexPointer] = parentIndex;\n    /** @type {?} */\n    const createOpCodes = [];\n    // If the previous node wasn't the direct parent then we have a translation without top level\n    // element and we need to keep a reference of the previous element if there is one\n    if (index > 0 && previousOrParentTNode !== parentTNode) {\n        // Create an OpCode to select the previous TNode\n        createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n    }\n    /** @type {?} */\n    const updateOpCodes = [];\n    /** @type {?} */\n    const icuExpressions = [];\n    /** @type {?} */\n    const templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n    /** @type {?} */\n    const msgParts = replaceNgsp(templateTranslation).split(PH_REGEXP);\n    for (let i = 0; i < msgParts.length; i++) {\n        /** @type {?} */\n        let value = msgParts[i];\n        if (i & 1) {\n            // Odd indexes are placeholders (elements and sub-templates)\n            if (value.charAt(0) === '/') {\n                // It is a closing tag\n                if (value.charAt(1) === \"#\" /* ELEMENT */) {\n                    /** @type {?} */\n                    const phIndex = parseInt(value.substr(2), 10);\n                    parentIndex = parentIndexStack[--parentIndexPointer];\n                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n                }\n            }\n            else {\n                /** @type {?} */\n                const phIndex = parseInt(value.substr(1), 10);\n                // The value represents a placeholder that we move to the designated index\n                createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                if (value.charAt(0) === \"#\" /* ELEMENT */) {\n                    parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n                }\n            }\n        }\n        else {\n            // Even indexes are text (including bindings & ICU expressions)\n            /** @type {?} */\n            const parts = extractParts(value);\n            for (let j = 0; j < parts.length; j++) {\n                if (j & 1) {\n                    // Odd indexes are ICU expressions\n                    // Create the comment node that will anchor the ICU expression\n                    /** @type {?} */\n                    const icuNodeIndex = startIndex + i18nVarsCount++;\n                    createOpCodes.push(COMMENT_MARKER, ngDevMode ? `ICU ${icuNodeIndex}` : '', icuNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    // Update codes for the ICU expression\n                    /** @type {?} */\n                    const icuExpression = (/** @type {?} */ (parts[j]));\n                    /** @type {?} */\n                    const mask = getBindingMask(icuExpression);\n                    icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n                    // Since this is recursive, the last TIcu that was pushed is the one we want\n                    /** @type {?} */\n                    const tIcuIndex = icuExpressions.length - 1;\n                    updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding\n                    3, // skip 3 opCodes if not changed\n                    -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression\n                    2, // skip 2 opCodes if not changed\n                    icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n                }\n                else if (parts[j] !== '') {\n                    /** @type {?} */\n                    const text = (/** @type {?} */ (parts[j]));\n                    // Even indexes are text (including bindings)\n                    /** @type {?} */\n                    const hasBinding = text.match(BINDING_REGEXP);\n                    // Create text nodes\n                    /** @type {?} */\n                    const textNodeIndex = startIndex + i18nVarsCount++;\n                    createOpCodes.push(\n                    // If there is a binding, the value will be set during update\n                    hasBinding ? '' : text, textNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(text, textNodeIndex), updateOpCodes);\n                    }\n                }\n            }\n        }\n    }\n    if (i18nVarsCount > 0) {\n        allocExpando(viewData, i18nVarsCount);\n    }\n    ngDevMode &&\n        attachI18nOpCodesDebug(createOpCodes, updateOpCodes, icuExpressions.length ? icuExpressions : null, viewData);\n    // NOTE: local var needed to properly assert the type of `TI18n`.\n    /** @type {?} */\n    const tI18n = {\n        vars: i18nVarsCount,\n        create: createOpCodes,\n        update: updateOpCodes,\n        icus: icuExpressions.length ? icuExpressions : null,\n    };\n    tView.data[index + HEADER_OFFSET] = tI18n;\n}\n/**\n * @param {?} tNode\n * @param {?} parentTNode\n * @param {?} previousTNode\n * @param {?} viewData\n * @return {?}\n */\nfunction appendI18nNode(tNode, parentTNode, previousTNode, viewData) {\n    ngDevMode && ngDevMode.rendererMoveNode++;\n    /** @type {?} */\n    const nextNode = tNode.next;\n    if (!previousTNode) {\n        previousTNode = parentTNode;\n    }\n    // Re-organize node tree to put this node in the correct position.\n    if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n        tNode.next = parentTNode.child;\n        parentTNode.child = tNode;\n    }\n    else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n        tNode.next = previousTNode.next;\n        previousTNode.next = tNode;\n    }\n    else {\n        tNode.next = null;\n    }\n    if (parentTNode !== viewData[T_HOST]) {\n        tNode.parent = (/** @type {?} */ (parentTNode));\n    }\n    // If tNode was moved around, we might need to fix a broken link.\n    /** @type {?} */\n    let cursor = tNode.next;\n    while (cursor) {\n        if (cursor.next === tNode) {\n            cursor.next = nextNode;\n        }\n        cursor = cursor.next;\n    }\n    // If the placeholder to append is a projection, we need to move the projected nodes instead\n    if (tNode.type === 1 /* Projection */) {\n        /** @type {?} */\n        const tProjectionNode = (/** @type {?} */ (tNode));\n        appendProjectedNodes(viewData, tProjectionNode, tProjectionNode.projection, findComponentView(viewData));\n        return tNode;\n    }\n    appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n    /** @type {?} */\n    const slotValue = viewData[tNode.index];\n    if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n        // Nodes that inject ViewContainerRef also have a comment node that should be moved\n        appendChild(slotValue[NATIVE], tNode, viewData);\n    }\n    return tNode;\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [ï¿½*1:1ï¿½ï¿½#2:1ï¿½|ï¿½#4:1ï¿½|ï¿½5ï¿½])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like ï¿½ICU_EXP_ICU_1ï¿½)\n *    in case multiple ICUs have the same placeholder name\n *\n * \\@codeGenApi\n * @param {?} message Raw translation string for post processing\n * @param {?=} replacements Set of replacements that should be applied\n *\n * @return {?} Transformed string that can be consumed by i18nStart instruction\n *\n */\nfunction ÉµÉµi18nPostprocess(message, replacements = {}) {\n    /**\n     * Step 1: resolve all multi-value placeholders like [ï¿½#5ï¿½|ï¿½*1:1ï¿½ï¿½#2:1ï¿½|ï¿½#4:1ï¿½]\n     *\n     * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n     * grouped by templates, for example: [ï¿½#5ï¿½|ï¿½#6ï¿½|ï¿½#1:1ï¿½|ï¿½#3:2ï¿½] where ï¿½#5ï¿½ and ï¿½#6ï¿½ belong to root\n     * template, ï¿½#1:1ï¿½ belong to nested template with index 1 and ï¿½#1:2ï¿½ - nested template with index\n     * 3. However in real templates the order might be different: i.e. ï¿½#1:1ï¿½ and/or ï¿½#3:2ï¿½ may go in\n     * front of ï¿½#6ï¿½. The post processing step restores the right order by keeping track of the\n     * template id stack and looks for placeholders that belong to the currently active template.\n     * @type {?}\n     */\n    let result = message;\n    if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n        /** @type {?} */\n        const matches = {};\n        /** @type {?} */\n        const templateIdsStack = [ROOT_TEMPLATE_ID];\n        result = result.replace(PP_PLACEHOLDERS_REGEXP, (/**\n         * @param {?} m\n         * @param {?} phs\n         * @param {?} tmpl\n         * @return {?}\n         */\n        (m, phs, tmpl) => {\n            /** @type {?} */\n            const content = phs || tmpl;\n            /** @type {?} */\n            const placeholders = matches[content] || [];\n            if (!placeholders.length) {\n                content.split('|').forEach((/**\n                 * @param {?} placeholder\n                 * @return {?}\n                 */\n                (placeholder) => {\n                    /** @type {?} */\n                    const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n                    /** @type {?} */\n                    const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n                    /** @type {?} */\n                    const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n                    placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n                }));\n                matches[content] = placeholders;\n            }\n            if (!placeholders.length) {\n                throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n            }\n            /** @type {?} */\n            const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n            /** @type {?} */\n            let idx = 0;\n            // find placeholder index that matches current template id\n            for (let i = 0; i < placeholders.length; i++) {\n                if (placeholders[i][0] === currentTemplateId) {\n                    idx = i;\n                    break;\n                }\n            }\n            // update template id stack based on the current tag extracted\n            const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n            if (isCloseTemplateTag) {\n                templateIdsStack.pop();\n            }\n            else if (currentTemplateId !== templateId) {\n                templateIdsStack.push(templateId);\n            }\n            // remove processed tag from the list\n            placeholders.splice(idx, 1);\n            return placeholder;\n        }));\n    }\n    // return current result if no replacements specified\n    if (!Object.keys(replacements).length) {\n        return result;\n    }\n    /**\n     * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n     */\n    result = result.replace(PP_ICU_VARS_REGEXP, (/**\n     * @param {?} match\n     * @param {?} start\n     * @param {?} key\n     * @param {?} _type\n     * @param {?} _idx\n     * @param {?} end\n     * @return {?}\n     */\n    (match, start, key, _type, _idx, end) => {\n        return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n    }));\n    /**\n     * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n     */\n    result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (/**\n     * @param {?} match\n     * @param {?} key\n     * @return {?}\n     */\n    (match, key) => {\n        return replacements.hasOwnProperty(key) ? (/** @type {?} */ (replacements[key])) : match;\n    }));\n    /**\n     * Step 4: replace all ICU references with corresponding values (like ï¿½ICU_EXP_ICU_1ï¿½) in case\n     * multiple ICUs have the same placeholder name\n     */\n    result = result.replace(PP_ICUS_REGEXP, (/**\n     * @param {?} match\n     * @param {?} key\n     * @return {?}\n     */\n    (match, key) => {\n        if (replacements.hasOwnProperty(key)) {\n            /** @type {?} */\n            const list = (/** @type {?} */ (replacements[key]));\n            if (!list.length) {\n                throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n            }\n            return (/** @type {?} */ (list.shift()));\n        }\n        return match;\n    }));\n    return result;\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ÉµÉµi18nEnd() {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nEndFirstPass(tView);\n    // Stop delaying projections\n    setDelayProjection(false);\n}\n/**\n * See `i18nEnd` above.\n * @param {?} tView\n * @return {?}\n */\nfunction i18nEndFirstPass(tView) {\n    /** @type {?} */\n    const viewData = getLView();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nEnd should be called before any binding');\n    /** @type {?} */\n    const rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n    /** @type {?} */\n    const tI18n = (/** @type {?} */ (tView.data[rootIndex + HEADER_OFFSET]));\n    ngDevMode && assertDefined(tI18n, `You should call i18nStart before i18nEnd`);\n    // Find the last node that was added before `i18nEnd`\n    /** @type {?} */\n    let lastCreatedNode = getPreviousOrParentTNode();\n    // Read the instructions to insert/move/remove DOM elements\n    /** @type {?} */\n    const visitedNodes = readCreateOpCodes(rootIndex, tI18n.create, tI18n.icus, viewData);\n    // Remove deleted nodes\n    for (let i = rootIndex + 1; i <= lastCreatedNode.index - HEADER_OFFSET; i++) {\n        if (visitedNodes.indexOf(i) === -1) {\n            removeNode(i, viewData);\n        }\n    }\n}\n/**\n * Creates and stores the dynamic TNode, and unhooks it from the tree for now.\n * @param {?} lView\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @return {?}\n */\nfunction createDynamicNodeAtIndex(lView, index, type, native, name) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n    lView[index + HEADER_OFFSET] = native;\n    /** @type {?} */\n    const tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], index, (/** @type {?} */ (type)), name, null);\n    // We are creating a dynamic node, the previous tNode might not be pointing at this node.\n    // We will link ourselves into the tree later with `appendI18nNode`.\n    if (previousOrParentTNode.next === tNode) {\n        previousOrParentTNode.next = null;\n    }\n    return tNode;\n}\n/**\n * @param {?} index\n * @param {?} createOpCodes\n * @param {?} icus\n * @param {?} viewData\n * @return {?}\n */\nfunction readCreateOpCodes(index, createOpCodes, icus, viewData) {\n    /** @type {?} */\n    const renderer = getLView()[RENDERER];\n    /** @type {?} */\n    let currentTNode = null;\n    /** @type {?} */\n    let previousTNode = null;\n    /** @type {?} */\n    const visitedNodes = [];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        /** @type {?} */\n        const opCode = createOpCodes[i];\n        if (typeof opCode == 'string') {\n            /** @type {?} */\n            const textRNode = createTextNode(opCode, renderer);\n            /** @type {?} */\n            const textNodeIndex = (/** @type {?} */ (createOpCodes[++i]));\n            ngDevMode && ngDevMode.rendererCreateTextNode++;\n            previousTNode = currentTNode;\n            currentTNode =\n                createDynamicNodeAtIndex(viewData, textNodeIndex, 3 /* Element */, textRNode, null);\n            visitedNodes.push(textNodeIndex);\n            setIsNotParent();\n        }\n        else if (typeof opCode == 'number') {\n            switch (opCode & 7 /* MASK_OPCODE */) {\n                case 1 /* AppendChild */:\n                    /** @type {?} */\n                    const destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                    /** @type {?} */\n                    let destinationTNode;\n                    if (destinationNodeIndex === index) {\n                        // If the destination node is `i18nStart`, we don't have a\n                        // top-level node and we should use the host node instead\n                        destinationTNode = (/** @type {?} */ (viewData[T_HOST]));\n                    }\n                    else {\n                        destinationTNode = getTNode(destinationNodeIndex, viewData);\n                    }\n                    ngDevMode &&\n                        assertDefined((/** @type {?} */ (currentTNode)), `You need to create or select a node before you can insert it into the DOM`);\n                    previousTNode = appendI18nNode((/** @type {?} */ (currentTNode)), destinationTNode, previousTNode, viewData);\n                    break;\n                case 0 /* Select */:\n                    /** @type {?} */\n                    const nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    visitedNodes.push(nodeIndex);\n                    previousTNode = currentTNode;\n                    currentTNode = getTNode(nodeIndex, viewData);\n                    if (currentTNode) {\n                        setPreviousOrParentTNode(currentTNode, currentTNode.type === 3 /* Element */);\n                    }\n                    break;\n                case 5 /* ElementEnd */:\n                    /** @type {?} */\n                    const elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                    previousTNode = currentTNode = getTNode(elementIndex, viewData);\n                    setPreviousOrParentTNode(currentTNode, false);\n                    break;\n                case 4 /* Attr */:\n                    /** @type {?} */\n                    const elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    /** @type {?} */\n                    const attrName = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const attrValue = (/** @type {?} */ (createOpCodes[++i]));\n                    // This code is used for ICU expressions only, since we don't support\n                    // directives/components in ICUs, we don't need to worry about inputs here\n                    elementAttributeInternal(elementNodeIndex, attrName, attrValue, viewData);\n                    break;\n                default:\n                    throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n        else {\n            switch (opCode) {\n                case COMMENT_MARKER:\n                    /** @type {?} */\n                    const commentValue = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const commentNodeIndex = (/** @type {?} */ (createOpCodes[++i]));\n                    ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n                    /** @type {?} */\n                    const commentRNode = renderer.createComment(commentValue);\n                    ngDevMode && ngDevMode.rendererCreateComment++;\n                    previousTNode = currentTNode;\n                    currentTNode = createDynamicNodeAtIndex(viewData, commentNodeIndex, 5 /* IcuContainer */, commentRNode, null);\n                    visitedNodes.push(commentNodeIndex);\n                    attachPatchData(commentRNode, viewData);\n                    ((/** @type {?} */ (currentTNode))).activeCaseIndex = null;\n                    // We will add the case nodes later, during the update phase\n                    setIsNotParent();\n                    break;\n                case ELEMENT_MARKER:\n                    /** @type {?} */\n                    const tagNameValue = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const elementNodeIndex = (/** @type {?} */ (createOpCodes[++i]));\n                    ngDevMode && assertEqual(typeof tagNameValue, 'string', `Expected \"${tagNameValue}\" to be an element node tag name`);\n                    /** @type {?} */\n                    const elementRNode = renderer.createElement(tagNameValue);\n                    ngDevMode && ngDevMode.rendererCreateElement++;\n                    previousTNode = currentTNode;\n                    currentTNode = createDynamicNodeAtIndex(viewData, elementNodeIndex, 3 /* Element */, elementRNode, tagNameValue);\n                    visitedNodes.push(elementNodeIndex);\n                    break;\n                default:\n                    throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n    }\n    setIsNotParent();\n    return visitedNodes;\n}\n/**\n * @param {?} updateOpCodes\n * @param {?} icus\n * @param {?} bindingsStartIndex\n * @param {?} changeMask\n * @param {?} viewData\n * @param {?=} bypassCheckBit\n * @return {?}\n */\nfunction readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit = false) {\n    /** @type {?} */\n    let caseCreated = false;\n    for (let i = 0; i < updateOpCodes.length; i++) {\n        // bit code to check if we should apply the next update\n        /** @type {?} */\n        const checkBit = (/** @type {?} */ (updateOpCodes[i]));\n        // Number of opCodes to skip until next set of update codes\n        /** @type {?} */\n        const skipCodes = (/** @type {?} */ (updateOpCodes[++i]));\n        if (bypassCheckBit || (checkBit & changeMask)) {\n            // The value has been updated since last checked\n            /** @type {?} */\n            let value = '';\n            for (let j = i + 1; j <= (i + skipCodes); j++) {\n                /** @type {?} */\n                const opCode = updateOpCodes[j];\n                if (typeof opCode == 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // It's a binding index whose value is negative\n                        value += renderStringify(viewData[bindingsStartIndex - opCode]);\n                    }\n                    else {\n                        /** @type {?} */\n                        const nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                        /** @type {?} */\n                        let tIcuIndex;\n                        /** @type {?} */\n                        let tIcu;\n                        /** @type {?} */\n                        let icuTNode;\n                        switch (opCode & 3 /* MASK_OPCODE */) {\n                            case 1 /* Attr */:\n                                /** @type {?} */\n                                const propName = (/** @type {?} */ (updateOpCodes[++j]));\n                                /** @type {?} */\n                                const sanitizeFn = (/** @type {?} */ (updateOpCodes[++j]));\n                                elementPropertyInternal(nodeIndex, propName, value, sanitizeFn);\n                                break;\n                            case 0 /* Text */:\n                                textBindingInternal(viewData, nodeIndex, value);\n                                break;\n                            case 2 /* IcuSwitch */:\n                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                icuTNode = (/** @type {?} */ (getTNode(nodeIndex, viewData)));\n                                // If there is an active case, delete the old nodes\n                                if (icuTNode.activeCaseIndex !== null) {\n                                    /** @type {?} */\n                                    const removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                                    for (let k = 0; k < removeCodes.length; k++) {\n                                        /** @type {?} */\n                                        const removeOpCode = (/** @type {?} */ (removeCodes[k]));\n                                        switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                                            case 3 /* Remove */:\n                                                /** @type {?} */\n                                                const nodeIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                removeNode(nodeIndex, viewData);\n                                                break;\n                                            case 6 /* RemoveNestedIcu */:\n                                                /** @type {?} */\n                                                const nestedIcuNodeIndex = (/** @type {?} */ (removeCodes[k + 1])) >>> 3 /* SHIFT_REF */;\n                                                /** @type {?} */\n                                                const nestedIcuTNode = (/** @type {?} */ (getTNode(nestedIcuNodeIndex, viewData)));\n                                                /** @type {?} */\n                                                const activeIndex = nestedIcuTNode.activeCaseIndex;\n                                                if (activeIndex !== null) {\n                                                    /** @type {?} */\n                                                    const nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                    /** @type {?} */\n                                                    const nestedTIcu = (/** @type {?} */ (icus))[nestedIcuTIndex];\n                                                    addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                                                }\n                                                break;\n                                        }\n                                    }\n                                }\n                                // Update the active caseIndex\n                                /** @type {?} */\n                                const caseIndex = getCaseIndex(tIcu, value);\n                                icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                                // Add the nodes for the new case\n                                readCreateOpCodes(-1, tIcu.create[caseIndex], icus, viewData);\n                                caseCreated = true;\n                                break;\n                            case 3 /* IcuUpdate */:\n                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                icuTNode = (/** @type {?} */ (getTNode(nodeIndex, viewData)));\n                                readUpdateOpCodes(tIcu.update[(/** @type {?} */ (icuTNode.activeCaseIndex))], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        i += skipCodes;\n    }\n}\n/**\n * @param {?} index\n * @param {?} viewData\n * @return {?}\n */\nfunction removeNode(index, viewData) {\n    /** @type {?} */\n    const removedPhTNode = getTNode(index, viewData);\n    /** @type {?} */\n    const removedPhRNode = getNativeByIndex(index, viewData);\n    if (removedPhRNode) {\n        nativeRemoveNode(viewData[RENDERER], removedPhRNode);\n    }\n    /** @type {?} */\n    const slotValue = (/** @type {?} */ (ÉµÉµload(index)));\n    if (isLContainer(slotValue)) {\n        /** @type {?} */\n        const lContainer = (/** @type {?} */ (slotValue));\n        if (removedPhTNode.type !== 0 /* Container */) {\n            nativeRemoveNode(viewData[RENDERER], lContainer[NATIVE]);\n        }\n    }\n    // Define this node as detached so that we don't risk projecting it\n    removedPhTNode.flags |= 32 /* isDetached */;\n    ngDevMode && ngDevMode.rendererRemoveNode++;\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {\\@link i18nStart} and {\\@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `ï¿½{index}(:{block})ï¿½`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `ï¿½#{index}(:{block})ï¿½`/`ï¿½/#{index}(:{block})ï¿½`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `ï¿½*{index}:{block}ï¿½`/`ï¿½/*{index}:{block}ï¿½`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * \\@codeGenApi\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n *\n * @return {?}\n */\nfunction ÉµÉµi18n(index, message, subTemplateIndex) {\n    ÉµÉµi18nStart(index, message, subTemplateIndex);\n    ÉµÉµi18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * \\@codeGenApi\n * @param {?} index A unique index in the static block\n * @param {?} values\n *\n * @return {?}\n */\nfunction ÉµÉµi18nAttributes(index, values) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nAttributesFirstPass(tView, index, values);\n}\n/**\n * See `i18nAttributes` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} values\n * @return {?}\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n    /** @type {?} */\n    const previousElement = getPreviousOrParentTNode();\n    /** @type {?} */\n    const previousElementIndex = previousElement.index - HEADER_OFFSET;\n    /** @type {?} */\n    const updateOpCodes = [];\n    for (let i = 0; i < values.length; i += 2) {\n        /** @type {?} */\n        const attrName = values[i];\n        /** @type {?} */\n        const message = values[i + 1];\n        /** @type {?} */\n        const parts = message.split(ICU_REGEXP);\n        for (let j = 0; j < parts.length; j++) {\n            /** @type {?} */\n            const value = parts[j];\n            if (j & 1) {\n                // Odd indexes are ICU expressions\n                // TODO(ocombe): support ICU expressions in attributes\n                throw new Error('ICU expressions are not yet supported in attributes');\n            }\n            else if (value !== '') {\n                // Even indexes are text (including bindings)\n                /** @type {?} */\n                const hasBinding = !!value.match(BINDING_REGEXP);\n                if (hasBinding) {\n                    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n                    }\n                }\n                else {\n                    /** @type {?} */\n                    const lView = getLView();\n                    elementAttributeInternal(previousElementIndex, attrName, value, lView);\n                    // Check if that attribute is a directive input\n                    /** @type {?} */\n                    const tNode = getTNode(previousElementIndex, lView);\n                    /** @type {?} */\n                    const dataValue = tNode.inputs && tNode.inputs[attrName];\n                    if (dataValue) {\n                        setInputsForProperty(lView, dataValue, value);\n                    }\n                }\n            }\n        }\n    }\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        tView.data[index + HEADER_OFFSET] = updateOpCodes;\n    }\n}\n/** @type {?} */\nlet changeMask = 0b0;\n/** @type {?} */\nlet shiftsCounter = 0;\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} value The binding's value\n * @return {?} This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n */\nfunction ÉµÉµi18nExp(value) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const expression = bind(lView, value);\n    if (expression !== NO_CHANGE) {\n        changeMask = changeMask | (1 << shiftsCounter);\n    }\n    shiftsCounter++;\n    return ÉµÉµi18nExp;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * \\@codeGenApi\n * @param {?} index Index of either {\\@link i18nStart} (translation block) or {\\@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @return {?}\n */\nfunction ÉµÉµi18nApply(index) {\n    if (shiftsCounter) {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        const tView = lView[TVIEW];\n        ngDevMode && assertDefined(tView, `tView should be defined`);\n        /** @type {?} */\n        const tI18n = tView.data[index + HEADER_OFFSET];\n        /** @type {?} */\n        let updateOpCodes;\n        /** @type {?} */\n        let icus = null;\n        if (Array.isArray(tI18n)) {\n            updateOpCodes = (/** @type {?} */ (tI18n));\n        }\n        else {\n            updateOpCodes = ((/** @type {?} */ (tI18n))).update;\n            icus = ((/** @type {?} */ (tI18n))).icus;\n        }\n        /** @type {?} */\n        const bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n        readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n        // Reset changeMask & maskBit to default for the next update cycle\n        changeMask = 0b0;\n        shiftsCounter = 0;\n    }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param {?} icuExpression\n * @param {?} bindingValue The value of the main binding used by this ICU expression\n * @return {?}\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n    /** @type {?} */\n    let index = icuExpression.cases.indexOf(bindingValue);\n    if (index === -1) {\n        switch (icuExpression.type) {\n            case 1 /* plural */: {\n                /** @type {?} */\n                const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n                index = icuExpression.cases.indexOf(resolvedCase);\n                if (index === -1 && resolvedCase !== 'other') {\n                    index = icuExpression.cases.indexOf('other');\n                }\n                break;\n            }\n            case 0 /* select */: {\n                index = icuExpression.cases.indexOf('other');\n                break;\n            }\n        }\n    }\n    return index;\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param {?} tIcus\n * @param {?} icuExpression\n * @param {?} startIndex\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n    /** @type {?} */\n    const createCodes = [];\n    /** @type {?} */\n    const removeCodes = [];\n    /** @type {?} */\n    const updateCodes = [];\n    /** @type {?} */\n    const vars = [];\n    /** @type {?} */\n    const childIcus = [];\n    for (let i = 0; i < icuExpression.values.length; i++) {\n        // Each value is an array of strings & other ICU expressions\n        /** @type {?} */\n        const valueArr = icuExpression.values[i];\n        /** @type {?} */\n        const nestedIcus = [];\n        for (let j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            const value = valueArr[j];\n            if (typeof value !== 'string') {\n                // It is an nested ICU expression\n                /** @type {?} */\n                const icuIndex = nestedIcus.push((/** @type {?} */ (value))) - 1;\n                // Replace nested ICU expression by a comment node\n                valueArr[j] = `<!--ï¿½${icuIndex}ï¿½-->`;\n            }\n        }\n        /** @type {?} */\n        const icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n        createCodes.push(icuCase.create);\n        removeCodes.push(icuCase.remove);\n        updateCodes.push(icuCase.update);\n        vars.push(icuCase.vars);\n        childIcus.push(icuCase.childIcus);\n    }\n    /** @type {?} */\n    const tIcu = {\n        type: icuExpression.type,\n        vars,\n        childIcus,\n        cases: icuExpression.cases,\n        create: createCodes,\n        remove: removeCodes,\n        update: updateCodes\n    };\n    tIcus.push(tIcu);\n    // Adding the maximum possible of vars needed (based on the cases with the most vars)\n    i18nVarsCount += Math.max(...vars);\n}\n/**\n * Transforms a string template into an HTML template and a list of instructions used to update\n * attributes or nodes that contain bindings.\n *\n * @param {?} unsafeHtml The string to parse\n * @param {?} parentIndex\n * @param {?} nestedIcus\n * @param {?} tIcus\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    /** @type {?} */\n    const inertBodyHelper = new InertBodyHelper(document);\n    /** @type {?} */\n    const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    if (!inertBodyElement) {\n        throw new Error('Unable to generate inert body element');\n    }\n    /** @type {?} */\n    const wrapper = (/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement;\n    /** @type {?} */\n    const opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };\n    parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n    return opCodes;\n}\n/** @type {?} */\nconst NESTED_ICU = /ï¿½(\\d+)ï¿½/;\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n * @param {?} currentNode The first node to parse\n * @param {?} icuCase The data for the ICU expression case that contains those nodes\n * @param {?} parentIndex Index of the current node's parent\n * @param {?} nestedIcus Data for the nested ICU expressions that this case contains\n * @param {?} tIcus Data for all ICU expressions of the current message\n * @param {?} expandoStartIndex Expando start index for the current ICU expression\n * @return {?}\n */\nfunction parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    if (currentNode) {\n        /** @type {?} */\n        const nestedIcusToCreate = [];\n        while (currentNode) {\n            /** @type {?} */\n            const nextNode = currentNode.nextSibling;\n            /** @type {?} */\n            const newIndex = expandoStartIndex + ++icuCase.vars;\n            switch (currentNode.nodeType) {\n                case Node.ELEMENT_NODE:\n                    /** @type {?} */\n                    const element = (/** @type {?} */ (currentNode));\n                    /** @type {?} */\n                    const tagName = element.tagName.toLowerCase();\n                    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                        // This isn't a valid element, we won't create an element for it\n                        icuCase.vars--;\n                    }\n                    else {\n                        icuCase.create.push(ELEMENT_MARKER, tagName, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        const elAttrs = element.attributes;\n                        for (let i = 0; i < elAttrs.length; i++) {\n                            /** @type {?} */\n                            const attr = (/** @type {?} */ (elAttrs.item(i)));\n                            /** @type {?} */\n                            const lowerAttrName = attr.name.toLowerCase();\n                            /** @type {?} */\n                            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n                            // we assume the input string is safe, unless it's using a binding\n                            if (hasBinding) {\n                                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                    if (URI_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                                    }\n                                    else if (SRCSET_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                                    }\n                                    else {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                                    }\n                                }\n                                else {\n                                    ngDevMode &&\n                                        console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see http://g.co/ng/security#xss)`);\n                                }\n                            }\n                            else {\n                                icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n                            }\n                        }\n                        // Parse the children of this node (if any)\n                        parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n                        // Remove the parent node after the children\n                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    }\n                    break;\n                case Node.TEXT_NODE:\n                    /** @type {?} */\n                    const value = currentNode.textContent || '';\n                    /** @type {?} */\n                    const hasBinding = value.match(BINDING_REGEXP);\n                    icuCase.create.push(hasBinding ? '' : value, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n                    }\n                    break;\n                case Node.COMMENT_NODE:\n                    // Check if the comment node is a placeholder for a nested ICU\n                    /** @type {?} */\n                    const match = NESTED_ICU.exec(currentNode.textContent || '');\n                    if (match) {\n                        /** @type {?} */\n                        const nestedIcuIndex = parseInt(match[1], 10);\n                        /** @type {?} */\n                        const newLocal = ngDevMode ? `nested ICU ${nestedIcuIndex}` : '';\n                        // Create the comment node that will anchor the ICU expression\n                        icuCase.create.push(COMMENT_MARKER, newLocal, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        const nestedIcu = nestedIcus[nestedIcuIndex];\n                        nestedIcusToCreate.push([nestedIcu, newIndex]);\n                    }\n                    else {\n                        // We do not handle any other type of comment\n                        icuCase.vars--;\n                    }\n                    break;\n                default:\n                    // We do not handle any other type of element\n                    icuCase.vars--;\n            }\n            currentNode = (/** @type {?} */ (nextNode));\n        }\n        for (let i = 0; i < nestedIcusToCreate.length; i++) {\n            /** @type {?} */\n            const nestedIcu = nestedIcusToCreate[i][0];\n            /** @type {?} */\n            const nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n            icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n            // Since this is recursive, the last TIcu that was pushed is the one we want\n            /** @type {?} */\n            const nestTIcuIndex = tIcus.length - 1;\n            icuCase.vars += Math.max(...tIcus[nestTIcuIndex].vars);\n            icuCase.childIcus.push(nestTIcuIndex);\n            /** @type {?} */\n            const mask = getBindingMask(nestedIcu);\n            icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding\n            3, // skip 3 opCodes if not changed\n            -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression\n            2, // skip 2 opCodes if not changed\n            nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n            icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n        }\n    }\n}\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here, since translations\n * might contain this special character.\n * @type {?}\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\n/**\n * @param {?} value\n * @return {?}\n */\nfunction replaceNgsp(value) {\n    return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n/** @type {?} */\nlet TRANSLATIONS = {};\n/**\n * @record\n */\nfunction I18nLocalizeOptions() { }\nif (false) {\n    /** @type {?} */\n    I18nLocalizeOptions.prototype.translations;\n}\n/**\n * Set the configuration for `i18nLocalize`.\n *\n * @deprecated this method is temporary & should not be used as it will be removed soon\n * @param {?=} options\n * @return {?}\n */\nfunction i18nConfigureLocalize(options = {\n    translations: {}\n}) {\n    TRANSLATIONS = options.translations;\n}\n/** @type {?} */\nconst LOCALIZE_PH_REGEXP = /\\{\\$(.*?)\\}/g;\n/**\n * A goog.getMsg-like function for users that do not use Closure.\n *\n * This method is required as a *temporary* measure to prevent i18n tests from being blocked while\n * running outside of Closure Compiler. This method will not be needed once runtime translation\n * service support is introduced.\n *\n * \\@codeGenApi\n * @deprecated this method is temporary & should not be used as it will be removed soon\n * @param {?} input\n * @param {?=} placeholders\n * @return {?}\n */\nfunction ÉµÉµi18nLocalize(input, placeholders) {\n    if (typeof TRANSLATIONS[input] !== 'undefined') { // to account for empty string\n        input = TRANSLATIONS[input];\n    }\n    if (placeholders !== undefined && Object.keys(placeholders).length) {\n        return input.replace(LOCALIZE_PH_REGEXP, (/**\n         * @param {?} _\n         * @param {?} key\n         * @return {?}\n         */\n        (_, key) => placeholders[key] || ''));\n    }\n    return input;\n}\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n * @type {?}\n */\nlet LOCALE_ID = DEFAULT_LOCALE_ID;\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param {?} localeId\n * @return {?}\n */\nfunction setLocaleId(localeId) {\n    assertDefined(localeId, `Expected localeId to be defined`);\n    if (typeof localeId === 'string') {\n        LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n    }\n}\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n * @return {?}\n */\nfunction getLocaleId() {\n    return LOCALE_ID;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Map of module-id to the corresponding NgModule.\n * - In pre Ivy we track NgModuleFactory,\n * - In post Ivy we track the NgModuleType\n * @type {?}\n */\nconst modules = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@publicApi\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nfunction registerModuleFactory(id, factory) {\n    /** @type {?} */\n    const existing = (/** @type {?} */ (modules.get(id)));\n    assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);\n    modules.set(id, factory);\n}\n/**\n * @param {?} id\n * @param {?} type\n * @param {?} incoming\n * @return {?}\n */\nfunction assertSameOrNotExisting(id, type, incoming) {\n    if (type && type !== incoming) {\n        throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n    }\n}\n/**\n * @param {?} ngModuleType\n * @return {?}\n */\nfunction registerNgModuleType(ngModuleType) {\n    if (ngModuleType.ngModuleDef.id !== null) {\n        /** @type {?} */\n        const id = ngModuleType.ngModuleDef.id;\n        /** @type {?} */\n        const existing = (/** @type {?} */ (modules.get(id)));\n        assertSameOrNotExisting(id, existing, ngModuleType);\n        modules.set(id, ngModuleType);\n    }\n    /** @type {?} */\n    let imports = ngModuleType.ngModuleDef.imports;\n    if (imports instanceof Function) {\n        imports = imports();\n    }\n    if (imports) {\n        imports.forEach((/**\n         * @param {?} i\n         * @return {?}\n         */\n        i => registerNgModuleType((/** @type {?} */ (i)))));\n    }\n}\n/**\n * @return {?}\n */\nfunction clearModulesForTest() {\n    modules.clear();\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getRegisteredNgModuleType(id) {\n    return modules.get(id);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nfunction NgModuleType() { }\nif (false) {\n    /** @type {?} */\n    NgModuleType.prototype.ngModuleDef;\n}\n/** @type {?} */\nconst COMPONENT_FACTORY_RESOLVER = {\n    provide: ComponentFactoryResolver,\n    useClass: ComponentFactoryResolver$1,\n    deps: [NgModuleRef],\n};\n/**\n * @template T\n */\nclass NgModuleRef$1 extends NgModuleRef {\n    /**\n     * @param {?} ngModuleType\n     * @param {?} _parent\n     */\n    constructor(ngModuleType, _parent) {\n        super();\n        this._parent = _parent;\n        // tslint:disable-next-line:require-internal-with-underscore\n        this._bootstrapComponents = [];\n        this.injector = this;\n        this.destroyCbs = [];\n        /** @type {?} */\n        /** @nocollapse */ const ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n        /** @type {?} */\n        const ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);\n        if (ngLocaleIdDef) {\n            setLocaleId(ngLocaleIdDef);\n        }\n        this._bootstrapComponents = maybeUnwrapFn((/** @type {?} */ (ngModuleDef)).bootstrap);\n        /** @type {?} */\n        const additionalProviders = [\n            {\n                provide: NgModuleRef,\n                useValue: this,\n            },\n            COMPONENT_FACTORY_RESOLVER\n        ];\n        this._r3Injector = (/** @type {?} */ (createInjector(ngModuleType, _parent, additionalProviders, stringify(ngModuleType))));\n        this.instance = this.get(ngModuleType);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {\n        if (token === Injector || token === NgModuleRef || token === INJECTOR) {\n            return this;\n        }\n        return this._r3Injector.get(token, notFoundValue, injectFlags);\n    }\n    /**\n     * @return {?}\n     */\n    get componentFactoryResolver() {\n        return this.get(ComponentFactoryResolver);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        /** @type {?} */\n        const injector = this._r3Injector;\n        !injector.destroyed && injector.destroy();\n        (/** @type {?} */ (this.destroyCbs)).forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        this.destroyCbs = null;\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).push(callback);\n    }\n}\nif (false) {\n    /** @type {?} */\n    NgModuleRef$1.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef$1.prototype._r3Injector;\n    /** @type {?} */\n    NgModuleRef$1.prototype.injector;\n    /** @type {?} */\n    NgModuleRef$1.prototype.instance;\n    /** @type {?} */\n    NgModuleRef$1.prototype.destroyCbs;\n    /** @type {?} */\n    NgModuleRef$1.prototype._parent;\n}\n/**\n * @template T\n */\nclass NgModuleFactory$1 extends NgModuleFactory {\n    /**\n     * @param {?} moduleType\n     */\n    constructor(moduleType) {\n        super();\n        this.moduleType = moduleType;\n        /** @type {?} */\n        /** @nocollapse */ const ngModuleDef = getNgModuleDef(moduleType);\n        if (ngModuleDef !== null) {\n            // Register the NgModule with Angular's module registry. The location (and hence timing) of\n            // this call is critical to ensure this works correctly (modules get registered when expected)\n            // without bloating bundles (modules are registered when otherwise not referenced).\n            //\n            // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has\n            // several practical consequences:\n            //\n            // - If an .ngfactory file is not imported from, the module won't be registered (and can be\n            //   tree shaken).\n            // - If an .ngfactory file is imported from, the module will be registered even if an instance\n            //   is not actually created (via `create` below).\n            // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's\n            //   imports,\n            //\n            // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are\n            // not a required API to use - there are other ways to obtain an NgModuleFactory for a given\n            // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,\n            // the side effect of registration is added here, in the constructor of NgModuleFactory,\n            // ensuring no matter how a factory is created, the module is registered correctly.\n            //\n            // An alternative would be to include the registration side effect inline following the actual\n            // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules\n            // will be registered and retained even if they're otherwise never referenced.\n            registerNgModuleType((/** @type {?} */ (moduleType)));\n        }\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    create(parentInjector) {\n        return new NgModuleRef$1(this.moduleType, parentInjector);\n    }\n}\nif (false) {\n    /** @type {?} */\n    NgModuleFactory$1.prototype.moduleType;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction TypeWithMetadata() { }\nif (false) {\n    /** @type {?|undefined} */\n    TypeWithMetadata.prototype.decorators;\n    /** @type {?|undefined} */\n    TypeWithMetadata.prototype.ctorParameters;\n    /** @type {?|undefined} */\n    TypeWithMetadata.prototype.propDecorators;\n}\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n * tree-shaken away during production builds.\n * @param {?} type\n * @param {?} decorators\n * @param {?} ctorParameters\n * @param {?} propDecorators\n * @return {?}\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n    return (/** @type {?} */ (noSideEffects((/**\n     * @return {?}\n     */\n    () => {\n        /** @type {?} */\n        const clazz = (/** @type {?} */ (type));\n        // We determine whether a class has its own metadata by taking the metadata from the parent\n        // constructor and checking whether it's the same as the subclass metadata below. We can't use\n        // `hasOwnProperty` here because it doesn't work correctly in IE10 for static fields that are\n        // defined by TS. See https://github.com/angular/angular/pull/28439#issuecomment-459349218.\n        /** @type {?} */\n        const parentPrototype = clazz.prototype ? Object.getPrototypeOf(clazz.prototype) : null;\n        /** @type {?} */\n        const parentConstructor = parentPrototype && parentPrototype.constructor;\n        if (decorators !== null) {\n            if (clazz.decorators !== undefined &&\n                (!parentConstructor || parentConstructor.decorators !== clazz.decorators)) {\n                clazz.decorators.push(...decorators);\n            }\n            else {\n                clazz.decorators = decorators;\n            }\n        }\n        if (ctorParameters !== null) {\n            // Rather than merging, clobber the existing parameters. If other projects exist which use\n            // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n            // but that is vanishingly unlikely.\n            clazz.ctorParameters = ctorParameters;\n        }\n        if (propDecorators !== null) {\n            // The property decorator objects are merged as it is possible different fields have different\n            // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n            // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n            // decorator that's also been downleveled.\n            if (clazz.propDecorators !== undefined &&\n                (!parentConstructor || parentConstructor.propDecorators !== clazz.propDecorators)) {\n                clazz.propDecorators = Object.assign({}, clazz.propDecorators, propDecorators);\n            }\n            else {\n                clazz.propDecorators = propDecorators;\n            }\n        }\n    }))));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} value\n *\n */\nfunction ÉµÉµpureFunction0(slotOffset, pureFn, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return isCreationMode() ?\n        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ÉµÉµpureFunction1(slotOffset, pureFn, exp, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated(lView, bindingIndex, exp) ?\n        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getBinding(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ÉµÉµpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getBinding(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ÉµÉµpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getBinding(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ÉµÉµpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getBinding(lView, bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ÉµÉµpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ÉµÉµpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(lView, bindingIndex + 6, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ÉµÉµpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(lView, bindingIndex + 7, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ÉµÉµpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(lView, bindingIndex + 8, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps An array of binding values\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ÉµÉµpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    let bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    let different = false;\n    /** @type {?} */\n    const lView = getLView();\n    for (let i = 0; i < exps.length; i++) {\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n        getBinding(lView, bindingIndex);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create a pipe.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeName The name of the pipe\n * @return {?} T the instance of the pipe.\n *\n */\nfunction ÉµÉµpipe(index, pipeName) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    /** @type {?} */\n    let pipeDef;\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstTemplatePass) {\n        pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = (/** @type {?} */ (tView.data[adjustedIndex]));\n    }\n    /** @type {?} */\n    const pipeInstance = pipeDef.factory();\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * \\@publicApi\n * @param {?} name Name of pipe to resolve\n * @param {?} registry Full list of available pipes\n * @return {?} Matching PipeDef\n *\n */\nfunction getPipeDef$1(name, registry) {\n    if (registry) {\n        for (let i = registry.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    throw new Error(`The pipe '${name}' could not be found!`);\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n *\n * @return {?}\n */\nfunction ÉµÉµpipeBind1(index, slotOffset, v1) {\n    /** @type {?} */\n    const pipeInstance = ÉµÉµload(index);\n    return unwrapValue$1(isPure(index) ? ÉµÉµpureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1));\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n *\n * @return {?}\n */\nfunction ÉµÉµpipeBind2(index, slotOffset, v1, v2) {\n    /** @type {?} */\n    const pipeInstance = ÉµÉµload(index);\n    return unwrapValue$1(isPure(index) ? ÉµÉµpureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2));\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n *\n * @return {?}\n */\nfunction ÉµÉµpipeBind3(index, slotOffset, v1, v2, v3) {\n    /** @type {?} */\n    const pipeInstance = ÉµÉµload(index);\n    return unwrapValue$1(isPure(index) ?\n        ÉµÉµpureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3));\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n *\n * @return {?}\n */\nfunction ÉµÉµpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    /** @type {?} */\n    const pipeInstance = ÉµÉµload(index);\n    return unwrapValue$1(isPure(index) ?\n        ÉµÉµpureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4));\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n *\n * @return {?}\n */\nfunction ÉµÉµpipeBindV(index, slotOffset, values) {\n    /** @type {?} */\n    const pipeInstance = ÉµÉµload(index);\n    return unwrapValue$1(isPure(index) ? ÉµÉµpureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values));\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n    return ((/** @type {?} */ (getLView()[TVIEW].data[index + HEADER_OFFSET]))).pure;\n}\n/**\n * Unwrap the output of a pipe transformation.\n * In order to trick change detection into considering that the new value is always different from\n * the old one, the old value is overwritten by NO_CHANGE.\n *\n * @param {?} newValue the pipe transformation output.\n * @return {?}\n */\nfunction unwrapValue$1(newValue) {\n    if (WrappedValue.isWrapped(newValue)) {\n        newValue = WrappedValue.unwrap(newValue);\n        /** @type {?} */\n        const lView = getLView();\n        // The NO_CHANGE value needs to be written at the index where the impacted binding value is\n        // stored\n        /** @type {?} */\n        const bindingToInvalidateIdx = lView[BINDING_INDEX];\n        lView[bindingToInvalidateIdx] = NO_CHANGE;\n    }\n    return newValue;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Use in components with the `\\@Output` directive to emit custom events\n * synchronously or asynchronously, and register handlers for those events\n * by subscribing to an instance.\n *\n * \\@usageNotes\n *\n * Extends\n * [RxJS `Subject`](https://rxjs.dev/api/index/class/Subject)\n * for Angular by adding the `emit()` method.\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```html\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```html\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * @see [Observables in Angular](guide/observables-in-angular)\n * \\@publicApi\n * @template T\n */\nclass EventEmitter extends Subject {\n    // tslint:disable-line\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param {?=} isAsync When true, deliver events asynchronously.\n     *\n     */\n    constructor(isAsync = false) {\n        super();\n        this.__isAsync = isAsync;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    emit(value) { super.next(value); }\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    subscribe(generatorOrNext, error, complete) {\n        /** @type {?} */\n        let schedulerFn;\n        /** @type {?} */\n        let errorFn = (/**\n         * @param {?} err\n         * @return {?}\n         */\n        (err) => null);\n        /** @type {?} */\n        let completeFn = (/**\n         * @return {?}\n         */\n        () => null);\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? (/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => generatorOrNext.next(value)));\n            }) : (/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => { generatorOrNext.next(value); });\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? (/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => { setTimeout((/**\n                 * @return {?}\n                 */\n                () => generatorOrNext.error(err))); }) :\n                    (/**\n                     * @param {?} err\n                     * @return {?}\n                     */\n                    (err) => { generatorOrNext.error(err); });\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? (/**\n                 * @return {?}\n                 */\n                () => { setTimeout((/**\n                 * @return {?}\n                 */\n                () => generatorOrNext.complete())); }) :\n                    (/**\n                     * @return {?}\n                     */\n                    () => { generatorOrNext.complete(); });\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? (/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => { setTimeout((/**\n             * @return {?}\n             */\n            () => generatorOrNext(value))); }) :\n                (/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                (value) => { generatorOrNext(value); });\n            if (error) {\n                errorFn =\n                    this.__isAsync ? (/**\n                     * @param {?} err\n                     * @return {?}\n                     */\n                    (err) => { setTimeout((/**\n                     * @return {?}\n                     */\n                    () => error(err))); }) : (/**\n                     * @param {?} err\n                     * @return {?}\n                     */\n                    (err) => { error(err); });\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? (/**\n                     * @return {?}\n                     */\n                    () => { setTimeout((/**\n                     * @return {?}\n                     */\n                    () => complete())); }) : (/**\n                     * @return {?}\n                     */\n                    () => { complete(); });\n            }\n        }\n        /** @type {?} */\n        const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    EventEmitter.prototype.__isAsync;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @this {?}\n * @return {?}\n */\nfunction symbolIterator() {\n    return ((/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._results)))[getSymbolIterator()]();\n}\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nclass QueryList {\n    constructor() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n        // This function should be declared on the prototype, but doing so there will cause the class\n        // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n        // the constructor.\n        // [getSymbolIterator()](): Iterator<T> { ... }\n        /** @type {?} */\n        const symbol = getSymbolIterator();\n        /** @type {?} */\n        const proto = (/** @type {?} */ (QueryList.prototype));\n        if (!proto[symbol])\n            proto[symbol] = symbolIterator;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    map(fn) { return this._results.map(fn); }\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    filter(fn) {\n        return this._results.filter(fn);\n    }\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    find(fn) {\n        return this._results.find(fn);\n    }\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    reduce(fn, init) {\n        return this._results.reduce(fn, init);\n    }\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) { this._results.forEach(fn); }\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    some(fn) {\n        return this._results.some(fn);\n    }\n    /**\n     * Returns a copy of the internal results list as an Array.\n     * @return {?}\n     */\n    toArray() { return this._results.slice(); }\n    /**\n     * @return {?}\n     */\n    toString() { return this._results.toString(); }\n    /**\n     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n     * on change detection, it will not notify of changes to the queries, unless a new change\n     * occurs.\n     *\n     * @param {?} resultsTree The query results to store\n     * @return {?}\n     */\n    reset(resultsTree) {\n        this._results = flatten(resultsTree);\n        ((/** @type {?} */ (this))).dirty = false;\n        ((/** @type {?} */ (this))).length = this._results.length;\n        ((/** @type {?} */ (this))).last = this._results[this.length - 1];\n        ((/** @type {?} */ (this))).first = this._results[0];\n    }\n    /**\n     * Triggers a change event by emitting on the `changes` {\\@link EventEmitter}.\n     * @return {?}\n     */\n    notifyOnChanges() { ((/** @type {?} */ (this.changes))).emit(this); }\n    /**\n     * internal\n     * @return {?}\n     */\n    setDirty() { ((/** @type {?} */ (this))).dirty = true; }\n    /**\n     * internal\n     * @return {?}\n     */\n    destroy() {\n        ((/** @type {?} */ (this.changes))).complete();\n        ((/** @type {?} */ (this.changes))).unsubscribe();\n    }\n}\nif (false) {\n    /** @type {?} */\n    QueryList.prototype.dirty;\n    /**\n     * @type {?}\n     * @private\n     */\n    QueryList.prototype._results;\n    /** @type {?} */\n    QueryList.prototype.changes;\n    /** @type {?} */\n    QueryList.prototype.length;\n    /** @type {?} */\n    QueryList.prototype.first;\n    /** @type {?} */\n    QueryList.prototype.last;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst RenderFlags = {\n    /* Whether to run the creation block (e.g. create elements and directives) */\n    Create: 1,\n    /* Whether to run the update block (e.g. refresh bindings) */\n    Update: 2,\n};\n/**\n * A subclass of `Type` which has a static `ngComponentDef`:`ComponentDef` field making it\n * consumable for rendering.\n * @record\n * @template T\n */\nfunction ComponentType() { }\nif (false) {\n    /** @type {?} */\n    ComponentType.prototype.ngComponentDef;\n}\n/**\n * A subclass of `Type` which has a static `ngDirectiveDef`:`DirectiveDef` field making it\n * consumable for rendering.\n * @record\n * @template T\n */\nfunction DirectiveType() { }\nif (false) {\n    /** @type {?} */\n    DirectiveType.prototype.ngDirectiveDef;\n}\n/** @enum {number} */\nconst DirectiveDefFlags = {\n    ContentQuery: 2,\n};\n/**\n * A subclass of `Type` which has a static `ngPipeDef`:`PipeDef` field making it\n * consumable for rendering.\n * @record\n * @template T\n */\nfunction PipeType() { }\nif (false) {\n    /** @type {?} */\n    PipeType.prototype.ngPipeDef;\n}\n/**\n * Runtime information for classes that are inherited by components or directives\n * that aren't defined as components or directives.\n *\n * This is an internal data structure used by the renderer to determine what inputs\n * and outputs should be inherited.\n *\n * See: {\\@link defineBase}\n *\n * \\@codeGenApi\n * @record\n * @template T\n */\nfunction ÉµÉµBaseDef() { }\nif (false) {\n    /**\n     * A dictionary mapping the inputs' minified property names to their public API names, which\n     * are their aliases if any, or their original unminified property names\n     * (as in `\\@Input('alias') propertyName: any;`).\n     * @type {?}\n     */\n    ÉµÉµBaseDef.prototype.inputs;\n    /**\n     * @deprecated This is only here because `NgOnChanges` incorrectly uses declared name instead of\n     * public or minified name.\n     * @type {?}\n     */\n    ÉµÉµBaseDef.prototype.declaredInputs;\n    /**\n     * A dictionary mapping the outputs' minified property names to their public API names, which\n     * are their aliases if any, or their original unminified property names\n     * (as in `\\@Output('alias') propertyName: any;`).\n     * @type {?}\n     */\n    ÉµÉµBaseDef.prototype.outputs;\n    /**\n     * Function to create and refresh content queries associated with a given directive.\n     * @type {?}\n     */\n    ÉµÉµBaseDef.prototype.contentQueries;\n    /**\n     * Query-related instructions for a directive. Note that while directives don't have a\n     * view and as such view queries won't necessarily do anything, there might be\n     * components that extend the directive.\n     * @type {?}\n     */\n    ÉµÉµBaseDef.prototype.viewQuery;\n    /**\n     * Refreshes host bindings on the associated directive.\n     * @type {?}\n     */\n    ÉµÉµBaseDef.prototype.hostBindings;\n}\n/**\n * Runtime link information for Directives.\n *\n * This is internal data structure used by the render to link\n * directives into templates.\n *\n * NOTE: Always use `defineDirective` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * @param Selector type metadata specifying the selector of the directive or component\n *\n * See: {\\@link defineDirective}\n * @record\n * @template T\n */\nfunction DirectiveDef() { }\nif (false) {\n    /**\n     * Token representing the directive. Used by DI.\n     * @type {?}\n     */\n    DirectiveDef.prototype.type;\n    /**\n     * Function that resolves providers and publishes them into the DI system.\n     * @type {?}\n     */\n    DirectiveDef.prototype.providersResolver;\n    /**\n     * The selectors that will be used to match nodes to this directive.\n     * @type {?}\n     */\n    DirectiveDef.prototype.selectors;\n    /**\n     * Name under which the directive is exported (for use with local references in template)\n     * @type {?}\n     */\n    DirectiveDef.prototype.exportAs;\n    /**\n     * Factory function used to create a new directive instance.\n     * @type {?}\n     */\n    DirectiveDef.prototype.factory;\n    /** @type {?} */\n    DirectiveDef.prototype.onChanges;\n    /** @type {?} */\n    DirectiveDef.prototype.onInit;\n    /** @type {?} */\n    DirectiveDef.prototype.doCheck;\n    /** @type {?} */\n    DirectiveDef.prototype.afterContentInit;\n    /** @type {?} */\n    DirectiveDef.prototype.afterContentChecked;\n    /** @type {?} */\n    DirectiveDef.prototype.afterViewInit;\n    /** @type {?} */\n    DirectiveDef.prototype.afterViewChecked;\n    /** @type {?} */\n    DirectiveDef.prototype.onDestroy;\n    /**\n     * The features applied to this directive\n     * @type {?}\n     */\n    DirectiveDef.prototype.features;\n    /** @type {?} */\n    DirectiveDef.prototype.setInput;\n}\n/**\n * Runtime link information for Components.\n *\n * This is internal data structure used by the render to link\n * components into templates.\n *\n * NOTE: Always use `defineComponent` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * See: {\\@link defineComponent}\n * @record\n * @template T\n */\nfunction ComponentDef() { }\nif (false) {\n    /**\n     * Runtime unique component ID.\n     * @type {?}\n     */\n    ComponentDef.prototype.id;\n    /**\n     * The View template of the component.\n     * @type {?}\n     */\n    ComponentDef.prototype.template;\n    /**\n     * An array of `ngContent[selector]` values that were found in the template.\n     * @type {?|undefined}\n     */\n    ComponentDef.prototype.ngContentSelectors;\n    /**\n     * A set of styles that the component needs to be present for component to render correctly.\n     * @type {?}\n     */\n    ComponentDef.prototype.styles;\n    /**\n     * The number of nodes, local refs, and pipes in this component template.\n     *\n     * Used to calculate the length of the component's LView array, so we\n     * can pre-fill the array and set the binding start index.\n     * @type {?}\n     */\n    ComponentDef.prototype.consts;\n    /**\n     * The number of bindings in this component template (including pure fn bindings).\n     *\n     * Used to calculate the length of the component's LView array, so we\n     * can pre-fill the array and set the host binding start index.\n     * @type {?}\n     */\n    ComponentDef.prototype.vars;\n    /**\n     * Query-related instructions for a component.\n     * @type {?}\n     */\n    ComponentDef.prototype.viewQuery;\n    /**\n     * The view encapsulation type, which determines how styles are applied to\n     * DOM elements. One of\n     * - `Emulated` (default): Emulate native scoping of styles.\n     * - `Native`: Use the native encapsulation mechanism of the renderer.\n     * - `ShadowDom`: Use modern [ShadowDOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     *   create a ShadowRoot for component's host element.\n     * - `None`: Do not provide any template or style encapsulation.\n     * @type {?}\n     */\n    ComponentDef.prototype.encapsulation;\n    /**\n     * Defines arbitrary developer-defined data to be stored on a renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     * @type {?}\n     */\n    ComponentDef.prototype.data;\n    /**\n     * Whether or not this component's ChangeDetectionStrategy is OnPush\n     * @type {?}\n     */\n    ComponentDef.prototype.onPush;\n    /**\n     * Registry of directives and components that may be found in this view.\n     *\n     * The property is either an array of `DirectiveDef`s or a function which returns the array of\n     * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n     * @type {?}\n     */\n    ComponentDef.prototype.directiveDefs;\n    /**\n     * Registry of pipes that may be found in this view.\n     *\n     * The property is either an array of `PipeDefs`s or a function which returns the array of\n     * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n     * @type {?}\n     */\n    ComponentDef.prototype.pipeDefs;\n    /**\n     * The set of schemas that declare elements to be allowed in the component's template.\n     * @type {?}\n     */\n    ComponentDef.prototype.schemas;\n    /**\n     * Ivy runtime uses this place to store the computed tView for the component. This gets filled on\n     * the first run of component.\n     * @type {?}\n     */\n    ComponentDef.prototype.tView;\n    /**\n     * Used to store the result of `noSideEffects` function so that it is not removed by closure\n     * compiler. The property should never be read.\n     * @type {?|undefined}\n     */\n    ComponentDef.prototype._;\n}\n/**\n * Runtime link information for Pipes.\n *\n * This is internal data structure used by the renderer to link\n * pipes into templates.\n *\n * NOTE: Always use `definePipe` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * See: {\\@link definePipe}\n * @record\n * @template T\n */\nfunction PipeDef() { }\nif (false) {\n    /**\n     * Pipe name.\n     *\n     * Used to resolve pipe in templates.\n     * @type {?}\n     */\n    PipeDef.prototype.name;\n    /**\n     * Factory function used to create a new pipe instance.\n     * @type {?}\n     */\n    PipeDef.prototype.factory;\n    /**\n     * Whether or not the pipe is pure.\n     *\n     * Pure pipes result only depends on the pipe input and not on internal\n     * state of the pipe.\n     * @type {?}\n     */\n    PipeDef.prototype.pure;\n    /** @type {?} */\n    PipeDef.prototype.onDestroy;\n}\n/**\n * @record\n */\nfunction DirectiveDefFeature() { }\nif (false) {\n    /**\n     * Marks a feature as something that {\\@link InheritDefinitionFeature} will execute\n     * during inheritance.\n     *\n     * NOTE: DO NOT SET IN ROOT OF MODULE! Doing so will result in tree-shakers/bundlers\n     * identifying the change as a side effect, and the feature will be included in\n     * every bundle.\n     * @type {?|undefined}\n     */\n    DirectiveDefFeature.prototype.ngInherit;\n    /* Skipping unhandled member: <T>(directiveDef: DirectiveDef<T>): void;*/\n}\n/**\n * @record\n */\nfunction ComponentDefFeature() { }\nif (false) {\n    /**\n     * Marks a feature as something that {\\@link InheritDefinitionFeature} will execute\n     * during inheritance.\n     *\n     * NOTE: DO NOT SET IN ROOT OF MODULE! Doing so will result in tree-shakers/bundlers\n     * identifying the change as a side effect, and the feature will be included in\n     * every bundle.\n     * @type {?|undefined}\n     */\n    ComponentDefFeature.prototype.ngInherit;\n    /* Skipping unhandled member: <T>(componentDef: ComponentDef<T>): void;*/\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nconst unusedValueExportToPlacateAjd$7 = 1;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An object representing query metadata extracted from query annotations.\n * @record\n */\nfunction TQueryMetadata() { }\nif (false) {\n    /** @type {?} */\n    TQueryMetadata.prototype.predicate;\n    /** @type {?} */\n    TQueryMetadata.prototype.descendants;\n    /** @type {?} */\n    TQueryMetadata.prototype.read;\n    /** @type {?} */\n    TQueryMetadata.prototype.isStatic;\n}\n/**\n * TQuery objects represent all the query-related data that remain the same from one view instance\n * to another and can be determined on the very first template pass. Most notably TQuery holds all\n * the matches for a given view.\n * @record\n */\nfunction TQuery() { }\nif (false) {\n    /**\n     * Query metadata extracted from query annotations.\n     * @type {?}\n     */\n    TQuery.prototype.metadata;\n    /**\n     * Index of a query in a declaration view in case of queries propagated to en embedded view, -1\n     * for queries declared in a given view. We are storing this index so we can find a parent query\n     * to clone for an embedded view (when an embedded view is created).\n     * @type {?}\n     */\n    TQuery.prototype.indexInDeclarationView;\n    /**\n     * Matches collected on the first template pass. Each match is a pair of:\n     * - TNode index;\n     * - match index;\n     *\n     * A TNode index can be either:\n     * - a positive number (the most common case) to indicate a matching TNode;\n     * - a negative number to indicate that a given query is crossing a <ng-template> element and\n     * results from views created based on TemplateRef should be inserted at this place.\n     *\n     * A match index is a number used to find an actual value (for a given node) when query results\n     * are materialized. This index can have one of the following values:\n     * - -2 - indicates that we need to read a special token (TemplateRef, ViewContainerRef etc.);\n     * - -1 - indicates that we need to read a default value based on the node type (TemplateRef for\n     * ng-template and ElementRef for other elements);\n     * - a positive number - index of an injectable to be read from the element injector.\n     * @type {?}\n     */\n    TQuery.prototype.matches;\n    /**\n     * A flag indicating if a given query crosses an <ng-template> element. This flag exists for\n     * performance reasons: we can notice that queries not crossing any <ng-template> elements will\n     * have matches from a given view only (and adapt processing accordingly).\n     * @type {?}\n     */\n    TQuery.prototype.crossesNgTemplate;\n    /**\n     * A method call when a given query is crossing an element (or element container). This is where a\n     * given TNode is matched against a query predicate.\n     * @param {?} tView\n     * @param {?} tNode\n     * @return {?}\n     */\n    TQuery.prototype.elementStart = function (tView, tNode) { };\n    /**\n     * A method called when processing the elementEnd instruction - this is mostly useful to determine\n     * if a given content query should match any nodes past this point.\n     * @param {?} tNode\n     * @return {?}\n     */\n    TQuery.prototype.elementEnd = function (tNode) { };\n    /**\n     * A method called when processing the template instruction. This is where a\n     * given TContainerNode is matched against a query predicate.\n     * @param {?} tView\n     * @param {?} tNode\n     * @return {?}\n     */\n    TQuery.prototype.template = function (tView, tNode) { };\n    /**\n     * A query-related method called when an embedded TView is created based on the content of a\n     * <ng-template> element. We call this method to determine if a given query should be propagated\n     * to the embedded view and if so - return a cloned TQuery for this embedded view.\n     * @param {?} tNode\n     * @param {?} childQueryIndex\n     * @return {?}\n     */\n    TQuery.prototype.embeddedTView = function (tNode, childQueryIndex) { };\n}\n/**\n * TQueries represent a collection of individual TQuery objects tracked in a given view. Most of the\n * methods on this interface are simple proxy methods to the corresponding functionality on TQuery.\n * @record\n */\nfunction TQueries() { }\nif (false) {\n    /**\n     * Returns the number of queries tracked in a given view.\n     * @type {?}\n     */\n    TQueries.prototype.length;\n    /**\n     * Adds a new TQuery to a collection of queries tracked in a given view.\n     * @param {?} tQuery\n     * @return {?}\n     */\n    TQueries.prototype.track = function (tQuery) { };\n    /**\n     * Returns a TQuery instance for at the given index  in the queries array.\n     * @param {?} index\n     * @return {?}\n     */\n    TQueries.prototype.getByIndex = function (index) { };\n    /**\n     * A proxy method that iterates over all the TQueries in a given TView and calls the corresponding\n     * `elementStart` on each and every TQuery.\n     * @param {?} tView\n     * @param {?} tNode\n     * @return {?}\n     */\n    TQueries.prototype.elementStart = function (tView, tNode) { };\n    /**\n     * A proxy method that iterates over all the TQueries in a given TView and calls the corresponding\n     * `elementEnd` on each and every TQuery.\n     * @param {?} tNode\n     * @return {?}\n     */\n    TQueries.prototype.elementEnd = function (tNode) { };\n    /**\n     * A proxy method that iterates over all the TQueries in a given TView and calls the corresponding\n     * `template` on each and every TQuery.\n     * @param {?} tView\n     * @param {?} tNode\n     * @return {?}\n     */\n    TQueries.prototype.template = function (tView, tNode) { };\n    /**\n     * A proxy method that iterates over all the TQueries in a given TView and calls the corresponding\n     * `embeddedTView` on each and every TQuery.\n     * @param {?} tNode\n     * @return {?}\n     */\n    TQueries.prototype.embeddedTView = function (tNode) { };\n}\n/**\n * An interface that represents query-related information specific to a view instance. Most notably\n * it contains:\n * - materialized query matches;\n * - a pointer to a QueryList where materialized query results should be reported.\n * @record\n * @template T\n */\nfunction LQuery() { }\nif (false) {\n    /**\n     * Materialized query matches for a given view only (!). Results are initialized lazily so the\n     * array of matches is set to `null` initially.\n     * @type {?}\n     */\n    LQuery.prototype.matches;\n    /**\n     * A QueryList where materialized query results should be reported.\n     * @type {?}\n     */\n    LQuery.prototype.queryList;\n    /**\n     * Clones an LQuery for an embedded view. A cloned query shares the same `QueryList` but has a\n     * separate collection of materialized matches.\n     * @return {?}\n     */\n    LQuery.prototype.clone = function () { };\n    /**\n     * Called when an embedded view, impacting results of this query, is inserted or removed.\n     * @return {?}\n     */\n    LQuery.prototype.setDirty = function () { };\n}\n/**\n * lQueries represent a collection of individual LQuery objects tracked in a given view.\n * @record\n */\nfunction LQueries() { }\nif (false) {\n    /**\n     * A collection of queries tracked in a given view.\n     * @type {?}\n     */\n    LQueries.prototype.queries;\n    /**\n     * A method called when a new embedded view is created. As a result a set of LQueries applicable\n     * for a new embedded view is instantiated (cloned) from the declaration view.\n     * @param {?} tView\n     * @return {?}\n     */\n    LQueries.prototype.createEmbeddedView = function (tView) { };\n    /**\n     * A method called when an embedded view is inserted into a container. As a result all impacted\n     * `LQuery` objects (and associated `QueryList`) are marked as dirty.\n     * @param {?} tView\n     * @return {?}\n     */\n    LQueries.prototype.insertView = function (tView) { };\n    /**\n     * A method called when an embedded view is detached from a container. As a result all impacted\n     * `LQuery` objects (and associated `QueryList`) are marked as dirty.\n     * @param {?} tView\n     * @return {?}\n     */\n    LQueries.prototype.detachView = function (tView) { };\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nconst unusedValueExportToPlacateAjd$8 = 1;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$7 + unusedValueExportToPlacateAjd$2 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$8;\n/**\n * @template T\n */\nclass LQuery_ {\n    /**\n     * @param {?} queryList\n     */\n    constructor(queryList) {\n        this.queryList = queryList;\n        this.matches = null;\n    }\n    /**\n     * @return {?}\n     */\n    clone() { return new LQuery_(this.queryList); }\n    /**\n     * @return {?}\n     */\n    setDirty() { this.queryList.setDirty(); }\n}\nif (false) {\n    /** @type {?} */\n    LQuery_.prototype.matches;\n    /** @type {?} */\n    LQuery_.prototype.queryList;\n}\nclass LQueries_ {\n    /**\n     * @param {?=} queries\n     */\n    constructor(queries = []) {\n        this.queries = queries;\n    }\n    /**\n     * @param {?} tView\n     * @return {?}\n     */\n    createEmbeddedView(tView) {\n        /** @type {?} */\n        const tQueries = tView.queries;\n        if (tQueries !== null) {\n            /** @type {?} */\n            const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n            /** @type {?} */\n            const viewLQueries = new Array(noOfInheritedQueries);\n            // An embedded view has queries propagated from a declaration view at the beginning of the\n            // TQueries collection and up until a first content query declared in the embedded view. Only\n            // propagated LQueries are created at this point (LQuery corresponding to declared content\n            // queries will be instantiated from the content query instructions for each directive).\n            for (let i = 0; i < noOfInheritedQueries; i++) {\n                /** @type {?} */\n                const tQuery = tQueries.getByIndex(i);\n                /** @type {?} */\n                const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n                viewLQueries[i] = parentLQuery.clone();\n            }\n            return new LQueries_(viewLQueries);\n        }\n        return null;\n    }\n    /**\n     * @param {?} tView\n     * @return {?}\n     */\n    insertView(tView) { this.dirtyQueriesWithMatches(tView); }\n    /**\n     * @param {?} tView\n     * @return {?}\n     */\n    detachView(tView) { this.dirtyQueriesWithMatches(tView); }\n    /**\n     * @private\n     * @param {?} tView\n     * @return {?}\n     */\n    dirtyQueriesWithMatches(tView) {\n        for (let i = 0; i < this.queries.length; i++) {\n            if (getTQuery(tView, i).matches !== null) {\n                this.queries[i].setDirty();\n            }\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    LQueries_.prototype.queries;\n}\nclass TQueryMetadata_ {\n    /**\n     * @param {?} predicate\n     * @param {?} descendants\n     * @param {?} isStatic\n     * @param {?=} read\n     */\n    constructor(predicate, descendants, isStatic, read = null) {\n        this.predicate = predicate;\n        this.descendants = descendants;\n        this.isStatic = isStatic;\n        this.read = read;\n    }\n}\nif (false) {\n    /** @type {?} */\n    TQueryMetadata_.prototype.predicate;\n    /** @type {?} */\n    TQueryMetadata_.prototype.descendants;\n    /** @type {?} */\n    TQueryMetadata_.prototype.isStatic;\n    /** @type {?} */\n    TQueryMetadata_.prototype.read;\n}\nclass TQueries_ {\n    /**\n     * @param {?=} queries\n     */\n    constructor(queries = []) {\n        this.queries = queries;\n    }\n    /**\n     * @param {?} tView\n     * @param {?} tNode\n     * @return {?}\n     */\n    elementStart(tView, tNode) {\n        ngDevMode && assertFirstTemplatePass(tView, 'Queries should collect results on the first template pass only');\n        for (let query of this.queries) {\n            query.elementStart(tView, tNode);\n        }\n    }\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    elementEnd(tNode) {\n        for (let query of this.queries) {\n            query.elementEnd(tNode);\n        }\n    }\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    embeddedTView(tNode) {\n        /** @type {?} */\n        let queriesForTemplateRef = null;\n        for (let i = 0; i < this.length; i++) {\n            /** @type {?} */\n            const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n            /** @type {?} */\n            const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n            if (tqueryClone) {\n                tqueryClone.indexInDeclarationView = i;\n                if (queriesForTemplateRef !== null) {\n                    queriesForTemplateRef.push(tqueryClone);\n                }\n                else {\n                    queriesForTemplateRef = [tqueryClone];\n                }\n            }\n        }\n        return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n    }\n    /**\n     * @param {?} tView\n     * @param {?} tNode\n     * @return {?}\n     */\n    template(tView, tNode) {\n        ngDevMode && assertFirstTemplatePass(tView, 'Queries should collect results on the first template pass only');\n        for (let query of this.queries) {\n            query.template(tView, tNode);\n        }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    getByIndex(index) {\n        ngDevMode && assertDataInRange(this.queries, index);\n        return this.queries[index];\n    }\n    /**\n     * @return {?}\n     */\n    get length() { return this.queries.length; }\n    /**\n     * @param {?} tquery\n     * @return {?}\n     */\n    track(tquery) { this.queries.push(tquery); }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TQueries_.prototype.queries;\n}\nclass TQuery_ {\n    /**\n     * @param {?} metadata\n     * @param {?=} nodeIndex\n     */\n    constructor(metadata, nodeIndex = -1) {\n        this.metadata = metadata;\n        this.matches = null;\n        this.indexInDeclarationView = -1;\n        this.crossesNgTemplate = false;\n        /**\n         * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n         * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n         * elements in a template.\n         */\n        this._appliesToNextNode = true;\n        this._declarationNodeIndex = nodeIndex;\n    }\n    /**\n     * @param {?} tView\n     * @param {?} tNode\n     * @return {?}\n     */\n    elementStart(tView, tNode) {\n        if (this.isApplyingToNode(tNode)) {\n            this.matchTNode(tView, tNode);\n        }\n    }\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    elementEnd(tNode) {\n        if (this._declarationNodeIndex === tNode.index) {\n            this._appliesToNextNode = false;\n        }\n    }\n    /**\n     * @param {?} tView\n     * @param {?} tNode\n     * @return {?}\n     */\n    template(tView, tNode) { this.elementStart(tView, tNode); }\n    /**\n     * @param {?} tNode\n     * @param {?} childQueryIndex\n     * @return {?}\n     */\n    embeddedTView(tNode, childQueryIndex) {\n        if (this.isApplyingToNode(tNode)) {\n            this.crossesNgTemplate = true;\n            // A marker indicating a `<ng-template>` element (a placeholder for query results from\n            // embedded views created based on this `<ng-template>`).\n            this.addMatch(-tNode.index, childQueryIndex);\n            return new TQuery_(this.metadata);\n        }\n        return null;\n    }\n    /**\n     * @private\n     * @param {?} tNode\n     * @return {?}\n     */\n    isApplyingToNode(tNode) {\n        if (this._appliesToNextNode && this.metadata.descendants === false) {\n            return this._declarationNodeIndex === (tNode.parent ? tNode.parent.index : -1);\n        }\n        return this._appliesToNextNode;\n    }\n    /**\n     * @private\n     * @param {?} tView\n     * @param {?} tNode\n     * @return {?}\n     */\n    matchTNode(tView, tNode) {\n        if (Array.isArray(this.metadata.predicate)) {\n            /** @type {?} */\n            const localNames = (/** @type {?} */ (this.metadata.predicate));\n            for (let i = 0; i < localNames.length; i++) {\n                this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, localNames[i]));\n            }\n        }\n        else {\n            /** @type {?} */\n            const typePredicate = (/** @type {?} */ (this.metadata.predicate));\n            if (typePredicate === TemplateRef) {\n                if (tNode.type === 0 /* Container */) {\n                    this.matchTNodeWithReadOption(tView, tNode, -1);\n                }\n            }\n            else {\n                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, typePredicate, false, false));\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} tView\n     * @param {?} tNode\n     * @param {?} nodeMatchIdx\n     * @return {?}\n     */\n    matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\n        if (nodeMatchIdx !== null) {\n            /** @type {?} */\n            const read = this.metadata.read;\n            if (read !== null) {\n                if (read === ElementRef || read === ViewContainerRef ||\n                    read === TemplateRef && tNode.type === 0 /* Container */) {\n                    this.addMatch(tNode.index, -2);\n                }\n                else {\n                    /** @type {?} */\n                    const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n                    if (directiveOrProviderIdx !== null) {\n                        this.addMatch(tNode.index, directiveOrProviderIdx);\n                    }\n                }\n            }\n            else {\n                this.addMatch(tNode.index, nodeMatchIdx);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} tNodeIdx\n     * @param {?} matchIdx\n     * @return {?}\n     */\n    addMatch(tNodeIdx, matchIdx) {\n        if (this.matches === null) {\n            this.matches = [tNodeIdx, matchIdx];\n        }\n        else {\n            this.matches.push(tNodeIdx, matchIdx);\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    TQuery_.prototype.matches;\n    /** @type {?} */\n    TQuery_.prototype.indexInDeclarationView;\n    /** @type {?} */\n    TQuery_.prototype.crossesNgTemplate;\n    /**\n     * A node index on which a query was declared (-1 for view queries and ones inherited from the\n     * declaration template). We use this index (alongside with _appliesToNextNode flag) to know\n     * when to apply content queries to elements in a template.\n     * @type {?}\n     * @private\n     */\n    TQuery_.prototype._declarationNodeIndex;\n    /**\n     * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n     * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n     * elements in a template.\n     * @type {?}\n     * @private\n     */\n    TQuery_.prototype._appliesToNextNode;\n    /** @type {?} */\n    TQuery_.prototype.metadata;\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    /** @type {?} */\n    const localNames = tNode.localNames;\n    if (localNames !== null) {\n        for (let i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return (/** @type {?} */ (localNames[i + 1]));\n            }\n        }\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction createResultByTNodeType(tNode, currentView) {\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        return createElementRef(ElementRef, tNode, currentView);\n    }\n    else if (tNode.type === 0 /* Container */) {\n        return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n    }\n    return null;\n}\n/**\n * @param {?} lView\n * @param {?} tNode\n * @param {?} matchingIdx\n * @param {?} read\n * @return {?}\n */\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\n    if (matchingIdx === -1) {\n        // if read token and / or strategy is not specified, detect it using appropriate tNode type\n        return createResultByTNodeType(tNode, lView);\n    }\n    else if (matchingIdx === -2) {\n        // read a special token from a node injector\n        return createSpecialToken(lView, tNode, read);\n    }\n    else {\n        // read a token\n        return getNodeInjectable(lView[TVIEW].data, lView, matchingIdx, (/** @type {?} */ (tNode)));\n    }\n}\n/**\n * @param {?} lView\n * @param {?} tNode\n * @param {?} read\n * @return {?}\n */\nfunction createSpecialToken(lView, tNode, read) {\n    if (read === ElementRef) {\n        return createElementRef(ElementRef, tNode, lView);\n    }\n    else if (read === TemplateRef) {\n        return createTemplateRef(TemplateRef, ElementRef, tNode, lView);\n    }\n    else if (read === ViewContainerRef) {\n        ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n        return createContainerRef(ViewContainerRef, ElementRef, (/** @type {?} */ (tNode)), lView);\n    }\n    else {\n        ngDevMode &&\n            throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\n    }\n}\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n * @template T\n * @param {?} lView\n * @param {?} tQuery\n * @param {?} queryIndex\n * @return {?}\n */\nfunction materializeViewResults(lView, tQuery, queryIndex) {\n    /** @type {?} */\n    const lQuery = (/** @type {?} */ ((/** @type {?} */ (lView[QUERIES])).queries))[queryIndex];\n    if (lQuery.matches === null) {\n        /** @type {?} */\n        const tViewData = lView[TVIEW].data;\n        /** @type {?} */\n        const tQueryMatches = (/** @type {?} */ (tQuery.matches));\n        /** @type {?} */\n        const result = new Array(tQueryMatches.length / 2);\n        for (let i = 0; i < tQueryMatches.length; i += 2) {\n            /** @type {?} */\n            const matchedNodeIdx = tQueryMatches[i];\n            if (matchedNodeIdx < 0) {\n                // we at the <ng-template> marker which might have results in views created based on this\n                // <ng-template> - those results will be in separate views though, so here we just leave\n                // null as a placeholder\n                result[i / 2] = null;\n            }\n            else {\n                ngDevMode && assertDataInRange(tViewData, matchedNodeIdx);\n                /** @type {?} */\n                const tNode = (/** @type {?} */ (tViewData[matchedNodeIdx]));\n                result[i / 2] =\n                    createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read);\n            }\n        }\n        lQuery.matches = result;\n    }\n    return lQuery.matches;\n}\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n * @template T\n * @param {?} lView\n * @param {?} queryIndex\n * @param {?} result\n * @return {?}\n */\nfunction collectQueryResults(lView, queryIndex, result) {\n    /** @type {?} */\n    const tQuery = (/** @type {?} */ (lView[TVIEW].queries)).getByIndex(queryIndex);\n    /** @type {?} */\n    const tQueryMatches = tQuery.matches;\n    if (tQueryMatches !== null) {\n        /** @type {?} */\n        const lViewResults = materializeViewResults(lView, tQuery, queryIndex);\n        for (let i = 0; i < tQueryMatches.length; i += 2) {\n            /** @type {?} */\n            const tNodeIdx = tQueryMatches[i];\n            if (tNodeIdx > 0) {\n                /** @type {?} */\n                const viewResult = lViewResults[i / 2];\n                ngDevMode && assertDefined(viewResult, 'materialized query result should be defined');\n                result.push((/** @type {?} */ (viewResult)));\n            }\n            else {\n                /** @type {?} */\n                const childQueryIndex = tQueryMatches[i + 1];\n                /** @type {?} */\n                const declarationLContainer = (/** @type {?} */ (lView[-tNodeIdx]));\n                ngDevMode && assertLContainer(declarationLContainer);\n                // collect matches for views inserted in this container\n                for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n                    /** @type {?} */\n                    const embeddedLView = declarationLContainer[i];\n                    if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n                        collectQueryResults(embeddedLView, childQueryIndex, result);\n                    }\n                }\n                // collect matches for views created from this declaration container and inserted into\n                // different containers\n                if (declarationLContainer[MOVED_VIEWS] !== null) {\n                    for (let embeddedLView of (/** @type {?} */ (declarationLContainer[MOVED_VIEWS]))) {\n                        collectQueryResults(embeddedLView, childQueryIndex, result);\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * \\@codeGenApi\n * @param {?} queryList\n * @return {?} `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n */\nfunction ÉµÉµqueryRefresh(queryList) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const queryIndex = getCurrentQueryIndex();\n    setCurrentQueryIndex(queryIndex + 1);\n    /** @type {?} */\n    const tQuery = getTQuery(lView[TVIEW], queryIndex);\n    if (queryList.dirty && (isCreationMode() === tQuery.metadata.isStatic)) {\n        if (tQuery.matches === null) {\n            queryList.reset([]);\n        }\n        else {\n            /** @type {?} */\n            const result = tQuery.crossesNgTemplate ? collectQueryResults(lView, queryIndex, []) :\n                materializeViewResults(lView, tQuery, queryIndex);\n            queryList.reset(result);\n            queryList.notifyOnChanges();\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Creates new QueryList for a static view query.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n *\n * @return {?}\n */\nfunction ÉµÉµstaticViewQuery(predicate, descend, read) {\n    viewQueryInternal(getLView(), predicate, descend, read, true);\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n *\n * @return {?}\n */\nfunction ÉµÉµviewQuery(predicate, descend, read) {\n    viewQueryInternal(getLView(), predicate, descend, read, false);\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} predicate\n * @param {?} descend\n * @param {?} read\n * @param {?} isStatic\n * @return {?}\n */\nfunction viewQueryInternal(lView, predicate, descend, read, isStatic) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        createTQuery(tView, new TQueryMetadata_(predicate, descend, isStatic, read), -1);\n        if (isStatic) {\n            tView.staticViewQueries = true;\n        }\n    }\n    createLQuery(lView);\n}\n/**\n * Loads a QueryList corresponding to the current view query.\n *\n * \\@codeGenApi\n * @template T\n * @return {?}\n */\nfunction ÉµÉµloadViewQuery() {\n    return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * \\@codeGenApi\n * @template T\n * @param {?} directiveIndex Current directive index\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n *\n */\nfunction ÉµÉµcontentQuery(directiveIndex, predicate, descend, read) {\n    contentQueryInternal(getLView(), predicate, descend, read, false, getPreviousOrParentTNode(), directiveIndex);\n}\n/**\n * Registers a QueryList, associated with a static content query, for later refresh\n * (part of a view refresh).\n *\n * \\@codeGenApi\n * @template T\n * @param {?} directiveIndex Current directive index\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n *\n */\nfunction ÉµÉµstaticContentQuery(directiveIndex, predicate, descend, read) {\n    contentQueryInternal(getLView(), predicate, descend, read, true, getPreviousOrParentTNode(), directiveIndex);\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} predicate\n * @param {?} descend\n * @param {?} read\n * @param {?} isStatic\n * @param {?} tNode\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction contentQueryInternal(lView, predicate, descend, read, isStatic, tNode, directiveIndex) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        createTQuery(tView, new TQueryMetadata_(predicate, descend, isStatic, read), tNode.index);\n        saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n        if (isStatic) {\n            tView.staticContentQueries = true;\n        }\n    }\n    createLQuery(lView);\n}\n/**\n * Loads a QueryList corresponding to the current content query.\n *\n * \\@codeGenApi\n * @template T\n * @return {?}\n */\nfunction ÉµÉµloadContentQuery() {\n    return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} queryIndex\n * @return {?}\n */\nfunction loadQueryInternal(lView, queryIndex) {\n    ngDevMode &&\n        assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n    ngDevMode && assertDataInRange((/** @type {?} */ (lView[QUERIES])).queries, queryIndex);\n    return (/** @type {?} */ (lView[QUERIES])).queries[queryIndex].queryList;\n}\n/**\n * @template T\n * @param {?} lView\n * @return {?}\n */\nfunction createLQuery(lView) {\n    /** @type {?} */\n    const queryList = new QueryList();\n    storeCleanupWithContext(lView, queryList, queryList.destroy);\n    if (lView[QUERIES] === null)\n        lView[QUERIES] = new LQueries_();\n    (/** @type {?} */ (lView[QUERIES])).queries.push(new LQuery_(queryList));\n}\n/**\n * @param {?} tView\n * @param {?} metadata\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction createTQuery(tView, metadata, nodeIndex) {\n    if (tView.queries === null)\n        tView.queries = new TQueries_();\n    tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\n/**\n * @param {?} tView\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n    /** @type {?} */\n    const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n    /** @type {?} */\n    const lastSavedDirectiveIndex = tView.contentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n    if (directiveIndex !== lastSavedDirectiveIndex) {\n        tViewContentQueries.push((/** @type {?} */ (tView.queries)).length - 1, directiveIndex);\n    }\n}\n/**\n * @param {?} tView\n * @param {?} index\n * @return {?}\n */\nfunction getTQuery(tView, index) {\n    ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n    return (/** @type {?} */ (tView.queries)).getByIndex(index);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * \\@codeGenApi\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction ÉµÉµtemplateRefExtractor(tNode, currentView) {\n    return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n}\n/**\n * Returns the appropriate `ChangeDetectorRef` for a pipe.\n *\n * \\@codeGenApi\n * @param {?=} flags\n * @return {?}\n */\nfunction ÉµÉµinjectPipeChangeDetectorRef(flags = InjectFlags.Default) {\n    /** @type {?} */\n    const value = injectChangeDetectorRef(true);\n    if (value == null && !(flags & InjectFlags.Optional)) {\n        throw new Error(`No provider for ChangeDetectorRef!`);\n    }\n    else {\n        return value;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst Éµ0$e = /**\n * @return {?}\n */\n() => ({\n    'ÉµÉµattribute': ÉµÉµattribute,\n    'ÉµÉµattributeInterpolate1': ÉµÉµattributeInterpolate1,\n    'ÉµÉµattributeInterpolate2': ÉµÉµattributeInterpolate2,\n    'ÉµÉµattributeInterpolate3': ÉµÉµattributeInterpolate3,\n    'ÉµÉµattributeInterpolate4': ÉµÉµattributeInterpolate4,\n    'ÉµÉµattributeInterpolate5': ÉµÉµattributeInterpolate5,\n    'ÉµÉµattributeInterpolate6': ÉµÉµattributeInterpolate6,\n    'ÉµÉµattributeInterpolate7': ÉµÉµattributeInterpolate7,\n    'ÉµÉµattributeInterpolate8': ÉµÉµattributeInterpolate8,\n    'ÉµÉµattributeInterpolateV': ÉµÉµattributeInterpolateV,\n    'ÉµÉµdefineBase': ÉµÉµdefineBase,\n    'ÉµÉµdefineComponent': ÉµÉµdefineComponent,\n    'ÉµÉµdefineDirective': ÉµÉµdefineDirective,\n    'ÉµÉµdefineInjectable': ÉµÉµdefineInjectable,\n    'ÉµÉµdefineInjector': ÉµÉµdefineInjector,\n    'ÉµÉµdefineNgModule': ÉµÉµdefineNgModule,\n    'ÉµÉµdefinePipe': ÉµÉµdefinePipe,\n    'ÉµÉµdirectiveInject': ÉµÉµdirectiveInject,\n    'ÉµÉµgetFactoryOf': ÉµÉµgetFactoryOf,\n    'ÉµÉµgetInheritedFactory': ÉµÉµgetInheritedFactory,\n    'ÉµÉµinject': ÉµÉµinject,\n    'ÉµÉµinjectAttribute': ÉµÉµinjectAttribute,\n    'ÉµÉµinjectPipeChangeDetectorRef': ÉµÉµinjectPipeChangeDetectorRef,\n    'ÉµÉµtemplateRefExtractor': ÉµÉµtemplateRefExtractor,\n    'ÉµÉµNgOnChangesFeature': ÉµÉµNgOnChangesFeature,\n    'ÉµÉµProvidersFeature': ÉµÉµProvidersFeature,\n    'ÉµÉµInheritDefinitionFeature': ÉµÉµInheritDefinitionFeature,\n    'ÉµÉµcontainer': ÉµÉµcontainer,\n    'ÉµÉµnextContext': ÉµÉµnextContext,\n    'ÉµÉµcontainerRefreshStart': ÉµÉµcontainerRefreshStart,\n    'ÉµÉµcontainerRefreshEnd': ÉµÉµcontainerRefreshEnd,\n    'ÉµÉµnamespaceHTML': ÉµÉµnamespaceHTML,\n    'ÉµÉµnamespaceMathML': ÉµÉµnamespaceMathML,\n    'ÉµÉµnamespaceSVG': ÉµÉµnamespaceSVG,\n    'ÉµÉµenableBindings': ÉµÉµenableBindings,\n    'ÉµÉµdisableBindings': ÉµÉµdisableBindings,\n    'ÉµÉµallocHostVars': ÉµÉµallocHostVars,\n    'ÉµÉµelementStart': ÉµÉµelementStart,\n    'ÉµÉµelementEnd': ÉµÉµelementEnd,\n    'ÉµÉµelement': ÉµÉµelement,\n    'ÉµÉµelementContainerStart': ÉµÉµelementContainerStart,\n    'ÉµÉµelementContainerEnd': ÉµÉµelementContainerEnd,\n    'ÉµÉµelementContainer': ÉµÉµelementContainer,\n    'ÉµÉµpureFunction0': ÉµÉµpureFunction0,\n    'ÉµÉµpureFunction1': ÉµÉµpureFunction1,\n    'ÉµÉµpureFunction2': ÉµÉµpureFunction2,\n    'ÉµÉµpureFunction3': ÉµÉµpureFunction3,\n    'ÉµÉµpureFunction4': ÉµÉµpureFunction4,\n    'ÉµÉµpureFunction5': ÉµÉµpureFunction5,\n    'ÉµÉµpureFunction6': ÉµÉµpureFunction6,\n    'ÉµÉµpureFunction7': ÉµÉµpureFunction7,\n    'ÉµÉµpureFunction8': ÉµÉµpureFunction8,\n    'ÉµÉµpureFunctionV': ÉµÉµpureFunctionV,\n    'ÉµÉµgetCurrentView': ÉµÉµgetCurrentView,\n    'ÉµÉµrestoreView': ÉµÉµrestoreView,\n    'ÉµÉµlistener': ÉµÉµlistener,\n    'ÉµÉµload': ÉµÉµload,\n    'ÉµÉµprojection': ÉµÉµprojection,\n    'ÉµÉµupdateSyntheticHostBinding': ÉµÉµupdateSyntheticHostBinding,\n    'ÉµÉµcomponentHostSyntheticListener': ÉµÉµcomponentHostSyntheticListener,\n    'ÉµÉµpipeBind1': ÉµÉµpipeBind1,\n    'ÉµÉµpipeBind2': ÉµÉµpipeBind2,\n    'ÉµÉµpipeBind3': ÉµÉµpipeBind3,\n    'ÉµÉµpipeBind4': ÉµÉµpipeBind4,\n    'ÉµÉµpipeBindV': ÉµÉµpipeBindV,\n    'ÉµÉµprojectionDef': ÉµÉµprojectionDef,\n    'ÉµÉµhostProperty': ÉµÉµhostProperty,\n    'ÉµÉµproperty': ÉµÉµproperty,\n    'ÉµÉµpropertyInterpolate': ÉµÉµpropertyInterpolate,\n    'ÉµÉµpropertyInterpolate1': ÉµÉµpropertyInterpolate1,\n    'ÉµÉµpropertyInterpolate2': ÉµÉµpropertyInterpolate2,\n    'ÉµÉµpropertyInterpolate3': ÉµÉµpropertyInterpolate3,\n    'ÉµÉµpropertyInterpolate4': ÉµÉµpropertyInterpolate4,\n    'ÉµÉµpropertyInterpolate5': ÉµÉµpropertyInterpolate5,\n    'ÉµÉµpropertyInterpolate6': ÉµÉµpropertyInterpolate6,\n    'ÉµÉµpropertyInterpolate7': ÉµÉµpropertyInterpolate7,\n    'ÉµÉµpropertyInterpolate8': ÉµÉµpropertyInterpolate8,\n    'ÉµÉµpropertyInterpolateV': ÉµÉµpropertyInterpolateV,\n    'ÉµÉµpipe': ÉµÉµpipe,\n    'ÉµÉµqueryRefresh': ÉµÉµqueryRefresh,\n    'ÉµÉµviewQuery': ÉµÉµviewQuery,\n    'ÉµÉµstaticViewQuery': ÉµÉµstaticViewQuery,\n    'ÉµÉµstaticContentQuery': ÉµÉµstaticContentQuery,\n    'ÉµÉµloadViewQuery': ÉµÉµloadViewQuery,\n    'ÉµÉµcontentQuery': ÉµÉµcontentQuery,\n    'ÉµÉµloadContentQuery': ÉµÉµloadContentQuery,\n    'ÉµÉµreference': ÉµÉµreference,\n    'ÉµÉµelementHostAttrs': ÉµÉµelementHostAttrs,\n    'ÉµÉµclassMap': ÉµÉµclassMap,\n    'ÉµÉµclassMapInterpolate1': ÉµÉµclassMapInterpolate1,\n    'ÉµÉµclassMapInterpolate2': ÉµÉµclassMapInterpolate2,\n    'ÉµÉµclassMapInterpolate3': ÉµÉµclassMapInterpolate3,\n    'ÉµÉµclassMapInterpolate4': ÉµÉµclassMapInterpolate4,\n    'ÉµÉµclassMapInterpolate5': ÉµÉµclassMapInterpolate5,\n    'ÉµÉµclassMapInterpolate6': ÉµÉµclassMapInterpolate6,\n    'ÉµÉµclassMapInterpolate7': ÉµÉµclassMapInterpolate7,\n    'ÉµÉµclassMapInterpolate8': ÉµÉµclassMapInterpolate8,\n    'ÉµÉµclassMapInterpolateV': ÉµÉµclassMapInterpolateV,\n    'ÉµÉµstyling': ÉµÉµstyling,\n    'ÉµÉµstyleMap': ÉµÉµstyleMap,\n    'ÉµÉµstyleProp': ÉµÉµstyleProp,\n    'ÉµÉµstylePropInterpolate1': ÉµÉµstylePropInterpolate1,\n    'ÉµÉµstylePropInterpolate2': ÉµÉµstylePropInterpolate2,\n    'ÉµÉµstylePropInterpolate3': ÉµÉµstylePropInterpolate3,\n    'ÉµÉµstylePropInterpolate4': ÉµÉµstylePropInterpolate4,\n    'ÉµÉµstylePropInterpolate5': ÉµÉµstylePropInterpolate5,\n    'ÉµÉµstylePropInterpolate6': ÉµÉµstylePropInterpolate6,\n    'ÉµÉµstylePropInterpolate7': ÉµÉµstylePropInterpolate7,\n    'ÉµÉµstylePropInterpolate8': ÉµÉµstylePropInterpolate8,\n    'ÉµÉµstylePropInterpolateV': ÉµÉµstylePropInterpolateV,\n    'ÉµÉµstyleSanitizer': ÉµÉµstyleSanitizer,\n    'ÉµÉµstylingApply': ÉµÉµstylingApply,\n    'ÉµÉµclassProp': ÉµÉµclassProp,\n    'ÉµÉµselect': ÉµÉµselect,\n    'ÉµÉµtemplate': ÉµÉµtemplate,\n    'ÉµÉµtext': ÉµÉµtext,\n    'ÉµÉµtextBinding': ÉµÉµtextBinding,\n    'ÉµÉµtextInterpolate': ÉµÉµtextInterpolate,\n    'ÉµÉµtextInterpolate1': ÉµÉµtextInterpolate1,\n    'ÉµÉµtextInterpolate2': ÉµÉµtextInterpolate2,\n    'ÉµÉµtextInterpolate3': ÉµÉµtextInterpolate3,\n    'ÉµÉµtextInterpolate4': ÉµÉµtextInterpolate4,\n    'ÉµÉµtextInterpolate5': ÉµÉµtextInterpolate5,\n    'ÉµÉµtextInterpolate6': ÉµÉµtextInterpolate6,\n    'ÉµÉµtextInterpolate7': ÉµÉµtextInterpolate7,\n    'ÉµÉµtextInterpolate8': ÉµÉµtextInterpolate8,\n    'ÉµÉµtextInterpolateV': ÉµÉµtextInterpolateV,\n    'ÉµÉµembeddedViewStart': ÉµÉµembeddedViewStart,\n    'ÉµÉµembeddedViewEnd': ÉµÉµembeddedViewEnd,\n    'ÉµÉµi18n': ÉµÉµi18n,\n    'ÉµÉµi18nAttributes': ÉµÉµi18nAttributes,\n    'ÉµÉµi18nExp': ÉµÉµi18nExp,\n    'ÉµÉµi18nStart': ÉµÉµi18nStart,\n    'ÉµÉµi18nEnd': ÉµÉµi18nEnd,\n    'ÉµÉµi18nApply': ÉµÉµi18nApply,\n    'ÉµÉµi18nPostprocess': ÉµÉµi18nPostprocess,\n    'ÉµÉµi18nLocalize': ÉµÉµi18nLocalize,\n    'ÉµÉµresolveWindow': ÉµÉµresolveWindow,\n    'ÉµÉµresolveDocument': ÉµÉµresolveDocument,\n    'ÉµÉµresolveBody': ÉµÉµresolveBody,\n    'ÉµÉµsetComponentScope': ÉµÉµsetComponentScope,\n    'ÉµÉµsetNgModuleScope': ÉµÉµsetNgModuleScope,\n    'ÉµÉµsanitizeHtml': ÉµÉµsanitizeHtml,\n    'ÉµÉµsanitizeStyle': ÉµÉµsanitizeStyle,\n    'ÉµÉµdefaultStyleSanitizer': ÉµÉµdefaultStyleSanitizer,\n    'ÉµÉµsanitizeResourceUrl': ÉµÉµsanitizeResourceUrl,\n    'ÉµÉµsanitizeScript': ÉµÉµsanitizeScript,\n    'ÉµÉµsanitizeUrl': ÉµÉµsanitizeUrl,\n    'ÉµÉµsanitizeUrlOrResourceUrl': ÉµÉµsanitizeUrlOrResourceUrl,\n});\n/**\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n * @type {?}\n */\nconst angularCoreEnv = ((Éµ0$e))();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_ARRAY$4 = [];\n/**\n * @record\n */\nfunction ModuleQueueItem() { }\nif (false) {\n    /** @type {?} */\n    ModuleQueueItem.prototype.moduleType;\n    /** @type {?} */\n    ModuleQueueItem.prototype.ngModule;\n}\n/** @type {?} */\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n    moduleQueue.push({ moduleType, ngModule });\n}\n/** @type {?} */\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n * @return {?}\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n    if (!flushingModuleQueue) {\n        flushingModuleQueue = true;\n        try {\n            for (let i = moduleQueue.length - 1; i >= 0; i--) {\n                const { moduleType, ngModule } = moduleQueue[i];\n                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                    // dequeue\n                    moduleQueue.splice(i, 1);\n                    setScopeOnDeclaredComponents(moduleType, ngModule);\n                }\n            }\n        }\n        finally {\n            flushingModuleQueue = false;\n        }\n    }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n * @param {?} declaration\n * @return {?}\n */\nfunction isResolvedDeclaration(declaration) {\n    if (Array.isArray(declaration)) {\n        return declaration.every(isResolvedDeclaration);\n    }\n    return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `\\@NgModule` decorator.\n * @param {?} moduleType\n * @param {?=} ngModule\n * @return {?}\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n    compileNgModuleDefs((/** @type {?} */ (moduleType)), ngModule);\n    // Because we don't know if all declarations have resolved yet at the moment the\n    // NgModule decorator is executing, we're enqueueing the setting of module scope\n    // on its declarations to be run at a later time when all declarations for the module,\n    // including forward refs, have resolved.\n    enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n * @param {?} moduleType\n * @param {?} ngModule\n * @param {?=} allowDuplicateDeclarationsInRoot\n * @return {?}\n */\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n    /** @type {?} */\n    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY$4);\n    /** @type {?} */\n    /** @nocollapse */ let ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MODULE_DEF, {\n        configurable: true,\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (ngModuleDef === null) {\n                if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n                    // We need to assert this immediately, because allowing it to continue will cause it to\n                    // go into an infinite loop before we've reached the point where we throw all the errors.\n                    throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n                }\n                ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ngModuleDef.js`, {\n                    type: moduleType,\n                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY$4).map(resolveForwardRef),\n                    declarations: declarations.map(resolveForwardRef),\n                    imports: flatten(ngModule.imports || EMPTY_ARRAY$4)\n                        .map(resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    exports: flatten(ngModule.exports || EMPTY_ARRAY$4)\n                        .map(resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    emitInline: true,\n                    schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n                    id: ngModule.id || null,\n                });\n            }\n            return ngModuleDef;\n        })\n    });\n    /** @type {?} */\n    /** @nocollapse */ let ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (ngInjectorDef === null) {\n                ngDevMode && verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (moduleType)))), allowDuplicateDeclarationsInRoot);\n                /** @type {?} */\n                const meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    providers: ngModule.providers || EMPTY_ARRAY$4,\n                    imports: [\n                        (ngModule.imports || EMPTY_ARRAY$4).map(resolveForwardRef),\n                        (ngModule.exports || EMPTY_ARRAY$4).map(resolveForwardRef),\n                    ],\n                };\n                ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ngInjectorDef.js`, meta);\n            }\n            return ngInjectorDef;\n        }),\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} moduleType\n * @param {?} allowDuplicateDeclarationsInRoot\n * @param {?=} importingModule\n * @return {?}\n */\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n    if (verifiedNgModule.get(moduleType))\n        return;\n    verifiedNgModule.set(moduleType, true);\n    moduleType = resolveForwardRef(moduleType);\n    /** @type {?} */\n    let ngModuleDef;\n    if (importingModule) {\n        ngModuleDef = (/** @type {?} */ (getNgModuleDef(moduleType)));\n        if (!ngModuleDef) {\n            throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n    }\n    else {\n        ngModuleDef = getNgModuleDef(moduleType, true);\n    }\n    /** @type {?} */\n    const errors = [];\n    /** @type {?} */\n    const declarations = maybeUnwrapFn(ngModuleDef.declarations);\n    /** @type {?} */\n    const imports = maybeUnwrapFn(ngModuleDef.imports);\n    flatten(imports).map(unwrapModuleWithProvidersImports).forEach((/**\n     * @param {?} mod\n     * @return {?}\n     */\n    mod => {\n        verifySemanticsOfNgModuleImport(mod, moduleType);\n        verifySemanticsOfNgModuleDef(mod, false, moduleType);\n    }));\n    /** @type {?} */\n    const exports = maybeUnwrapFn(ngModuleDef.exports);\n    declarations.forEach(verifyDeclarationsHaveDefinitions);\n    /** @type {?} */\n    const combinedDeclarations = [\n        ...declarations.map(resolveForwardRef),\n        ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef),\n    ];\n    exports.forEach(verifyExportsAreDeclaredOrReExported);\n    declarations.forEach((/**\n     * @param {?} decl\n     * @return {?}\n     */\n    decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot)));\n    declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n    /** @type {?} */\n    const ngModule = getAnnotation(moduleType, 'NgModule');\n    if (ngModule) {\n        ngModule.imports &&\n            flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach((/**\n             * @param {?} mod\n             * @return {?}\n             */\n            mod => {\n                verifySemanticsOfNgModuleImport(mod, moduleType);\n                verifySemanticsOfNgModuleDef(mod, false, moduleType);\n            }));\n        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n        ngModule.entryComponents &&\n            deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);\n    }\n    // Throw Error if any errors were detected.\n    if (errors.length) {\n        throw new Error(errors.join('\\n'));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyDeclarationsHaveDefinitions(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n        if (!def) {\n            errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyExportsAreDeclaredOrReExported(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n            getPipeDef(type) && 'pipe';\n        if (kind) {\n            // only checked if we are declared as Component, Directive, or Pipe\n            // Modules don't need to be declared or imported.\n            if (combinedDeclarations.lastIndexOf(type) === -1) {\n                // We are exporting something which we don't explicitly declare or import.\n                errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n            }\n        }\n    }\n    /**\n     * @param {?} type\n     * @param {?} suppressErrors\n     * @return {?}\n     */\n    function verifyDeclarationIsUnique(type, suppressErrors) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const existingModule = ownerNgModule.get(type);\n        if (existingModule && existingModule !== moduleType) {\n            if (!suppressErrors) {\n                /** @type {?} */\n                const modules = [existingModule, moduleType].map(stringifyForError).sort();\n                errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +\n                    `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +\n                    `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n            }\n        }\n        else {\n            // Mark type as having owner.\n            ownerNgModule.set(type, moduleType);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyComponentIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const existingModule = ownerNgModule.get(type);\n        if (!existingModule) {\n            errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyCorrectBootstrapType(type) {\n        type = resolveForwardRef(type);\n        if (!getComponentDef(type)) {\n            errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        if (getComponentDef(type)) {\n            // We know we are component\n            /** @type {?} */\n            const component = getAnnotation(type, 'Component');\n            if (component && component.entryComponents) {\n                deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);\n            }\n        }\n    }\n    /**\n     * @param {?} type\n     * @param {?} importingModule\n     * @return {?}\n     */\n    function verifySemanticsOfNgModuleImport(type, importingModule) {\n        type = resolveForwardRef(type);\n        if (getComponentDef(type) || getDirectiveDef(type)) {\n            throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n        if (getPipeDef(type)) {\n            throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n    }\n}\n/**\n * @param {?} typeOrWithProviders\n * @return {?}\n */\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n    return ((/** @type {?} */ (typeOrWithProviders))).ngModule || typeOrWithProviders;\n}\n/**\n * @template T\n * @param {?} type\n * @param {?} name\n * @return {?}\n */\nfunction getAnnotation(type, name) {\n    /** @type {?} */\n    let annotation = null;\n    collect(type.__annotations__);\n    collect(type.decorators);\n    return annotation;\n    /**\n     * @param {?} annotations\n     * @return {?}\n     */\n    function collect(annotations) {\n        if (annotations) {\n            annotations.forEach(readAnnotation);\n        }\n    }\n    /**\n     * @param {?} decorator\n     * @return {?}\n     */\n    function readAnnotation(decorator) {\n        if (!annotation) {\n            /** @type {?} */\n            const proto = Object.getPrototypeOf(decorator);\n            if (proto.ngMetadataName == name) {\n                annotation = (/** @type {?} */ (decorator));\n            }\n            else if (decorator.type) {\n                /** @type {?} */\n                const proto = Object.getPrototypeOf(decorator.type);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator.args[0];\n                }\n            }\n        }\n    }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n * @type {?}\n */\nlet ownerNgModule = new Map();\n/** @type {?} */\nlet verifiedNgModule = new Map();\n/**\n * @return {?}\n */\nfunction resetCompiledComponents() {\n    ownerNgModule = new Map();\n    verifiedNgModule = new Map();\n    moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param {?} type\n * @return {?}\n */\nfunction computeCombinedExports(type) {\n    type = resolveForwardRef(type);\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = getNgModuleDef(type, true);\n    return [...flatten(maybeUnwrapFn(ngModuleDef.exports).map((/**\n         * @param {?} type\n         * @return {?}\n         */\n        (type) => {\n            /** @type {?} */\n            /** @nocollapse */ const ngModuleDef = getNgModuleDef(type);\n            if (ngModuleDef) {\n                verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (type)))), false);\n                return computeCombinedExports(type);\n            }\n            else {\n                return type;\n            }\n        })))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    /** @type {?} */\n    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY$4);\n    /** @type {?} */\n    const transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach((/**\n     * @param {?} declaration\n     * @return {?}\n     */\n    declaration => {\n        if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n            // An `ngComponentDef` field exists - go ahead and patch the component directly.\n            /** @type {?} */\n            const component = (/** @type {?} */ (declaration));\n            /** @type {?} */\n            const componentDef = (/** @type {?} */ (getComponentDef(component)));\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            ((/** @type {?} */ (declaration))).ngSelectorScope = moduleType;\n        }\n    }));\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n * @template C\n * @param {?} componentDef\n * @param {?} transitiveScopes\n * @return {?}\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = (/**\n     * @return {?}\n     */\n    () => Array.from(transitiveScopes.compilation.directives)\n        .map((/**\n     * @param {?} dir\n     * @return {?}\n     */\n    dir => dir.hasOwnProperty(NG_COMPONENT_DEF) ? (/** @type {?} */ (getComponentDef(dir))) :\n        (/** @type {?} */ (getDirectiveDef(dir)))))\n        .filter((/**\n     * @param {?} def\n     * @return {?}\n     */\n    def => !!def)));\n    componentDef.pipeDefs = (/**\n     * @return {?}\n     */\n    () => Array.from(transitiveScopes.compilation.pipes).map((/**\n     * @param {?} pipe\n     * @return {?}\n     */\n    pipe => (/** @type {?} */ (getPipeDef(pipe))))));\n    componentDef.schemas = transitiveScopes.schemas;\n    // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n    // may face a problem where previously compiled defs available to a given Component/Directive\n    // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n    // order to avoid this problem, we force fresh TView to be created.\n    componentDef.tView = null;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n * @template T\n * @param {?} moduleType\n * @param {?=} processNgModuleFn\n * @return {?}\n */\nfunction transitiveScopesFor(moduleType, processNgModuleFn) {\n    if (!isNgModule(moduleType)) {\n        throw new Error(`${moduleType.name} does not have an ngModuleDef`);\n    }\n    /** @type {?} */\n    const def = (/** @type {?} */ (getNgModuleDef(moduleType)));\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    /** @type {?} */\n    const scopes = {\n        schemas: def.schemas || null,\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    maybeUnwrapFn(def.declarations).forEach((/**\n     * @param {?} declared\n     * @return {?}\n     */\n    declared => {\n        /** @type {?} */\n        const declaredWithDefs = (/** @type {?} */ (declared));\n        if (getPipeDef(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    }));\n    maybeUnwrapFn(def.imports).forEach((/**\n     * @template I\n     * @param {?} imported\n     * @return {?}\n     */\n    (imported) => {\n        /** @type {?} */\n        const importedType = (/** @type {?} */ (imported));\n        if (!isNgModule(importedType)) {\n            throw new Error(`Importing ${importedType.name} which does not have an ngModuleDef`);\n        }\n        if (processNgModuleFn) {\n            processNgModuleFn((/** @type {?} */ (importedType)));\n        }\n        // When this module imports another, the imported module's exported directives and pipes are\n        // added to the compilation scope of this module.\n        /** @type {?} */\n        const importedScope = transitiveScopesFor(importedType, processNgModuleFn);\n        importedScope.exported.directives.forEach((/**\n         * @param {?} entry\n         * @return {?}\n         */\n        entry => scopes.compilation.directives.add(entry)));\n        importedScope.exported.pipes.forEach((/**\n         * @param {?} entry\n         * @return {?}\n         */\n        entry => scopes.compilation.pipes.add(entry)));\n    }));\n    maybeUnwrapFn(def.exports).forEach((/**\n     * @template E\n     * @param {?} exported\n     * @return {?}\n     */\n    (exported) => {\n        /** @type {?} */\n        const exportedType = (/** @type {?} */ (exported));\n        // Either the type is a module, a pipe, or a component/directive (which may not have an\n        // ngComponentDef as it might be compiled asynchronously).\n        if (isNgModule(exportedType)) {\n            // When this module exports another, the exported module's exported directives and pipes are\n            // added to both the compilation and exported scopes of this module.\n            /** @type {?} */\n            const exportedScope = transitiveScopesFor(exportedType, processNgModuleFn);\n            exportedScope.exported.directives.forEach((/**\n             * @param {?} entry\n             * @return {?}\n             */\n            entry => {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            }));\n            exportedScope.exported.pipes.forEach((/**\n             * @param {?} entry\n             * @return {?}\n             */\n            entry => {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            }));\n        }\n        else if (getPipeDef(exportedType)) {\n            scopes.exported.pipes.add(exportedType);\n        }\n        else {\n            scopes.exported.directives.add(exportedType);\n        }\n    }));\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isModuleWithProviders(value) {\n    return ((/** @type {?} */ (value))).ngModule !== undefined;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNgModule(value) {\n    return !!getNgModuleDef(value);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction compileComponent(type, metadata) {\n    /** @type {?} */\n    /** @nocollapse */ let ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(type, metadata);\n    Object.defineProperty(type, NG_COMPONENT_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const compiler = getCompilerFacade();\n            if (ngComponentDef === null) {\n                if (componentNeedsResolution(metadata)) {\n                    /** @type {?} */\n                    const error = [`Component '${type.name}' is not resolved:`];\n                    if (metadata.templateUrl) {\n                        error.push(` - templateUrl: ${metadata.templateUrl}`);\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n                    }\n                    error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n                    throw new Error(error.join('\\n'));\n                }\n                /** @type {?} */\n                const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;\n                /** @type {?} */\n                const meta = Object.assign({}, directiveMetadata(type, metadata), { typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl), template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY, animations: metadata.animations, directives: [], changeDetection: metadata.changeDetection, pipes: new Map(), encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated, interpolation: metadata.interpolation, viewProviders: metadata.viewProviders || null });\n                if (meta.usesInheritance) {\n                    addBaseDefToUndecoratedParents(type);\n                }\n                ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n                // When NgModule decorator executed, we enqueued the module definition such that\n                // it would only dequeue and add itself as module scope to all of its declarations,\n                // but only if  if all of its declarations had resolved. This call runs the check\n                // to see if any modules that are in the queue can be dequeued and add scope to\n                // their declarations.\n                flushModuleScopingQueueAsMuchAsPossible();\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    /** @type {?} */\n                    const scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(ngComponentDef, scopes);\n                }\n            }\n            return ngComponentDef;\n        }),\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n    // Add ngInjectableDef so components are reachable through the module injector by default\n    // This is mostly to support injecting components in tests. In real application code,\n    // components should be retrieved through the node injector, so this isn't a problem.\n    compileInjectable(type);\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction hasSelectorScope(component) {\n    return ((/** @type {?} */ (component))).ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n * @param {?} type\n * @param {?} directive\n * @return {?}\n */\nfunction compileDirective(type, directive) {\n    /** @type {?} */\n    /** @nocollapse */ let ngDirectiveDef = null;\n    Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (ngDirectiveDef === null) {\n                /** @type {?} */\n                const name = type && type.name;\n                /** @type {?} */\n                const sourceMapUrl = `ng:///${name}/ngDirectiveDef.js`;\n                /** @type {?} */\n                const compiler = getCompilerFacade();\n                /** @type {?} */\n                const facade = directiveMetadata((/** @type {?} */ (type)), directive);\n                facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\n                if (facade.usesInheritance) {\n                    addBaseDefToUndecoratedParents(type);\n                }\n                ngDirectiveDef = compiler.compileDirective(angularCoreEnv, sourceMapUrl, facade);\n            }\n            return ngDirectiveDef;\n        }),\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n    // Add ngInjectableDef so directives are reachable through the module injector by default\n    // This is mostly to support injecting directives in tests. In real application code,\n    // directives should be retrieved through the node injector, so this isn't a problem.\n    compileInjectable(type);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction directiveMetadata(type, metadata) {\n    // Reflect inputs and outputs.\n    /** @type {?} */\n    const propMetadata = getReflect().ownPropMetadata(type);\n    return {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        selector: (/** @type {?} */ (metadata.selector)),\n        deps: reflectDependencies(type),\n        host: metadata.host || EMPTY_OBJ,\n        propMetadata: propMetadata,\n        inputs: metadata.inputs || EMPTY_ARRAY,\n        outputs: metadata.outputs || EMPTY_ARRAY,\n        queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n        lifecycle: { usesOnChanges: type.prototype.hasOwnProperty('ngOnChanges') },\n        typeSourceSpan: (/** @type {?} */ (null)),\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: extractExportAs(metadata.exportAs),\n        providers: metadata.providers || null,\n        viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n    };\n}\n/**\n * Adds an `ngBaseDef` to all parent classes of a type that don't have an Angular decorator.\n * @param {?} type\n * @return {?}\n */\nfunction addBaseDefToUndecoratedParents(type) {\n    /** @type {?} */\n    const objPrototype = Object.prototype;\n    /** @type {?} */\n    let parent = Object.getPrototypeOf(type);\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objPrototype) {\n        // Since inheritance works if the class was annotated already, we only need to add\n        // the base def if there are no annotations and the base def hasn't been created already.\n        if (!getDirectiveDef(parent) && !getComponentDef(parent) && !getBaseDef(parent)) {\n            /** @type {?} */\n            const facade = extractBaseDefMetadata(parent);\n            facade && compileBase(parent, facade);\n        }\n        parent = Object.getPrototypeOf(parent);\n    }\n}\n/**\n * Compiles the base metadata into a base definition.\n * @param {?} type\n * @param {?} facade\n * @return {?}\n */\nfunction compileBase(type, facade) {\n    /** @type {?} */\n    /** @nocollapse */ let ngBaseDef = null;\n    Object.defineProperty(type, NG_BASE_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (ngBaseDef === null) {\n                /** @type {?} */\n                const name = type && type.name;\n                /** @type {?} */\n                const sourceMapUrl = `ng://${name}/ngBaseDef.js`;\n                /** @type {?} */\n                const compiler = getCompilerFacade();\n                ngBaseDef = compiler.compileBase(angularCoreEnv, sourceMapUrl, facade);\n            }\n            return ngBaseDef;\n        }),\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * Extracts the metadata necessary to construct an `ngBaseDef` from a class.\n * @param {?} type\n * @return {?}\n */\nfunction extractBaseDefMetadata(type) {\n    /** @type {?} */\n    const propMetadata = getReflect().ownPropMetadata(type);\n    /** @type {?} */\n    const viewQueries = extractQueriesMetadata(type, propMetadata, isViewQuery);\n    /** @type {?} */\n    const queries = extractQueriesMetadata(type, propMetadata, isContentQuery);\n    /** @type {?} */\n    let inputs;\n    /** @type {?} */\n    let outputs;\n    // We only need to know whether there are any HostListener or HostBinding\n    // decorators present, the parsing logic is in the compiler already.\n    /** @type {?} */\n    let hasHostDecorators = false;\n    for (const field in propMetadata) {\n        propMetadata[field].forEach((/**\n         * @param {?} ann\n         * @return {?}\n         */\n        ann => {\n            /** @type {?} */\n            const metadataName = ann.ngMetadataName;\n            if (metadataName === 'Input') {\n                inputs = inputs || {};\n                inputs[field] = ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;\n            }\n            else if (metadataName === 'Output') {\n                outputs = outputs || {};\n                outputs[field] = ann.bindingPropertyName || field;\n            }\n            else if (metadataName === 'HostBinding' || metadataName === 'HostListener') {\n                hasHostDecorators = true;\n            }\n        }));\n    }\n    // Only generate the base def if there's any info inside it.\n    if (inputs || outputs || viewQueries.length || queries.length || hasHostDecorators) {\n        return { name: type.name, type, inputs, outputs, viewQueries, queries, propMetadata };\n    }\n    return null;\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction convertToR3QueryPredicate(selector) {\n    return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\n/**\n * @param {?} propertyName\n * @param {?} ann\n * @return {?}\n */\nfunction convertToR3QueryMetadata(propertyName, ann) {\n    return {\n        propertyName: propertyName,\n        predicate: convertToR3QueryPredicate(ann.selector),\n        descendants: ann.descendants,\n        first: ann.first,\n        read: ann.read ? ann.read : null,\n        static: !!ann.static\n    };\n}\n/**\n * @param {?} type\n * @param {?} propMetadata\n * @param {?} isQueryAnn\n * @return {?}\n */\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n    /** @type {?} */\n    const queriesMeta = [];\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            /** @type {?} */\n            const annotations = propMetadata[field];\n            annotations.forEach((/**\n             * @param {?} ann\n             * @return {?}\n             */\n            ann => {\n                if (isQueryAnn(ann)) {\n                    if (!ann.selector) {\n                        throw new Error(`Can't construct a query for the property \"${field}\" of ` +\n                            `\"${stringifyForError(type)}\" since the query selector wasn't defined.`);\n                    }\n                    if (annotations.some(isInputAnn)) {\n                        throw new Error(`Cannot combine @Input decorators with query decorators`);\n                    }\n                    queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                }\n            }));\n        }\n    }\n    return queriesMeta;\n}\n/**\n * @param {?} exportAs\n * @return {?}\n */\nfunction extractExportAs(exportAs) {\n    if (exportAs === undefined) {\n        return null;\n    }\n    return exportAs.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isContentQuery(value) {\n    /** @type {?} */\n    const name = value.ngMetadataName;\n    return name === 'ContentChild' || name === 'ContentChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isViewQuery(value) {\n    /** @type {?} */\n    const name = value.ngMetadataName;\n    return name === 'ViewChild' || name === 'ViewChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isInputAnn(value) {\n    return value.ngMetadataName === 'Input';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction splitByComma(value) {\n    return value.split(',').map((/**\n     * @param {?} piece\n     * @return {?}\n     */\n    piece => piece.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\nfunction compilePipe(type, meta) {\n    /** @type {?} */\n    /** @nocollapse */ let ngPipeDef = null;\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (ngPipeDef === null) {\n                /** @type {?} */\n                const typeName = type.name;\n                ngPipeDef =\n                    getCompilerFacade().compilePipe(angularCoreEnv, `ng:///${typeName}/ngPipeDef.js`, {\n                        type: type,\n                        typeArgumentCount: 0,\n                        name: typeName,\n                        deps: reflectDependencies(type),\n                        pipeName: meta.name,\n                        pure: meta.pure !== undefined ? meta.pure : true\n                    });\n            }\n            return ngPipeDef;\n        }),\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Type of the Directive decorator / constructor function.\n * \\@publicApi\n * @record\n */\nfunction DirectiveDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ0$f = /**\n * @param {?=} dir\n * @return {?}\n */\n(dir = {}) => dir, Éµ1$4 = /**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\n(type, meta) => SWITCH_COMPILE_DIRECTIVE(type, meta);\n/**\n * Type of the Directive metadata.\n *\n * \\@publicApi\n * @type {?}\n */\nconst Directive = makeDecorator('Directive', (Éµ0$f), undefined, undefined, (Éµ1$4));\n/**\n * Component decorator interface\n *\n * \\@publicApi\n * @record\n */\nfunction ComponentDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ2$1 = /**\n * @param {?=} c\n * @return {?}\n */\n(c = {}) => (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c)), Éµ3$1 = /**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\n(type, meta) => SWITCH_COMPILE_COMPONENT(type, meta);\n/**\n * Component decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Component = makeDecorator('Component', (Éµ2$1), Directive, undefined, (Éµ3$1));\n/**\n * Type of the Pipe decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction PipeDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ4 = /**\n * @param {?} p\n * @return {?}\n */\n(p) => (Object.assign({ pure: true }, p)), Éµ5 = /**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\n(type, meta) => SWITCH_COMPILE_PIPE(type, meta);\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Pipe = makeDecorator('Pipe', (Éµ4), undefined, undefined, (Éµ5));\n/**\n * \\@publicApi\n * @record\n */\nfunction InputDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ6 = /**\n * @param {?=} bindingPropertyName\n * @return {?}\n */\n(bindingPropertyName) => ({ bindingPropertyName });\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Input = makePropDecorator('Input', (Éµ6));\n/**\n * Type of the Output decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction OutputDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ7 = /**\n * @param {?=} bindingPropertyName\n * @return {?}\n */\n(bindingPropertyName) => ({ bindingPropertyName });\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Output = makePropDecorator('Output', (Éµ7));\n/**\n * Type of the HostBinding decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction HostBindingDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ8 = /**\n * @param {?=} hostPropertyName\n * @return {?}\n */\n(hostPropertyName) => ({ hostPropertyName });\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst HostBinding = makePropDecorator('HostBinding', (Éµ8));\n/**\n * Type of the HostListener decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction HostListenerDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ9 = /**\n * @param {?=} eventName\n * @param {?=} args\n * @return {?}\n */\n(eventName, args) => ({ eventName, args });\n/**\n * Decorator that binds a DOM event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n *\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * \\@usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```ts\n * \\@Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n * \\@HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * \\@Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst HostListener = makePropDecorator('HostListener', (Éµ9));\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__PRE_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__PRE_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents the expansion of an `NgModule` into its scopes.\n *\n * A scope is a set of directives and pipes that are visible in a particular context. Each\n * `NgModule` has two scopes. The `compilation` scope is the set of directives and pipes that will\n * be recognized in the templates of components declared by the module. The `exported` scope is the\n * set of directives and pipes exported by a module (that is, module B's exported scope gets added\n * to module A's compilation scope when module A imports B).\n * @record\n */\nfunction NgModuleTransitiveScopes() { }\nif (false) {\n    /** @type {?} */\n    NgModuleTransitiveScopes.prototype.compilation;\n    /** @type {?} */\n    NgModuleTransitiveScopes.prototype.exported;\n    /** @type {?} */\n    NgModuleTransitiveScopes.prototype.schemas;\n}\n/**\n * Runtime link information for NgModules.\n *\n * This is the internal data structure used by the runtime to assemble components, directives,\n * pipes, and injectors.\n *\n * NOTE: Always use `ÉµÉµdefineNgModule` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n * @record\n * @template T\n */\nfunction NgModuleDef() { }\nif (false) {\n    /**\n     * Token representing the module. Used by DI.\n     * @type {?}\n     */\n    NgModuleDef.prototype.type;\n    /**\n     * List of components to bootstrap.\n     * @type {?}\n     */\n    NgModuleDef.prototype.bootstrap;\n    /**\n     * List of components, directives, and pipes declared by this module.\n     * @type {?}\n     */\n    NgModuleDef.prototype.declarations;\n    /**\n     * List of modules or `ModuleWithProviders` imported by this module.\n     * @type {?}\n     */\n    NgModuleDef.prototype.imports;\n    /**\n     * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n     * module.\n     * @type {?}\n     */\n    NgModuleDef.prototype.exports;\n    /**\n     * Cached value of computed `transitiveCompileScopes` for this module.\n     *\n     * This should never be read directly, but accessed via `transitiveScopesFor`.\n     * @type {?}\n     */\n    NgModuleDef.prototype.transitiveCompileScopes;\n    /**\n     * The set of schemas that declare elements to be allowed in the NgModule.\n     * @type {?}\n     */\n    NgModuleDef.prototype.schemas;\n    /**\n     * Unique ID for the module with which it should be registered.\n     * @type {?}\n     */\n    NgModuleDef.prototype.id;\n}\n/**\n * A wrapper around an NgModule that associates it with the providers.\n *\n * @param T the module type. In Ivy applications, this must be explicitly\n * provided.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction ModuleWithProviders() { }\nif (false) {\n    /** @type {?} */\n    ModuleWithProviders.prototype.ngModule;\n    /** @type {?|undefined} */\n    ModuleWithProviders.prototype.providers;\n}\n/**\n * Type of the NgModule decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nfunction NgModuleDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\nconst Éµ0$g = /**\n * @param {?} ngModule\n * @return {?}\n */\n(ngModule) => ngModule, Éµ1$5 = /**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` and `entryComponents` options configure the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\n(type, meta) => SWITCH_COMPILE_NGMODULE(type, meta);\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst NgModule = makeDecorator('NgModule', (Éµ0$g), undefined, undefined, (Éµ1$5));\n/**\n * \\@description\n * Hook for manual bootstrapping of the application instead of using bootstrap array in \\@NgModule\n * annotation.\n *\n * Reference to the current application is provided as a parameter.\n *\n * See [\"Bootstrapping\"](guide/bootstrapping) and [\"Entry components\"](guide/entry-components).\n *\n * \\@usageNotes\n * ```typescript\n * class AppModule implements DoBootstrap {\n *   ngDoBootstrap(appRef: ApplicationRef) {\n *     appRef.bootstrap(AppComponent); // Or some other component\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @record\n */\nfunction DoBootstrap() { }\nif (false) {\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    DoBootstrap.prototype.ngDoBootstrap = function (appRef) { };\n}\n/**\n * @param {?} moduleType\n * @param {?=} metadata\n * @return {?}\n */\nfunction preR3NgModuleCompile(moduleType, metadata) {\n    /** @type {?} */\n    let imports = (metadata && metadata.imports) || [];\n    if (metadata && metadata.exports) {\n        imports = [...imports, metadata.exports];\n    }\n    ((/** @type {?} */ (moduleType))).ngInjectorDef = ÉµÉµdefineInjector({\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n        providers: metadata && metadata.providers,\n        imports: imports,\n    });\n}\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A function that will be executed when an application is initialized.\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n *\n * \\@publicApi\n */\nclass ApplicationInitStatus {\n    /**\n     * @param {?} appInits\n     */\n    constructor(appInits) {\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise((/**\n         * @param {?} res\n         * @param {?} rej\n         * @return {?}\n         */\n        (res, rej) => {\n            this.resolve = res;\n            this.reject = rej;\n        }));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    runInitializers() {\n        if (this.initialized) {\n            return;\n        }\n        /** @type {?} */\n        const asyncInitPromises = [];\n        /** @type {?} */\n        const complete = (/**\n         * @return {?}\n         */\n        () => {\n            ((/** @type {?} */ (this))).done = true;\n            this.resolve();\n        });\n        if (this.appInits) {\n            for (let i = 0; i < this.appInits.length; i++) {\n                /** @type {?} */\n                const initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then((/**\n         * @return {?}\n         */\n        () => { complete(); })).catch((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => { this.reject(e); }));\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    }\n}\nApplicationInitStatus.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nApplicationInitStatus.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationInitStatus.prototype.resolve;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationInitStatus.prototype.reject;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationInitStatus.prototype.initialized;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.donePromise;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.done;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationInitStatus.prototype.appInits;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@publicApi\n * @type {?}\n */\nconst APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nfunction _appIdRandomProviderFactory() {\n    return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@publicApi\n * @type {?}\n */\nconst APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: (/** @type {?} */ ([])),\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * \\@publicApi\n * @type {?}\n */\nconst PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * \\@publicApi\n * @type {?}\n */\nconst PLATFORM_ID = new InjectionToken('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * \\@publicApi\n * @type {?}\n */\nconst PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Console {\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    log(message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    }\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    warn(message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    }\n}\nConsole.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst LOCALE_ID$1 = new InjectionToken('LocaleId');\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst TRANSLATIONS$1 = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/** @enum {number} */\nconst MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = 'Error';\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = 'Warning';\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = 'Ignore';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst SWITCH_IVY_ENABLED__POST_R3__ = true;\n/** @type {?} */\nconst SWITCH_IVY_ENABLED__PRE_R3__ = false;\n/** @type {?} */\nconst ivyEnabled = SWITCH_IVY_ENABLED__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nclass ModuleWithComponentFactories {\n    /**\n     * @param {?} ngModuleFactory\n     * @param {?} componentFactories\n     */\n    constructor(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n}\nif (false) {\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.ngModuleFactory;\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.componentFactories;\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n    throw new Error(`Runtime compiler is not loaded`);\n}\n/** @type {?} */\nconst Compiler_compileModuleSync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleSync__POST_R3__ = (/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction (moduleType) {\n    return new NgModuleFactory$1(moduleType);\n});\n/** @type {?} */\nconst Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAsync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAsync__POST_R3__ = (/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction (moduleType) {\n    return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n});\n/** @type {?} */\nconst Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync__POST_R3__ = (/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction (moduleType) {\n    /** @type {?} */\n    const ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);\n    /** @type {?} */\n    const moduleDef = (/** @type {?} */ (getNgModuleDef(moduleType)));\n    /** @type {?} */\n    const componentFactories = maybeUnwrapFn(moduleDef.declarations)\n        .reduce((/**\n     * @param {?} factories\n     * @param {?} declaration\n     * @return {?}\n     */\n    (factories, declaration) => {\n        /** @type {?} */\n        const componentDef = getComponentDef(declaration);\n        componentDef && factories.push(new ComponentFactory$1(componentDef));\n        return factories;\n    }), (/** @type {?} */ ([])));\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n});\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = (/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction (moduleType) {\n    return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n});\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * \\@publicApi\n */\nclass Compiler {\n    constructor() {\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents` have to be inlined.\n         */\n        this.compileModuleSync = Compiler_compileModuleSync;\n        /**\n         * Compiles the given NgModule and all of its components\n         */\n        this.compileModuleAsync = Compiler_compileModuleAsync;\n        /**\n         * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n        /**\n         * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n    }\n    /**\n     * Clears all caches.\n     * @return {?}\n     */\n    clearCache() { }\n    /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    clearCacheFor(type) { }\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    getModuleId(moduleType) { return undefined; }\n}\nCompiler.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @type {?}\n     */\n    Compiler.prototype.compileModuleSync;\n    /**\n     * Compiles the given NgModule and all of its components\n     * @type {?}\n     */\n    Compiler.prototype.compileModuleAsync;\n    /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @type {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsSync;\n    /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @type {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsAsync;\n}\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@publicApi\n * @type {?}\n */\nconst COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nclass CompilerFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?=} options\n     * @return {?}\n     */\n    CompilerFactory.prototype.createCompiler = function (options) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * \\@publicApi\n * @deprecated the Web Tracing Framework is no longer supported in Angular\n * @record\n */\nfunction WtfScopeFn() { }\n/**\n * @record\n */\nfunction WTF() { }\nif (false) {\n    /** @type {?} */\n    WTF.prototype.trace;\n}\n/**\n * @record\n */\nfunction Trace() { }\nif (false) {\n    /** @type {?} */\n    Trace.prototype.events;\n    /**\n     * @param {?} scope\n     * @param {?} returnValue\n     * @return {?}\n     */\n    Trace.prototype.leaveScope = function (scope, returnValue) { };\n    /**\n     * @param {?} rangeType\n     * @param {?} action\n     * @return {?}\n     */\n    Trace.prototype.beginTimeRange = function (rangeType, action) { };\n    /**\n     * @param {?} range\n     * @return {?}\n     */\n    Trace.prototype.endTimeRange = function (range) { };\n}\n/**\n * @record\n */\nfunction Range() { }\n/**\n * @record\n */\nfunction Events() { }\nif (false) {\n    /**\n     * @param {?} signature\n     * @param {?} flags\n     * @return {?}\n     */\n    Events.prototype.createScope = function (signature, flags) { };\n}\n/**\n * @record\n */\nfunction Scope() { }\n/** @type {?} */\nlet trace;\n/** @type {?} */\nlet events;\n/**\n * @return {?}\n */\nfunction detectWTF() {\n    /** @type {?} */\n    const wtf = ((/** @type {?} */ (_global)))['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nfunction createScope(signature, flags = null) {\n    return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nfunction leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nfunction startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nfunction endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * True if WTF is enabled.\n * @type {?}\n */\nconst wtfEnabled = detectWTF();\n/**\n * @param {?=} arg0\n * @param {?=} arg1\n * @return {?}\n */\nfunction noopScope(arg0, arg1) {\n    return null;\n}\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * \\@publicApi\n * @deprecated the Web Tracing Framework is no longer supported in Angular\n * @type {?}\n */\nconst wtfCreateScope = wtfEnabled ? createScope : (/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\n(signature, flags) => noopScope);\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * \\@publicApi\n * @deprecated the Web Tracing Framework is no longer supported in Angular\n * @type {?}\n */\nconst wtfLeave = wtfEnabled ? leave : (/**\n * @param {?} s\n * @param {?=} r\n * @return {?}\n */\n(s, r) => r);\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * \\@publicApi\n * @deprecated the Web Tracing Framework is no longer supported in Angular\n * @type {?}\n */\nconst wtfStartTimeRange = wtfEnabled ? startTimeRange : (/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\n(rangeType, action) => null);\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * \\@publicApi\n * @deprecated the Web Tracing Framework is no longer supported in Angular\n * @type {?}\n */\nconst wtfEndTimeRange = wtfEnabled ? endTimeRange : (/**\n * @param {?} r\n * @return {?}\n */\n(r) => null);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst promise = (() => Promise.resolve(0))();\nfunction scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(() => { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass NgZone {\n    /**\n     * @param {?} __0\n     */\n    constructor({ enableLongStackTrace = false }) {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(`In this configuration Angular requires Zone.js`);\n        }\n        Zone.assertZonePatched();\n        /** @type {?} */\n        const self = (/** @type {?} */ ((/** @type {?} */ (this))));\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if (((/** @type {?} */ (Zone)))['wtfZoneSpec']) {\n            self._inner = self._inner.fork(((/** @type {?} */ (Zone)))['wtfZoneSpec']);\n        }\n        if (((/** @type {?} */ (Zone)))['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new ((/** @type {?} */ (((/** @type {?} */ (Zone)))['TaskTrackingZoneSpec']))));\n        }\n        if (enableLongStackTrace && ((/** @type {?} */ (Zone)))['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork(((/** @type {?} */ (Zone)))['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n     * @return {?}\n     */\n    static isInAngularZone() { return Zone.current.get('isAngularZone') === true; }\n    /**\n     * @return {?}\n     */\n    static assertInAngularZone() {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    static assertNotInAngularZone() {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    }\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    run(fn, applyThis, applyArgs) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._inner.run(fn, applyThis, applyArgs)));\n    }\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    runTask(fn, applyThis, applyArgs, name) {\n        /** @type {?} */\n        const zone = ((/** @type {?} */ ((/** @type {?} */ (this)))))._inner;\n        /** @type {?} */\n        const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1, noop$1);\n        try {\n            return (/** @type {?} */ (zone.runTask(task, applyThis, applyArgs)));\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    }\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    runGuarded(fn, applyThis, applyArgs) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._inner.runGuarded(fn, applyThis, applyArgs)));\n    }\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    runOutsideAngular(fn) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._outer.run(fn)));\n    }\n}\nif (false) {\n    /** @type {?} */\n    NgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NgZone.prototype.hasPendingMacrotasks;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     * @type {?}\n     */\n    NgZone.prototype.isStable;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onUnstable;\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onMicrotaskEmpty;\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     * @type {?}\n     */\n    NgZone.prototype.onStable;\n    /**\n     * Notifies that an error has been delivered.\n     * @type {?}\n     */\n    NgZone.prototype.onError;\n}\n/**\n * @return {?}\n */\nfunction noop$1() { }\n/** @type {?} */\nconst EMPTY_PAYLOAD = {};\n/**\n * @record\n */\nfunction NgZonePrivate() { }\nif (false) {\n    /** @type {?} */\n    NgZonePrivate.prototype._outer;\n    /** @type {?} */\n    NgZonePrivate.prototype._inner;\n    /** @type {?} */\n    NgZonePrivate.prototype._nesting;\n    /** @type {?} */\n    NgZonePrivate.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NgZonePrivate.prototype.hasPendingMacrotasks;\n    /** @type {?} */\n    NgZonePrivate.prototype.isStable;\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular((/**\n                     * @return {?}\n                     */\n                    () => zone.onStable.emit(null)));\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: (/** @type {?} */ ({ 'isAngularZone': true })),\n        onInvokeTask: (/**\n         * @param {?} delegate\n         * @param {?} current\n         * @param {?} target\n         * @param {?} task\n         * @param {?} applyThis\n         * @param {?} applyArgs\n         * @return {?}\n         */\n        (delegate, current, target, task, applyThis, applyArgs) => {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        }),\n        onInvoke: (/**\n         * @param {?} delegate\n         * @param {?} current\n         * @param {?} target\n         * @param {?} callback\n         * @param {?} applyThis\n         * @param {?=} applyArgs\n         * @param {?=} source\n         * @return {?}\n         */\n        (delegate, current, target, callback, applyThis, applyArgs, source) => {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        }),\n        onHasTask: (/**\n         * @param {?} delegate\n         * @param {?} current\n         * @param {?} target\n         * @param {?} hasTaskState\n         * @return {?}\n         */\n        (delegate, current, target, hasTaskState) => {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        }),\n        onHandleError: (/**\n         * @param {?} delegate\n         * @param {?} current\n         * @param {?} target\n         * @param {?} error\n         * @return {?}\n         */\n        (delegate, current, target, error) => {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => zone.onError.emit(error)));\n            return false;\n        })\n    });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nclass NoopNgZone {\n    constructor() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    run(fn) { return fn(); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    runGuarded(fn) { return fn(); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    runOutsideAngular(fn) { return fn(); }\n    /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    runTask(fn) { return fn(); }\n}\nif (false) {\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMacrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.isStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onUnstable;\n    /** @type {?} */\n    NoopNgZone.prototype.onMicrotaskEmpty;\n    /** @type {?} */\n    NoopNgZone.prototype.onStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onError;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction PendingMacrotask() { }\nif (false) {\n    /** @type {?} */\n    PendingMacrotask.prototype.source;\n    /** @type {?} */\n    PendingMacrotask.prototype.creationLocation;\n    /** @type {?|undefined} */\n    PendingMacrotask.prototype.runCount;\n    /** @type {?|undefined} */\n    PendingMacrotask.prototype.data;\n}\n/**\n * @record\n */\nfunction TaskData() { }\nif (false) {\n    /** @type {?|undefined} */\n    TaskData.prototype.target;\n    /** @type {?|undefined} */\n    TaskData.prototype.delay;\n    /** @type {?|undefined} */\n    TaskData.prototype.isPeriodic;\n}\n/**\n * @record\n */\nfunction WaitCallback() { }\nif (false) {\n    /** @type {?} */\n    WaitCallback.prototype.timeoutId;\n    /** @type {?} */\n    WaitCallback.prototype.doneCb;\n    /** @type {?|undefined} */\n    WaitCallback.prototype.updateCb;\n}\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@publicApi\n */\nclass Testability {\n    /**\n     * @param {?} _ngZone\n     */\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * \\@internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this.taskTrackingZone = null;\n        this._watchAngularEvents();\n        _ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            this.taskTrackingZone =\n                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _watchAngularEvents() {\n        this._ngZone.onUnstable.subscribe({\n            next: (/**\n             * @return {?}\n             */\n            () => {\n                this._didWork = true;\n                this._isZoneStable = false;\n            })\n        });\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.onStable.subscribe({\n                next: (/**\n                 * @return {?}\n                 */\n                () => {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask((/**\n                     * @return {?}\n                     */\n                    () => {\n                        this._isZoneStable = true;\n                        this._runCallbacksIfReady();\n                    }));\n                })\n            });\n        }));\n    }\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    increasePendingRequestCount() {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    }\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    decreasePendingRequestCount() {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    }\n    /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    isStable() {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _runCallbacksIfReady() {\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask((/**\n             * @return {?}\n             */\n            () => {\n                while (this._callbacks.length !== 0) {\n                    /** @type {?} */\n                    let cb = (/** @type {?} */ (this._callbacks.pop()));\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(this._didWork);\n                }\n                this._didWork = false;\n            }));\n        }\n        else {\n            // Still not stable, send updates.\n            /** @type {?} */\n            let pending = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter((/**\n             * @param {?} cb\n             * @return {?}\n             */\n            (cb) => {\n                if (cb.updateCb && cb.updateCb(pending)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            }));\n            this._didWork = true;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getPendingTasks() {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map((/**\n         * @param {?} t\n         * @return {?}\n         */\n        (t) => {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: (/** @type {?} */ (((/** @type {?} */ (t))).creationLocation)),\n                data: t.data\n            };\n        }));\n    }\n    /**\n     * @private\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    addCallback(cb, timeout, updateCb) {\n        /** @type {?} */\n        let timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._callbacks = this._callbacks.filter((/**\n                 * @param {?} cb\n                 * @return {?}\n                 */\n                (cb) => cb.timeoutId !== timeoutId));\n                cb(this._didWork, this.getPendingTasks());\n            }), timeout);\n        }\n        this._callbacks.push((/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb })));\n    }\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    whenStable(doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback((/** @type {?} */ (doneCb)), timeout, (/** @type {?} */ (updateCb)));\n        this._runCallbacksIfReady();\n    }\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    getPendingRequestCount() { return this._pendingCount; }\n    /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    findProviders(using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    }\n}\nTestability.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTestability.ctorParameters = () => [\n    { type: NgZone }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Testability.prototype._pendingCount;\n    /**\n     * @type {?}\n     * @private\n     */\n    Testability.prototype._isZoneStable;\n    /**\n     * Whether any work was done since the last 'whenStable' callback. This is\n     * useful to detect if this could have potentially destabilized another\n     * component while it is stabilizing.\n     * \\@internal\n     * @type {?}\n     * @private\n     */\n    Testability.prototype._didWork;\n    /**\n     * @type {?}\n     * @private\n     */\n    Testability.prototype._callbacks;\n    /**\n     * @type {?}\n     * @private\n     */\n    Testability.prototype.taskTrackingZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    Testability.prototype._ngZone;\n}\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@publicApi\n */\nclass TestabilityRegistry {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    registerApplication(token, testability) {\n        this._applications.set(token, testability);\n    }\n    /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    unregisterApplication(token) { this._applications.delete(token); }\n    /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    unregisterAllApplications() { this._applications.clear(); }\n    /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    getTestability(elem) { return this._applications.get(elem) || null; }\n    /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    getAllTestabilities() { return Array.from(this._applications.values()); }\n    /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    getAllRootElements() { return Array.from(this._applications.keys()); }\n    /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    findTestabilityInTree(elem, findInAncestors = true) {\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    }\n}\nTestabilityRegistry.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTestabilityRegistry.ctorParameters = () => [];\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TestabilityRegistry.prototype._applications;\n}\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * \\@publicApi\n * @record\n */\nfunction GetTestability() { }\nif (false) {\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    GetTestability.prototype.addToWindow = function (registry) { };\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    GetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) { };\n}\nclass _NoopGetTestability {\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    addToWindow(registry) { }\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    findTestabilityInTree(registry, elem, findInAncestors) {\n        return null;\n    }\n}\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@publicApi\n * @param {?} getter\n * @return {?}\n */\nfunction setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\n/** @type {?} */\nlet _testabilityGetter = new _NoopGetTestability();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _platform;\n/** @type {?} */\nlet compileNgModuleFactory = compileNgModuleFactory__PRE_R3__;\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n    /** @type {?} */\n    const compilerFactory = injector.get(CompilerFactory);\n    /** @type {?} */\n    const compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    /** @type {?} */\n    const moduleFactory = new NgModuleFactory$1(moduleType);\n    if (isComponentResourceResolutionQueueEmpty()) {\n        return Promise.resolve(moduleFactory);\n    }\n    /** @type {?} */\n    const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n    /** @type {?} */\n    const compilerProviders = _mergeArrays(compilerOptions.map((/**\n     * @param {?} o\n     * @return {?}\n     */\n    o => (/** @type {?} */ (o.providers)))));\n    // In case there are no compiler providers, we just return the module factory as\n    // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n    // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n    // unnecessarily require the JIT compiler.\n    if (compilerProviders.length === 0) {\n        return Promise.resolve(moduleFactory);\n    }\n    /** @type {?} */\n    const compiler = getCompilerFacade();\n    /** @type {?} */\n    const compilerInjector = Injector.create({ providers: compilerProviders });\n    /** @type {?} */\n    const resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n    // The resource loader can also return a string while the \"resolveComponentResources\"\n    // always expects a promise. Therefore we need to wrap the returned value in a promise.\n    return resolveComponentResources((/**\n     * @param {?} url\n     * @return {?}\n     */\n    url => Promise.resolve(resourceLoader.get(url))))\n        .then((/**\n     * @return {?}\n     */\n    () => moduleFactory));\n}\n/** @type {?} */\nlet isBoundToModule = isBoundToModule__PRE_R3__;\n/**\n * @template C\n * @param {?} cf\n * @return {?}\n */\nfunction isBoundToModule__PRE_R3__(cf) {\n    return cf instanceof ComponentFactoryBoundToModule;\n}\n/**\n * @template C\n * @param {?} cf\n * @return {?}\n */\nfunction isBoundToModule__POST_R3__(cf) {\n    return ((/** @type {?} */ (cf))).isBoundToModule;\n}\n/** @type {?} */\nconst ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nclass NgProbeToken {\n    /**\n     * @param {?} name\n     * @param {?} token\n     */\n    constructor(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n}\nif (false) {\n    /** @type {?} */\n    NgProbeToken.prototype.name;\n    /** @type {?} */\n    NgProbeToken.prototype.token;\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@publicApi\n * @param {?} injector\n * @return {?}\n */\nfunction createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    /** @type {?} */\n    const inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach((/**\n         * @param {?} init\n         * @return {?}\n         */\n        (init) => init()));\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@publicApi\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nfunction createPlatformFactory(parentPlatformFactory, name, providers = []) {\n    /** @type {?} */\n    const desc = `Platform: ${name}`;\n    /** @type {?} */\n    const marker = new InjectionToken(desc);\n    return (/**\n     * @param {?=} extraProviders\n     * @return {?}\n     */\n    (extraProviders = []) => {\n        /** @type {?} */\n        let platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                /** @type {?} */\n                const injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    });\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@publicApi\n * @param {?} requiredToken\n * @return {?}\n */\nfunction assertPlatform(requiredToken) {\n    /** @type {?} */\n    const platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n * @record\n */\nfunction BootstrapOptions() { }\nif (false) {\n    /**\n     * Optionally specify which `NgZone` should be used.\n     *\n     * - Provide your own `NgZone` instance.\n     * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n     * - `noop` - Use `NoopNgZone` which does nothing.\n     * @type {?|undefined}\n     */\n    BootstrapOptions.prototype.ngZone;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n *\n * \\@publicApi\n */\nclass PlatformRef {\n    /**\n     * \\@internal\n     * @param {?} _injector\n     */\n    constructor(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    bootstrapModuleFactory(moduleFactory, options) {\n        // Note: We need to create the NgZone _before_ we instantiate the module,\n        // as instantiating the module creates some providers eagerly.\n        // So we create a mini parent injector that just contains the new NgZone and\n        // pass that as parent to the NgModuleFactory.\n        /** @type {?} */\n        const ngZoneOption = options ? options.ngZone : undefined;\n        /** @type {?} */\n        const ngZone = getNgZone(ngZoneOption);\n        /** @type {?} */\n        const providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const ngZoneInjector = Injector.create({ providers: providers, parent: this.injector, name: moduleFactory.moduleType.name });\n            /** @type {?} */\n            const moduleRef = (/** @type {?} */ (moduleFactory.create(ngZoneInjector)));\n            /** @type {?} */\n            const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            // If the `LOCALE_ID` provider is defined at bootstrap we set the value for runtime i18n (ivy)\n            if (ivyEnabled) {\n                /** @type {?} */\n                const localeId = moduleRef.injector.get(LOCALE_ID$1, DEFAULT_LOCALE_ID);\n                setLocaleId(localeId || DEFAULT_LOCALE_ID);\n            }\n            moduleRef.onDestroy((/**\n             * @return {?}\n             */\n            () => remove(this._modules, moduleRef)));\n            (/** @type {?} */ (ngZone)).runOutsideAngular((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (ngZone)).onError.subscribe({ next: (/**\n                 * @param {?} error\n                 * @return {?}\n                 */\n                (error) => { exceptionHandler.handleError(error); }) })));\n            return _callAndReportToErrorHandler(exceptionHandler, (/** @type {?} */ (ngZone)), (/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                }));\n            }));\n        }));\n    }\n    /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    bootstrapModule(moduleType, compilerOptions = []) {\n        /** @type {?} */\n        const options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then((/**\n         * @param {?} moduleFactory\n         * @return {?}\n         */\n        moduleFactory => this.bootstrapModuleFactory(moduleFactory, options)));\n    }\n    /**\n     * @private\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    _moduleDoBootstrap(moduleRef) {\n        /** @type {?} */\n        const appRef = (/** @type {?} */ (moduleRef.injector.get(ApplicationRef)));\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => appRef.bootstrap(f)));\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(`The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n                `Please define one of these.`);\n        }\n        this._modules.push(moduleRef);\n    }\n    /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._destroyListeners.push(callback); }\n    /**\n     * Retrieve the platform {\\@link Injector}, which is the parent injector for\n     * every Angular application on the page and provides singleton providers.\n     * @return {?}\n     */\n    get injector() { return this._injector; }\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    destroy() {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach((/**\n         * @param {?} module\n         * @return {?}\n         */\n        module => module.destroy()));\n        this._destroyListeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        listener => listener()));\n        this._destroyed = true;\n    }\n    /**\n     * @return {?}\n     */\n    get destroyed() { return this._destroyed; }\n}\nPlatformRef.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nPlatformRef.ctorParameters = () => [\n    { type: Injector }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PlatformRef.prototype._modules;\n    /**\n     * @type {?}\n     * @private\n     */\n    PlatformRef.prototype._destroyListeners;\n    /**\n     * @type {?}\n     * @private\n     */\n    PlatformRef.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    PlatformRef.prototype._injector;\n}\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n    /** @type {?} */\n    let ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        /** @type {?} */\n        const result = callback();\n        if (isPromise(result)) {\n            return result.catch((/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => {\n                ngZone.runOutsideAngular((/**\n                 * @return {?}\n                 */\n                () => errorHandler.handleError(e)));\n                // rethrow as the exception handler might not do it\n                throw e;\n            }));\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => errorHandler.handleError(e)));\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = Object.assign({}, dst, ((/** @type {?} */ (objs))));\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * \\@usageNotes\n *\n * {\\@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * \\@publicApi\n */\nclass ApplicationRef {\n    /**\n     * \\@internal\n     * @param {?} _zone\n     * @param {?} _console\n     * @param {?} _injector\n     * @param {?} _exceptionHandler\n     * @param {?} _componentFactoryResolver\n     * @param {?} _initStatus\n     */\n    constructor(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: (/**\n             * @return {?}\n             */\n            () => { this._zone.run((/**\n             * @return {?}\n             */\n            () => { this.tick(); })); }) });\n        /** @type {?} */\n        const isCurrentlyStable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks;\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                observer.next(this._stable);\n                observer.complete();\n            }));\n        }));\n        /** @type {?} */\n        const isStable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Create the subscription to onStable outside the Angular Zone so that\n            // the callback is run outside the Angular Zone.\n            /** @type {?} */\n            let stableSub;\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                stableSub = this._zone.onStable.subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask((/**\n                     * @return {?}\n                     */\n                    () => {\n                        if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                            !this._zone.hasPendingMicrotasks) {\n                            this._stable = true;\n                            observer.next(true);\n                        }\n                    }));\n                }));\n            }));\n            /** @type {?} */\n            const unstableSub = this._zone.onUnstable.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                NgZone.assertInAngularZone();\n                if (this._stable) {\n                    this._stable = false;\n                    this._zone.runOutsideAngular((/**\n                     * @return {?}\n                     */\n                    () => { observer.next(false); }));\n                }\n            }));\n            return (/**\n             * @return {?}\n             */\n            () => {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            });\n        }));\n        ((/** @type {?} */ (this))).isStable =\n            merge$1(isCurrentlyStable, isStable.pipe(share()));\n    }\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    bootstrap(componentOrFactory, rootSelectorOrNode) {\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        /** @type {?} */\n        let componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                (/** @type {?} */ (this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        /** @type {?} */\n        const ngModule = isBoundToModule(componentFactory) ? null : this._injector.get(NgModuleRef);\n        /** @type {?} */\n        const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        /** @type {?} */\n        const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy((/**\n         * @return {?}\n         */\n        () => { this._unloadComponent(compRef); }));\n        /** @type {?} */\n        const testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(`Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n        }\n        return compRef;\n    }\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    tick() {\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        /** @type {?} */\n        const scope = ApplicationRef._tickScope();\n        try {\n            this._runningTick = true;\n            for (let view of this._views) {\n                view.detectChanges();\n            }\n            if (this._enforceNoNewChanges) {\n                for (let view of this._views) {\n                    view.checkNoChanges();\n                }\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => this._exceptionHandler.handleError(e)));\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    }\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    attachView(viewRef) {\n        /** @type {?} */\n        const view = ((/** @type {?} */ (viewRef)));\n        this._views.push(view);\n        view.attachToAppRef(this);\n    }\n    /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    detachView(viewRef) {\n        /** @type {?} */\n        const view = ((/** @type {?} */ (viewRef)));\n        remove(this._views, view);\n        view.detachFromAppRef();\n    }\n    /**\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _loadComponent(componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        // Get the listeners lazily to prevent DI cycles.\n        /** @type {?} */\n        const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        (listener) => listener(componentRef)));\n    }\n    /**\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _unloadComponent(componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach((/**\n         * @param {?} view\n         * @return {?}\n         */\n        (view) => view.destroy()));\n    }\n    /**\n     * Returns the number of attached views.\n     * @return {?}\n     */\n    get viewCount() { return this._views.length; }\n}\n/**\n * \\@internal\n */\nApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\nApplicationRef.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nApplicationRef.ctorParameters = () => [\n    { type: NgZone },\n    { type: Console },\n    { type: Injector },\n    { type: ErrorHandler },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationInitStatus }\n];\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ApplicationRef._tickScope;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._bootstrapListeners;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._views;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._runningTick;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._enforceNoNewChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._stable;\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     * @type {?}\n     */\n    ApplicationRef.prototype.componentTypes;\n    /**\n     * Get a list of components registered to this application.\n     * @type {?}\n     */\n    ApplicationRef.prototype.components;\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     *\n     * @see [Usage notes](#is-stable-examples) for examples and caveats when using this API.\n     * @type {?}\n     */\n    ApplicationRef.prototype.isStable;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._zone;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._console;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._exceptionHandler;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplicationRef.prototype._initStatus;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    /** @type {?} */\n    const index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n/**\n * @param {?} parts\n * @return {?}\n */\nfunction _mergeArrays(parts) {\n    /** @type {?} */\n    const result = [];\n    parts.forEach((/**\n     * @param {?} part\n     * @return {?}\n     */\n    (part) => part && result.push(...part)));\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is\n * part of its implementation. See `LoadChildren` for more details.\n * @abstract\n */\nclass NgModuleFactoryLoader {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} path\n     * @return {?}\n     */\n    NgModuleFactoryLoader.prototype.load = function (path) { };\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getModuleFactory__PRE_R3__(id) {\n    /** @type {?} */\n    const factory = (/** @type {?} */ (getRegisteredNgModuleType(id)));\n    if (!factory)\n        throw noModuleError(id);\n    return factory;\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getModuleFactory__POST_R3__(id) {\n    /** @type {?} */\n    const type = (/** @type {?} */ (getRegisteredNgModuleType(id)));\n    if (!type)\n        throw noModuleError(id);\n    return new NgModuleFactory$1(type);\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@publicApi\n * @type {?}\n */\nconst getModuleFactory = getModuleFactory__PRE_R3__;\n/**\n * @param {?} id\n * @return {?}\n */\nfunction noModuleError(id) {\n    return new Error(`No module with ID ${id} loaded`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _SEPARATOR = '#';\n/** @type {?} */\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`\n * is part of its implementation. See `LoadChildren` for more details.\n * @abstract\n */\nclass SystemJsNgModuleLoaderConfig {\n}\nif (false) {\n    /**\n     * Prefix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathPrefix;\n    /**\n     * Suffix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathSuffix;\n}\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@publicApi\n * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is\n * part of its implementation. See `LoadChildren` for more details.\n */\nclass SystemJsNgModuleLoader {\n    /**\n     * @param {?} _compiler\n     * @param {?=} config\n     */\n    constructor(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    load(path) {\n        /** @type {?} */\n        const legacyOfflineMode = !ivyEnabled && this._compiler instanceof Compiler;\n        return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    }\n    /**\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    loadAndCompile(path) {\n        let [module, exportName] = path.split(_SEPARATOR);\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then((/**\n         * @param {?} module\n         * @return {?}\n         */\n        (module) => module[exportName]))\n            .then((/**\n         * @param {?} type\n         * @return {?}\n         */\n        (type) => checkNotEmpty(type, module, exportName)))\n            .then((/**\n         * @param {?} type\n         * @return {?}\n         */\n        (type) => this._compiler.compileModuleAsync(type)));\n    }\n    /**\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    loadFactory(path) {\n        let [module, exportName] = path.split(_SEPARATOR);\n        /** @type {?} */\n        let factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then((/**\n         * @param {?} module\n         * @return {?}\n         */\n        (module) => module[exportName + factoryClassSuffix]))\n            .then((/**\n         * @param {?} factory\n         * @return {?}\n         */\n        (factory) => checkNotEmpty(factory, module, exportName)));\n    }\n}\nSystemJsNgModuleLoader.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSystemJsNgModuleLoader.ctorParameters = () => [\n    { type: Compiler },\n    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    SystemJsNgModuleLoader.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    SystemJsNgModuleLoader.prototype._compiler;\n}\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n    }\n    return value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewRef$1 extends ChangeDetectorRef {\n}\nif (false) {\n    /**\n     * Destroys this view and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    ViewRef$1.prototype.destroy = function () { };\n    /**\n     * Reports whether this view has been destroyed.\n     * @abstract\n     * @return {?} True after the `destroy()` method has been called, false otherwise.\n     */\n    ViewRef$1.prototype.destroyed = function () { };\n    /**\n     * A lifecycle hook that provides additional developer-defined cleanup\n     * functionality for views.\n     * @abstract\n     * @param {?} callback A handler function that cleans up developer-defined data\n     * associated with a view. Called when the `destroy()` method is invoked.\n     * @return {?}\n     */\n    ViewRef$1.prototype.onDestroy = function (callback) { };\n}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass EmbeddedViewRef extends ViewRef$1 {\n}\nif (false) {\n    /**\n     * The context for this view, inherited from the anchor element.\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.context = function () { };\n    /**\n     * The root nodes for this embedded view.\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.rootNodes = function () { };\n}\n/**\n * @record\n */\nfunction InternalViewRef() { }\nif (false) {\n    /**\n     * @return {?}\n     */\n    InternalViewRef.prototype.detachFromAppRef = function () { };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    InternalViewRef.prototype.attachToAppRef = function (appRef) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n */\nclass DebugEventListener {\n    /**\n     * @param {?} name\n     * @param {?} callback\n     */\n    constructor(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n}\nif (false) {\n    /** @type {?} */\n    DebugEventListener.prototype.name;\n    /** @type {?} */\n    DebugEventListener.prototype.callback;\n}\n// WARNING: interface has both a type and a value, skipping emit\nclass DebugNode__PRE_R3__ {\n    /**\n     * @param {?} nativeNode\n     * @param {?} parent\n     * @param {?} _debugContext\n     */\n    constructor(nativeNode, parent, _debugContext) {\n        this.listeners = [];\n        this.parent = null;\n        this._debugContext = _debugContext;\n        this.nativeNode = nativeNode;\n        if (parent && parent instanceof DebugElement__PRE_R3__) {\n            parent.addChild(this);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return this._debugContext.injector; }\n    /**\n     * @return {?}\n     */\n    get componentInstance() { return this._debugContext.component; }\n    /**\n     * @return {?}\n     */\n    get context() { return this._debugContext.context; }\n    /**\n     * @return {?}\n     */\n    get references() { return this._debugContext.references; }\n    /**\n     * @return {?}\n     */\n    get providerTokens() { return this._debugContext.providerTokens; }\n}\nif (false) {\n    /** @type {?} */\n    DebugNode__PRE_R3__.prototype.listeners;\n    /** @type {?} */\n    DebugNode__PRE_R3__.prototype.parent;\n    /** @type {?} */\n    DebugNode__PRE_R3__.prototype.nativeNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    DebugNode__PRE_R3__.prototype._debugContext;\n}\n// WARNING: interface has both a type and a value, skipping emit\nclass DebugElement__PRE_R3__ extends DebugNode__PRE_R3__ {\n    /**\n     * @param {?} nativeNode\n     * @param {?} parent\n     * @param {?} _debugContext\n     */\n    constructor(nativeNode, parent, _debugContext) {\n        super(nativeNode, parent, _debugContext);\n        this.properties = {};\n        this.attributes = {};\n        this.classes = {};\n        this.styles = {};\n        this.childNodes = [];\n        this.nativeElement = nativeNode;\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    addChild(child) {\n        if (child) {\n            this.childNodes.push(child);\n            ((/** @type {?} */ (child))).parent = this;\n        }\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    removeChild(child) {\n        /** @type {?} */\n        const childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            ((/** @type {?} */ (child))).parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    }\n    /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    insertChildrenAfter(child, newChildren) {\n        /** @type {?} */\n        const siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\n            newChildren.forEach((/**\n             * @param {?} c\n             * @return {?}\n             */\n            c => {\n                if (c.parent) {\n                    ((/** @type {?} */ (c.parent))).removeChild(c);\n                }\n                ((/** @type {?} */ (child))).parent = this;\n            }));\n        }\n    }\n    /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    insertBefore(refChild, newChild) {\n        /** @type {?} */\n        const refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                ((/** @type {?} */ (newChild.parent))).removeChild(newChild);\n            }\n            ((/** @type {?} */ (newChild))).parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    query(predicate) {\n        /** @type {?} */\n        const results = this.queryAll(predicate);\n        return results[0] || null;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAll(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAllNodes(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    }\n    /**\n     * @return {?}\n     */\n    get children() {\n        return (/** @type {?} */ (this\n            .childNodes //\n            .filter((/**\n         * @param {?} node\n         * @return {?}\n         */\n        (node) => node instanceof DebugElement__PRE_R3__))));\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    triggerEventHandler(eventName, eventObj) {\n        this.listeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        (listener) => {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        }));\n    }\n}\nif (false) {\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.name;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.properties;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.attributes;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.classes;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.styles;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.childNodes;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.nativeElement;\n}\n/**\n * \\@publicApi\n * @param {?} debugEls\n * @return {?}\n */\nfunction asNativeElements(debugEls) {\n    return debugEls.map((/**\n     * @param {?} el\n     * @return {?}\n     */\n    (el) => el.nativeElement));\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach((/**\n     * @param {?} node\n     * @return {?}\n     */\n    node => {\n        if (node instanceof DebugElement__PRE_R3__) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    }));\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement__PRE_R3__) {\n        parentNode.childNodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__PRE_R3__) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        }));\n    }\n}\nclass DebugNode__POST_R3__ {\n    /**\n     * @param {?} nativeNode\n     */\n    constructor(nativeNode) { this.nativeNode = nativeNode; }\n    /**\n     * @return {?}\n     */\n    get parent() {\n        /** @type {?} */\n        const parent = (/** @type {?} */ (this.nativeNode.parentNode));\n        return parent ? new DebugElement__POST_R3__(parent) : null;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return getInjector(this.nativeNode); }\n    /**\n     * @return {?}\n     */\n    get componentInstance() {\n        /** @type {?} */\n        const nativeElement = this.nativeNode;\n        return nativeElement &&\n            (getComponent((/** @type {?} */ (nativeElement))) || getViewComponent(nativeElement));\n    }\n    /**\n     * @return {?}\n     */\n    get context() {\n        return getComponent((/** @type {?} */ (this.nativeNode))) || getContext$1((/** @type {?} */ (this.nativeNode)));\n    }\n    /**\n     * @return {?}\n     */\n    get listeners() {\n        return getListeners((/** @type {?} */ (this.nativeNode))).filter(isBrowserEvents);\n    }\n    /**\n     * @return {?}\n     */\n    get references() { return getLocalRefs(this.nativeNode); }\n    /**\n     * @return {?}\n     */\n    get providerTokens() { return getInjectionTokens((/** @type {?} */ (this.nativeNode))); }\n}\nif (false) {\n    /** @type {?} */\n    DebugNode__POST_R3__.prototype.nativeNode;\n}\nclass DebugElement__POST_R3__ extends DebugNode__POST_R3__ {\n    /**\n     * @param {?} nativeNode\n     */\n    constructor(nativeNode) {\n        ngDevMode && assertDomNode(nativeNode);\n        super(nativeNode);\n    }\n    /**\n     * @return {?}\n     */\n    get nativeElement() {\n        return this.nativeNode.nodeType == Node.ELEMENT_NODE ? (/** @type {?} */ (this.nativeNode)) : null;\n    }\n    /**\n     * @return {?}\n     */\n    get name() { return (/** @type {?} */ (this.nativeElement)).nodeName; }\n    /**\n     *  Gets a map of property names to property values for an element.\n     *\n     *  This map includes:\n     *  - Regular property bindings (e.g. `[id]=\"id\"`)\n     *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n     *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n     *\n     *  It does not include:\n     *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n     *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n     * @return {?}\n     */\n    get properties() {\n        /** @type {?} */\n        const context = (/** @type {?} */ (loadLContext(this.nativeNode)));\n        /** @type {?} */\n        const lView = context.lView;\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        /** @type {?} */\n        const tNode = (/** @type {?} */ (tData[context.nodeIndex]));\n        /** @type {?} */\n        const properties = collectPropertyBindings(tNode, lView, tData);\n        /** @type {?} */\n        const hostProperties = collectHostPropertyBindings(tNode, lView, tData);\n        /** @type {?} */\n        const className = collectClassNames(this);\n        /** @type {?} */\n        const output = Object.assign({}, properties, hostProperties);\n        if (className) {\n            output['className'] = output['className'] ? output['className'] + ` ${className}` : className;\n        }\n        return output;\n    }\n    /**\n     * @return {?}\n     */\n    get attributes() {\n        /** @type {?} */\n        const attributes = {};\n        /** @type {?} */\n        const element = this.nativeElement;\n        if (!element) {\n            return attributes;\n        }\n        /** @type {?} */\n        const context = loadLContext(element);\n        /** @type {?} */\n        const lView = context.lView;\n        /** @type {?} */\n        const tNodeAttrs = ((/** @type {?} */ (lView[TVIEW].data[context.nodeIndex]))).attrs;\n        /** @type {?} */\n        const lowercaseTNodeAttrs = [];\n        // For debug nodes we take the element's attribute directly from the DOM since it allows us\n        // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n        // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n        // however since we have the attributes already on the TNode, we can preserve the case by going\n        // through them once, adding them to the `attributes` map and putting their lower-cased name\n        // into an array. Afterwards when we're going through the native DOM attributes, we can check\n        // whether we haven't run into an attribute already through the TNode.\n        if (tNodeAttrs) {\n            /** @type {?} */\n            let i = 0;\n            while (i < tNodeAttrs.length) {\n                /** @type {?} */\n                const attrName = tNodeAttrs[i];\n                // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n                // else will be handled below when we read the final attributes off the DOM.\n                if (typeof attrName !== 'string')\n                    break;\n                /** @type {?} */\n                const attrValue = tNodeAttrs[i + 1];\n                attributes[attrName] = (/** @type {?} */ (attrValue));\n                lowercaseTNodeAttrs.push(attrName.toLowerCase());\n                i += 2;\n            }\n        }\n        /** @type {?} */\n        const eAttrs = element.attributes;\n        for (let i = 0; i < eAttrs.length; i++) {\n            /** @type {?} */\n            const attr = eAttrs[i];\n            // Make sure that we don't assign the same attribute both in its\n            // case-sensitive form and the lower-cased one from the browser.\n            if (lowercaseTNodeAttrs.indexOf(attr.name) === -1) {\n                attributes[attr.name] = attr.value;\n            }\n        }\n        return attributes;\n    }\n    /**\n     * @return {?}\n     */\n    get styles() {\n        return _getStylingDebugInfo(this.nativeElement, false);\n    }\n    /**\n     * @return {?}\n     */\n    get classes() {\n        return _getStylingDebugInfo(this.nativeElement, true);\n    }\n    /**\n     * @return {?}\n     */\n    get childNodes() {\n        /** @type {?} */\n        const childNodes = this.nativeNode.childNodes;\n        /** @type {?} */\n        const children = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            /** @type {?} */\n            const element = childNodes[i];\n            children.push(getDebugNode__POST_R3__(element));\n        }\n        return children;\n    }\n    /**\n     * @return {?}\n     */\n    get children() {\n        /** @type {?} */\n        const nativeElement = this.nativeElement;\n        if (!nativeElement)\n            return [];\n        /** @type {?} */\n        const childNodes = nativeElement.children;\n        /** @type {?} */\n        const children = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            /** @type {?} */\n            const element = childNodes[i];\n            children.push(getDebugNode__POST_R3__(element));\n        }\n        return children;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    query(predicate) {\n        /** @type {?} */\n        const results = this.queryAll(predicate);\n        return results[0] || null;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAll(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryAllR3(this, predicate, matches, true);\n        return matches;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAllNodes(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryAllR3(this, predicate, matches, false);\n        return matches;\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    triggerEventHandler(eventName, eventObj) {\n        this.listeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        (listener) => {\n            if (listener.name === eventName) {\n                listener.callback(eventObj);\n            }\n        }));\n    }\n}\n/**\n * @param {?} element\n * @param {?} isClassBased\n * @return {?}\n */\nfunction _getStylingDebugInfo(element, isClassBased) {\n    if (element) {\n        /** @type {?} */\n        const context = loadLContextFromNode(element);\n        /** @type {?} */\n        const lView = context.lView;\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        /** @type {?} */\n        const tNode = (/** @type {?} */ (tData[context.nodeIndex]));\n        if (isClassBased) {\n            return isStylingContext(tNode.classes) ?\n                new NodeStylingDebug((/** @type {?} */ (tNode.classes)), lView, true).values :\n                stylingMapToStringMap(tNode.classes);\n        }\n        else {\n            return isStylingContext(tNode.styles) ?\n                new NodeStylingDebug((/** @type {?} */ (tNode.styles)), lView, false).values :\n                stylingMapToStringMap(tNode.styles);\n        }\n    }\n    return {};\n}\n/**\n * @param {?} parentElement\n * @param {?} predicate\n * @param {?} matches\n * @param {?} elementsOnly\n * @return {?}\n */\nfunction _queryAllR3(parentElement, predicate, matches, elementsOnly) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(parentElement.nativeNode)));\n    /** @type {?} */\n    const parentTNode = (/** @type {?} */ (context.lView[TVIEW].data[context.nodeIndex]));\n    _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n}\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param {?} tNode the current TNode\n * @param {?} lView the LView of this TNode\n * @param {?} predicate the predicate to match\n * @param {?} matches the list of positive matches\n * @param {?} elementsOnly whether only elements should be searched\n * @param {?} rootNativeNode the root native node on which predicate should not be matched\n * @return {?}\n */\nfunction _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n    /** @type {?} */\n    const nativeNode = getNativeByTNodeOrNull(tNode, lView);\n    // For each type of TNode, specific logic is executed.\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        // Case 1: the TNode is an element\n        // The native node has to be checked.\n        _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n        if (isComponent(tNode)) {\n            // If the element is the host of a component, then all nodes in its view have to be processed.\n            // Note: the component's content (tNode.child) will be processed from the insertion points.\n            /** @type {?} */\n            const componentView = getComponentViewByIndex(tNode.index, lView);\n            if (componentView && componentView[TVIEW].firstChild) {\n                _queryNodeChildrenR3((/** @type {?} */ (componentView[TVIEW].firstChild)), componentView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else {\n            if (tNode.child) {\n                // Otherwise, its children have to be processed.\n                _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n            // We also have to query the DOM directly in order to catch elements inserted through\n            // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple\n            // times. ViewEngine could do it more efficiently, because all the insertions go through\n            // Renderer2, however that's not the case in Ivy. This approach is being used because:\n            // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency\n            //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.\n            // 2. We would have to make `Renderer3` \"know\" about debug nodes.\n            // 3. It allows us to capture nodes that were inserted directly via the DOM.\n            nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);\n        }\n        // In all cases, if a dynamic container exists for this node, each view inside it has to be\n        // processed.\n        /** @type {?} */\n        const nodeOrContainer = lView[tNode.index];\n        if (isLContainer(nodeOrContainer)) {\n            _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    else if (tNode.type === 0 /* Container */) {\n        // Case 2: the TNode is a container\n        // The native node has to be checked.\n        /** @type {?} */\n        const lContainer = lView[tNode.index];\n        _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n        // Each view inside the container has to be processed.\n        _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n    else if (tNode.type === 1 /* Projection */) {\n        // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n        // The nodes projected at this location all need to be processed.\n        /** @type {?} */\n        const componentView = findComponentView((/** @type {?} */ (lView)));\n        /** @type {?} */\n        const componentHost = (/** @type {?} */ (componentView[T_HOST]));\n        /** @type {?} */\n        const head = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNode.projection))];\n        if (Array.isArray(head)) {\n            for (let nativeNode of head) {\n                _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else if (head) {\n            /** @type {?} */\n            const nextLView = (/** @type {?} */ ((/** @type {?} */ (componentView[PARENT]))));\n            /** @type {?} */\n            const nextTNode = (/** @type {?} */ (nextLView[TVIEW].data[head.index]));\n            _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    else if (tNode.child) {\n        // Case 4: the TNode is a view.\n        _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n    // We don't want to go to the next sibling of the root node.\n    if (rootNativeNode !== nativeNode) {\n        // To determine the next node to be processed, we need to use the next or the projectionNext\n        // link, depending on whether the current node has been projected.\n        /** @type {?} */\n        const nextTNode = (tNode.flags & 2 /* isProjected */) ? tNode.projectionNext : tNode.next;\n        if (nextTNode) {\n            _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n}\n/**\n * Process all TNodes in a given container.\n *\n * @param {?} lContainer the container to be processed\n * @param {?} predicate the predicate to match\n * @param {?} matches the list of positive matches\n * @param {?} elementsOnly whether only elements should be searched\n * @param {?} rootNativeNode the root native node on which predicate should not be matched\n * @return {?}\n */\nfunction _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        /** @type {?} */\n        const childView = lContainer[i];\n        _queryNodeChildrenR3((/** @type {?} */ (childView[TVIEW].node)), childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n}\n/**\n * Match the current native node against the predicate.\n *\n * @param {?} nativeNode the current native node\n * @param {?} predicate the predicate to match\n * @param {?} matches the list of positive matches\n * @param {?} elementsOnly whether only elements should be searched\n * @param {?} rootNativeNode the root native node on which predicate should not be matched\n * @return {?}\n */\nfunction _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n    if (rootNativeNode !== nativeNode) {\n        /** @type {?} */\n        const debugNode = getDebugNode(nativeNode);\n        if (!debugNode) {\n            return;\n        }\n        // Type of the \"predicate and \"matches\" array are set based on the value of\n        // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\n        // types with generics, so we manually cast the parameters accordingly.\n        if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) &&\n            matches.indexOf(debugNode) === -1) {\n            matches.push(debugNode);\n        }\n        else if (!elementsOnly && ((/** @type {?} */ (predicate)))(debugNode) &&\n            ((/** @type {?} */ (matches))).indexOf(debugNode) === -1) {\n            ((/** @type {?} */ (matches))).push(debugNode);\n        }\n    }\n}\n/**\n * Match all the descendants of a DOM node against a predicate.\n *\n * @param {?} parentNode\n * @param {?} predicate the predicate to match\n * @param {?} matches the list of positive matches\n * @param {?} elementsOnly whether only elements should be searched\n * @return {?}\n */\nfunction _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {\n    /** @type {?} */\n    const nodes = parentNode.childNodes;\n    /** @type {?} */\n    const length = nodes.length;\n    for (let i = 0; i < length; i++) {\n        /** @type {?} */\n        const node = nodes[i];\n        /** @type {?} */\n        const debugNode = getDebugNode(node);\n        if (debugNode) {\n            if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) &&\n                matches.indexOf(debugNode) === -1) {\n                matches.push(debugNode);\n            }\n            else if (!elementsOnly && ((/** @type {?} */ (predicate)))(debugNode) &&\n                ((/** @type {?} */ (matches))).indexOf(debugNode) === -1) {\n                ((/** @type {?} */ (matches))).push(debugNode);\n            }\n            _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);\n        }\n    }\n}\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n * @param {?} tNode\n * @param {?} lView\n * @param {?} tData\n * @return {?}\n */\nfunction collectPropertyBindings(tNode, lView, tData) {\n    /** @type {?} */\n    const properties = {};\n    /** @type {?} */\n    let bindingIndex = getFirstBindingIndex(tNode.propertyMetadataStartIndex, tData);\n    while (bindingIndex < tNode.propertyMetadataEndIndex) {\n        /** @type {?} */\n        let value;\n        /** @type {?} */\n        let propMetadata = (/** @type {?} */ (tData[bindingIndex]));\n        while (!isPropMetadataString(propMetadata)) {\n            // This is the first value for an interpolation. We need to build up\n            // the full interpolation by combining runtime values in LView with\n            // the static interstitial values stored in TData.\n            value = (value || '') + renderStringify(lView[bindingIndex]) + tData[bindingIndex];\n            propMetadata = (/** @type {?} */ (tData[++bindingIndex]));\n        }\n        value = value === undefined ? lView[bindingIndex] : value += lView[bindingIndex];\n        // Property metadata string has 3 parts: property name, prefix, and suffix\n        /** @type {?} */\n        const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n        /** @type {?} */\n        const propertyName = metadataParts[0];\n        // Attr bindings don't have property names and should be skipped\n        if (propertyName) {\n            // Wrap value with prefix and suffix (will be '' for normal bindings), if they're defined.\n            // Avoid wrapping for normal bindings so that the value doesn't get cast to a string.\n            properties[propertyName] = (metadataParts[1] && metadataParts[2]) ?\n                metadataParts[1] + value + metadataParts[2] :\n                value;\n        }\n        bindingIndex++;\n    }\n    return properties;\n}\n/**\n * Retrieves the first binding index that holds values for this property\n * binding.\n *\n * For normal bindings (e.g. `[id]=\"id\"`), the binding index is the\n * same as the metadata index. For interpolations (e.g. `id=\"{{id}}-{{name}}\"`),\n * there can be multiple binding values, so we might have to loop backwards\n * from the metadata index until we find the first one.\n *\n * @param {?} metadataIndex The index of the first property metadata string for\n * this node.\n * @param {?} tData The data array for the current TView\n * @return {?} The first binding index for this binding\n */\nfunction getFirstBindingIndex(metadataIndex, tData) {\n    /** @type {?} */\n    let currentBindingIndex = metadataIndex - 1;\n    // If the slot before the metadata holds a string, we know that this\n    // metadata applies to an interpolation with at least 2 bindings, and\n    // we need to search further to access the first binding value.\n    /** @type {?} */\n    let currentValue = tData[currentBindingIndex];\n    // We need to iterate until we hit either a:\n    // - TNode (it is an element slot marking the end of `consts` section), OR a\n    // - metadata string (slot is attribute metadata or a previous node's property metadata)\n    while (typeof currentValue === 'string' && !isPropMetadataString(currentValue)) {\n        currentValue = tData[--currentBindingIndex];\n    }\n    return currentBindingIndex + 1;\n}\n/**\n * @param {?} tNode\n * @param {?} lView\n * @param {?} tData\n * @return {?}\n */\nfunction collectHostPropertyBindings(tNode, lView, tData) {\n    /** @type {?} */\n    const properties = {};\n    // Host binding values for a node are stored after directives on that node\n    /** @type {?} */\n    let hostPropIndex = tNode.directiveEnd;\n    /** @type {?} */\n    let propMetadata = (/** @type {?} */ (tData[hostPropIndex]));\n    // When we reach a value in TView.data that is not a string, we know we've\n    // hit the next node's providers and directives and should stop copying data.\n    while (typeof propMetadata === 'string') {\n        /** @type {?} */\n        const propertyName = propMetadata.split(INTERPOLATION_DELIMITER)[0];\n        properties[propertyName] = lView[hostPropIndex];\n        propMetadata = tData[++hostPropIndex];\n    }\n    return properties;\n}\n/**\n * @param {?} debugElement\n * @return {?}\n */\nfunction collectClassNames(debugElement) {\n    /** @type {?} */\n    const classes = debugElement.classes;\n    /** @type {?} */\n    let output = '';\n    for (const className of Object.keys(classes)) {\n        if (classes[className]) {\n            output = output ? output + ` ${className}` : className;\n        }\n    }\n    return output;\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\n/** @type {?} */\nconst _nativeNodeToDebugNode = new Map();\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__PRE_R3__(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/** @type {?} */\nconst NG_DEBUG_PROPERTY = '__ng_debug__';\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__POST_R3__(nativeNode) {\n    if (nativeNode instanceof Node) {\n        if (!(nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY))) {\n            ((/** @type {?} */ (nativeNode)))[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ?\n                new DebugElement__POST_R3__((/** @type {?} */ (nativeNode))) :\n                new DebugNode__POST_R3__(nativeNode);\n        }\n        return ((/** @type {?} */ (nativeNode)))[NG_DEBUG_PROPERTY];\n    }\n    return null;\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst getDebugNode = getDebugNode__PRE_R3__;\n/**\n * @return {?}\n */\nfunction getAllDebugNodes() {\n    return Array.from(_nativeNodeToDebugNode.values());\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction Predicate() { }\n/**\n * \\@publicApi\n * @type {?}\n */\nconst DebugNode$1 = DebugNode__PRE_R3__;\n/**\n * \\@publicApi\n * @type {?}\n */\nconst DebugElement = DebugElement__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _CORE_PLATFORM_PROVIDERS = [\n    // Set a default platform name for platforms that don't set it explicitly.\n    { provide: PLATFORM_ID, useValue: 'unknown' },\n    { provide: PlatformRef, deps: [Injector] },\n    { provide: TestabilityRegistry, deps: [] },\n    { provide: Console, deps: [] },\n];\n/**\n * This platform has to be included in any other platform\n *\n * \\@publicApi\n * @type {?}\n */\nconst platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nfunction _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nfunction _localeFactory(locale) {\n    if (locale) {\n        if (ivyEnabled) {\n            setLocaleId(locale);\n        }\n        return locale;\n    }\n    // Use `goog.LOCALE` as default value for `LOCALE_ID` token for Closure Compiler.\n    // Note: default `goog.LOCALE` value is `en`, when Angular used `en-US`. In order to preserve\n    // backwards compatibility, we use Angular default value over Closure Compiler's one.\n    if (ngI18nClosureMode && typeof goog !== 'undefined' && goog.LOCALE !== 'en') {\n        if (ivyEnabled) {\n            setLocaleId(goog.LOCALE);\n        }\n        return goog.LOCALE;\n    }\n    return DEFAULT_LOCALE_ID;\n}\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n * @type {?}\n */\nconst APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    { provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID$1,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID$1), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * Schedule work at next available slot.\n *\n * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n *\n * @param {?} ngZone NgZone to use for scheduling.\n * @return {?}\n */\nfunction zoneSchedulerFactory(ngZone) {\n    /** @type {?} */\n    let queue = [];\n    ngZone.onStable.subscribe((/**\n     * @return {?}\n     */\n    () => {\n        while (queue.length) {\n            (/** @type {?} */ (queue.pop()))();\n        }\n    }));\n    return (/**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { queue.push(fn); });\n}\n/**\n * Configures the root injector for an app with\n * providers of `\\@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * \\@publicApi\n */\nclass ApplicationModule {\n    // Inject ApplicationRef to make it eager...\n    /**\n     * @param {?} appRef\n     */\n    constructor(appRef) { }\n}\nApplicationModule.decorators = [\n    { type: NgModule, args: [{ providers: APPLICATION_MODULE_PROVIDERS },] }\n];\n/** @nocollapse */\nApplicationModule.ctorParameters = () => [\n    { type: ApplicationRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nfunction anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    /** @type {?} */\n    const template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nfunction elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs = [], bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    /** @type {?} */\n    let ns = (/** @type {?} */ (null));\n    /** @type {?} */\n    let name = (/** @type {?} */ (null));\n    if (namespaceAndName) {\n        [ns, name] = splitNamespace(namespaceAndName);\n    }\n    bindings = bindings || [];\n    /** @type {?} */\n    const bindingDefs = new Array(bindings.length);\n    for (let i = 0; i < bindings.length; i++) {\n        const [bindingFlags, namespaceAndName, suffixOrSecurityContext] = bindings[i];\n        const [ns, name] = splitNamespace(namespaceAndName);\n        /** @type {?} */\n        let securityContext = (/** @type {?} */ (undefined));\n        /** @type {?} */\n        let suffix = (/** @type {?} */ (undefined));\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = (/** @type {?} */ (suffixOrSecurityContext));\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = (/** @type {?} */ (suffixOrSecurityContext));\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns, name, nonMinifiedName: name, securityContext, suffix };\n    }\n    outputs = outputs || [];\n    /** @type {?} */\n    const outputDefs = new Array(outputs.length);\n    for (let i = 0; i < outputs.length; i++) {\n        const [target, eventName] = outputs[i];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: (/** @type {?} */ (target)), eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    /** @type {?} */\n    const attrs = (/** @type {?} */ (fixedAttrs.map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([namespaceAndName, value]) => {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        return [ns, name, value];\n    }))));\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns,\n            name,\n            attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction createElement(view, renderHost, def) {\n    /** @type {?} */\n    const elDef = (/** @type {?} */ (def.element));\n    /** @type {?} */\n    const rootSelectorOrNode = view.root.selectorOrNode;\n    /** @type {?} */\n    const renderer = view.renderer;\n    /** @type {?} */\n    let el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        /** @type {?} */\n        const parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        // when using native Shadow DOM, do not clear the root element contents to allow slot projection\n        /** @type {?} */\n        const preserveContent = (!!elDef.componentRendererType &&\n            elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom);\n        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n    }\n    if (elDef.attrs) {\n        for (let i = 0; i < elDef.attrs.length; i++) {\n            const [ns, name, value] = elDef.attrs[i];\n            renderer.setAttribute(el, name, value, ns);\n        }\n    }\n    return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nfunction listenToElementOutputs(view, compView, def, el) {\n    for (let i = 0; i < def.outputs.length; i++) {\n        /** @type {?} */\n        const output = def.outputs[i];\n        /** @type {?} */\n        const handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        /** @type {?} */\n        let listenTarget = output.target;\n        /** @type {?} */\n        let listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        /** @type {?} */\n        const disposable = (/** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)));\n        (/** @type {?} */ (view.disposables))[def.outputIndex + i] = disposable;\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return (/**\n     * @param {?} event\n     * @return {?}\n     */\n    (event) => dispatchEvent(view, index, eventName, event));\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindLen = def.bindings.length;\n    /** @type {?} */\n    let changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateElementDynamic(view, def, values) {\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    /** @type {?} */\n    const binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    const elData = asElementData(view, def.nodeIndex);\n    /** @type {?} */\n    const renderNode = elData.renderElement;\n    /** @type {?} */\n    const name = (/** @type {?} */ (binding.name));\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            /** @type {?} */\n            const bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode, name, value);\n            break;\n    }\n    return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode, ns, name, value) {\n    /** @type {?} */\n    const securityContext = binding.securityContext;\n    /** @type {?} */\n    let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode, name, ns);\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode, name, value) {\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode, name);\n    }\n    else {\n        renderer.removeClass(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    let renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, (/** @type {?} */ (value)));\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        /** @type {?} */\n        const unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    const securityContext = binding.securityContext;\n    /** @type {?} */\n    let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode, name, renderValue);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nfunction queryDef(flags, id, bindings) {\n    /** @type {?} */\n    let bindingDefs = [];\n    for (let propName in bindings) {\n        /** @type {?} */\n        const bindingType = bindings[propName];\n        bindingDefs.push({ propName, bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\n/**\n * @return {?}\n */\nfunction createQuery() {\n    return new QueryList();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction dirtyParentQueries(view) {\n    /** @type {?} */\n    const queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        /** @type {?} */\n        let tplDef = (/** @type {?} */ (view.parentNodeDef));\n        view = view.parent;\n        // content queries\n        /** @type {?} */\n        const end = tplDef.nodeIndex + tplDef.childCount;\n        for (let i = 0; i <= end; i++) {\n            /** @type {?} */\n            const nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                ((/** @type {?} */ (nodeDef.query)).filterId & queryIds) === (/** @type {?} */ (nodeDef.query)).filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (let i = 0; i < view.def.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkAndUpdateQuery(view, nodeDef) {\n    /** @type {?} */\n    const queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    /** @type {?} */\n    let directiveInstance;\n    /** @type {?} */\n    let newValues = (/** @type {?} */ (undefined));\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        /** @type {?} */\n        const elementDef = (/** @type {?} */ ((/** @type {?} */ (nodeDef.parent)).parent));\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, (/** @type {?} */ (nodeDef.query)), []);\n        directiveInstance = asProviderData(view, (/** @type {?} */ (nodeDef.parent)).nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, (/** @type {?} */ (nodeDef.query)), []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    /** @type {?} */\n    const bindings = (/** @type {?} */ (nodeDef.query)).bindings;\n    /** @type {?} */\n    let notify = false;\n    for (let i = 0; i < bindings.length; i++) {\n        /** @type {?} */\n        const binding = bindings[i];\n        /** @type {?} */\n        let boundValue;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        /** @type {?} */\n        const valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && (/** @type {?} */ (nodeDef.element)).template &&\n            ((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            /** @type {?} */\n            const elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                /** @type {?} */\n                const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n                for (let k = 0; k < embeddedViews.length; k++) {\n                    /** @type {?} */\n                    const embeddedView = embeddedViews[k];\n                    /** @type {?} */\n                    const dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            /** @type {?} */\n            const projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (let k = 0; k < projectedViews.length; k++) {\n                    /** @type {?} */\n                    const projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nfunction getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nfunction ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index }\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction appendNgContent(view, renderHost, def) {\n    /** @type {?} */\n    const parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    /** @type {?} */\n    const ngContentIndex = (/** @type {?} */ (def.ngContent)).index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nfunction purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nfunction pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nfunction pureObjectDef(checkIndex, propToIndex) {\n    /** @type {?} */\n    const keys = Object.keys(propToIndex);\n    /** @type {?} */\n    const nbKeys = keys.length;\n    /** @type {?} */\n    const propertyNames = new Array(nbKeys);\n    for (let i = 0; i < nbKeys; i++) {\n        /** @type {?} */\n        const key = keys[i];\n        /** @type {?} */\n        const index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    /** @type {?} */\n    const bindings = new Array(propertyNames.length);\n    for (let i = 0; i < propertyNames.length; i++) {\n        /** @type {?} */\n        const prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createPureExpression(view, def) {\n    return { value: undefined };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    const bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        const data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        let value;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[(/** @type {?} */ (bindings[0].name))] = v0;\n                if (bindLen > 1)\n                    value[(/** @type {?} */ (bindings[1].name))] = v1;\n                if (bindLen > 2)\n                    value[(/** @type {?} */ (bindings[2].name))] = v2;\n                if (bindLen > 3)\n                    value[(/** @type {?} */ (bindings[3].name))] = v3;\n                if (bindLen > 4)\n                    value[(/** @type {?} */ (bindings[4].name))] = v4;\n                if (bindLen > 5)\n                    value[(/** @type {?} */ (bindings[5].name))] = v5;\n                if (bindLen > 6)\n                    value[(/** @type {?} */ (bindings[6].name))] = v6;\n                if (bindLen > 7)\n                    value[(/** @type {?} */ (bindings[7].name))] = v7;\n                if (bindLen > 8)\n                    value[(/** @type {?} */ (bindings[8].name))] = v8;\n                if (bindLen > 9)\n                    value[(/** @type {?} */ (bindings[9].name))] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                const pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdatePureExpressionDynamic(view, def, values) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        const data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        let value;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (let i = 0; i < values.length; i++) {\n                    value[(/** @type {?} */ (bindings[i].name))] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                const pipe = values[0];\n                /** @type {?} */\n                const params = values.slice(1);\n                value = ((/** @type {?} */ (pipe.transform)))(...params);\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nfunction textDef(checkIndex, ngContentIndex, staticText) {\n    /** @type {?} */\n    const bindings = new Array(staticText.length - 1);\n    for (let i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex,\n        childCount: 0, bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction createText(view, renderHost, def) {\n    /** @type {?} */\n    let renderNode;\n    /** @type {?} */\n    const renderer = view.renderer;\n    renderNode = renderer.createText((/** @type {?} */ (def.text)).prefix);\n    /** @type {?} */\n    const parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode);\n    }\n    return { renderText: renderNode };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    const bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        let value = (/** @type {?} */ (def.text)).prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        /** @type {?} */\n        const renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateTextDynamic(view, def, values) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        let value = '';\n        for (let i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = (/** @type {?} */ (def.text)).prefix + value;\n        /** @type {?} */\n        const renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n    /** @type {?} */\n    const valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nfunction viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    // clone nodes and set auto calculated values\n    /** @type {?} */\n    let viewBindingCount = 0;\n    /** @type {?} */\n    let viewDisposableCount = 0;\n    /** @type {?} */\n    let viewNodeFlags = 0;\n    /** @type {?} */\n    let viewRootNodeFlags = 0;\n    /** @type {?} */\n    let viewMatchedQueries = 0;\n    /** @type {?} */\n    let currentParent = null;\n    /** @type {?} */\n    let currentRenderParent = null;\n    /** @type {?} */\n    let currentElementHasPublicProviders = false;\n    /** @type {?} */\n    let currentElementHasPrivateProviders = false;\n    /** @type {?} */\n    let lastRenderRootNode = null;\n    for (let i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        const node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            /** @type {?} */\n            const elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? (/** @type {?} */ (currentParent.element)).publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true;\n                // Use prototypical inheritance to not get O(n^2) complexity...\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders =\n                    Object.create((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders);\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders = (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders;\n            }\n            /** @type {?} */\n            const isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            /** @type {?} */\n            const isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders))[tokenKey((/** @type {?} */ (node.provider)).token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true;\n                    // Use prototypical inheritance to not get O(n^2) complexity...\n                    (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders =\n                        Object.create((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders);\n                }\n                (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders))[tokenKey((/** @type {?} */ (node.provider)).token)] = node;\n            }\n            if (isComponent) {\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                /** @type {?} */\n                const newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    const handleEvent = (/**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} eventName\n     * @param {?} event\n     * @return {?}\n     */\n    (view, nodeIndex, eventName, event) => (/** @type {?} */ ((/** @type {?} */ (nodes[nodeIndex].element)).handleEvent))(view, eventName, event));\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode\n    };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && (/** @type {?} */ (node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n    /** @type {?} */\n    const template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(`Illegal State: Embedded templates without nodes are not allowed!`);\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(`Illegal State: Last root node of a template can't have embedded views, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        /** @type {?} */\n        const parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(`Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(`Illegal State: Content Query nodes need to be children of directives, at index ${node.nodeIndex}!`);\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(`Illegal State: View Query nodes have to be top level nodes, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.childCount) {\n        /** @type {?} */\n        const parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(`Illegal State: childCount of node leads outside of parent, at index ${node.nodeIndex}!`);\n        }\n    }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction createEmbeddedView(parent, anchorDef, viewDef, context) {\n    // embedded views are seen as siblings to the anchor, so we need\n    // to get the parent of the anchor and use it as parentIndex.\n    /** @type {?} */\n    const view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nfunction createRootView(root, def, context) {\n    /** @type {?} */\n    const view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    const rendererType = (/** @type {?} */ (nodeDef.element)).componentRendererType;\n    /** @type {?} */\n    let compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, (/** @type {?} */ (nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    /** @type {?} */\n    const nodes = new Array(def.nodes.length);\n    /** @type {?} */\n    const disposables = def.outputCount ? new Array(def.outputCount) : null;\n    /** @type {?} */\n    const view = {\n        def,\n        parent,\n        viewContainerParent: null, parentNodeDef,\n        context: null,\n        component: null, nodes,\n        state: 13 /* CatInit */, root, renderer,\n        oldValues: new Array(def.bindingCount), disposables,\n        initIndex: -1\n    };\n    return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n    /** @type {?} */\n    let renderHost;\n    if (isComponentView(view)) {\n        /** @type {?} */\n        const hostDef = view.parentNodeDef;\n        renderHost = asElementData((/** @type {?} */ (view.parent)), (/** @type {?} */ ((/** @type {?} */ (hostDef)).parent)).nodeIndex).renderElement;\n    }\n    /** @type {?} */\n    const def = view.def;\n    /** @type {?} */\n    const nodes = view.nodes;\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        /** @type {?} */\n        let nodeData;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                /** @type {?} */\n                const el = (/** @type {?} */ (createElement(view, renderHost, nodeDef)));\n                /** @type {?} */\n                let componentView = (/** @type {?} */ (undefined));\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    /** @type {?} */\n                    const compViewDef = resolveDefinition((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).componentView)));\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = (/** @type {?} */ ({\n                    renderElement: el,\n                    componentView,\n                    viewContainer: null,\n                    template: (/** @type {?} */ (nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n                }));\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = (/** @type {?} */ (createText(view, renderHost, nodeDef)));\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    /** @type {?} */\n                    const instance = createProviderInstance(view, nodeDef);\n                    nodeData = (/** @type {?} */ ({ instance }));\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                /** @type {?} */\n                const instance = createPipeInstance(view, nodeDef);\n                nodeData = (/** @type {?} */ ({ instance }));\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    /** @type {?} */\n                    const instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = (/** @type {?} */ ({ instance }));\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    /** @type {?} */\n                    const compView = asElementData(view, (/** @type {?} */ (nodeDef.parent)).nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = (/** @type {?} */ (createPureExpression(view, nodeDef)));\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = (/** @type {?} */ (createQuery()));\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    /** @type {?} */\n    let callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            /** @type {?} */\n            const projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (let i = 0; i < projectedViews.length; i++) {\n                    /** @type {?} */\n                    const projectedView = projectedViews[i];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (let i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    /** @type {?} */\n    const queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), `Query ${(/** @type {?} */ (nodeDef.query)).id} not dirty`, `Query ${(/** @type {?} */ (nodeDef.query)).id} dirty`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (let i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n    /** @type {?} */\n    const len = view.def.nodes.length;\n    for (let i = 0; i < len; i++) {\n        /** @type {?} */\n        const def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            (/** @type {?} */ (view.renderer.destroyNode))(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            (/** @type {?} */ (view.renderer.destroyNode))(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\n/** @enum {number} */\nconst ViewAction = {\n    CreateViewNodes: 0,\n    CheckNoChanges: 1,\n    CheckNoChangesProjectedViews: 2,\n    CheckAndUpdate: 3,\n    CheckAndUpdateProjectedViews: 4,\n    Destroy: 5,\n};\nViewAction[ViewAction.CreateViewNodes] = 'CreateViewNodes';\nViewAction[ViewAction.CheckNoChanges] = 'CheckNoChanges';\nViewAction[ViewAction.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews';\nViewAction[ViewAction.CheckAndUpdate] = 'CheckAndUpdate';\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews';\nViewAction[ViewAction.Destroy] = 'Destroy';\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            // a leaf\n            /** @type {?} */\n            const embeddedViews = (/** @type {?} */ (asElementData(view, i).viewContainer))._embeddedViews;\n            for (let k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n    /** @type {?} */\n    const viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    /** @type {?} */\n    const nodeCount = view.def.nodes.length;\n    for (let i = 0; i < nodeCount; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet initialized = false;\n/**\n * @return {?}\n */\nfunction initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    /** @type {?} */\n    const services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n    return {\n        setCurrentNode: (/**\n         * @return {?}\n         */\n        () => { }),\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: (/**\n         * @param {?} view\n         * @param {?} nodeIndex\n         * @return {?}\n         */\n        (view, nodeIndex) => new DebugContext_(view, nodeIndex)),\n        handleEvent: (/**\n         * @param {?} view\n         * @param {?} nodeIndex\n         * @param {?} eventName\n         * @param {?} event\n         * @return {?}\n         */\n        (view, nodeIndex, eventName, event) => view.def.handleEvent(view, nodeIndex, eventName, event)),\n        updateDirectives: (/**\n         * @param {?} view\n         * @param {?} checkType\n         * @return {?}\n         */\n        (view, checkType) => view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view)),\n        updateRenderer: (/**\n         * @param {?} view\n         * @param {?} checkType\n         * @return {?}\n         */\n        (view, checkType) => view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view)),\n    };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: (/**\n         * @param {?} view\n         * @param {?} nodeIndex\n         * @return {?}\n         */\n        (view, nodeIndex) => new DebugContext_(view, nodeIndex)),\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    const rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    const rendererFactory = ngModule.injector.get(RendererFactory2);\n    /** @type {?} */\n    const root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    /** @type {?} */\n    const sanitizer = ngModule.injector.get(Sanitizer);\n    /** @type {?} */\n    const errorHandler = ngModule.injector.get(ErrorHandler);\n    /** @type {?} */\n    const renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule,\n        injector: elInjector, projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer, rendererFactory, renderer, errorHandler\n    };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToView(viewDef);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    const overrideComponentView = viewDefOverrides.get((/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).componentProvider)).provider)).token);\n    if (overrideComponentView) {\n        viewDef = overrideComponentView;\n    }\n    else {\n        viewDef = applyProviderOverridesToView(viewDef);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\n/** @type {?} */\nconst providerOverrides = new Map();\n/** @type {?} */\nconst providerOverridesWithScope = new Map();\n/** @type {?} */\nconst viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    /** @type {?} */\n    let injectableDef;\n    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n        typeof injectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set((/** @type {?} */ (override.token)), override);\n    }\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n    /** @type {?} */\n    const hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    /** @type {?} */\n    const compViewDef = resolveDefinition((/** @type {?} */ ((/** @type {?} */ (hostViewDef.nodes[0].element)).componentView)));\n    viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n// Notes about the algorithm:\n// 1) Locate the providers of an element and check if one of them was overwritten\n// 2) Change the providers of that element\n//\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    /** @type {?} */\n    const elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = (/** @type {?} */ (def.factory))((/**\n     * @return {?}\n     */\n    () => NOOP));\n    for (let i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function findElementIndicesWithOverwrittenProviders(def) {\n        /** @type {?} */\n        const elIndicesWithOverwrittenProviders = [];\n        /** @type {?} */\n        let lastElementDef = null;\n        for (let i = 0; i < def.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has((/** @type {?} */ (nodeDef.provider)).token)) {\n                elIndicesWithOverwrittenProviders.push((/** @type {?} */ (lastElementDef)).nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    /**\n     * @param {?} viewDef\n     * @param {?} elIndex\n     * @return {?}\n     */\n    function applyProviderOverridesToElement(viewDef, elIndex) {\n        for (let i = elIndex + 1; i < viewDef.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                /** @type {?} */\n                const provider = (/** @type {?} */ (nodeDef.provider));\n                /** @type {?} */\n                const override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n// Notes about the algorithm:\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n    const { hasOverrides, hasDeprecatedOverrides } = calcHasOverrides(def);\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = (/** @type {?} */ (def.factory))((/**\n     * @return {?}\n     */\n    () => NOOP));\n    applyProviderOverrides(def);\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function calcHasOverrides(def) {\n        /** @type {?} */\n        let hasOverrides = false;\n        /** @type {?} */\n        let hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides, hasDeprecatedOverrides };\n        }\n        def.providers.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            /** @type {?} */\n            const override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        }));\n        def.modules.forEach((/**\n         * @param {?} module\n         * @return {?}\n         */\n        module => {\n            providerOverridesWithScope.forEach((/**\n             * @param {?} override\n             * @param {?} token\n             * @return {?}\n             */\n            (override, token) => {\n                if ((/** @type {?} */ (getInjectableDef(token))).providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            }));\n        }));\n        return { hasOverrides, hasDeprecatedOverrides };\n    }\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function applyProviderOverrides(def) {\n        for (let i = 0; i < def.providers.length; i++) {\n            /** @type {?} */\n            const provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            /** @type {?} */\n            const override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            /** @type {?} */\n            let moduleSet = new Set(def.modules);\n            providerOverridesWithScope.forEach((/**\n             * @param {?} override\n             * @param {?} token\n             * @return {?}\n             */\n            (override, token) => {\n                if (moduleSet.has((/** @type {?} */ (getInjectableDef(token))).providedIn)) {\n                    /** @type {?} */\n                    let provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            }));\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nconst DebugAction = {\n    create: 0,\n    detectChanges: 1,\n    checkNoChanges: 2,\n    destroy: 3,\n    handleEvent: 4,\n};\nDebugAction[DebugAction.create] = 'create';\nDebugAction[DebugAction.detectChanges] = 'detectChanges';\nDebugAction[DebugAction.checkNoChanges] = 'checkNoChanges';\nDebugAction[DebugAction.destroy] = 'destroy';\nDebugAction[DebugAction.handleEvent] = 'handleEvent';\n/** @type {?} */\nlet _currentAction;\n/** @type {?} */\nlet _currentView;\n/** @type {?} */\nlet _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle, ...values) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle, ...values) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    /** @type {?} */\n    const changed = ((/** @type {?} */ (checkAndUpdateNode)))(view, nodeDef, argStyle, ...givenValues);\n    if (changed) {\n        /** @type {?} */\n        const values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            /** @type {?} */\n            const bindingValues = {};\n            for (let i = 0; i < nodeDef.bindings.length; i++) {\n                /** @type {?} */\n                const binding = nodeDef.bindings[i];\n                /** @type {?} */\n                const value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName((/** @type {?} */ (binding.nonMinifiedName)))] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            /** @type {?} */\n            const elDef = (/** @type {?} */ (nodeDef.parent));\n            /** @type {?} */\n            const el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!(/** @type {?} */ (elDef.element)).name) {\n                // a comment.\n                view.renderer.setValue(el, `bindings=${JSON.stringify(bindingValues, null, 2)}`);\n            }\n            else {\n                // a regular element.\n                for (let attr in bindingValues) {\n                    /** @type {?} */\n                    const value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    ((/** @type {?} */ (checkNoChangesNode)))(view, nodeDef, argStyle, ...values);\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (let i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (let i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nclass DebugContext_ {\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     */\n    constructor(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        let elDef = this.nodeDef;\n        /** @type {?} */\n        let elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = (/** @type {?} */ (elDef.parent));\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = (/** @type {?} */ (viewParentEl(elView)));\n                elView = (/** @type {?} */ (elView.parent));\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    get elOrCompView() {\n        // Has to be done lazily as we use the DebugContext also during creation of elements...\n        return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return createInjector$1(this.elView, this.elDef); }\n    /**\n     * @return {?}\n     */\n    get component() { return this.elOrCompView.component; }\n    /**\n     * @return {?}\n     */\n    get context() { return this.elOrCompView.context; }\n    /**\n     * @return {?}\n     */\n    get providerTokens() {\n        /** @type {?} */\n        const tokens = [];\n        if (this.elDef) {\n            for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                /** @type {?} */\n                const childDef = this.elView.def.nodes[i];\n                if (childDef.flags & 20224 /* CatProvider */) {\n                    tokens.push((/** @type {?} */ (childDef.provider)).token);\n                }\n                i += childDef.childCount;\n            }\n        }\n        return tokens;\n    }\n    /**\n     * @return {?}\n     */\n    get references() {\n        /** @type {?} */\n        const references = {};\n        if (this.elDef) {\n            collectReferences(this.elView, this.elDef, references);\n            for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                /** @type {?} */\n                const childDef = this.elView.def.nodes[i];\n                if (childDef.flags & 20224 /* CatProvider */) {\n                    collectReferences(this.elView, childDef, references);\n                }\n                i += childDef.childCount;\n            }\n        }\n        return references;\n    }\n    /**\n     * @return {?}\n     */\n    get componentRenderElement() {\n        /** @type {?} */\n        const elData = findHostElement(this.elOrCompView);\n        return elData ? elData.renderElement : undefined;\n    }\n    /**\n     * @return {?}\n     */\n    get renderNode() {\n        return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n            renderNode(this.elView, this.elDef);\n    }\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    logError(console, ...values) {\n        /** @type {?} */\n        let logViewDef;\n        /** @type {?} */\n        let logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        // Note: we only generate a log function for text and element nodes\n        // to make the generated code as small as possible.\n        /** @type {?} */\n        const renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        /** @type {?} */\n        let currRenderNodeIndex = -1;\n        /** @type {?} */\n        let nodeLogger = (/**\n         * @return {?}\n         */\n        () => {\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return console.error.bind(console, ...values);\n            }\n            else {\n                return NOOP;\n            }\n        });\n        (/** @type {?} */ (logViewDef.factory))(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            ((/** @type {?} */ (console.error)))(...values);\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DebugContext_.prototype.nodeDef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DebugContext_.prototype.elView;\n    /**\n     * @type {?}\n     * @private\n     */\n    DebugContext_.prototype.elDef;\n    /** @type {?} */\n    DebugContext_.prototype.view;\n    /** @type {?} */\n    DebugContext_.prototype.nodeIndex;\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef, nodeIndex) {\n    /** @type {?} */\n    let renderNodeIndex = -1;\n    for (let i = 0; i <= nodeIndex; i++) {\n        /** @type {?} */\n        const nodeDef = viewDef.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = (/** @type {?} */ (view.parent));\n    }\n    if (view.parent) {\n        return asElementData(view.parent, (/** @type {?} */ (viewParentEl(view))).nodeIndex);\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n    for (let refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n    /** @type {?} */\n    const oldAction = _currentAction;\n    /** @type {?} */\n    const oldView = _currentView;\n    /** @type {?} */\n    const oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        /** @type {?} */\n        const result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, (/** @type {?} */ (getCurrentDebugContext())));\n    }\n}\n/**\n * @return {?}\n */\nfunction getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nclass DebugRendererFactory2 {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    createRenderer(element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    }\n    /**\n     * @return {?}\n     */\n    begin() {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    end() {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DebugRendererFactory2.prototype.delegate;\n}\nclass DebugRenderer2 {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n        /**\n         * Factory function used to create a `DebugContext` when a node is created.\n         *\n         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n         *\n         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n         * or a Render context.\n         */\n        this.debugContextFactory = getCurrentDebugContext;\n        this.data = this.delegate.data;\n    }\n    /**\n     * @private\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    createDebugContext(nativeElement) { return this.debugContextFactory(nativeElement); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    destroyNode(node) {\n        /** @type {?} */\n        const debugNode = (/** @type {?} */ (getDebugNode(node)));\n        removeDebugNodeFromIndex(debugNode);\n        if (debugNode instanceof DebugNode__PRE_R3__) {\n            debugNode.listeners.length = 0;\n        }\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    destroy() { this.delegate.destroy(); }\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    createElement(name, namespace) {\n        /** @type {?} */\n        const el = this.delegate.createElement(name, namespace);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(el);\n        if (debugCtx) {\n            /** @type {?} */\n            const debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n            ((/** @type {?} */ (debugEl))).name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createComment(value) {\n        /** @type {?} */\n        const comment = this.delegate.createComment(value);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(comment);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n        }\n        return comment;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createText(value) {\n        /** @type {?} */\n        const text = this.delegate.createText(value);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(text);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n        }\n        return text;\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(newChild);\n        /** @type {?} */\n        const debugRefEl = (/** @type {?} */ (getDebugNode(refChild)));\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode, preserveContent) {\n        /** @type {?} */\n        const el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n        /** @type {?} */\n        const debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n        }\n        return el;\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    setAttribute(el, name, value, namespace) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            /** @type {?} */\n            const fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    removeAttribute(el, name, namespace) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            /** @type {?} */\n            const fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    addClass(el, name) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    removeClass(el, name) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    setStyle(el, style, value, flags) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    removeStyle(el, style, flags) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, eventName, callback) {\n        if (typeof target !== 'string') {\n            /** @type {?} */\n            const debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new DebugEventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) { return this.delegate.parentNode(node); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nextSibling(node) { return this.delegate.nextSibling(node); }\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(node, value) { return this.delegate.setValue(node, value); }\n}\nif (false) {\n    /** @type {?} */\n    DebugRenderer2.prototype.data;\n    /**\n     * Factory function used to create a `DebugContext` when a node is created.\n     *\n     * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n     *\n     * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n     * or a Render context.\n     * @type {?}\n     */\n    DebugRenderer2.prototype.debugContextFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    DebugRenderer2.prototype.delegate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} override\n * @return {?}\n */\nfunction overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nfunction overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nfunction clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nfunction createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction cloneNgModuleDefinition(def) {\n    /** @type {?} */\n    const providers = Array.from(def.providers);\n    /** @type {?} */\n    const modules = Array.from(def.modules);\n    /** @type {?} */\n    const providersByKey = {};\n    for (const key in def.providersByKey) {\n        providersByKey[key] = def.providersByKey[key];\n    }\n    return {\n        factory: def.factory,\n        isRoot: def.isRoot, providers, modules, providersByKey,\n    };\n}\nclass NgModuleFactory_ extends NgModuleFactory {\n    /**\n     * @param {?} moduleType\n     * @param {?} _bootstrapComponents\n     * @param {?} _ngModuleDefFactory\n     */\n    constructor(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        super();\n        this.moduleType = moduleType;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._ngModuleDefFactory = _ngModuleDefFactory;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    create(parentInjector) {\n        initServicesIfNeeded();\n        // Clone the NgModuleDefinition so that any tree shakeable provider definition\n        // added to this instance of the NgModuleRef doesn't affect the cached copy.\n        // See https://github.com/angular/angular/issues/25018.\n        /** @type {?} */\n        const def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    }\n}\nif (false) {\n    /** @type {?} */\n    NgModuleFactory_.prototype.moduleType;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgModuleFactory_.prototype._bootstrapComponents;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgModuleFactory_.prototype._ngModuleDefFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APPLICATION_MODULE_PROVIDERS as Éµangular_packages_core_core_q, _iterableDiffersFactory as Éµangular_packages_core_core_n, _keyValueDiffersFactory as Éµangular_packages_core_core_o, _localeFactory as Éµangular_packages_core_core_p, zoneSchedulerFactory as Éµangular_packages_core_core_r, _appIdRandomProviderFactory as Éµangular_packages_core_core_f, DefaultIterableDifferFactory as Éµangular_packages_core_core_l, DefaultKeyValueDifferFactory as Éµangular_packages_core_core_m, DebugElement__PRE_R3__ as Éµangular_packages_core_core_k, DebugNode__PRE_R3__ as Éµangular_packages_core_core_j, NullInjector as Éµangular_packages_core_core_b, injectInjectorOnly as Éµangular_packages_core_core_a, ReflectiveInjector_ as Éµangular_packages_core_core_c, ReflectiveDependency as Éµangular_packages_core_core_d, resolveReflectiveProviders as Éµangular_packages_core_core_e, getModuleFactory__PRE_R3__ as Éµangular_packages_core_core_i, wtfEnabled as Éµangular_packages_core_core_s, createScope as Éµangular_packages_core_core_u, detectWTF as Éµangular_packages_core_core_t, endTimeRange as Éµangular_packages_core_core_x, leave as Éµangular_packages_core_core_v, startTimeRange as Éµangular_packages_core_core_w, SCHEDULER as Éµangular_packages_core_core_ba, injectAttributeImpl as Éµangular_packages_core_core_bb, getLView as Éµangular_packages_core_core_bc, getPreviousOrParentTNode as Éµangular_packages_core_core_bd, nextContextImpl as Éµangular_packages_core_core_be, getRootContext as Éµangular_packages_core_core_bm, loadInternal as Éµangular_packages_core_core_bl, createElementRef as Éµangular_packages_core_core_g, createTemplateRef as Éµangular_packages_core_core_h, getUrlSanitizer as Éµangular_packages_core_core_bg, noSideEffects as Éµangular_packages_core_core_bk, makeParamDecorator as Éµangular_packages_core_core_bh, makePropDecorator as Éµangular_packages_core_core_bi, getClosureSafeProperty as Éµangular_packages_core_core_bn, _def as Éµangular_packages_core_core_y, DebugContext as Éµangular_packages_core_core_z, createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, createPlatformFactory, NgProbeToken, enableProdMode, isDevMode, APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationInitStatus, DebugElement, DebugEventListener, DebugNode$1 as DebugNode, asNativeElements, getDebugNode, Testability, TestabilityRegistry, setTestabilityGetter, TRANSLATIONS$1 as TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID$1 as LOCALE_ID, MissingTranslationStrategy, ApplicationModule, wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, Type, EventEmitter, ErrorHandler, Sanitizer, SecurityContext, Attribute, ANALYZE_FOR_ENTRY_COMPONENTS, ContentChild, ContentChildren, Query, ViewChild, ViewChildren, Component, Directive, HostBinding, HostListener, Input, Output, Pipe, NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, ViewEncapsulation, Version, VERSION, InjectFlags, ÉµÉµdefineInjectable, defineInjectable, ÉµÉµdefineInjector, forwardRef, resolveForwardRef, Injectable, Injector, ÉµÉµinject, inject, INJECTOR, ReflectiveInjector, ResolvedReflectiveFactory, ReflectiveKey, InjectionToken, Inject, Optional, Self, SkipSelf, Host, NgZone, NoopNgZone as ÉµNoopNgZone, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RootRenderer, COMPILER_OPTIONS, Compiler, CompilerFactory, ModuleWithComponentFactories, ComponentFactory, ComponentFactory as ÉµComponentFactory, ComponentRef, ComponentFactoryResolver, ElementRef, NgModuleFactory, NgModuleRef, NgModuleFactoryLoader, getModuleFactory, QueryList, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TemplateRef, ViewContainerRef, EmbeddedViewRef, ViewRef$1 as ViewRef, ChangeDetectionStrategy, ChangeDetectorRef, DefaultIterableDiffer, IterableDiffers, KeyValueDiffers, SimpleChange, WrappedValue, platformCore, ALLOW_MULTIPLE_PLATFORMS as ÉµALLOW_MULTIPLE_PLATFORMS, APP_ID_RANDOM_PROVIDER as ÉµAPP_ID_RANDOM_PROVIDER, defaultIterableDiffers as ÉµdefaultIterableDiffers, defaultKeyValueDiffers as ÉµdefaultKeyValueDiffers, devModeEqual$1 as ÉµdevModeEqual, isListLikeIterable$1 as ÉµisListLikeIterable, ChangeDetectorStatus as ÉµChangeDetectorStatus, isDefaultChangeDetectionStrategy as ÉµisDefaultChangeDetectionStrategy, Console as ÉµConsole, setCurrentInjector as ÉµsetCurrentInjector, getInjectableDef as ÉµgetInjectableDef, APP_ROOT as ÉµAPP_ROOT, DEFAULT_LOCALE_ID as ÉµDEFAULT_LOCALE_ID, ivyEnabled as ÉµivyEnabled, CodegenComponentFactoryResolver as ÉµCodegenComponentFactoryResolver, clearResolutionOfComponentResourcesQueue as ÉµclearResolutionOfComponentResourcesQueue, resolveComponentResources as ÉµresolveComponentResources, ReflectionCapabilities as ÉµReflectionCapabilities, RenderDebugInfo as ÉµRenderDebugInfo, _sanitizeHtml as Éµ_sanitizeHtml, _sanitizeStyle as Éµ_sanitizeStyle, _sanitizeUrl as Éµ_sanitizeUrl, _global as Éµglobal, looseIdentical as ÉµlooseIdentical, stringify as Éµstringify, makeDecorator as ÉµmakeDecorator, isObservable as ÉµisObservable, isPromise as ÉµisPromise, clearOverrides as ÉµclearOverrides, initServicesIfNeeded as ÉµinitServicesIfNeeded, overrideComponentView as ÉµoverrideComponentView, overrideProvider as ÉµoverrideProvider, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ÉµNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, getLocalePluralCase as ÉµgetLocalePluralCase, findLocaleData as ÉµfindLocaleData, LOCALE_DATA as ÉµLOCALE_DATA, LocaleDataIndex as ÉµLocaleDataIndex, ÉµÉµattribute, ÉµÉµattributeInterpolate1, ÉµÉµattributeInterpolate2, ÉµÉµattributeInterpolate3, ÉµÉµattributeInterpolate4, ÉµÉµattributeInterpolate5, ÉµÉµattributeInterpolate6, ÉµÉµattributeInterpolate7, ÉµÉµattributeInterpolate8, ÉµÉµattributeInterpolateV, ÉµÉµdefineBase, ÉµÉµdefineComponent, ÉµÉµdefineDirective, ÉµÉµdefinePipe, ÉµÉµdefineNgModule, detectChanges as ÉµdetectChanges, renderComponent as ÉµrenderComponent, ComponentFactory$1 as ÉµRender3ComponentFactory, ComponentRef$1 as ÉµRender3ComponentRef, ÉµÉµdirectiveInject, ÉµÉµinjectAttribute, ÉµÉµinjectPipeChangeDetectorRef, ÉµÉµgetFactoryOf, ÉµÉµgetInheritedFactory, ÉµÉµsetComponentScope, ÉµÉµsetNgModuleScope, ÉµÉµtemplateRefExtractor, ÉµÉµProvidersFeature, ÉµÉµInheritDefinitionFeature, ÉµÉµNgOnChangesFeature, LifecycleHooksFeature as ÉµLifecycleHooksFeature, NgModuleRef$1 as ÉµRender3NgModuleRef, markDirty as ÉµmarkDirty, NgModuleFactory$1 as ÉµNgModuleFactory, NO_CHANGE as ÉµNO_CHANGE, ÉµÉµcontainer, ÉµÉµnextContext, ÉµÉµelementStart, ÉµÉµnamespaceHTML, ÉµÉµnamespaceMathML, ÉµÉµnamespaceSVG, ÉµÉµelement, ÉµÉµlistener, ÉµÉµtext, ÉµÉµtextInterpolate, ÉµÉµtextInterpolate1, ÉµÉµtextInterpolate2, ÉµÉµtextInterpolate3, ÉµÉµtextInterpolate4, ÉµÉµtextInterpolate5, ÉµÉµtextInterpolate6, ÉµÉµtextInterpolate7, ÉµÉµtextInterpolate8, ÉµÉµtextInterpolateV, ÉµÉµembeddedViewStart, ÉµÉµprojection, ÉµÉµpipeBind1, ÉµÉµpipeBind2, ÉµÉµpipeBind3, ÉµÉµpipeBind4, ÉµÉµpipeBindV, ÉµÉµpureFunction0, ÉµÉµpureFunction1, ÉµÉµpureFunction2, ÉµÉµpureFunction3, ÉµÉµpureFunction4, ÉµÉµpureFunction5, ÉµÉµpureFunction6, ÉµÉµpureFunction7, ÉµÉµpureFunction8, ÉµÉµpureFunctionV, ÉµÉµgetCurrentView, getDirectives as ÉµgetDirectives, getHostElement as ÉµgetHostElement, ÉµÉµrestoreView, ÉµÉµcontainerRefreshStart, ÉµÉµcontainerRefreshEnd, ÉµÉµqueryRefresh, ÉµÉµviewQuery, ÉµÉµstaticViewQuery, ÉµÉµstaticContentQuery, ÉµÉµloadViewQuery, ÉµÉµcontentQuery, ÉµÉµloadContentQuery, ÉµÉµelementEnd, ÉµÉµhostProperty, ÉµÉµproperty, ÉµÉµpropertyInterpolate, ÉµÉµpropertyInterpolate1, ÉµÉµpropertyInterpolate2, ÉµÉµpropertyInterpolate3, ÉµÉµpropertyInterpolate4, ÉµÉµpropertyInterpolate5, ÉµÉµpropertyInterpolate6, ÉµÉµpropertyInterpolate7, ÉµÉµpropertyInterpolate8, ÉµÉµpropertyInterpolateV, ÉµÉµupdateSyntheticHostBinding, ÉµÉµcomponentHostSyntheticListener, ÉµÉµprojectionDef, ÉµÉµreference, ÉµÉµenableBindings, ÉµÉµdisableBindings, ÉµÉµallocHostVars, ÉµÉµelementContainerStart, ÉµÉµelementContainerEnd, ÉµÉµelementContainer, ÉµÉµstyling, ÉµÉµstyleMap, ÉµÉµstyleSanitizer, ÉµÉµclassMap, ÉµÉµclassMapInterpolate1, ÉµÉµclassMapInterpolate2, ÉµÉµclassMapInterpolate3, ÉµÉµclassMapInterpolate4, ÉµÉµclassMapInterpolate5, ÉµÉµclassMapInterpolate6, ÉµÉµclassMapInterpolate7, ÉµÉµclassMapInterpolate8, ÉµÉµclassMapInterpolateV, ÉµÉµstyleProp, ÉµÉµstylePropInterpolate1, ÉµÉµstylePropInterpolate2, ÉµÉµstylePropInterpolate3, ÉµÉµstylePropInterpolate4, ÉµÉµstylePropInterpolate5, ÉµÉµstylePropInterpolate6, ÉµÉµstylePropInterpolate7, ÉµÉµstylePropInterpolate8, ÉµÉµstylePropInterpolateV, ÉµÉµstylingApply, ÉµÉµclassProp, ÉµÉµelementHostAttrs, ÉµÉµselect, ÉµÉµtextBinding, ÉµÉµtemplate, ÉµÉµembeddedViewEnd, store as Éµstore, ÉµÉµload, ÉµÉµpipe, whenRendered as ÉµwhenRendered, ÉµÉµi18n, ÉµÉµi18nAttributes, ÉµÉµi18nExp, ÉµÉµi18nStart, ÉµÉµi18nEnd, ÉµÉµi18nApply, ÉµÉµi18nPostprocess, i18nConfigureLocalize as Éµi18nConfigureLocalize, ÉµÉµi18nLocalize, setLocaleId as ÉµsetLocaleId, setClassMetadata as ÉµsetClassMetadata, ÉµÉµresolveWindow, ÉµÉµresolveDocument, ÉµÉµresolveBody, compileComponent as ÉµcompileComponent, compileDirective as ÉµcompileDirective, compileNgModule as ÉµcompileNgModule, compileNgModuleDefs as ÉµcompileNgModuleDefs, patchComponentDefWithScope as ÉµpatchComponentDefWithScope, resetCompiledComponents as ÉµresetCompiledComponents, flushModuleScopingQueueAsMuchAsPossible as ÉµflushModuleScopingQueueAsMuchAsPossible, transitiveScopesFor as ÉµtransitiveScopesFor, compilePipe as ÉµcompilePipe, ÉµÉµsanitizeHtml, ÉµÉµsanitizeStyle, ÉµÉµdefaultStyleSanitizer, ÉµÉµsanitizeScript, ÉµÉµsanitizeUrl, ÉµÉµsanitizeResourceUrl, ÉµÉµsanitizeUrlOrResourceUrl, bypassSanitizationTrustHtml as ÉµbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ÉµbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ÉµbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ÉµbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ÉµbypassSanitizationTrustResourceUrl, getLContext as ÉµgetLContext, NG_ELEMENT_ID as ÉµNG_ELEMENT_ID, NG_COMPONENT_DEF as ÉµNG_COMPONENT_DEF, NG_DIRECTIVE_DEF as ÉµNG_DIRECTIVE_DEF, NG_PIPE_DEF as ÉµNG_PIPE_DEF, NG_MODULE_DEF as ÉµNG_MODULE_DEF, NG_BASE_DEF as ÉµNG_BASE_DEF, NG_INJECTABLE_DEF as ÉµNG_INJECTABLE_DEF, NG_INJECTOR_DEF as ÉµNG_INJECTOR_DEF, compileNgModuleFactory__POST_R3__ as ÉµcompileNgModuleFactory__POST_R3__, isBoundToModule__POST_R3__ as ÉµisBoundToModule__POST_R3__, SWITCH_COMPILE_COMPONENT__POST_R3__ as ÉµSWITCH_COMPILE_COMPONENT__POST_R3__, SWITCH_COMPILE_DIRECTIVE__POST_R3__ as ÉµSWITCH_COMPILE_DIRECTIVE__POST_R3__, SWITCH_COMPILE_PIPE__POST_R3__ as ÉµSWITCH_COMPILE_PIPE__POST_R3__, SWITCH_COMPILE_NGMODULE__POST_R3__ as ÉµSWITCH_COMPILE_NGMODULE__POST_R3__, getDebugNode__POST_R3__ as ÉµgetDebugNode__POST_R3__, SWITCH_COMPILE_INJECTABLE__POST_R3__ as ÉµSWITCH_COMPILE_INJECTABLE__POST_R3__, SWITCH_IVY_ENABLED__POST_R3__ as ÉµSWITCH_IVY_ENABLED__POST_R3__, SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ as ÉµSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, Compiler_compileModuleSync__POST_R3__ as ÉµCompiler_compileModuleSync__POST_R3__, Compiler_compileModuleAsync__POST_R3__ as ÉµCompiler_compileModuleAsync__POST_R3__, Compiler_compileModuleAndAllComponentsSync__POST_R3__ as ÉµCompiler_compileModuleAndAllComponentsSync__POST_R3__, Compiler_compileModuleAndAllComponentsAsync__POST_R3__ as ÉµCompiler_compileModuleAndAllComponentsAsync__POST_R3__, SWITCH_ELEMENT_REF_FACTORY__POST_R3__ as ÉµSWITCH_ELEMENT_REF_FACTORY__POST_R3__, SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ as ÉµSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ as ÉµSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, SWITCH_RENDERER2_FACTORY__POST_R3__ as ÉµSWITCH_RENDERER2_FACTORY__POST_R3__, getModuleFactory__POST_R3__ as ÉµgetModuleFactory__POST_R3__, registerNgModuleType as ÉµregisterNgModuleType, publishGlobalUtil as ÉµpublishGlobalUtil, publishDefaultGlobalUtils as ÉµpublishDefaultGlobalUtils, createInjector as ÉµcreateInjector, INJECTOR_IMPL__POST_R3__ as ÉµINJECTOR_IMPL__POST_R3__, registerModuleFactory as ÉµregisterModuleFactory, EMPTY_ARRAY$3 as ÉµEMPTY_ARRAY, EMPTY_MAP as ÉµEMPTY_MAP, anchorDef as Éµand, createComponentFactory as Éµccf, createNgModuleFactory as Éµcmf, createRendererType2 as Éµcrt, directiveDef as Éµdid, elementDef as Éµeld, getComponentViewDefinitionFactory as ÉµgetComponentViewDefinitionFactory, inlineInterpolate as ÉµinlineInterpolate, interpolate as Éµinterpolate, moduleDef as Éµmod, moduleProvideDef as Éµmpd, ngContentDef as Éµncd, nodeValue as Éµnov, pipeDef as Éµpid, providerDef as Éµprd, pureArrayDef as Éµpad, pureObjectDef as Éµpod, purePipeDef as Éµppd, queryDef as Éµqud, textDef as Éµted, unwrapValue as Éµunv, viewDef as Éµvid };\n//# sourceMappingURL=core.js.map\n","import { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge(...observables) {\n    let concurrent = Number.POSITIVE_INFINITY;\n    let scheduler = null;\n    let last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map","import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        let subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        const connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport class MulticastOperator {\n    constructor(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    call(subscriber, source) {\n        const { selector } = this;\n        const subject = this.subjectFactory();\n        const subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    }\n}\n//# sourceMappingURL=multicast.js.map","function ObjectUnsubscribedErrorImpl() {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n}\nObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\nexport const ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeToObservable = (obj) => (subscriber) => {\n    const obs = obj[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    }\n    else {\n        return obs.subscribe(subscriber);\n    }\n};\n//# sourceMappingURL=subscribeToObservable.js.map","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=from.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport function isInteropObservable(input) {\n    return input && typeof input[Symbol_observable] === 'function';\n}\n//# sourceMappingURL=isInteropObservable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nexport function fromObservable(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToObservable(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            sub.add(scheduler.schedule(() => {\n                const observable = input[Symbol_observable]();\n                sub.add(observable.subscribe({\n                    next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n                    error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n                    complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromObservable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\nexport function fromPromise(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToPromise(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            sub.add(scheduler.schedule(() => input.then(value => {\n                sub.add(scheduler.schedule(() => {\n                    subscriber.next(value);\n                    sub.add(scheduler.schedule(() => subscriber.complete()));\n                }));\n            }, err => {\n                sub.add(scheduler.schedule(() => subscriber.error(err)));\n            })));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromPromise.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function isIterable(input) {\n    return input && typeof input[Symbol_iterator] === 'function';\n}\n//# sourceMappingURL=isIterable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nexport function fromIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    if (!scheduler) {\n        return new Observable(subscribeToIterable(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            let iterator;\n            sub.add(() => {\n                if (iterator && typeof iterator.return === 'function') {\n                    iterator.return();\n                }\n            });\n            sub.add(scheduler.schedule(() => {\n                iterator = input[Symbol_iterator]();\n                sub.add(scheduler.schedule(function () {\n                    if (subscriber.closed) {\n                        return;\n                    }\n                    let value;\n                    let done;\n                    try {\n                        const result = iterator.next();\n                        value = result.value;\n                        done = result.done;\n                    }\n                    catch (err) {\n                        subscriber.error(err);\n                        return;\n                    }\n                    if (done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(value);\n                        this.schedule();\n                    }\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromIterable.js.map","export const isArray = Array.isArray || ((x) => x && typeof x.length === 'number');\n//# sourceMappingURL=isArray.js.map","import { Observable } from '../Observable';\nexport const EMPTY = new Observable(subscriber => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nexport function emptyScheduled(scheduler) {\n    return new Observable(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n//# sourceMappingURL=empty.js.map","/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable service that produces an animation sequence programmatically within an\n * Angular component or directive.\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\n *\n * \\@usageNotes\n *\n * To use this service, add it to your component or directive as a dependency.\n * The service is instantiated along with your component.\n *\n * Apps do not typically need to create their own animation players, but if you\n * do need to, follow these steps:\n *\n * 1. Use the `build()` method to create a programmatic animation using the\n * `animate()` function. The method returns an `AnimationFactory` instance.\n *\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\n *\n * 3. Use the player object to control the animation programmatically.\n *\n * For example:\n *\n * ```ts\n * // import the service from BrowserAnimationsModule\n * import {AnimationBuilder} from '\\@angular/animations';\n * // require the service as a dependency\n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n *\n *   makeAnimation(element: any) {\n *     // first define a reusable animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n *\n *     // use the returned factory object to create a player\n *     const player = myAnimation.create(element);\n *\n *     player.play();\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @abstract\n */\nclass AnimationBuilder {\n}\nif (false) {\n    /**\n     * Builds a factory for producing a defined animation.\n     * @see `animate()`\n     * @abstract\n     * @param {?} animation A reusable animation definition.\n     * @return {?} A factory object that can create a player for the defined animation.\n     */\n    AnimationBuilder.prototype.build = function (animation) { };\n}\n/**\n * A factory object returned from the `AnimationBuilder`.`build()` method.\n *\n * \\@publicApi\n * @abstract\n */\nclass AnimationFactory {\n}\nif (false) {\n    /**\n     * Creates an `AnimationPlayer` instance for the reusable animation defined by\n     * the `AnimationBuilder`.`build()` method that created this factory.\n     * Attaches the new player a DOM element.\n     * @abstract\n     * @param {?} element The DOM element to which to attach the animation.\n     * @param {?=} options A set of options that can include a time delay and\n     * additional developer-defined parameters.\n     * @return {?}\n     */\n    AnimationFactory.prototype.create = function (element, options) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a set of CSS styles for use in an animation style.\n * @record\n */\nfunction ÉµStyleData() { }\n/** @enum {number} */\nconst AnimationMetadataType = {\n    /**\n     * Associates a named animation state with a set of CSS styles.\n     * See `state()`\n     */\n    State: 0,\n    /**\n     * Data for a transition from one animation state to another.\n     * See `transition()`\n     */\n    Transition: 1,\n    /**\n     * Contains a set of animation steps.\n     * See `sequence()`\n     */\n    Sequence: 2,\n    /**\n     * Contains a set of animation steps.\n     * See `{@link animations/group group()}`\n     */\n    Group: 3,\n    /**\n     * Contains an animation step.\n     * See `animate()`\n     */\n    Animate: 4,\n    /**\n     * Contains a set of animation steps.\n     * See `keyframes()`\n     */\n    Keyframes: 5,\n    /**\n     * Contains a set of CSS property-value pairs into a named style.\n     * See `style()`\n     */\n    Style: 6,\n    /**\n     * Associates an animation with an entry trigger that can be attached to an element.\n     * See `trigger()`\n     */\n    Trigger: 7,\n    /**\n     * Contains a re-usable animation.\n     * See `animation()`\n     */\n    Reference: 8,\n    /**\n     * Contains data to use in executing child animations returned by a query.\n     * See `animateChild()`\n     */\n    AnimateChild: 9,\n    /**\n     * Contains animation parameters for a re-usable animation.\n     * See `useAnimation()`\n     */\n    AnimateRef: 10,\n    /**\n     * Contains child-animation query data.\n     * See `query()`\n     */\n    Query: 11,\n    /**\n     * Contains data for staggering an animation sequence.\n     * See `stagger()`\n     */\n    Stagger: 12,\n};\n/**\n * Specifies automatic styling.\n *\n * \\@publicApi\n * @type {?}\n */\nconst AUTO_STYLE = '*';\n/**\n * Base for animation data structures.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationMetadata() { }\nif (false) {\n    /** @type {?} */\n    AnimationMetadata.prototype.type;\n}\n/**\n * Contains an animation trigger. Instantiated and returned by the\n * `trigger()` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationTriggerMetadata() { }\nif (false) {\n    /**\n     * The trigger name, used to associate it with an element. Unique within the component.\n     * @type {?}\n     */\n    AnimationTriggerMetadata.prototype.name;\n    /**\n     * An animation definition object, containing an array of state and transition declarations.\n     * @type {?}\n     */\n    AnimationTriggerMetadata.prototype.definitions;\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     * @type {?}\n     */\n    AnimationTriggerMetadata.prototype.options;\n}\n/**\n * Encapsulates an animation state by associating a state name with a set of CSS styles.\n * Instantiated and returned by the `state()` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationStateMetadata() { }\nif (false) {\n    /**\n     * The state name, unique within the component.\n     * @type {?}\n     */\n    AnimationStateMetadata.prototype.name;\n    /**\n     *  The CSS styles associated with this state.\n     * @type {?}\n     */\n    AnimationStateMetadata.prototype.styles;\n    /**\n     * An options object containing\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation.\n     * @type {?|undefined}\n     */\n    AnimationStateMetadata.prototype.options;\n}\n/**\n * Encapsulates an animation transition. Instantiated and returned by the\n * `transition()` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationTransitionMetadata() { }\nif (false) {\n    /**\n     * An expression that describes a state change.\n     * @type {?}\n     */\n    AnimationTransitionMetadata.prototype.expr;\n    /**\n     * One or more animation objects to which this transition applies.\n     * @type {?}\n     */\n    AnimationTransitionMetadata.prototype.animation;\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     * @type {?}\n     */\n    AnimationTransitionMetadata.prototype.options;\n}\n/**\n * Encapsulates a reusable animation, which is a collection of individual animation steps.\n * Instantiated and returned by the `animation()` function, and\n * passed to the `useAnimation()` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationReferenceMetadata() { }\nif (false) {\n    /**\n     *  One or more animation step objects.\n     * @type {?}\n     */\n    AnimationReferenceMetadata.prototype.animation;\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     * @type {?}\n     */\n    AnimationReferenceMetadata.prototype.options;\n}\n/**\n * Encapsulates an animation query. Instantiated and returned by\n * the `query()` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationQueryMetadata() { }\nif (false) {\n    /**\n     *  The CSS selector for this query.\n     * @type {?}\n     */\n    AnimationQueryMetadata.prototype.selector;\n    /**\n     * One or more animation step objects.\n     * @type {?}\n     */\n    AnimationQueryMetadata.prototype.animation;\n    /**\n     * A query options object.\n     * @type {?}\n     */\n    AnimationQueryMetadata.prototype.options;\n}\n/**\n * Encapsulates a keyframes sequence. Instantiated and returned by\n * the `keyframes()` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationKeyframesSequenceMetadata() { }\nif (false) {\n    /**\n     * An array of animation styles.\n     * @type {?}\n     */\n    AnimationKeyframesSequenceMetadata.prototype.steps;\n}\n/**\n * Encapsulates an animation style. Instantiated and returned by\n * the `style()` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationStyleMetadata() { }\nif (false) {\n    /**\n     * A set of CSS style properties.\n     * @type {?}\n     */\n    AnimationStyleMetadata.prototype.styles;\n    /**\n     * A percentage of the total animate time at which the style is to be applied.\n     * @type {?}\n     */\n    AnimationStyleMetadata.prototype.offset;\n}\n/**\n * Encapsulates an animation step. Instantiated and returned by\n * the `animate()` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationAnimateMetadata() { }\nif (false) {\n    /**\n     * The timing data for the step.\n     * @type {?}\n     */\n    AnimationAnimateMetadata.prototype.timings;\n    /**\n     * A set of styles used in the step.\n     * @type {?}\n     */\n    AnimationAnimateMetadata.prototype.styles;\n}\n/**\n * Encapsulates a child animation, that can be run explicitly when the parent is run.\n * Instantiated and returned by the `animateChild` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationAnimateChildMetadata() { }\nif (false) {\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     * @type {?}\n     */\n    AnimationAnimateChildMetadata.prototype.options;\n}\n/**\n * Encapsulates a reusable animation.\n * Instantiated and returned by the `useAnimation()` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationAnimateRefMetadata() { }\nif (false) {\n    /**\n     * An animation reference object.\n     * @type {?}\n     */\n    AnimationAnimateRefMetadata.prototype.animation;\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     * @type {?}\n     */\n    AnimationAnimateRefMetadata.prototype.options;\n}\n/**\n * Encapsulates an animation sequence.\n * Instantiated and returned by the `sequence()` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationSequenceMetadata() { }\nif (false) {\n    /**\n     *  An array of animation step objects.\n     * @type {?}\n     */\n    AnimationSequenceMetadata.prototype.steps;\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     * @type {?}\n     */\n    AnimationSequenceMetadata.prototype.options;\n}\n/**\n * Encapsulates an animation group.\n * Instantiated and returned by the `{\\@link animations/group group()}` function.\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationGroupMetadata() { }\nif (false) {\n    /**\n     * One or more animation or style steps that form this group.\n     * @type {?}\n     */\n    AnimationGroupMetadata.prototype.steps;\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     * @type {?}\n     */\n    AnimationGroupMetadata.prototype.options;\n}\n/**\n * Encapsulates parameters for staggering the start times of a set of animation steps.\n * Instantiated and returned by the `stagger()` function.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction AnimationStaggerMetadata() { }\nif (false) {\n    /**\n     * The timing data for the steps.\n     * @type {?}\n     */\n    AnimationStaggerMetadata.prototype.timings;\n    /**\n     * One or more animation steps.\n     * @type {?}\n     */\n    AnimationStaggerMetadata.prototype.animation;\n}\n/**\n * Creates a named animation trigger, containing a  list of `state()`\n * and `transition()` entries to be evaluated when the expression\n * bound to the trigger changes.\n *\n * \\@usageNotes\n * Define an animation trigger in the `animations` section of `\\@Component` metadata.\n * In the template, reference the trigger by name and bind it to a trigger expression that\n * evaluates to a defined animation state, using the following format:\n *\n * `[\\@triggerName]=\"expression\"`\n *\n * Animation trigger bindings convert all values to strings, and then match the\n * previous and current values against any linked transitions.\n * Booleans can be specified as `1` or `true` and `0` or `false`.\n *\n * ### Usage Example\n *\n * The following example creates an animation trigger reference based on the provided\n * name value.\n * The provided animation value is expected to be an array consisting of state and\n * transition declarations.\n *\n * ```typescript\n * \\@Component({\n *   selector: \"my-component\",\n *   templateUrl: \"my-component-tpl.html\",\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component makes use of the defined trigger\n * by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * ### Using an inline function\n * The `transition` animation method also supports reading an inline function which can decide\n * if its associated animation should be run.\n *\n * ```typescript\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\n * string]: any}): boolean {\n *   // notice that `element` and `params` are also available here\n *   return toState == 'yes-please-animate';\n * }\n *  /\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger('myAnimationTrigger', [\n *       transition(myInlineMatcherFn, [\n *         // the animation sequence code\n *       ]),\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"yes-please-animate\";\n * }\n * ```\n *\n * ### Disabling Animations\n * When true, the special animation control binding `\\@.disabled` binding prevents\n * all animations from rendering.\n * Place the  `\\@.disabled` binding on an element to disable\n * animations on the element itself, as well as any inner animation triggers\n * within the element.\n *\n * The following example shows how to use this feature:\n *\n * ```typescript /\n *   selector: 'my-component',\n *   template: `\n *     <div [\\@.disabled]=\"isDisabled\">\n *       <div [\\@childAnimation]=\"exp\"></div>\n *     </div>\n *   `,\n *   animations: [\n *     trigger(\"childAnimation\", [\n *       // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   isDisabled = true;\n *   exp = '...';\n * }\n * ```\n *\n * When `\\@.disabled` is true, it prevents the `\\@childAnimation` trigger from animating,\n * along with any inner animations.\n *\n * ### Disable animations application-wide\n * When an area of the template is set to have animations disabled,\n * **all** inner components have their animations disabled as well.\n * This means that you can disable all animations for an app\n * by placing a host binding set on `\\@.disabled` on the topmost Angular component.\n *\n * ```typescript\n * import {Component, HostBinding} from '\\@angular/core';\n *  /\n *   selector: 'app-component',\n *   templateUrl: 'app.component.html',\n * })\n * class AppComponent {\n * \\@HostBinding('@.disabled')\n *   public animationsDisabled = true;\n * }\n * ```\n *\n * ### Overriding disablement of inner animations\n * Despite inner animations being disabled, a parent animation can `query()`\n * for inner elements located in disabled areas of the template and still animate\n * them if needed. This is also the case for when a sub animation is\n * queried by a parent and then later animated using `animateChild()`.\n *\n * ### Detecting when an animation is disabled\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\n * an instance of an `AnimationEvent`. If animations are disabled,\n * the `.disabled` flag on the event is true.\n *\n * \\@publicApi\n * @param {?} name An identifying string.\n * @param {?} definitions  An animation definition object, containing an array of `state()`\n * and `transition()` declarations.\n *\n * @return {?} An object that encapsulates the trigger data.\n *\n */\nfunction trigger(name, definitions) {\n    return { type: 7 /* Trigger */, name, definitions, options: {} };\n}\n/**\n * Defines an animation step that combines styling information with timing information.\n *\n * \\@usageNotes\n * Call within an animation `sequence()`, `{\\@link animations/group group()}`, or\n * `transition()` call to specify an animation step\n * that applies given style data to the parent animation for a given amount of time.\n *\n * ### Syntax Examples\n * **Timing examples**\n *\n * The following examples show various `timings` specifications.\n * - `animate(500)` : Duration is 500 milliseconds.\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\n * milliseconds, easing according to a bezier curve.\n *\n * **Style examples**\n *\n * The following example calls `style()` to set a single CSS style.\n * ```typescript\n * animate(500, style({ background: \"red\" }))\n * ```\n * The following example calls `keyframes()` to set a CSS style\n * to different values for successive keyframes.\n * ```typescript\n * animate(500, keyframes(\n *  [\n *   style({ background: \"blue\" })),\n *   style({ background: \"red\" }))\n *  ])\n * ```\n *\n * \\@publicApi\n * @param {?} timings Sets `AnimateTimings` for the parent animation.\n * A string in the format \"duration [delay] [easing]\".\n *  - Duration and delay are expressed as a number and optional time unit,\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n * The default unit is milliseconds.\n *  - The easing value controls how the animation accelerates and decelerates\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\n * `ease-in-out`, or a `cubic-bezier()` function call.\n * If not supplied, no easing is applied.\n *\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\n * which decelerates near the end of the duration.\n * @param {?=} styles Sets AnimationStyles for the parent animation.\n * A function call to either `style()` or `keyframes()`\n * that returns a collection of CSS style entries to be applied to the parent animation.\n * When null, uses the styles from the destination state.\n * This is useful when describing an animation step that will complete an animation;\n * see \"Animating to the final state\" in `transitions()`.\n * @return {?} An object that encapsulates the animation step.\n *\n */\nfunction animate(timings, styles = null) {\n    return { type: 4 /* Animate */, styles, timings };\n}\n/**\n * \\@description Defines a list of animation steps to be run in parallel.\n *\n * \\@usageNotes\n * Grouped animations are useful when a series of styles must be\n * animated at different starting times and closed off at different ending times.\n *\n * When called within a `sequence()` or a\n * `transition()` call, does not continue to the next\n * instruction until all of the inner animation steps have completed.\n *\n * \\@publicApi\n * @param {?} steps An array of animation step objects.\n * - When steps are defined by `style()` or `animate()`\n * function calls, each call within the group is executed instantly.\n * - To specify offset styles to be applied at a later time, define steps with\n * `keyframes()`, or use `animate()` calls with a delay value.\n * For example:\n *\n * ```typescript\n * group([\n *   animate(\"1s\", style({ background: \"black\" })),\n *   animate(\"2s\", style({ color: \"white\" }))\n * ])\n * ```\n *\n * @param {?=} options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return {?} An object that encapsulates the group data.\n *\n */\nfunction group(steps, options = null) {\n    return { type: 3 /* Group */, steps, options };\n}\n/**\n * Defines a list of animation steps to be run sequentially, one by one.\n *\n * \\@usageNotes\n * When you pass an array of steps to a\n * `transition()` call, the steps run sequentially by default.\n * Compare this to the `{\\@link animations/group group()}` call, which runs animation steps in parallel.\n *\n * When a sequence is used within a `{\\@link animations/group group()}` or a `transition()` call,\n * execution continues to the next instruction only after each of the inner animation\n * steps have completed.\n *\n * \\@publicApi\n *\n * @param {?} steps An array of animation step objects.\n * - Steps defined by `style()` calls apply the styling data immediately.\n * - Steps defined by `animate()` calls apply the styling data over time\n *   as specified by the timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 }),\n *   animate(\"1s\", style({ opacity: 1 }))\n * ])\n * ```\n *\n * @param {?=} options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return {?} An object that encapsulates the sequence data.\n *\n */\nfunction sequence(steps, options = null) {\n    return { type: 2 /* Sequence */, steps, options };\n}\n/**\n * Declares a key/value object containing CSS properties/styles that\n * can then be used for an animation `state`, within an animation `sequence`,\n * or as styling data for calls to `animate()` and `keyframes()`.\n *\n * \\@usageNotes\n * The following examples create animation styles that collect a set of\n * CSS property values:\n *\n * ```typescript\n * // string values for CSS properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical pixel values\n * style({ width: 100, height: 0 })\n * ```\n *\n * The following example uses auto-styling to allow a component to animate from\n * a height of 0 up to the height of the parent element:\n *\n * ```\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * \\@publicApi\n *\n * @param {?} tokens A set of CSS styles or HTML styles associated with an animation state.\n * The value can be any of the following:\n * - A key-value style pair associating a CSS property with a value.\n * - An array of key-value style pairs.\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\n * being animated and applied to the animation when it starts.\n *\n * Auto-styling can be used to define a state that depends on layout or other\n * environmental factors.\n *\n * @return {?} An object that encapsulates the style data.\n *\n */\nfunction style(tokens) {\n    return { type: 6 /* Style */, styles: tokens, offset: null };\n}\n/**\n * Declares an animation state within a trigger attached to an element.\n *\n * \\@usageNotes\n * Use the `trigger()` function to register states to an animation trigger.\n * Use the `transition()` function to animate between states.\n * When a state is active within a component, its associated styles persist on the element,\n * even when the animation ends.\n *\n * \\@publicApi\n *\n * @param {?} name One or more names for the defined state in a comma-separated string.\n * The following reserved state names can be supplied to define a style for specific use\n * cases:\n *\n * - `void` You can associate styles with this name to be used when\n * the element is detached from the application. For example, when an `ngIf` evaluates\n * to false, the state of the associated element is void.\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\n * to be used as the fallback when the state that is being animated is not declared\n * within the trigger.\n *\n * @param {?} styles A set of CSS styles associated with this state, created using the\n * `style()` function.\n * This set of styles persists on the element once the state has been reached.\n * @param {?=} options Parameters that can be passed to the state when it is invoked.\n * 0 or more key-value pairs.\n * @return {?} An object that encapsulates the new state data.\n *\n */\nfunction state(name, styles, options) {\n    return { type: 0 /* State */, name, styles, options };\n}\n/**\n * Defines a set of animation styles, associating each style with an optional `offset` value.\n *\n * \\@usageNotes\n * Use with the `animate()` call. Instead of applying animations\n * from the current state\n * to the destination state, keyframes describe how each style entry is applied and at what point\n * within the animation arc.\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\n *\n * ### Usage\n *\n * In the following example, the offset values describe\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\n * blue when 20% of the total time has elapsed.\n *\n * ```typescript\n * // the provided offset values\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * If there are no `offset` values specified in the style entries, the offsets\n * are calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n * ```\n * \\@publicApi\n * @param {?} steps A set of animation styles with optional offset data.\n * The optional `offset` value for a style specifies a percentage of the total animation\n * time at which that style is applied.\n * @return {?} An object that encapsulates the keyframes data.\n *\n */\nfunction keyframes(steps) {\n    return { type: 5 /* Keyframes */, steps };\n}\n/**\n * Declares an animation transition as a sequence of animation steps to run when a given\n * condition is satisfied. The condition is a Boolean expression or function that compares\n * the previous and current animation states, and returns true if this transition should occur.\n * When the state criteria of a defined transition are met, the associated animation is\n * triggered.\n *\n * \\@usageNotes\n * The template associated with a component binds an animation trigger to an element.\n *\n * ```HTML\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * All transitions are defined within an animation trigger,\n * along with named states that the transitions change to and from.\n *\n * ```typescript\n * trigger(\"myAnimationTrigger\", [\n *  // define states\n *  state(\"on\", style({ background: \"green\" })),\n *  state(\"off\", style({ background: \"grey\" })),\n *  ...]\n * ```\n *\n * Note that when you call the `sequence()` function within a `{\\@link animations/group group()}`\n * or a `transition()` call, execution does not continue to the next instruction\n * until each of the inner animation steps have completed.\n *\n * ### Syntax examples\n *\n * The following examples define transitions between the two defined states (and default states),\n * using various options:\n *\n * ```typescript\n * // Transition occurs when the state value\n * // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n * transition(\"on => off\", animate(500))\n * // Run the same animation for both directions\n * transition(\"on <=> off\", animate(500))\n * // Define multiple state-change pairs separated by commas\n * transition(\"on => off, off => void\", animate(500))\n * ```\n *\n * ### Special values for state-change expressions\n *\n * - Catch-all state change for when an element is inserted into the page and the\n * destination state is unknown:\n *\n * ```typescript\n * transition(\"void => *\", [\n *  style({ opacity: 0 }),\n *  animate(500)\n *  ])\n * ```\n *\n * - Capture a state change between any states:\n *\n *  `transition(\"* => *\", animate(\"1s 0s\"))`\n *\n * - Entry and exit transitions:\n *\n * ```typescript\n * transition(\":enter\", [\n *   style({ opacity: 0 }),\n *   animate(500, style({ opacity: 1 }))\n *   ]),\n * transition(\":leave\", [\n *   animate(500, style({ opacity: 0 }))\n *   ])\n * ```\n *\n * - Use `:increment` and `:decrement` to initiate transitions:\n *\n * ```typescript\n * transition(\":increment\", group([\n *  query(':enter', [\n *     style({ left: '100%' }),\n *     animate('0.5s ease-out', style('*'))\n *   ]),\n *  query(':leave', [\n *     animate('0.5s ease-out', style({ left: '-100%' }))\n *  ])\n * ]))\n *\n * transition(\":decrement\", group([\n *  query(':enter', [\n *     style({ left: '100%' }),\n *     animate('0.5s ease-out', style('*'))\n *   ]),\n *  query(':leave', [\n *     animate('0.5s ease-out', style({ left: '-100%' }))\n *  ])\n * ]))\n * ```\n *\n * ### State-change functions\n *\n * Here is an example of a `fromState` specified as a state-change function that invokes an\n * animation when true:\n *\n * ```typescript\n * transition((fromState, toState) =>\n *  {\n *   return fromState == \"off\" && toState == \"on\";\n *  },\n *  animate(\"1s 0s\"))\n * ```\n *\n * ### Animating to the final state\n *\n * If the final step in a transition is a call to `animate()` that uses a timing value\n * with no style data, that step is automatically considered the final animation arc,\n * for the element to reach the final state. Angular automatically adds or removes\n * CSS styles to ensure that the element is in the correct final state.\n *\n * The following example defines a transition that starts by hiding the element,\n * then makes sure that it animates properly to whatever state is currently active for trigger:\n *\n * ```typescript\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n *  ])\n * ```\n * ### Boolean value matching\n * If a trigger binding value is a Boolean, it can be matched using a transition expression\n * that compares true and false or 1 and 0. For example:\n *\n * ```\n * // in the template\n * <div [\\@openClose]=\"open ? true : false\">...</div>\n * // in the component metadata\n * trigger('openClose', [\n *   state('true', style({ height: '*' })),\n *   state('false', style({ height: '0px' })),\n *   transition('false <=> true', animate(500))\n * ])\n * ```\n *\n * \\@publicApi\n *\n * @param {?} stateChangeExpr A Boolean expression or function that compares the previous and current\n * animation states, and returns true if this transition should occur. Note that  \"true\" and \"false\"\n * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the\n * animation trigger element.\n * The animation steps run when the expression evaluates to true.\n *\n * - A state-change string takes the form \"state1 => state2\", where each side is a defined animation\n * state, or an asterix (*) to refer to a dynamic start or end state.\n *   - The expression string can contain multiple comma-separated statements;\n * for example \"state1 => state2, state3 => state4\".\n *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,\n * equivalent to  \"void => *\"  and \"* => void\".\n *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has\n * increased or decreased in value.\n * - A function is executed each time a state change occurs in the animation trigger element.\n * The animation steps run when the function returns true.\n *\n * @param {?} steps One or more animation objects, as returned by the `animate()` or\n * `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param {?=} options An options object that can contain a delay value for the start of the animation,\n * and additional developer-defined parameters. Provided values for additional parameters are used\n * as defaults, and override values can be passed to the caller on invocation.\n * @return {?} An object that encapsulates the transition data.\n *\n */\nfunction transition(stateChangeExpr, steps, options = null) {\n    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options };\n}\n/**\n * Produces a reusable animation that can be invoked in another animation or sequence,\n * by calling the `useAnimation()` function.\n *\n * \\@usageNotes\n * The following example defines a reusable animation, providing some default parameter\n * values.\n *\n * ```typescript\n * var fadeAnimation = animation([\n *   style({ opacity: '{{ start }}' }),\n *   animate('{{ time }}',\n *   style({ opacity: '{{ end }}'}))\n *   ],\n *   { params: { time: '1000ms', start: 0, end: 1 }});\n * ```\n *\n * The following invokes the defined animation with a call to `useAnimation()`,\n * passing in override parameter values.\n *\n * ```js\n * useAnimation(fadeAnimation, {\n *   params: {\n *     time: '2s',\n *     start: 1,\n *     end: 0\n *   }\n * })\n * ```\n *\n * If any of the passed-in parameter values are missing from this call,\n * the default values are used. If one or more parameter values are missing before a step is\n * animated, `useAnimation()` throws an error.\n *\n * \\@publicApi\n * @param {?} steps One or more animation objects, as returned by the `animate()`\n * or `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param {?=} options An options object that can contain a delay value for the start of the\n * animation, and additional developer-defined parameters.\n * Provided values for additional parameters are used as defaults,\n * and override values can be passed to the caller on invocation.\n * @return {?} An object that encapsulates the animation data.\n *\n */\nfunction animation(steps, options = null) {\n    return { type: 8 /* Reference */, animation: steps, options };\n}\n/**\n * Executes a queried inner animation element within an animation sequence.\n *\n * \\@usageNotes\n * Each time an animation is triggered in Angular, the parent animation\n * has priority and any child animations are blocked. In order\n * for a child animation to run, the parent animation must query each of the elements\n * containing child animations, and run them using this function.\n *\n * Note that this feature is designed to be used with `query()` and it will only work\n * with animations that are assigned using the Angular animation library. CSS keyframes\n * and transitions are not handled by this API.\n *\n * \\@publicApi\n * @param {?=} options An options object that can contain a delay value for the start of the\n * animation, and additional override values for developer-defined parameters.\n * @return {?} An object that encapsulates the child animation data.\n *\n */\nfunction animateChild(options = null) {\n    return { type: 9 /* AnimateChild */, options };\n}\n/**\n * Starts a reusable animation that is created using the `animation()` function.\n *\n * \\@publicApi\n * @param {?} animation The reusable animation to start.\n * @param {?=} options An options object that can contain a delay value for the start of\n * the animation, and additional override values for developer-defined parameters.\n * @return {?} An object that contains the animation parameters.\n *\n */\nfunction useAnimation(animation, options = null) {\n    return { type: 10 /* AnimateRef */, animation, options };\n}\n/**\n * Finds one or more inner elements within the current element that is\n * being animated within a sequence. Use with `animate()`.\n *\n * \\@usageNotes\n * Tokens can be merged into a combined query selector string. For example:\n *\n * ```typescript\n *  query(':self, .record:enter, .record:leave, \\@subTrigger', [...])\n * ```\n *\n * The `query()` function collects multiple elements and works internally by using\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\n * the total number of items to be collected. For example:\n *\n * ```js\n * query('div', [\n *   animate(...),\n *   animate(...)\n * ], { limit: 1 })\n * ```\n *\n * By default, throws an error when zero items are found. Set the\n * `optional` flag to ignore this error. For example:\n *\n * ```js\n * query('.some-element-that-may-not-be-there', [\n *   animate(...),\n *   animate(...)\n * ], { optional: true })\n * ```\n *\n * ### Usage Example\n *\n * The following example queries for inner elements and animates them\n * individually using `animate()`.\n *\n * ```typescript\n * \\@Component({\n *   selector: 'inner',\n *   template: `\n *     <div [\\@queryAnimation]=\"exp\">\n *       <h1>Title</h1>\n *       <div class=\"content\">\n *         Blah blah blah\n *       </div>\n *     </div>\n *   `,\n *   animations: [\n *    trigger('queryAnimation', [\n *      transition('* => goAnimate', [\n *        // hide the inner elements\n *        query('h1', style({ opacity: 0 })),\n *        query('.content', style({ opacity: 0 })),\n *\n *        // animate the inner elements in, one by one\n *        query('h1', animate(1000, style({ opacity: 1 }))),\n *        query('.content', animate(1000, style({ opacity: 1 }))),\n *      ])\n *    ])\n *  ]\n * })\n * class Cmp {\n *   exp = '';\n *\n *   goAnimate() {\n *     this.exp = 'goAnimate';\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @param {?} selector The element to query, or a set of elements that contain Angular-specific\n * characteristics, specified with one or more of the following tokens.\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements.\n *  - `query(\":animating\")` : Query all currently animating elements.\n *  - `query(\"\\@triggerName\")` : Query elements that contain an animation trigger.\n *  - `query(\"\\@*\")` : Query all elements that contain an animation triggers.\n *  - `query(\":self\")` : Include the current element into the animation sequence.\n *\n * @param {?} animation One or more animation steps to apply to the queried element or elements.\n * An array is treated as an animation sequence.\n * @param {?=} options An options object. Use the 'limit' field to limit the total number of\n * items to collect.\n * @return {?} An object that encapsulates the query data.\n *\n */\nfunction query(selector, animation, options = null) {\n    return { type: 11 /* Query */, selector, animation, options };\n}\n/**\n * Use within an animation `query()` call to issue a timing gap after\n * each queried item is animated.\n *\n * \\@usageNotes\n * In the following example, a container element wraps a list of items stamped out\n * by an `ngFor`. The container element contains an animation trigger that will later be set\n * to query for each of the inner items.\n *\n * Each time items are added, the opacity fade-in animation runs,\n * and each removed item is faded out.\n * When either of these animations occur, the stagger effect is\n * applied after each item's animation is started.\n *\n * ```html\n * <!-- list.component.html -->\n * <button (click)=\"toggle()\">Show / Hide Items</button>\n * <hr />\n * <div [\\@listAnimation]=\"items.length\">\n *   <div *ngFor=\"let item of items\">\n *     {{ item }}\n *   </div>\n * </div>\n * ```\n *\n * Here is the component code:\n *\n * ```typescript\n * import {trigger, transition, style, animate, query, stagger} from '\\@angular/animations';\n * \\@Component({\n *   templateUrl: 'list.component.html',\n *   animations: [\n *     trigger('listAnimation', [\n *     ...\n *     ])\n *   ]\n * })\n * class ListComponent {\n *   items = [];\n *\n *   showItems() {\n *     this.items = [0,1,2,3,4];\n *   }\n *\n *   hideItems() {\n *     this.items = [];\n *   }\n *\n *   toggle() {\n *     this.items.length ? this.hideItems() : this.showItems();\n *    }\n *  }\n * ```\n *\n * Here is the animation trigger code:\n *\n * ```typescript\n * trigger('listAnimation', [\n *   transition('* => *', [ // each time the binding value changes\n *     query(':leave', [\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 0 }))\n *       ])\n *     ]),\n *     query(':enter', [\n *       style({ opacity: 0 }),\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 1 }))\n *       ])\n *     ])\n *   ])\n * ])\n * ```\n *\n * \\@publicApi\n * @param {?} timings A delay value.\n * @param {?} animation One ore more animation steps.\n * @return {?} An object that encapsulates the stagger data.\n *\n */\nfunction stagger(timings, animation) {\n    return { type: 12 /* Stagger */, timings, animation };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?} cb\n * @return {?}\n */\nfunction scheduleMicroTask(cb) {\n    Promise.resolve(null).then(cb);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides programmatic control of a reusable animation sequence,\n * built using the `build()` method of `AnimationBuilder`. The `build()` method\n * returns a factory, whose `create()` method instantiates and initializes this interface.\n *\n * @see `AnimationBuilder`\n * @see `AnimationFactory`\n * @see `animate()`\n *\n * \\@publicApi\n * @record\n */\nfunction AnimationPlayer() { }\nif (false) {\n    /**\n     * The parent of this player, if any.\n     * @type {?}\n     */\n    AnimationPlayer.prototype.parentPlayer;\n    /**\n     * The total run time of the animation, in milliseconds.\n     * @type {?}\n     */\n    AnimationPlayer.prototype.totalTime;\n    /**\n     * Provides a callback to invoke before the animation is destroyed.\n     * @type {?|undefined}\n     */\n    AnimationPlayer.prototype.beforeDestroy;\n    /**\n     * \\@internal\n     * Internal\n     * @type {?|undefined}\n     */\n    AnimationPlayer.prototype.triggerCallback;\n    /**\n     * \\@internal\n     * Internal\n     * @type {?|undefined}\n     */\n    AnimationPlayer.prototype.disabled;\n    /**\n     * Provides a callback to invoke when the animation finishes.\n     * @see `finish()`\n     * @param {?} fn The callback function.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.onDone = function (fn) { };\n    /**\n     * Provides a callback to invoke when the animation starts.\n     * @see `run()`\n     * @param {?} fn The callback function.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.onStart = function (fn) { };\n    /**\n     * Provides a callback to invoke after the animation is destroyed.\n     * @see `destroy()` / `beforeDestroy()`\n     * @param {?} fn The callback function.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.onDestroy = function (fn) { };\n    /**\n     * Initializes the animation.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.init = function () { };\n    /**\n     * Reports whether the animation has started.\n     * @return {?} True if the animation has started, false otherwise.\n     */\n    AnimationPlayer.prototype.hasStarted = function () { };\n    /**\n     * Runs the animation, invoking the `onStart()` callback.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.play = function () { };\n    /**\n     * Pauses the animation.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.pause = function () { };\n    /**\n     * Restarts the paused animation.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.restart = function () { };\n    /**\n     * Ends the animation, invoking the `onDone()` callback.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.finish = function () { };\n    /**\n     * Destroys the animation, after invoking the `beforeDestroy()` callback.\n     * Calls the `onDestroy()` callback when destruction is completed.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.destroy = function () { };\n    /**\n     * Resets the animation to its initial state.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.reset = function () { };\n    /**\n     * Sets the position of the animation.\n     * @param {?} position A 0-based offset into the duration, in milliseconds.\n     * @return {?}\n     */\n    AnimationPlayer.prototype.setPosition = function (position) { };\n    /**\n     * Reports the current position of the animation.\n     * @return {?} A 0-based offset into the duration, in milliseconds.\n     */\n    AnimationPlayer.prototype.getPosition = function () { };\n}\n/**\n * An empty programmatic controller for reusable animations.\n * Used internally when animations are disabled, to avoid\n * checking for the null case when an animation player is expected.\n *\n * @see `animate()`\n * @see `AnimationPlayer`\n * @see `GroupPlayer`\n *\n * \\@publicApi\n */\nclass NoopAnimationPlayer {\n    /**\n     * @param {?=} duration\n     * @param {?=} delay\n     */\n    constructor(duration = 0, delay = 0) {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._started = false;\n        this._destroyed = false;\n        this._finished = false;\n        this.parentPlayer = null;\n        this.totalTime = duration + delay;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            fn => fn()));\n            this._onDoneFns = [];\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._onStartFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._onDoneFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._onDestroyFns.push(fn); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._started; }\n    /**\n     * @return {?}\n     */\n    init() { }\n    /**\n     * @return {?}\n     */\n    play() {\n        if (!this.hasStarted()) {\n            this._onStart();\n            this.triggerMicrotask();\n        }\n        this._started = true;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    triggerMicrotask() { scheduleMicroTask((/**\n     * @return {?}\n     */\n    () => this._onFinish())); }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onStart() {\n        this._onStartFns.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        this._onStartFns = [];\n    }\n    /**\n     * @return {?}\n     */\n    pause() { }\n    /**\n     * @return {?}\n     */\n    restart() { }\n    /**\n     * @return {?}\n     */\n    finish() { this._onFinish(); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            if (!this.hasStarted()) {\n                this._onStart();\n            }\n            this.finish();\n            this._onDestroyFns.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            fn => fn()));\n            this._onDestroyFns = [];\n        }\n    }\n    /**\n     * @return {?}\n     */\n    reset() { }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    setPosition(position) { }\n    /**\n     * @return {?}\n     */\n    getPosition() { return 0; }\n    /**\n     * \\@internal\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        /** @type {?} */\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        methods.length = 0;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NoopAnimationPlayer.prototype._onDoneFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    NoopAnimationPlayer.prototype._onStartFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    NoopAnimationPlayer.prototype._onDestroyFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    NoopAnimationPlayer.prototype._started;\n    /**\n     * @type {?}\n     * @private\n     */\n    NoopAnimationPlayer.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    NoopAnimationPlayer.prototype._finished;\n    /** @type {?} */\n    NoopAnimationPlayer.prototype.parentPlayer;\n    /** @type {?} */\n    NoopAnimationPlayer.prototype.totalTime;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A programmatic controller for a group of reusable animations.\n * Used internally to control animations.\n *\n * @see `AnimationPlayer`\n * @see `{\\@link animations/group group()}`\n *\n */\nclass AnimationGroupPlayer {\n    /**\n     * @param {?} _players\n     */\n    constructor(_players) {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this._onDestroyFns = [];\n        this.parentPlayer = null;\n        this.totalTime = 0;\n        this.players = _players;\n        /** @type {?} */\n        let doneCount = 0;\n        /** @type {?} */\n        let destroyCount = 0;\n        /** @type {?} */\n        let startCount = 0;\n        /** @type {?} */\n        const total = this.players.length;\n        if (total == 0) {\n            scheduleMicroTask((/**\n             * @return {?}\n             */\n            () => this._onFinish()));\n        }\n        else {\n            this.players.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => {\n                player.onDone((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (++doneCount == total) {\n                        this._onFinish();\n                    }\n                }));\n                player.onDestroy((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (++destroyCount == total) {\n                        this._onDestroy();\n                    }\n                }));\n                player.onStart((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (++startCount == total) {\n                        this._onStart();\n                    }\n                }));\n            }));\n        }\n        this.totalTime = this.players.reduce((/**\n         * @param {?} time\n         * @param {?} player\n         * @return {?}\n         */\n        (time, player) => Math.max(time, player.totalTime)), 0);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            fn => fn()));\n            this._onDoneFns = [];\n        }\n    }\n    /**\n     * @return {?}\n     */\n    init() { this.players.forEach((/**\n     * @param {?} player\n     * @return {?}\n     */\n    player => player.init())); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._onStartFns.push(fn); }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onStart() {\n        if (!this.hasStarted()) {\n            this._started = true;\n            this._onStartFns.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            fn => fn()));\n            this._onStartFns = [];\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._onDoneFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._onDestroyFns.push(fn); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._started; }\n    /**\n     * @return {?}\n     */\n    play() {\n        if (!this.parentPlayer) {\n            this.init();\n        }\n        this._onStart();\n        this.players.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => player.play()));\n    }\n    /**\n     * @return {?}\n     */\n    pause() { this.players.forEach((/**\n     * @param {?} player\n     * @return {?}\n     */\n    player => player.pause())); }\n    /**\n     * @return {?}\n     */\n    restart() { this.players.forEach((/**\n     * @param {?} player\n     * @return {?}\n     */\n    player => player.restart())); }\n    /**\n     * @return {?}\n     */\n    finish() {\n        this._onFinish();\n        this.players.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => player.finish()));\n    }\n    /**\n     * @return {?}\n     */\n    destroy() { this._onDestroy(); }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onDestroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._onFinish();\n            this.players.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => player.destroy()));\n            this._onDestroyFns.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            fn => fn()));\n            this._onDestroyFns = [];\n        }\n    }\n    /**\n     * @return {?}\n     */\n    reset() {\n        this.players.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => player.reset()));\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    }\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    setPosition(p) {\n        /** @type {?} */\n        const timeAtPosition = p * this.totalTime;\n        this.players.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            /** @type {?} */\n            const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n            player.setPosition(position);\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    getPosition() {\n        /** @type {?} */\n        let min = 0;\n        this.players.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            /** @type {?} */\n            const p = player.getPosition();\n            min = Math.min(p, min);\n        }));\n        return min;\n    }\n    /**\n     * @return {?}\n     */\n    beforeDestroy() {\n        this.players.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            if (player.beforeDestroy) {\n                player.beforeDestroy();\n            }\n        }));\n    }\n    /**\n     * \\@internal\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        /** @type {?} */\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        methods.length = 0;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationGroupPlayer.prototype._onDoneFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationGroupPlayer.prototype._onStartFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationGroupPlayer.prototype._finished;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationGroupPlayer.prototype._started;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationGroupPlayer.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationGroupPlayer.prototype._onDestroyFns;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype.parentPlayer;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype.totalTime;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype.players;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ÉµPRE_STYLE = '!';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationBuilder, AnimationFactory, AUTO_STYLE, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, NoopAnimationPlayer, AnimationGroupPlayer as ÉµAnimationGroupPlayer, ÉµPRE_STYLE };\n//# sourceMappingURL=animations.js.map\n","import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n    constructor(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const { operator } = this;\n        const sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            sink.add(operator.call(sink, this.source));\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let subscription;\n            subscription = this.subscribe((value) => {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        return source && source.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        const { closed, destination, isStopped } = observer;\n        if (closed || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map","export const isArrayLike = ((x) => x && typeof x.length === 'number' && typeof x !== 'function');\n//# sourceMappingURL=isArrayLike.js.map","import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n    return (source) => {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nclass TakeOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    }\n}\nclass TakeSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(value) {\n        const total = this.total;\n        const count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=take.js.map","import { fromArray } from '../observable/fromArray';\nimport { scalar } from '../observable/scalar';\nimport { empty } from '../observable/empty';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nexport function startWith(...array) {\n    return (source) => {\n        let scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        const len = array.length;\n        if (len === 1 && !scheduler) {\n            return concatStatic(scalar(array[0]), source);\n        }\n        else if (len > 0) {\n            return concatStatic(fromArray(array, scheduler), source);\n        }\n        else {\n            return concatStatic(empty(scheduler), source);\n        }\n    };\n}\n//# sourceMappingURL=startWith.js.map","import { of } from './of';\nimport { concatAll } from '../operators/concatAll';\nexport function concat(...observables) {\n    return concatAll()(of(...observables));\n}\n//# sourceMappingURL=concat.js.map","export function noop() { }\n//# sourceMappingURL=noop.js.map","import { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nexport function of(...args) {\n    let scheduler = args[args.length - 1];\n    if (isScheduler(scheduler)) {\n        args.pop();\n    }\n    else {\n        scheduler = undefined;\n    }\n    switch (args.length) {\n        case 0:\n            return empty(scheduler);\n        case 1:\n            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);\n        default:\n            return fromArray(args, scheduler);\n    }\n}\n//# sourceMappingURL=of.js.map","export function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport const iterator = getSymbolIterator();\nexport const $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map","export function hostReportError(err) {\n    setTimeout(() => { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map","/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken, EventEmitter, Injectable, Optional, Inject, ÉµfindLocaleData, ÉµLocaleDataIndex, ÉµgetLocalePluralCase, LOCALE_ID, ÉµLOCALE_DATA, ÉµisListLikeIterable, Éµstringify, IterableDiffers, KeyValueDiffers, ElementRef, Renderer2, ÉµÉµallocHostVars, ÉµÉµstyling, ÉµÉµclassMap, ÉµÉµstylingApply, ÉµÉµdefineDirective, Directive, Input, NgModuleRef, ComponentFactoryResolver, ViewContainerRef, isDevMode, TemplateRef, Host, Attribute, ÉµÉµstyleMap, Pipe, ÉµlooseIdentical, WrappedValue, ÉµisPromise, ÉµisObservable, ChangeDetectorRef, NgModule, Version, ÉµÉµdefineInjectable, ÉµÉµinject, ErrorHandler } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `\\@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `\\@angular/platform-webworker` provides\n * one suitable for use with web workers.\n *\n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n *\n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\n * by the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\n * Router} /\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n *\n * \\@publicApi\n * @abstract\n */\nclass PlatformLocation {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.getBaseHrefFromDOM = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.getState = function () { };\n    /**\n     * @abstract\n     * @param {?} fn\n     * @return {?}\n     */\n    PlatformLocation.prototype.onPopState = function (fn) { };\n    /**\n     * @abstract\n     * @param {?} fn\n     * @return {?}\n     */\n    PlatformLocation.prototype.onHashChange = function (fn) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.href = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.protocol = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.hostname = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.port = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.pathname = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.search = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.hash = function () { };\n    /**\n     * @abstract\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @return {?}\n     */\n    PlatformLocation.prototype.replaceState = function (state, title, url) { };\n    /**\n     * @abstract\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @return {?}\n     */\n    PlatformLocation.prototype.pushState = function (state, title, url) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.forward = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    PlatformLocation.prototype.back = function () { };\n}\n/**\n * \\@description\n * Indicates when a location is initialized.\n *\n * \\@publicApi\n * @type {?}\n */\nconst LOCATION_INITIALIZED = new InjectionToken('Location Initialized');\n/**\n * \\@description\n * A serializable version of the event from `onPopState` or `onHashChange`\n *\n * \\@publicApi\n * @record\n */\nfunction LocationChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    LocationChangeEvent.prototype.type;\n    /** @type {?} */\n    LocationChangeEvent.prototype.state;\n}\n/**\n * \\@publicApi\n * @record\n */\nfunction LocationChangeListener() { }\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Enables the `Location` service to read route state from the browser's URL.\n * Angular provides two strategies:\n * `HashLocationStrategy` and `PathLocationStrategy`.\n *\n * Applications should use the `Router` or `Location` services to\n * interact with application route state.\n *\n * For instance, `HashLocationStrategy` produces URLs like\n * <code class=\"no-auto-link\">http://example.com#/foo</code>,\n * and `PathLocationStrategy` produces\n * <code class=\"no-auto-link\">http://example.com/foo</code> as an equivalent URL.\n *\n * See these two classes for more.\n *\n * \\@publicApi\n * @abstract\n */\nclass LocationStrategy {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?=} includeHash\n     * @return {?}\n     */\n    LocationStrategy.prototype.path = function (includeHash) { };\n    /**\n     * @abstract\n     * @param {?} internal\n     * @return {?}\n     */\n    LocationStrategy.prototype.prepareExternalUrl = function (internal) { };\n    /**\n     * @abstract\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @param {?} queryParams\n     * @return {?}\n     */\n    LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { };\n    /**\n     * @abstract\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @param {?} queryParams\n     * @return {?}\n     */\n    LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    LocationStrategy.prototype.forward = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    LocationStrategy.prototype.back = function () { };\n    /**\n     * @abstract\n     * @param {?} fn\n     * @return {?}\n     */\n    LocationStrategy.prototype.onPopState = function (fn) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    LocationStrategy.prototype.getBaseHref = function () { };\n}\n/**\n * A predefined [DI token](guide/glossary#di-token) for the base href\n * to be used with the `PathLocationStrategy`.\n * The base href is the URL prefix that should be preserved when generating\n * and recognizing URLs.\n *\n * \\@usageNotes\n *\n * The following example shows how to use this token to configure the root app injector\n * with a base href value, so that the DI framework can supply the dependency anywhere in the app.\n *\n * ```typescript\n * import {Component, NgModule} from '\\@angular/core';\n * import {APP_BASE_HREF} from '\\@angular/common';\n *\n * \\@NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_BASE_HREF = new InjectionToken('appBaseHref');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @record\n */\nfunction PopStateEvent() { }\nif (false) {\n    /** @type {?|undefined} */\n    PopStateEvent.prototype.pop;\n    /** @type {?|undefined} */\n    PopStateEvent.prototype.state;\n    /** @type {?|undefined} */\n    PopStateEvent.prototype.type;\n    /** @type {?|undefined} */\n    PopStateEvent.prototype.url;\n}\n/**\n * \\@description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on the `LocationStrategy` used, `Location` persists\n * to the URL's path or the URL's hash segment.\n *\n * \\@usageNotes\n *\n * It's better to use the `Router#navigate` service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * <code-example path='common/location/ts/path_location_component.ts'\n * region='LocationComponent'></code-example>\n *\n * \\@publicApi\n */\nclass Location {\n    /**\n     * @param {?} platformStrategy\n     * @param {?} platformLocation\n     */\n    constructor(platformStrategy, platformLocation) {\n        /**\n         * \\@internal\n         */\n        this._subject = new EventEmitter();\n        /**\n         * \\@internal\n         */\n        this._urlChangeListeners = [];\n        this._platformStrategy = platformStrategy;\n        /** @type {?} */\n        const browserBaseHref = this._platformStrategy.getBaseHref();\n        this._platformLocation = platformLocation;\n        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n        this._platformStrategy.onPopState((/**\n         * @param {?} ev\n         * @return {?}\n         */\n        (ev) => {\n            this._subject.emit({\n                'url': this.path(true),\n                'pop': true,\n                'state': ev.state,\n                'type': ev.type,\n            });\n        }));\n    }\n    /**\n     * Normalizes the URL path for this location.\n     *\n     * @param {?=} includeHash True to include an anchor fragment in the path.\n     *\n     * @return {?} The normalized URL path.\n     */\n    // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n    // removed.\n    path(includeHash = false) {\n        return this.normalize(this._platformStrategy.path(includeHash));\n    }\n    /**\n     * Reports the current state of the location history.\n     * @return {?} The current value of the `history.state` object.\n     */\n    getState() { return this._platformLocation.getState(); }\n    /**\n     * Normalizes the given path and compares to the current normalized path.\n     *\n     * @param {?} path The given URL path.\n     * @param {?=} query Query parameters.\n     *\n     * @return {?} True if the given URL path is equal to the current normalized path, false\n     * otherwise.\n     */\n    isCurrentPathEqualTo(path, query = '') {\n        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n    }\n    /**\n     * Normalizes a URL path by stripping any trailing slashes.\n     *\n     * @param {?} url String representing a URL.\n     *\n     * @return {?} The normalized URL string.\n     */\n    normalize(url) {\n        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n    }\n    /**\n     * Normalizes an external URL path.\n     * If the given URL doesn't begin with a leading slash (`'/'`), adds one\n     * before normalizing. Adds a hash if `HashLocationStrategy` is\n     * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n     *\n     * @param {?} url String representing a URL.\n     *\n     * @return {?} A normalized platform-specific URL.\n     */\n    prepareExternalUrl(url) {\n        if (url && url[0] !== '/') {\n            url = '/' + url;\n        }\n        return this._platformStrategy.prepareExternalUrl(url);\n    }\n    // TODO: rename this method to pushState\n    /**\n     * Changes the browser's URL to a normalized version of a given URL, and pushes a\n     * new item onto the platform's history.\n     *\n     * @param {?} path  URL path to normalize.\n     * @param {?=} query Query parameters.\n     * @param {?=} state Location history state.\n     *\n     * @return {?}\n     */\n    go(path, query = '', state = null) {\n        this._platformStrategy.pushState(state, '', path, query);\n        this._notifyUrlChangeListeners(this.prepareExternalUrl(path + Location.normalizeQueryParams(query)), state);\n    }\n    /**\n     * Changes the browser's URL to a normalized version of the given URL, and replaces\n     * the top item on the platform's history stack.\n     *\n     * @param {?} path  URL path to normalize.\n     * @param {?=} query Query parameters.\n     * @param {?=} state Location history state.\n     * @return {?}\n     */\n    replaceState(path, query = '', state = null) {\n        this._platformStrategy.replaceState(state, '', path, query);\n        this._notifyUrlChangeListeners(this.prepareExternalUrl(path + Location.normalizeQueryParams(query)), state);\n    }\n    /**\n     * Navigates forward in the platform's history.\n     * @return {?}\n     */\n    forward() { this._platformStrategy.forward(); }\n    /**\n     * Navigates back in the platform's history.\n     * @return {?}\n     */\n    back() { this._platformStrategy.back(); }\n    /**\n     * Registers a URL change listener. Use to catch updates performed by the Angular\n     * framework that are not detectible through \"popstate\" or \"hashchange\" events.\n     *\n     * @param {?} fn The change handler function, which take a URL and a location history state.\n     * @return {?}\n     */\n    onUrlChange(fn) {\n        this._urlChangeListeners.push(fn);\n        this.subscribe((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => { this._notifyUrlChangeListeners(v.url, v.state); }));\n    }\n    /**\n     * \\@internal\n     * @param {?=} url\n     * @param {?=} state\n     * @return {?}\n     */\n    _notifyUrlChangeListeners(url = '', state) {\n        this._urlChangeListeners.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn(url, state)));\n    }\n    /**\n     * Subscribes to the platform's `popState` events.\n     *\n     * @param {?} onNext\n     * @param {?=} onThrow\n     * @param {?=} onReturn\n     * @return {?} Subscribed events.\n     */\n    subscribe(onNext, onThrow, onReturn) {\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n    }\n    /**\n     * Normalizes URL parameters by prepending with `?` if needed.\n     *\n     * @param {?} params String of URL parameters.\n     *\n     * @return {?} The normalized URL parameters string.\n     */\n    static normalizeQueryParams(params) {\n        return params && params[0] !== '?' ? '?' + params : params;\n    }\n    /**\n     * Joins two parts of a URL with a slash if needed.\n     *\n     * @param {?} start  URL string\n     * @param {?} end    URL string\n     *\n     *\n     * @return {?} The joined URL string.\n     */\n    static joinWithSlash(start, end) {\n        if (start.length == 0) {\n            return end;\n        }\n        if (end.length == 0) {\n            return start;\n        }\n        /** @type {?} */\n        let slashes = 0;\n        if (start.endsWith('/')) {\n            slashes++;\n        }\n        if (end.startsWith('/')) {\n            slashes++;\n        }\n        if (slashes == 2) {\n            return start + end.substring(1);\n        }\n        if (slashes == 1) {\n            return start + end;\n        }\n        return start + '/' + end;\n    }\n    /**\n     * Removes a trailing slash from a URL string if needed.\n     * Looks for the first occurrence of either `#`, `?`, or the end of the\n     * line as `/` characters and removes the trailing slash if one exists.\n     *\n     * @param {?} url URL string.\n     *\n     * @return {?} The URL string, modified if needed.\n     */\n    static stripTrailingSlash(url) {\n        /** @type {?} */\n        const match = url.match(/#|\\?|$/);\n        /** @type {?} */\n        const pathEndIdx = match && match.index || url.length;\n        /** @type {?} */\n        const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n        return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n    }\n}\nLocation.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nLocation.ctorParameters = () => [\n    { type: LocationStrategy },\n    { type: PlatformLocation }\n];\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Location.prototype._subject;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Location.prototype._baseHref;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Location.prototype._platformStrategy;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Location.prototype._platformLocation;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Location.prototype._urlChangeListeners;\n}\n/**\n * @param {?} baseHref\n * @param {?} url\n * @return {?}\n */\nfunction _stripBaseHref(baseHref, url) {\n    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _stripIndexHtml(url) {\n    return url.replace(/\\/index.html$/, '');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A {\\@link LocationStrategy} used to configure the {\\@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n * \\@publicApi\n */\nclass HashLocationStrategy extends LocationStrategy {\n    /**\n     * @param {?} _platformLocation\n     * @param {?=} _baseHref\n     */\n    constructor(_platformLocation, _baseHref) {\n        super();\n        this._platformLocation = _platformLocation;\n        this._baseHref = '';\n        if (_baseHref != null) {\n            this._baseHref = _baseHref;\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) {\n        this._platformLocation.onPopState(fn);\n        this._platformLocation.onHashChange(fn);\n    }\n    /**\n     * @return {?}\n     */\n    getBaseHref() { return this._baseHref; }\n    /**\n     * @param {?=} includeHash\n     * @return {?}\n     */\n    path(includeHash = false) {\n        // the hash value is always prefixed with a `#`\n        // and if it is empty then it will stay empty\n        /** @type {?} */\n        let path = this._platformLocation.hash;\n        if (path == null)\n            path = '#';\n        return path.length > 0 ? path.substring(1) : path;\n    }\n    /**\n     * @param {?} internal\n     * @return {?}\n     */\n    prepareExternalUrl(internal) {\n        /** @type {?} */\n        const url = Location.joinWithSlash(this._baseHref, internal);\n        return url.length > 0 ? ('#' + url) : url;\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} path\n     * @param {?} queryParams\n     * @return {?}\n     */\n    pushState(state, title, path, queryParams) {\n        /** @type {?} */\n        let url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n        if (url.length == 0) {\n            url = this._platformLocation.pathname;\n        }\n        this._platformLocation.pushState(state, title, url);\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} path\n     * @param {?} queryParams\n     * @return {?}\n     */\n    replaceState(state, title, path, queryParams) {\n        /** @type {?} */\n        let url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n        if (url.length == 0) {\n            url = this._platformLocation.pathname;\n        }\n        this._platformLocation.replaceState(state, title, url);\n    }\n    /**\n     * @return {?}\n     */\n    forward() { this._platformLocation.forward(); }\n    /**\n     * @return {?}\n     */\n    back() { this._platformLocation.back(); }\n}\nHashLocationStrategy.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHashLocationStrategy.ctorParameters = () => [\n    { type: PlatformLocation },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HashLocationStrategy.prototype._baseHref;\n    /**\n     * @type {?}\n     * @private\n     */\n    HashLocationStrategy.prototype._platformLocation;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A {\\@link LocationStrategy} used to configure the {\\@link Location} service to\n * represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n *\n * If you're using `PathLocationStrategy`, you must provide a {\\@link APP_BASE_HREF}\n * or add a base element to the document. This URL prefix that will be preserved\n * when generating and recognizing URLs.\n *\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * Similarly, if you add `<base href='/my/app'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * \\@publicApi\n */\nclass PathLocationStrategy extends LocationStrategy {\n    /**\n     * @param {?} _platformLocation\n     * @param {?=} href\n     */\n    constructor(_platformLocation, href) {\n        super();\n        this._platformLocation = _platformLocation;\n        if (href == null) {\n            href = this._platformLocation.getBaseHrefFromDOM();\n        }\n        if (href == null) {\n            throw new Error(`No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\n        }\n        this._baseHref = href;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) {\n        this._platformLocation.onPopState(fn);\n        this._platformLocation.onHashChange(fn);\n    }\n    /**\n     * @return {?}\n     */\n    getBaseHref() { return this._baseHref; }\n    /**\n     * @param {?} internal\n     * @return {?}\n     */\n    prepareExternalUrl(internal) {\n        return Location.joinWithSlash(this._baseHref, internal);\n    }\n    /**\n     * @param {?=} includeHash\n     * @return {?}\n     */\n    path(includeHash = false) {\n        /** @type {?} */\n        const pathname = this._platformLocation.pathname +\n            Location.normalizeQueryParams(this._platformLocation.search);\n        /** @type {?} */\n        const hash = this._platformLocation.hash;\n        return hash && includeHash ? `${pathname}${hash}` : pathname;\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @param {?} queryParams\n     * @return {?}\n     */\n    pushState(state, title, url, queryParams) {\n        /** @type {?} */\n        const externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n        this._platformLocation.pushState(state, title, externalUrl);\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @param {?} queryParams\n     * @return {?}\n     */\n    replaceState(state, title, url, queryParams) {\n        /** @type {?} */\n        const externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n        this._platformLocation.replaceState(state, title, externalUrl);\n    }\n    /**\n     * @return {?}\n     */\n    forward() { this._platformLocation.forward(); }\n    /**\n     * @return {?}\n     */\n    back() { this._platformLocation.back(); }\n}\nPathLocationStrategy.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nPathLocationStrategy.ctorParameters = () => [\n    { type: PlatformLocation },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PathLocationStrategy.prototype._baseHref;\n    /**\n     * @type {?}\n     * @private\n     */\n    PathLocationStrategy.prototype._platformLocation;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n/**\n * \\@internal\n * @type {?}\n */\nconst CURRENCIES_EN = {\n    'ADP': [undefined, undefined, 0],\n    'AFN': [undefined, undefined, 0],\n    'ALL': [undefined, undefined, 0],\n    'AMD': [undefined, undefined, 0],\n    'AOA': [undefined, 'Kz'],\n    'ARS': [undefined, '$'],\n    'AUD': ['A$', '$'],\n    'BAM': [undefined, 'KM'],\n    'BBD': [undefined, '$'],\n    'BDT': [undefined, 'à§³'],\n    'BHD': [undefined, undefined, 3],\n    'BIF': [undefined, undefined, 0],\n    'BMD': [undefined, '$'],\n    'BND': [undefined, '$'],\n    'BOB': [undefined, 'Bs'],\n    'BRL': ['R$'],\n    'BSD': [undefined, '$'],\n    'BWP': [undefined, 'P'],\n    'BYN': [undefined, 'Ñ.', 2],\n    'BYR': [undefined, undefined, 0],\n    'BZD': [undefined, '$'],\n    'CAD': ['CA$', '$', 2],\n    'CHF': [undefined, undefined, 2],\n    'CLF': [undefined, undefined, 4],\n    'CLP': [undefined, '$', 0],\n    'CNY': ['CNÂ¥', 'Â¥'],\n    'COP': [undefined, '$', 0],\n    'CRC': [undefined, 'â¡', 2],\n    'CUC': [undefined, '$'],\n    'CUP': [undefined, '$'],\n    'CZK': [undefined, 'KÄ', 2],\n    'DJF': [undefined, undefined, 0],\n    'DKK': [undefined, 'kr', 2],\n    'DOP': [undefined, '$'],\n    'EGP': [undefined, 'EÂ£'],\n    'ESP': [undefined, 'â§', 0],\n    'EUR': ['â¬'],\n    'FJD': [undefined, '$'],\n    'FKP': [undefined, 'Â£'],\n    'GBP': ['Â£'],\n    'GEL': [undefined, 'â¾'],\n    'GIP': [undefined, 'Â£'],\n    'GNF': [undefined, 'FG', 0],\n    'GTQ': [undefined, 'Q'],\n    'GYD': [undefined, '$', 0],\n    'HKD': ['HK$', '$'],\n    'HNL': [undefined, 'L'],\n    'HRK': [undefined, 'kn'],\n    'HUF': [undefined, 'Ft', 2],\n    'IDR': [undefined, 'Rp', 0],\n    'ILS': ['âª'],\n    'INR': ['â¹'],\n    'IQD': [undefined, undefined, 0],\n    'IRR': [undefined, undefined, 0],\n    'ISK': [undefined, 'kr', 0],\n    'ITL': [undefined, undefined, 0],\n    'JMD': [undefined, '$'],\n    'JOD': [undefined, undefined, 3],\n    'JPY': ['Â¥', undefined, 0],\n    'KHR': [undefined, 'á'],\n    'KMF': [undefined, 'CF', 0],\n    'KPW': [undefined, 'â©', 0],\n    'KRW': ['â©', undefined, 0],\n    'KWD': [undefined, undefined, 3],\n    'KYD': [undefined, '$'],\n    'KZT': [undefined, 'â¸'],\n    'LAK': [undefined, 'â­', 0],\n    'LBP': [undefined, 'LÂ£', 0],\n    'LKR': [undefined, 'Rs'],\n    'LRD': [undefined, '$'],\n    'LTL': [undefined, 'Lt'],\n    'LUF': [undefined, undefined, 0],\n    'LVL': [undefined, 'Ls'],\n    'LYD': [undefined, undefined, 3],\n    'MGA': [undefined, 'Ar', 0],\n    'MGF': [undefined, undefined, 0],\n    'MMK': [undefined, 'K', 0],\n    'MNT': [undefined, 'â®', 0],\n    'MRO': [undefined, undefined, 0],\n    'MUR': [undefined, 'Rs', 0],\n    'MXN': ['MX$', '$'],\n    'MYR': [undefined, 'RM'],\n    'NAD': [undefined, '$'],\n    'NGN': [undefined, 'â¦'],\n    'NIO': [undefined, 'C$'],\n    'NOK': [undefined, 'kr', 2],\n    'NPR': [undefined, 'Rs'],\n    'NZD': ['NZ$', '$'],\n    'OMR': [undefined, undefined, 3],\n    'PHP': [undefined, 'â±'],\n    'PKR': [undefined, 'Rs', 0],\n    'PLN': [undefined, 'zÅ'],\n    'PYG': [undefined, 'â²', 0],\n    'RON': [undefined, 'lei'],\n    'RSD': [undefined, undefined, 0],\n    'RUB': [undefined, 'â½'],\n    'RUR': [undefined, 'Ñ.'],\n    'RWF': [undefined, 'RF', 0],\n    'SBD': [undefined, '$'],\n    'SEK': [undefined, 'kr', 2],\n    'SGD': [undefined, '$'],\n    'SHP': [undefined, 'Â£'],\n    'SLL': [undefined, undefined, 0],\n    'SOS': [undefined, undefined, 0],\n    'SRD': [undefined, '$'],\n    'SSP': [undefined, 'Â£'],\n    'STD': [undefined, undefined, 0],\n    'STN': [undefined, 'Db'],\n    'SYP': [undefined, 'Â£', 0],\n    'THB': [undefined, 'à¸¿'],\n    'TMM': [undefined, undefined, 0],\n    'TND': [undefined, undefined, 3],\n    'TOP': [undefined, 'T$'],\n    'TRL': [undefined, undefined, 0],\n    'TRY': [undefined, 'âº'],\n    'TTD': [undefined, '$'],\n    'TWD': ['NT$', '$', 2],\n    'TZS': [undefined, undefined, 0],\n    'UAH': [undefined, 'â´'],\n    'UGX': [undefined, undefined, 0],\n    'USD': ['$'],\n    'UYI': [undefined, undefined, 0],\n    'UYU': [undefined, '$'],\n    'UZS': [undefined, undefined, 0],\n    'VEF': [undefined, 'Bs'],\n    'VND': ['â«', undefined, 0],\n    'VUV': [undefined, undefined, 0],\n    'XAF': ['FCFA', undefined, 0],\n    'XCD': ['EC$', '$'],\n    'XOF': ['CFA', undefined, 0],\n    'XPF': ['CFPF', undefined, 0],\n    'YER': [undefined, undefined, 0],\n    'ZAR': [undefined, 'R'],\n    'ZMK': [undefined, undefined, 0],\n    'ZMW': [undefined, 'ZK'],\n    'ZWD': [undefined, undefined, 0]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst NumberFormatStyle = {\n    Decimal: 0,\n    Percent: 1,\n    Currency: 2,\n    Scientific: 3,\n};\nNumberFormatStyle[NumberFormatStyle.Decimal] = 'Decimal';\nNumberFormatStyle[NumberFormatStyle.Percent] = 'Percent';\nNumberFormatStyle[NumberFormatStyle.Currency] = 'Currency';\nNumberFormatStyle[NumberFormatStyle.Scientific] = 'Scientific';\n/** @enum {number} */\nconst Plural = {\n    Zero: 0,\n    One: 1,\n    Two: 2,\n    Few: 3,\n    Many: 4,\n    Other: 5,\n};\nPlural[Plural.Zero] = 'Zero';\nPlural[Plural.One] = 'One';\nPlural[Plural.Two] = 'Two';\nPlural[Plural.Few] = 'Few';\nPlural[Plural.Many] = 'Many';\nPlural[Plural.Other] = 'Other';\n/** @enum {number} */\nconst FormStyle = {\n    Format: 0,\n    Standalone: 1,\n};\nFormStyle[FormStyle.Format] = 'Format';\nFormStyle[FormStyle.Standalone] = 'Standalone';\n/** @enum {number} */\nconst TranslationWidth = {\n    /** 1 character for `en-US`. For example: 'S' */\n    Narrow: 0,\n    /** 3 characters for `en-US`. For example: 'Sun' */\n    Abbreviated: 1,\n    /** Full length for `en-US`. For example: \"Sunday\" */\n    Wide: 2,\n    /** 2 characters for `en-US`, For example: \"Su\" */\n    Short: 3,\n};\nTranslationWidth[TranslationWidth.Narrow] = 'Narrow';\nTranslationWidth[TranslationWidth.Abbreviated] = 'Abbreviated';\nTranslationWidth[TranslationWidth.Wide] = 'Wide';\nTranslationWidth[TranslationWidth.Short] = 'Short';\n/** @enum {number} */\nconst FormatWidth = {\n    /**\n     * For `en-US`, 'M/d/yy, h:mm a'`\n     * (Example: `6/15/15, 9:03 AM`)\n     */\n    Short: 0,\n    /**\n     * For `en-US`, `'MMM d, y, h:mm:ss a'`\n     * (Example: `Jun 15, 2015, 9:03:01 AM`)\n     */\n    Medium: 1,\n    /**\n     * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n     * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n     */\n    Long: 2,\n    /**\n     * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n     * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n     */\n    Full: 3,\n};\nFormatWidth[FormatWidth.Short] = 'Short';\nFormatWidth[FormatWidth.Medium] = 'Medium';\nFormatWidth[FormatWidth.Long] = 'Long';\nFormatWidth[FormatWidth.Full] = 'Full';\n/** @enum {number} */\nconst NumberSymbol = {\n    /**\n     * Decimal separator.\n     * For `en-US`, the dot character.\n     * Example : 2,345`.`67\n     */\n    Decimal: 0,\n    /**\n     * Grouping separator, typically for thousands.\n     * For `en-US`, the comma character.\n     * Example: 2`,`345.67\n     */\n    Group: 1,\n    /**\n     * List-item separator.\n     * Example: \"one, two, and three\"\n     */\n    List: 2,\n    /**\n     * Sign for percentage (out of 100).\n     * Example: 23.4%\n     */\n    PercentSign: 3,\n    /**\n     * Sign for positive numbers.\n     * Example: +23\n     */\n    PlusSign: 4,\n    /**\n     * Sign for negative numbers.\n     * Example: -23\n     */\n    MinusSign: 5,\n    /**\n     * Computer notation for exponential value (n times a power of 10).\n     * Example: 1.2E3\n     */\n    Exponential: 6,\n    /**\n     * Human-readable format of exponential.\n     * Example: 1.2x103\n     */\n    SuperscriptingExponent: 7,\n    /**\n     * Sign for permille (out of 1000).\n     * Example: 23.4â°\n     */\n    PerMille: 8,\n    /**\n     * Infinity, can be used with plus and minus.\n     * Example: â, +â, -â\n     */\n    Infinity: 9,\n    /**\n     * Not a number.\n     * Example: NaN\n     */\n    NaN: 10,\n    /**\n     * Symbol used between time units.\n     * Example: 10:52\n     */\n    TimeSeparator: 11,\n    /**\n     * Decimal separator for currency values (fallback to `Decimal`).\n     * Example: $2,345.67\n     */\n    CurrencyDecimal: 12,\n    /**\n     * Group separator for currency values (fallback to `Group`).\n     * Example: $2,345.67\n     */\n    CurrencyGroup: 13,\n};\nNumberSymbol[NumberSymbol.Decimal] = 'Decimal';\nNumberSymbol[NumberSymbol.Group] = 'Group';\nNumberSymbol[NumberSymbol.List] = 'List';\nNumberSymbol[NumberSymbol.PercentSign] = 'PercentSign';\nNumberSymbol[NumberSymbol.PlusSign] = 'PlusSign';\nNumberSymbol[NumberSymbol.MinusSign] = 'MinusSign';\nNumberSymbol[NumberSymbol.Exponential] = 'Exponential';\nNumberSymbol[NumberSymbol.SuperscriptingExponent] = 'SuperscriptingExponent';\nNumberSymbol[NumberSymbol.PerMille] = 'PerMille';\nNumberSymbol[NumberSymbol.Infinity] = 'Infinity';\nNumberSymbol[NumberSymbol.NaN] = 'NaN';\nNumberSymbol[NumberSymbol.TimeSeparator] = 'TimeSeparator';\nNumberSymbol[NumberSymbol.CurrencyDecimal] = 'CurrencyDecimal';\nNumberSymbol[NumberSymbol.CurrencyGroup] = 'CurrencyGroup';\n/** @enum {number} */\nconst WeekDay = {\n    Sunday: 0,\n    Monday: 1,\n    Tuesday: 2,\n    Wednesday: 3,\n    Thursday: 4,\n    Friday: 5,\n    Saturday: 6,\n};\nWeekDay[WeekDay.Sunday] = 'Sunday';\nWeekDay[WeekDay.Monday] = 'Monday';\nWeekDay[WeekDay.Tuesday] = 'Tuesday';\nWeekDay[WeekDay.Wednesday] = 'Wednesday';\nWeekDay[WeekDay.Thursday] = 'Thursday';\nWeekDay[WeekDay.Friday] = 'Friday';\nWeekDay[WeekDay.Saturday] = 'Saturday';\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code, such as `fr-FR`.\n * @return {?} The locale code. For example, `fr`.\n */\nfunction getLocaleId(locale) {\n    return ÉµfindLocaleData(locale)[ÉµLocaleDataIndex.LocaleId];\n}\n/**\n * Retrieves day period strings for the given locale.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} formStyle The required grammatical form.\n * @param {?} width The required character width.\n * @return {?} An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n */\nfunction getLocaleDayPeriods(locale, formStyle, width) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    /** @type {?} */\n    const amPmData = (/** @type {?} */ ([data[ÉµLocaleDataIndex.DayPeriodsFormat], data[ÉµLocaleDataIndex.DayPeriodsStandalone]]));\n    /** @type {?} */\n    const amPm = getLastDefinedValue(amPmData, formStyle);\n    return getLastDefinedValue(amPm, width);\n}\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} formStyle The required grammatical form.\n * @param {?} width The required character width.\n * @return {?} An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n */\nfunction getLocaleDayNames(locale, formStyle, width) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    /** @type {?} */\n    const daysData = (/** @type {?} */ ([data[ÉµLocaleDataIndex.DaysFormat], data[ÉµLocaleDataIndex.DaysStandalone]]));\n    /** @type {?} */\n    const days = getLastDefinedValue(daysData, formStyle);\n    return getLastDefinedValue(days, width);\n}\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} formStyle The required grammatical form.\n * @param {?} width The required character width.\n * @return {?} An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n */\nfunction getLocaleMonthNames(locale, formStyle, width) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    /** @type {?} */\n    const monthsData = (/** @type {?} */ ([data[ÉµLocaleDataIndex.MonthsFormat], data[ÉµLocaleDataIndex.MonthsStandalone]]));\n    /** @type {?} */\n    const months = getLastDefinedValue(monthsData, formStyle);\n    return getLastDefinedValue(months, width);\n}\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} width The required character width.\n * @return {?} An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n */\nfunction getLocaleEraNames(locale, width) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    /** @type {?} */\n    const erasData = (/** @type {?} */ (data[ÉµLocaleDataIndex.Eras]));\n    return getLastDefinedValue(erasData, width);\n}\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n */\nfunction getLocaleFirstDayOfWeek(locale) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    return data[ÉµLocaleDataIndex.FirstDayOfWeek];\n}\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The range of day values, `[startDay, endDay]`.\n */\nfunction getLocaleWeekEndRange(locale) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    return data[ÉµLocaleDataIndex.WeekendRange];\n}\n/**\n * Retrieves a localized date-value formating string.\n *\n * @see `FormatWidth` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} width The format type.\n * @return {?} The localized formating string.\n */\nfunction getLocaleDateFormat(locale, width) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    return getLastDefinedValue(data[ÉµLocaleDataIndex.DateFormat], width);\n}\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @see `FormatWidth` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} width The format type.\n * @return {?} The localized formatting string.\n */\nfunction getLocaleTimeFormat(locale, width) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    return getLastDefinedValue(data[ÉµLocaleDataIndex.TimeFormat], width);\n}\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @see `FormatWidth` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} width The format type.\n * @return {?} The localized formatting string.\n */\nfunction getLocaleDateTimeFormat(locale, width) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    /** @type {?} */\n    const dateTimeFormatData = (/** @type {?} */ (data[ÉµLocaleDataIndex.DateTimeFormat]));\n    return getLastDefinedValue(dateTimeFormatData, width);\n}\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @see `NumberSymbol` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale The locale code.\n * @param {?} symbol The symbol to localize.\n * @return {?} The character for the localized symbol.\n */\nfunction getLocaleNumberSymbol(locale, symbol) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    /** @type {?} */\n    const res = data[ÉµLocaleDataIndex.NumberSymbols][symbol];\n    if (typeof res === 'undefined') {\n        if (symbol === NumberSymbol.CurrencyDecimal) {\n            return data[ÉµLocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n        }\n        else if (symbol === NumberSymbol.CurrencyGroup) {\n            return data[ÉµLocaleDataIndex.NumberSymbols][NumberSymbol.Group];\n        }\n    }\n    return res;\n}\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | Â¤ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @see `NumberFormatStyle` / [CLDR website](http://cldr.unicode.org/translation/number-patterns) / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @return {?} The localized format string.\n */\nfunction getLocaleNumberFormat(locale, type) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    return data[ÉµLocaleDataIndex.NumberFormats][type];\n}\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The localized symbol character,\n * or `null` if the main country cannot be determined.\n */\nfunction getLocaleCurrencySymbol(locale) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    return data[ÉµLocaleDataIndex.CurrencySymbol] || null;\n}\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The currency name,\n * or `null` if the main country cannot be determined.\n */\nfunction getLocaleCurrencyName(locale) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    return data[ÉµLocaleDataIndex.CurrencyName] || null;\n}\n/**\n * Retrieves the currency values for a given locale.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The currency values.\n */\nfunction getLocaleCurrencies(locale) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    return data[ÉµLocaleDataIndex.Currencies];\n}\n/**\n * \\@alias core/ÉµgetLocalePluralCase\n * \\@publicApi\n * @type {?}\n */\nconst getLocalePluralCase = ÉµgetLocalePluralCase;\n/**\n * @param {?} data\n * @return {?}\n */\nfunction checkFullData(data) {\n    if (!data[ÉµLocaleDataIndex.ExtraData]) {\n        throw new Error(`Missing extra locale data for the locale \"${data[ÉµLocaleDataIndex.LocaleId]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n    }\n}\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @see `getLocaleExtraDayPeriods()` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n */\nfunction getLocaleExtraDayPeriodRules(locale) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    checkFullData(data);\n    /** @type {?} */\n    const rules = data[ÉµLocaleDataIndex.ExtraData][2 /* ExtraDayPeriodsRules */] || [];\n    return rules.map((/**\n     * @param {?} rule\n     * @return {?}\n     */\n    (rule) => {\n        if (typeof rule === 'string') {\n            return extractTime(rule);\n        }\n        return [extractTime(rule[0]), extractTime(rule[1])];\n    }));\n}\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @see `getLocaleExtraDayPeriodRules()` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} formStyle The required grammatical form.\n * @param {?} width The required character width.\n * @return {?} The translated day-period strings.\n */\nfunction getLocaleExtraDayPeriods(locale, formStyle, width) {\n    /** @type {?} */\n    const data = ÉµfindLocaleData(locale);\n    checkFullData(data);\n    /** @type {?} */\n    const dayPeriodsData = (/** @type {?} */ ([\n        data[ÉµLocaleDataIndex.ExtraData][0 /* ExtraDayPeriodFormats */],\n        data[ÉµLocaleDataIndex.ExtraData][1 /* ExtraDayPeriodStandalone */]\n    ]));\n    /** @type {?} */\n    const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n    return getLastDefinedValue(dayPeriods, width) || [];\n}\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @template T\n * @param {?} data The data array to retrieve from.\n * @param {?} index A 0-based index into the array to start from.\n * @return {?} The value immediately before the given index position.\n */\nfunction getLastDefinedValue(data, index) {\n    for (let i = index; i > -1; i--) {\n        if (typeof data[i] !== 'undefined') {\n            return data[i];\n        }\n    }\n    throw new Error('Locale data API: locale data undefined');\n}\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n * @param {?} time\n * @return {?}\n */\nfunction extractTime(time) {\n    const [h, m] = time.split(':');\n    return { hours: +h, minutes: +m };\n}\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} code The currency code.\n * @param {?} format The format, `wide` or `narrow`.\n * @param {?=} locale A locale code for the locale format rules to use.\n *\n * @return {?} The symbol, or the currency code if no symbol is available.0\n */\nfunction getCurrencySymbol(code, format, locale = 'en') {\n    /** @type {?} */\n    const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n    /** @type {?} */\n    const symbolNarrow = currency[1 /* SymbolNarrow */];\n    if (format === 'narrow' && typeof symbolNarrow === 'string') {\n        return symbolNarrow;\n    }\n    return currency[0 /* Symbol */] || code;\n}\n// Most currencies have cents, that's why the default is 2\n/** @type {?} */\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} code The currency code.\n * @return {?} The number of decimal digits, typically 0 or 2.\n */\nfunction getNumberOfCurrencyDigits(code) {\n    /** @type {?} */\n    let digits;\n    /** @type {?} */\n    const currency = CURRENCIES_EN[code];\n    if (currency) {\n        digits = currency[2 /* NbOfDigits */];\n    }\n    return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ISO8601_DATE_REGEX = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n//    1        2       3         4          5          6          7          8  9     10      11\n/** @type {?} */\nconst NAMED_FORMATS = {};\n/** @type {?} */\nconst DATE_FORMATS_SPLIT = /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\n/** @enum {number} */\nconst ZoneWidth = {\n    Short: 0,\n    ShortGMT: 1,\n    Long: 2,\n    Extended: 3,\n};\nZoneWidth[ZoneWidth.Short] = 'Short';\nZoneWidth[ZoneWidth.ShortGMT] = 'ShortGMT';\nZoneWidth[ZoneWidth.Long] = 'Long';\nZoneWidth[ZoneWidth.Extended] = 'Extended';\n/** @enum {number} */\nconst DateType = {\n    FullYear: 0,\n    Month: 1,\n    Date: 2,\n    Hours: 3,\n    Minutes: 4,\n    Seconds: 5,\n    FractionalSeconds: 6,\n    Day: 7,\n};\nDateType[DateType.FullYear] = 'FullYear';\nDateType[DateType.Month] = 'Month';\nDateType[DateType.Date] = 'Date';\nDateType[DateType.Hours] = 'Hours';\nDateType[DateType.Minutes] = 'Minutes';\nDateType[DateType.Seconds] = 'Seconds';\nDateType[DateType.FractionalSeconds] = 'FractionalSeconds';\nDateType[DateType.Day] = 'Day';\n/** @enum {number} */\nconst TranslationType = {\n    DayPeriods: 0,\n    Days: 1,\n    Months: 2,\n    Eras: 3,\n};\nTranslationType[TranslationType.DayPeriods] = 'DayPeriods';\nTranslationType[TranslationType.Days] = 'Days';\nTranslationType[TranslationType.Months] = 'Months';\nTranslationType[TranslationType.Eras] = 'Eras';\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a date according to locale rules.\n *\n * @see `DatePipe` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} value The date to format, as a Date, or a number (milliseconds since UTC epoch)\n * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).\n * @param {?} format The date-time components to include. See `DatePipe` for details.\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?=} timezone The time zone. A time zone offset from GMT (such as `'+0430'`),\n * or a standard UTC/GMT or continental US time zone abbreviation.\n * If not specified, uses host system settings.\n *\n * @return {?} The formatted date string.\n *\n */\nfunction formatDate(value, format, locale, timezone) {\n    /** @type {?} */\n    let date = toDate(value);\n    /** @type {?} */\n    const namedFormat = getNamedFormat(locale, format);\n    format = namedFormat || format;\n    /** @type {?} */\n    let parts = [];\n    /** @type {?} */\n    let match;\n    while (format) {\n        match = DATE_FORMATS_SPLIT.exec(format);\n        if (match) {\n            parts = parts.concat(match.slice(1));\n            /** @type {?} */\n            const part = parts.pop();\n            if (!part) {\n                break;\n            }\n            format = part;\n        }\n        else {\n            parts.push(format);\n            break;\n        }\n    }\n    /** @type {?} */\n    let dateTimezoneOffset = date.getTimezoneOffset();\n    if (timezone) {\n        dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n        date = convertTimezoneToLocal(date, timezone, true);\n    }\n    /** @type {?} */\n    let text = '';\n    parts.forEach((/**\n     * @param {?} value\n     * @return {?}\n     */\n    value => {\n        /** @type {?} */\n        const dateFormatter = getDateFormatter(value);\n        text += dateFormatter ?\n            dateFormatter(date, locale, dateTimezoneOffset) :\n            value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n    }));\n    return text;\n}\n/**\n * @param {?} locale\n * @param {?} format\n * @return {?}\n */\nfunction getNamedFormat(locale, format) {\n    /** @type {?} */\n    const localeId = getLocaleId(locale);\n    NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\n    if (NAMED_FORMATS[localeId][format]) {\n        return NAMED_FORMATS[localeId][format];\n    }\n    /** @type {?} */\n    let formatValue = '';\n    switch (format) {\n        case 'shortDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n            break;\n        case 'mediumDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n            break;\n        case 'longDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n            break;\n        case 'fullDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n            break;\n        case 'shortTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n            break;\n        case 'mediumTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n            break;\n        case 'longTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n            break;\n        case 'fullTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n            break;\n        case 'short':\n            /** @type {?} */\n            const shortTime = getNamedFormat(locale, 'shortTime');\n            /** @type {?} */\n            const shortDate = getNamedFormat(locale, 'shortDate');\n            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\n            break;\n        case 'medium':\n            /** @type {?} */\n            const mediumTime = getNamedFormat(locale, 'mediumTime');\n            /** @type {?} */\n            const mediumDate = getNamedFormat(locale, 'mediumDate');\n            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\n            break;\n        case 'long':\n            /** @type {?} */\n            const longTime = getNamedFormat(locale, 'longTime');\n            /** @type {?} */\n            const longDate = getNamedFormat(locale, 'longDate');\n            formatValue =\n                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\n            break;\n        case 'full':\n            /** @type {?} */\n            const fullTime = getNamedFormat(locale, 'fullTime');\n            /** @type {?} */\n            const fullDate = getNamedFormat(locale, 'fullDate');\n            formatValue =\n                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\n            break;\n    }\n    if (formatValue) {\n        NAMED_FORMATS[localeId][format] = formatValue;\n    }\n    return formatValue;\n}\n/**\n * @param {?} str\n * @param {?} opt_values\n * @return {?}\n */\nfunction formatDateTime(str, opt_values) {\n    if (opt_values) {\n        str = str.replace(/\\{([^}]+)}/g, (/**\n         * @param {?} match\n         * @param {?} key\n         * @return {?}\n         */\n        function (match, key) {\n            return (opt_values != null && key in opt_values) ? opt_values[key] : match;\n        }));\n    }\n    return str;\n}\n/**\n * @param {?} num\n * @param {?} digits\n * @param {?=} minusSign\n * @param {?=} trim\n * @param {?=} negWrap\n * @return {?}\n */\nfunction padNumber(num, digits, minusSign = '-', trim, negWrap) {\n    /** @type {?} */\n    let neg = '';\n    if (num < 0 || (negWrap && num <= 0)) {\n        if (negWrap) {\n            num = -num + 1;\n        }\n        else {\n            num = -num;\n            neg = minusSign;\n        }\n    }\n    /** @type {?} */\n    let strNum = String(num);\n    while (strNum.length < digits) {\n        strNum = '0' + strNum;\n    }\n    if (trim) {\n        strNum = strNum.substr(strNum.length - digits);\n    }\n    return neg + strNum;\n}\n/**\n * @param {?} milliseconds\n * @param {?} digits\n * @return {?}\n */\nfunction formatFractionalSeconds(milliseconds, digits) {\n    /** @type {?} */\n    const strMs = padNumber(milliseconds, 3);\n    return strMs.substr(0, digits);\n}\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n * @param {?} name\n * @param {?} size\n * @param {?=} offset\n * @param {?=} trim\n * @param {?=} negWrap\n * @return {?}\n */\nfunction dateGetter(name, size, offset = 0, trim = false, negWrap = false) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) {\n        /** @type {?} */\n        let part = getDatePart(name, date);\n        if (offset > 0 || part > -offset) {\n            part += offset;\n        }\n        if (name === DateType.Hours) {\n            if (part === 0 && offset === -12) {\n                part = 12;\n            }\n        }\n        else if (name === DateType.FractionalSeconds) {\n            return formatFractionalSeconds(part, size);\n        }\n        /** @type {?} */\n        const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n        return padNumber(part, size, localeMinus, trim, negWrap);\n    });\n}\n/**\n * @param {?} part\n * @param {?} date\n * @return {?}\n */\nfunction getDatePart(part, date) {\n    switch (part) {\n        case DateType.FullYear:\n            return date.getFullYear();\n        case DateType.Month:\n            return date.getMonth();\n        case DateType.Date:\n            return date.getDate();\n        case DateType.Hours:\n            return date.getHours();\n        case DateType.Minutes:\n            return date.getMinutes();\n        case DateType.Seconds:\n            return date.getSeconds();\n        case DateType.FractionalSeconds:\n            return date.getMilliseconds();\n        case DateType.Day:\n            return date.getDay();\n        default:\n            throw new Error(`Unknown DateType value \"${part}\".`);\n    }\n}\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n * @param {?} name\n * @param {?} width\n * @param {?=} form\n * @param {?=} extended\n * @return {?}\n */\nfunction dateStrGetter(name, width, form = FormStyle.Format, extended = false) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) {\n        return getDateTranslation(date, locale, name, width, form, extended);\n    });\n}\n/**\n * Returns the locale translation of a date for a given form, type and width\n * @param {?} date\n * @param {?} locale\n * @param {?} name\n * @param {?} width\n * @param {?} form\n * @param {?} extended\n * @return {?}\n */\nfunction getDateTranslation(date, locale, name, width, form, extended) {\n    switch (name) {\n        case TranslationType.Months:\n            return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n        case TranslationType.Days:\n            return getLocaleDayNames(locale, form, width)[date.getDay()];\n        case TranslationType.DayPeriods:\n            /** @type {?} */\n            const currentHours = date.getHours();\n            /** @type {?} */\n            const currentMinutes = date.getMinutes();\n            if (extended) {\n                /** @type {?} */\n                const rules = getLocaleExtraDayPeriodRules(locale);\n                /** @type {?} */\n                const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n                /** @type {?} */\n                let result;\n                rules.forEach((/**\n                 * @param {?} rule\n                 * @param {?} index\n                 * @return {?}\n                 */\n                (rule, index) => {\n                    if (Array.isArray(rule)) {\n                        // morning, afternoon, evening, night\n                        const { hours: hoursFrom, minutes: minutesFrom } = rule[0];\n                        const { hours: hoursTo, minutes: minutesTo } = rule[1];\n                        if (currentHours >= hoursFrom && currentMinutes >= minutesFrom &&\n                            (currentHours < hoursTo ||\n                                (currentHours === hoursTo && currentMinutes < minutesTo))) {\n                            result = dayPeriods[index];\n                        }\n                    }\n                    else { // noon or midnight\n                        // noon or midnight\n                        const { hours, minutes } = rule;\n                        if (hours === currentHours && minutes === currentMinutes) {\n                            result = dayPeriods[index];\n                        }\n                    }\n                }));\n                if (result) {\n                    return result;\n                }\n            }\n            // if no rules for the day periods, we use am/pm by default\n            return getLocaleDayPeriods(locale, form, (/** @type {?} */ (width)))[currentHours < 12 ? 0 : 1];\n        case TranslationType.Eras:\n            return getLocaleEraNames(locale, (/** @type {?} */ (width)))[date.getFullYear() <= 0 ? 0 : 1];\n        default:\n            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n            // However Closure Compiler does not understand that and reports an error in typed mode.\n            // The `throw new Error` below works around the problem, and the unexpected: never variable\n            // makes sure tsc still checks this code is unreachable.\n            /** @type {?} */\n            const unexpected = name;\n            throw new Error(`unexpected translation type ${unexpected}`);\n    }\n}\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n * @param {?} width\n * @return {?}\n */\nfunction timeZoneGetter(width) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @param {?} offset\n     * @return {?}\n     */\n    function (date, locale, offset) {\n        /** @type {?} */\n        const zone = -1 * offset;\n        /** @type {?} */\n        const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n        /** @type {?} */\n        const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n        switch (width) {\n            case ZoneWidth.Short:\n                return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\n                    padNumber(Math.abs(zone % 60), 2, minusSign);\n            case ZoneWidth.ShortGMT:\n                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\n            case ZoneWidth.Long:\n                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n                    padNumber(Math.abs(zone % 60), 2, minusSign);\n            case ZoneWidth.Extended:\n                if (offset === 0) {\n                    return 'Z';\n                }\n                else {\n                    return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n                        padNumber(Math.abs(zone % 60), 2, minusSign);\n                }\n            default:\n                throw new Error(`Unknown zone width \"${width}\"`);\n        }\n    });\n}\n/** @type {?} */\nconst JANUARY = 0;\n/** @type {?} */\nconst THURSDAY = 4;\n/**\n * @param {?} year\n * @return {?}\n */\nfunction getFirstThursdayOfYear(year) {\n    /** @type {?} */\n    const firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();\n    return new Date(year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\n}\n/**\n * @param {?} datetime\n * @return {?}\n */\nfunction getThursdayThisWeek(datetime) {\n    return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));\n}\n/**\n * @param {?} size\n * @param {?=} monthBased\n * @return {?}\n */\nfunction weekGetter(size, monthBased = false) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) {\n        /** @type {?} */\n        let result;\n        if (monthBased) {\n            /** @type {?} */\n            const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n            /** @type {?} */\n            const today = date.getDate();\n            result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n        }\n        else {\n            /** @type {?} */\n            const firstThurs = getFirstThursdayOfYear(date.getFullYear());\n            /** @type {?} */\n            const thisThurs = getThursdayThisWeek(date);\n            /** @type {?} */\n            const diff = thisThurs.getTime() - firstThurs.getTime();\n            result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\n        }\n        return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    });\n}\n/** @type {?} */\nconst DATE_FORMATS = {};\n// Based on CLDR formats:\n// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n// See also explanations: http://cldr.unicode.org/translation/date-time\n// TODO(ocombe): support all missing cldr formats: Y, U, Q, D, F, e, c, j, J, C, A, v, V, X, x\n/**\n * @param {?} format\n * @return {?}\n */\nfunction getDateFormatter(format) {\n    if (DATE_FORMATS[format]) {\n        return DATE_FORMATS[format];\n    }\n    /** @type {?} */\n    let formatter;\n    switch (format) {\n        // Era name (AD/BC)\n        case 'G':\n        case 'GG':\n        case 'GGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n            break;\n        case 'GGGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n            break;\n        case 'GGGGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n            break;\n        // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n        case 'y':\n            formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n            break;\n        // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n        case 'yy':\n            formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n            break;\n        // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n        case 'yyy':\n            formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n            break;\n        // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n        case 'yyyy':\n            formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n            break;\n        // Month of the year (1-12), numeric\n        case 'M':\n        case 'L':\n            formatter = dateGetter(DateType.Month, 1, 1);\n            break;\n        case 'MM':\n        case 'LL':\n            formatter = dateGetter(DateType.Month, 2, 1);\n            break;\n        // Month of the year (January, ...), string, format\n        case 'MMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n            break;\n        case 'MMMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n            break;\n        case 'MMMMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n            break;\n        // Month of the year (January, ...), string, standalone\n        case 'LLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\n            break;\n        case 'LLLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\n            break;\n        case 'LLLLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\n            break;\n        // Week of the year (1, ... 52)\n        case 'w':\n            formatter = weekGetter(1);\n            break;\n        case 'ww':\n            formatter = weekGetter(2);\n            break;\n        // Week of the month (1, ...)\n        case 'W':\n            formatter = weekGetter(1, true);\n            break;\n        // Day of the month (1-31)\n        case 'd':\n            formatter = dateGetter(DateType.Date, 1);\n            break;\n        case 'dd':\n            formatter = dateGetter(DateType.Date, 2);\n            break;\n        // Day of the Week\n        case 'E':\n        case 'EE':\n        case 'EEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n            break;\n        case 'EEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n            break;\n        case 'EEEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n            break;\n        case 'EEEEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n            break;\n        // Generic period of the day (am-pm)\n        case 'a':\n        case 'aa':\n        case 'aaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n            break;\n        case 'aaaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n            break;\n        case 'aaaaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n            break;\n        // Extended period of the day (midnight, at night, ...), standalone\n        case 'b':\n        case 'bb':\n        case 'bbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\n            break;\n        case 'bbbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\n            break;\n        case 'bbbbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\n            break;\n        // Extended period of the day (midnight, night, ...), standalone\n        case 'B':\n        case 'BB':\n        case 'BBB':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\n            break;\n        case 'BBBB':\n            formatter =\n                dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\n            break;\n        case 'BBBBB':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\n            break;\n        // Hour in AM/PM, (1-12)\n        case 'h':\n            formatter = dateGetter(DateType.Hours, 1, -12);\n            break;\n        case 'hh':\n            formatter = dateGetter(DateType.Hours, 2, -12);\n            break;\n        // Hour of the day (0-23)\n        case 'H':\n            formatter = dateGetter(DateType.Hours, 1);\n            break;\n        // Hour in day, padded (00-23)\n        case 'HH':\n            formatter = dateGetter(DateType.Hours, 2);\n            break;\n        // Minute of the hour (0-59)\n        case 'm':\n            formatter = dateGetter(DateType.Minutes, 1);\n            break;\n        case 'mm':\n            formatter = dateGetter(DateType.Minutes, 2);\n            break;\n        // Second of the minute (0-59)\n        case 's':\n            formatter = dateGetter(DateType.Seconds, 1);\n            break;\n        case 'ss':\n            formatter = dateGetter(DateType.Seconds, 2);\n            break;\n        // Fractional second\n        case 'S':\n            formatter = dateGetter(DateType.FractionalSeconds, 1);\n            break;\n        case 'SS':\n            formatter = dateGetter(DateType.FractionalSeconds, 2);\n            break;\n        case 'SSS':\n            formatter = dateGetter(DateType.FractionalSeconds, 3);\n            break;\n        // Timezone ISO8601 short format (-0430)\n        case 'Z':\n        case 'ZZ':\n        case 'ZZZ':\n            formatter = timeZoneGetter(ZoneWidth.Short);\n            break;\n        // Timezone ISO8601 extended format (-04:30)\n        case 'ZZZZZ':\n            formatter = timeZoneGetter(ZoneWidth.Extended);\n            break;\n        // Timezone GMT short format (GMT+4)\n        case 'O':\n        case 'OO':\n        case 'OOO':\n        // Should be location, but fallback to format O instead because we don't have the data yet\n        case 'z':\n        case 'zz':\n        case 'zzz':\n            formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n            break;\n        // Timezone GMT long format (GMT+0430)\n        case 'OOOO':\n        case 'ZZZZ':\n        // Should be location, but fallback to format O instead because we don't have the data yet\n        case 'zzzz':\n            formatter = timeZoneGetter(ZoneWidth.Long);\n            break;\n        default:\n            return null;\n    }\n    DATE_FORMATS[format] = formatter;\n    return formatter;\n}\n/**\n * @param {?} timezone\n * @param {?} fallback\n * @return {?}\n */\nfunction timezoneToOffset(timezone, fallback) {\n    // Support: IE 9-11 only, Edge 13-15+\n    // IE/Edge do not \"understand\" colon (`:`) in timezone\n    timezone = timezone.replace(/:/g, '');\n    /** @type {?} */\n    const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n/**\n * @param {?} date\n * @param {?} minutes\n * @return {?}\n */\nfunction addDateMinutes(date, minutes) {\n    date = new Date(date.getTime());\n    date.setMinutes(date.getMinutes() + minutes);\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} timezone\n * @param {?} reverse\n * @return {?}\n */\nfunction convertTimezoneToLocal(date, timezone, reverse) {\n    /** @type {?} */\n    const reverseValue = reverse ? -1 : 1;\n    /** @type {?} */\n    const dateTimezoneOffset = date.getTimezoneOffset();\n    /** @type {?} */\n    const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n * @param {?} value\n * @return {?}\n */\nfunction toDate(value) {\n    if (isDate(value)) {\n        return value;\n    }\n    if (typeof value === 'number' && !isNaN(value)) {\n        return new Date(value);\n    }\n    if (typeof value === 'string') {\n        value = value.trim();\n        /** @type {?} */\n        const parsedNb = parseFloat(value);\n        // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\n        if (!isNaN((/** @type {?} */ (value)) - parsedNb)) {\n            return new Date(parsedNb);\n        }\n        if (/^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n            /* For ISO Strings without time the day, month and year must be extracted from the ISO String\n                  before Date creation to avoid time offset and errors in the new Date.\n                  If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n                  date, some browsers (e.g. IE 9) will throw an invalid Date error.\n                  If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n                  is applied.\n                  Note: ISO months are 0 for January, 1 for February, ... */\n            const [y, m, d] = value.split('-').map((/**\n             * @param {?} val\n             * @return {?}\n             */\n            (val) => +val));\n            return new Date(y, m - 1, d);\n        }\n        /** @type {?} */\n        let match;\n        if (match = value.match(ISO8601_DATE_REGEX)) {\n            return isoStringToDate(match);\n        }\n    }\n    /** @type {?} */\n    const date = new Date((/** @type {?} */ (value)));\n    if (!isDate(date)) {\n        throw new Error(`Unable to convert \"${value}\" into a date`);\n    }\n    return date;\n}\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n * @param {?} match\n * @return {?}\n */\nfunction isoStringToDate(match) {\n    /** @type {?} */\n    const date = new Date(0);\n    /** @type {?} */\n    let tzHour = 0;\n    /** @type {?} */\n    let tzMin = 0;\n    // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\n    /** @type {?} */\n    const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n    /** @type {?} */\n    const timeSetter = match[8] ? date.setUTCHours : date.setHours;\n    // if there is a timezone defined like \"+01:00\" or \"+0100\"\n    if (match[9]) {\n        tzHour = Number(match[9] + match[10]);\n        tzMin = Number(match[9] + match[11]);\n    }\n    dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\n    /** @type {?} */\n    const h = Number(match[4] || 0) - tzHour;\n    /** @type {?} */\n    const m = Number(match[5] || 0) - tzMin;\n    /** @type {?} */\n    const s = Number(match[6] || 0);\n    /** @type {?} */\n    const ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n    timeSetter.call(date, h, m, s, ms);\n    return date;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n/** @type {?} */\nconst MAX_DIGITS = 22;\n/** @type {?} */\nconst DECIMAL_SEP = '.';\n/** @type {?} */\nconst ZERO_CHAR = '0';\n/** @type {?} */\nconst PATTERN_SEP = ';';\n/** @type {?} */\nconst GROUP_SEP = ',';\n/** @type {?} */\nconst DIGIT_CHAR = '#';\n/** @type {?} */\nconst CURRENCY_CHAR = 'Â¤';\n/** @type {?} */\nconst PERCENT_CHAR = '%';\n/**\n * Transforms a number to a locale string based on a style and a format.\n * @param {?} value\n * @param {?} pattern\n * @param {?} locale\n * @param {?} groupSymbol\n * @param {?} decimalSymbol\n * @param {?=} digitsInfo\n * @param {?=} isPercent\n * @return {?}\n */\nfunction formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {\n    /** @type {?} */\n    let formattedText = '';\n    /** @type {?} */\n    let isZero = false;\n    if (!isFinite(value)) {\n        formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\n    }\n    else {\n        /** @type {?} */\n        let parsedNumber = parseNumber(value);\n        if (isPercent) {\n            parsedNumber = toPercent(parsedNumber);\n        }\n        /** @type {?} */\n        let minInt = pattern.minInt;\n        /** @type {?} */\n        let minFraction = pattern.minFrac;\n        /** @type {?} */\n        let maxFraction = pattern.maxFrac;\n        if (digitsInfo) {\n            /** @type {?} */\n            const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n            if (parts === null) {\n                throw new Error(`${digitsInfo} is not a valid digit info`);\n            }\n            /** @type {?} */\n            const minIntPart = parts[1];\n            /** @type {?} */\n            const minFractionPart = parts[3];\n            /** @type {?} */\n            const maxFractionPart = parts[5];\n            if (minIntPart != null) {\n                minInt = parseIntAutoRadix(minIntPart);\n            }\n            if (minFractionPart != null) {\n                minFraction = parseIntAutoRadix(minFractionPart);\n            }\n            if (maxFractionPart != null) {\n                maxFraction = parseIntAutoRadix(maxFractionPart);\n            }\n            else if (minFractionPart != null && minFraction > maxFraction) {\n                maxFraction = minFraction;\n            }\n        }\n        roundNumber(parsedNumber, minFraction, maxFraction);\n        /** @type {?} */\n        let digits = parsedNumber.digits;\n        /** @type {?} */\n        let integerLen = parsedNumber.integerLen;\n        /** @type {?} */\n        const exponent = parsedNumber.exponent;\n        /** @type {?} */\n        let decimals = [];\n        isZero = digits.every((/**\n         * @param {?} d\n         * @return {?}\n         */\n        d => !d));\n        // pad zeros for small numbers\n        for (; integerLen < minInt; integerLen++) {\n            digits.unshift(0);\n        }\n        // pad zeros for small numbers\n        for (; integerLen < 0; integerLen++) {\n            digits.unshift(0);\n        }\n        // extract decimals digits\n        if (integerLen > 0) {\n            decimals = digits.splice(integerLen, digits.length);\n        }\n        else {\n            decimals = digits;\n            digits = [0];\n        }\n        // format the integer digits with grouping separators\n        /** @type {?} */\n        const groups = [];\n        if (digits.length >= pattern.lgSize) {\n            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n        }\n        while (digits.length > pattern.gSize) {\n            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n        }\n        if (digits.length) {\n            groups.unshift(digits.join(''));\n        }\n        formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\n        // append the decimal digits\n        if (decimals.length) {\n            formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\n        }\n        if (exponent) {\n            formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\n        }\n    }\n    if (value < 0 && !isZero) {\n        formattedText = pattern.negPre + formattedText + pattern.negSuf;\n    }\n    else {\n        formattedText = pattern.posPre + formattedText + pattern.posSuf;\n    }\n    return formattedText;\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as currency using locale rules.\n *\n * @see `formatNumber()` / `DecimalPipe` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} value The number to format.\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} currency A string containing the currency symbol or its name,\n * such as \"$\" or \"Canadian Dollar\". Used in output string, but does not affect the operation\n * of the function.\n * @param {?=} currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)\n * currency code, such as `USD` for the US dollar and `EUR` for the euro.\n * Used to determine the number of digits in the decimal part.\n * @param {?=} digitsInfo\n * @return {?} The formatted currency value.\n *\n */\nfunction formatCurrency(value, locale, currency, currencyCode, digitsInfo) {\n    /** @type {?} */\n    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);\n    /** @type {?} */\n    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    pattern.minFrac = getNumberOfCurrencyDigits((/** @type {?} */ (currencyCode)));\n    pattern.maxFrac = pattern.minFrac;\n    /** @type {?} */\n    const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);\n    return res\n        .replace(CURRENCY_CHAR, currency)\n        // if we have 2 time the currency character, the second one is ignored\n        .replace(CURRENCY_CHAR, '');\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as a percentage according to locale rules.\n *\n * @see `formatNumber()` / `DecimalPipe` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * \\@publicApi\n *\n * @param {?} value The number to format.\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?=} digitsInfo\n * @return {?} The formatted percentage value.\n *\n */\nfunction formatPercent(value, locale, digitsInfo) {\n    /** @type {?} */\n    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);\n    /** @type {?} */\n    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    /** @type {?} */\n    const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);\n    return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as text, with group sizing, separator, and other\n * parameters based on the locale.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} value The number to format.\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?=} digitsInfo\n * @return {?} The formatted text string.\n */\nfunction formatNumber(value, locale, digitsInfo) {\n    /** @type {?} */\n    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);\n    /** @type {?} */\n    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);\n}\n/**\n * @record\n */\nfunction ParsedNumberFormat() { }\nif (false) {\n    /** @type {?} */\n    ParsedNumberFormat.prototype.minInt;\n    /** @type {?} */\n    ParsedNumberFormat.prototype.minFrac;\n    /** @type {?} */\n    ParsedNumberFormat.prototype.maxFrac;\n    /** @type {?} */\n    ParsedNumberFormat.prototype.posPre;\n    /** @type {?} */\n    ParsedNumberFormat.prototype.posSuf;\n    /** @type {?} */\n    ParsedNumberFormat.prototype.negPre;\n    /** @type {?} */\n    ParsedNumberFormat.prototype.negSuf;\n    /** @type {?} */\n    ParsedNumberFormat.prototype.gSize;\n    /** @type {?} */\n    ParsedNumberFormat.prototype.lgSize;\n}\n/**\n * @param {?} format\n * @param {?=} minusSign\n * @return {?}\n */\nfunction parseNumberFormat(format, minusSign = '-') {\n    /** @type {?} */\n    const p = {\n        minInt: 1,\n        minFrac: 0,\n        maxFrac: 0,\n        posPre: '',\n        posSuf: '',\n        negPre: '',\n        negSuf: '',\n        gSize: 0,\n        lgSize: 0\n    };\n    /** @type {?} */\n    const patternParts = format.split(PATTERN_SEP);\n    /** @type {?} */\n    const positive = patternParts[0];\n    /** @type {?} */\n    const negative = patternParts[1];\n    /** @type {?} */\n    const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?\n        positive.split(DECIMAL_SEP) :\n        [\n            positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),\n            positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)\n        ];\n    /** @type {?} */\n    const integer = positiveParts[0];\n    /** @type {?} */\n    const fraction = positiveParts[1] || '';\n    p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));\n    for (let i = 0; i < fraction.length; i++) {\n        /** @type {?} */\n        const ch = fraction.charAt(i);\n        if (ch === ZERO_CHAR) {\n            p.minFrac = p.maxFrac = i + 1;\n        }\n        else if (ch === DIGIT_CHAR) {\n            p.maxFrac = i + 1;\n        }\n        else {\n            p.posSuf += ch;\n        }\n    }\n    /** @type {?} */\n    const groups = integer.split(GROUP_SEP);\n    p.gSize = groups[1] ? groups[1].length : 0;\n    p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;\n    if (negative) {\n        /** @type {?} */\n        const trunkLen = positive.length - p.posPre.length - p.posSuf.length;\n        /** @type {?} */\n        const pos = negative.indexOf(DIGIT_CHAR);\n        p.negPre = negative.substr(0, pos).replace(/'/g, '');\n        p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');\n    }\n    else {\n        p.negPre = minusSign + p.posPre;\n        p.negSuf = p.posSuf;\n    }\n    return p;\n}\n/**\n * @record\n */\nfunction ParsedNumber() { }\nif (false) {\n    /** @type {?} */\n    ParsedNumber.prototype.digits;\n    /** @type {?} */\n    ParsedNumber.prototype.exponent;\n    /** @type {?} */\n    ParsedNumber.prototype.integerLen;\n}\n// Transforms a parsed number into a percentage by multiplying it by 100\n/**\n * @param {?} parsedNumber\n * @return {?}\n */\nfunction toPercent(parsedNumber) {\n    // if the number is 0, don't do anything\n    if (parsedNumber.digits[0] === 0) {\n        return parsedNumber;\n    }\n    // Getting the current number of decimals\n    /** @type {?} */\n    const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;\n    if (parsedNumber.exponent) {\n        parsedNumber.exponent += 2;\n    }\n    else {\n        if (fractionLen === 0) {\n            parsedNumber.digits.push(0, 0);\n        }\n        else if (fractionLen === 1) {\n            parsedNumber.digits.push(0);\n        }\n        parsedNumber.integerLen += 2;\n    }\n    return parsedNumber;\n}\n/**\n * Parses a number.\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\n * @param {?} num\n * @return {?}\n */\nfunction parseNumber(num) {\n    /** @type {?} */\n    let numStr = Math.abs(num) + '';\n    /** @type {?} */\n    let exponent = 0;\n    /** @type {?} */\n    let digits;\n    /** @type {?} */\n    let integerLen;\n    /** @type {?} */\n    let i;\n    /** @type {?} */\n    let j;\n    /** @type {?} */\n    let zeros;\n    // Decimal point?\n    if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\n        numStr = numStr.replace(DECIMAL_SEP, '');\n    }\n    // Exponential form?\n    if ((i = numStr.search(/e/i)) > 0) {\n        // Work out the exponent.\n        if (integerLen < 0)\n            integerLen = i;\n        integerLen += +numStr.slice(i + 1);\n        numStr = numStr.substring(0, i);\n    }\n    else if (integerLen < 0) {\n        // There was no decimal point or exponent so it is an integer.\n        integerLen = numStr.length;\n    }\n    // Count the number of leading zeros.\n    for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */\n    }\n    if (i === (zeros = numStr.length)) {\n        // The digits are all zero.\n        digits = [0];\n        integerLen = 1;\n    }\n    else {\n        // Count the number of trailing zeros\n        zeros--;\n        while (numStr.charAt(zeros) === ZERO_CHAR)\n            zeros--;\n        // Trailing zeros are insignificant so ignore them\n        integerLen -= i;\n        digits = [];\n        // Convert string to array of digits without leading/trailing zeros.\n        for (j = 0; i <= zeros; i++, j++) {\n            digits[j] = Number(numStr.charAt(i));\n        }\n    }\n    // If the number overflows the maximum allowed digits then use an exponent.\n    if (integerLen > MAX_DIGITS) {\n        digits = digits.splice(0, MAX_DIGITS - 1);\n        exponent = integerLen - 1;\n        integerLen = 1;\n    }\n    return { digits, exponent, integerLen };\n}\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changes the parsedNumber in-place\n * @param {?} parsedNumber\n * @param {?} minFrac\n * @param {?} maxFrac\n * @return {?}\n */\nfunction roundNumber(parsedNumber, minFrac, maxFrac) {\n    if (minFrac > maxFrac) {\n        throw new Error(`The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);\n    }\n    /** @type {?} */\n    let digits = parsedNumber.digits;\n    /** @type {?} */\n    let fractionLen = digits.length - parsedNumber.integerLen;\n    /** @type {?} */\n    const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\n    // The index of the digit to where rounding is to occur\n    /** @type {?} */\n    let roundAt = fractionSize + parsedNumber.integerLen;\n    /** @type {?} */\n    let digit = digits[roundAt];\n    if (roundAt > 0) {\n        // Drop fractional digits beyond `roundAt`\n        digits.splice(Math.max(parsedNumber.integerLen, roundAt));\n        // Set non-fractional digits beyond `roundAt` to 0\n        for (let j = roundAt; j < digits.length; j++) {\n            digits[j] = 0;\n        }\n    }\n    else {\n        // We rounded to zero so reset the parsedNumber\n        fractionLen = Math.max(0, fractionLen);\n        parsedNumber.integerLen = 1;\n        digits.length = Math.max(1, roundAt = fractionSize + 1);\n        digits[0] = 0;\n        for (let i = 1; i < roundAt; i++)\n            digits[i] = 0;\n    }\n    if (digit >= 5) {\n        if (roundAt - 1 < 0) {\n            for (let k = 0; k > roundAt; k--) {\n                digits.unshift(0);\n                parsedNumber.integerLen++;\n            }\n            digits.unshift(1);\n            parsedNumber.integerLen++;\n        }\n        else {\n            digits[roundAt - 1]++;\n        }\n    }\n    // Pad out with zeros to get the required fraction length\n    for (; fractionLen < Math.max(0, fractionSize); fractionLen++)\n        digits.push(0);\n    /** @type {?} */\n    let dropTrailingZeros = fractionSize !== 0;\n    // Minimal length = nb of decimals required + current nb of integers\n    // Any number besides that is optional and can be removed if it's a trailing 0\n    /** @type {?} */\n    const minLen = minFrac + parsedNumber.integerLen;\n    // Do any carrying, e.g. a digit was rounded up to 10\n    /** @type {?} */\n    const carry = digits.reduceRight((/**\n     * @param {?} carry\n     * @param {?} d\n     * @param {?} i\n     * @param {?} digits\n     * @return {?}\n     */\n    function (carry, d, i, digits) {\n        d = d + carry;\n        digits[i] = d < 10 ? d : d - 10; // d % 10\n        if (dropTrailingZeros) {\n            // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)\n            if (digits[i] === 0 && i >= minLen) {\n                digits.pop();\n            }\n            else {\n                dropTrailingZeros = false;\n            }\n        }\n        return d >= 10 ? 1 : 0; // Math.floor(d / 10);\n    }), 0);\n    if (carry) {\n        digits.unshift(carry);\n        parsedNumber.integerLen++;\n    }\n}\n/**\n * @param {?} text\n * @return {?}\n */\nfunction parseIntAutoRadix(text) {\n    /** @type {?} */\n    const result = parseInt(text);\n    if (isNaN(result)) {\n        throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated from v5\n * @type {?}\n */\nconst DEPRECATED_PLURAL_FN = new InjectionToken('UseV4Plurals');\n/**\n * \\@publicApi\n * @abstract\n */\nclass NgLocalization {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} value\n     * @param {?=} locale\n     * @return {?}\n     */\n    NgLocalization.prototype.getPluralCategory = function (value, locale) { };\n}\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n * @param {?} value\n * @param {?} cases\n * @param {?} ngLocalization\n * @param {?=} locale\n * @return {?}\n */\nfunction getPluralCategory(value, cases, ngLocalization, locale) {\n    /** @type {?} */\n    let key = `=${value}`;\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    key = ngLocalization.getPluralCategory(value, locale);\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    if (cases.indexOf('other') > -1) {\n        return 'other';\n    }\n    throw new Error(`No plural message found for value \"${value}\"`);\n}\n/**\n * Returns the plural case based on the locale\n *\n * \\@publicApi\n */\nclass NgLocaleLocalization extends NgLocalization {\n    /**\n     * @param {?} locale\n     * @param {?=} deprecatedPluralFn\n     */\n    constructor(locale, deprecatedPluralFn) {\n        super();\n        this.locale = locale;\n        this.deprecatedPluralFn = deprecatedPluralFn;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} locale\n     * @return {?}\n     */\n    getPluralCategory(value, locale) {\n        /** @type {?} */\n        const plural = this.deprecatedPluralFn ? this.deprecatedPluralFn(locale || this.locale, value) :\n            getLocalePluralCase(locale || this.locale)(value);\n        switch (plural) {\n            case Plural.Zero:\n                return 'zero';\n            case Plural.One:\n                return 'one';\n            case Plural.Two:\n                return 'two';\n            case Plural.Few:\n                return 'few';\n            case Plural.Many:\n                return 'many';\n            default:\n                return 'other';\n        }\n    }\n}\nNgLocaleLocalization.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nNgLocaleLocalization.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DEPRECATED_PLURAL_FN,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    NgLocaleLocalization.prototype.locale;\n    /**\n     * @deprecated from v5\n     * @type {?}\n     * @protected\n     */\n    NgLocaleLocalization.prototype.deprecatedPluralFn;\n}\n/**\n * Returns the plural case based on the locale\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * \\@publicApi\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nfunction getPluralCase(locale, nLike) {\n    // TODO(vicb): lazy compute\n    if (typeof nLike === 'string') {\n        nLike = parseInt((/** @type {?} */ (nLike)), 10);\n    }\n    /** @type {?} */\n    const n = (/** @type {?} */ (nLike));\n    /** @type {?} */\n    const nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    /** @type {?} */\n    const i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    const v = nDecimal.length;\n    /** @type {?} */\n    const f = parseInt(nDecimal, 10);\n    /** @type {?} */\n    const t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    /** @type {?} */\n    const lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (requiredâgeneral plural form â also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Register global data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n *\n * \\@publicApi\n * @param {?} data\n * @param {?=} localeId\n * @param {?=} extraData\n * @return {?}\n */\n// The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1\nfunction registerLocaleData(data, localeId, extraData) {\n    if (typeof localeId !== 'string') {\n        extraData = localeId;\n        localeId = data[ÉµLocaleDataIndex.LocaleId];\n    }\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\n    ÉµLOCALE_DATA[localeId] = data;\n    if (extraData) {\n        ÉµLOCALE_DATA[localeId][ÉµLocaleDataIndex.ExtraData] = extraData;\n    }\n}\n/** @enum {number} */\nconst ExtraLocaleDataIndex = {\n    ExtraDayPeriodFormats: 0,\n    ExtraDayPeriodStandalone: 1,\n    ExtraDayPeriodsRules: 2,\n};\n/** @enum {number} */\nconst CurrencyIndex = {\n    Symbol: 0, SymbolNarrow: 1, NbOfDigits: 2,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} cookieStr\n * @param {?} name\n * @return {?}\n */\nfunction parseCookieValue(cookieStr, name) {\n    name = encodeURIComponent(name);\n    for (const cookie of cookieStr.split(';')) {\n        /** @type {?} */\n        const eqIndex = cookie.indexOf('=');\n        const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n        if (cookieName.trim() === name) {\n            return decodeURIComponent(cookieValue);\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to diff and convert ngStyle/ngClass instructions into [style] and [class] bindings.\n *\n * ngStyle and ngClass both accept various forms of input and behave differently than that\n * of how [style] and [class] behave in Angular.\n *\n * The differences are:\n *  - ngStyle and ngClass both **watch** their binding values for changes each time CD runs\n *    while [style] and [class] bindings do not (they check for identity changes)\n *  - ngStyle allows for unit-based keys (e.g. `{'max-width.px':value}`) and [style] does not\n *  - ngClass supports arrays of class values and [class] only accepts map and string values\n *  - ngClass allows for multiple className keys (space-separated) within an array or map\n *     (as the * key) while [class] only accepts a simple key/value map object\n *\n * Having Angular understand and adapt to all the different forms of behavior is complicated\n * and unnecessary. Instead, ngClass and ngStyle should have their input values be converted\n * into something that the core-level [style] and [class] bindings understand.\n *\n * This [StylingDiffer] class handles this conversion by creating a new input value each time\n * the inner representation of the binding value have changed.\n *\n * ## Why do we care about ngStyle/ngClass?\n * The styling algorithm code (documented inside of `render3/interfaces/styling.ts`) needs to\n * respect and understand the styling values emitted through ngStyle and ngClass (when they\n * are present and used in a template).\n *\n * Instead of having these directives manage styling on their own, they should be included\n * into the Angular styling algorithm that exists for [style] and [class] bindings.\n *\n * Here's why:\n *\n * - If ngStyle/ngClass is used in combination with [style]/[class] bindings then the\n *   styles and classes would fall out of sync and be applied and updated at\n *   inconsistent times\n * - Both ngClass/ngStyle do not respect [class.name] and [style.prop] bindings\n *   (they will write over them given the right combination of events)\n *\n *   ```\n *   <!-- if `w1` is updated then it will always override `w2`\n *        if `w2` is updated then it will always override `w1`\n *        if both are updated at the same time then `w1` wins -->\n *   <div [ngStyle]=\"{width:w1}\" [style.width]=\"w2\">...</div>\n *\n *   <!-- if `w1` is updated then it will always lose to `w2`\n *        if `w2` is updated then it will always override `w1`\n *        if both are updated at the same time then `w2` wins -->\n *   <div [style]=\"{width:w1}\" [style.width]=\"w2\">...</div>\n *   ```\n * - ngClass/ngStyle were written as a directives and made use of maps, closures and other\n *   expensive data structures which were evaluated each time CD runs\n * @template T\n */\nclass StylingDiffer {\n    /**\n     * @param {?} _name\n     * @param {?} _options\n     */\n    constructor(_name, _options) {\n        this._name = _name;\n        this._options = _options;\n        this.value = null;\n        this._lastSetValue = null;\n        this._lastSetValueType = 0 /* Null */;\n        this._lastSetValueIdentityChange = false;\n    }\n    /**\n     * Sets (updates) the styling value within the differ.\n     *\n     * Only when `hasValueChanged` is called then this new value will be evaluted\n     * and checked against the previous value.\n     *\n     * @param {?} value the new styling value provided from the ngClass/ngStyle binding\n     * @return {?}\n     */\n    setValue(value) {\n        if (Array.isArray(value)) {\n            this._lastSetValueType = 4 /* Array */;\n        }\n        else if (value instanceof Set) {\n            this._lastSetValueType = 8 /* Set */;\n        }\n        else if (value && typeof value === 'string') {\n            if (!(this._options & 4 /* AllowStringValue */)) {\n                throw new Error(this._name + ' string values are not allowed');\n            }\n            this._lastSetValueType = 1 /* String */;\n        }\n        else {\n            this._lastSetValueType = value ? 2 /* Map */ : 0 /* Null */;\n        }\n        this._lastSetValueIdentityChange = true;\n        this._lastSetValue = value || null;\n    }\n    /**\n     * Determines whether or not the value has changed.\n     *\n     * This function can be called right after `setValue()` is called, but it can also be\n     * called incase the existing value (if it's a collection) changes internally. If the\n     * value is indeed a collection it will do the necessary diffing work and produce a\n     * new object value as assign that to `value`.\n     *\n     * @return {?} whether or not the value has changed in some way.\n     */\n    hasValueChanged() {\n        /** @type {?} */\n        let valueHasChanged = this._lastSetValueIdentityChange;\n        if (!valueHasChanged && !(this._lastSetValueType & 14 /* Collection */))\n            return false;\n        /** @type {?} */\n        let finalValue = null;\n        /** @type {?} */\n        const trimValues = (this._options & 1 /* TrimProperties */) ? true : false;\n        /** @type {?} */\n        const parseOutUnits = (this._options & 8 /* AllowUnits */) ? true : false;\n        /** @type {?} */\n        const allowSubKeys = (this._options & 2 /* AllowSubKeys */) ? true : false;\n        switch (this._lastSetValueType) {\n            // case 1: [input]=\"string\"\n            case 1 /* String */:\n                /** @type {?} */\n                const tokens = ((/** @type {?} */ (this._lastSetValue))).split(/\\s+/g);\n                if (this._options & 16 /* ForceAsMap */) {\n                    finalValue = {};\n                    tokens.forEach((/**\n                     * @param {?} token\n                     * @param {?} i\n                     * @return {?}\n                     */\n                    (token, i) => ((/** @type {?} */ (finalValue)))[token] = true));\n                }\n                else {\n                    finalValue = tokens.reduce((/**\n                     * @param {?} str\n                     * @param {?} token\n                     * @param {?} i\n                     * @return {?}\n                     */\n                    (str, token, i) => str + (i ? ' ' : '') + token));\n                }\n                break;\n            // case 2: [input]=\"{key:value}\"\n            case 2 /* Map */:\n                /** @type {?} */\n                const map = (/** @type {?} */ (this._lastSetValue));\n                /** @type {?} */\n                const keys = Object.keys(map);\n                if (!valueHasChanged) {\n                    if (this.value) {\n                        // we know that the classExp value exists and that it is\n                        // a map (otherwise an identity change would have occurred)\n                        valueHasChanged = mapHasChanged(keys, (/** @type {?} */ (this.value)), map);\n                    }\n                    else {\n                        valueHasChanged = true;\n                    }\n                }\n                if (valueHasChanged) {\n                    finalValue =\n                        bulidMapFromValues(this._name, trimValues, parseOutUnits, allowSubKeys, map, keys);\n                }\n                break;\n            // case 3a: [input]=\"[str1, str2, ...]\"\n            // case 3b: [input]=\"Set\"\n            case 4 /* Array */:\n            case 8 /* Set */:\n                /** @type {?} */\n                const values = Array.from((/** @type {?} */ (this._lastSetValue)));\n                if (!valueHasChanged) {\n                    /** @type {?} */\n                    const keys = Object.keys((/** @type {?} */ (this.value)));\n                    valueHasChanged = !arrayEqualsArray(keys, values);\n                }\n                if (valueHasChanged) {\n                    finalValue =\n                        bulidMapFromValues(this._name, trimValues, parseOutUnits, allowSubKeys, values);\n                }\n                break;\n            // case 4: [input]=\"null|undefined\"\n            default:\n                finalValue = null;\n                break;\n        }\n        if (valueHasChanged) {\n            ((/** @type {?} */ (this))).value = (/** @type {?} */ (finalValue));\n        }\n        return valueHasChanged;\n    }\n}\nif (false) {\n    /** @type {?} */\n    StylingDiffer.prototype.value;\n    /**\n     * @type {?}\n     * @private\n     */\n    StylingDiffer.prototype._lastSetValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    StylingDiffer.prototype._lastSetValueType;\n    /**\n     * @type {?}\n     * @private\n     */\n    StylingDiffer.prototype._lastSetValueIdentityChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    StylingDiffer.prototype._name;\n    /**\n     * @type {?}\n     * @private\n     */\n    StylingDiffer.prototype._options;\n}\n/** @enum {number} */\nconst StylingDifferOptions = {\n    None: 0,\n    TrimProperties: 1,\n    AllowSubKeys: 2,\n    AllowStringValue: 4,\n    AllowUnits: 8,\n    ForceAsMap: 16,\n};\n/** @enum {number} */\nconst StylingDifferValueTypes = {\n    Null: 0,\n    String: 1,\n    Map: 2,\n    Array: 4,\n    Set: 8,\n    Collection: 14,\n};\n/**\n * builds and returns a map based on the values input value\n *\n * If the `keys` param is provided then the `values` param is treated as a\n * string map. Otherwise `values` is treated as a string array.\n * @param {?} errorPrefix\n * @param {?} trim\n * @param {?} parseOutUnits\n * @param {?} allowSubKeys\n * @param {?} values\n * @param {?=} keys\n * @return {?}\n */\nfunction bulidMapFromValues(errorPrefix, trim, parseOutUnits, allowSubKeys, values, keys) {\n    /** @type {?} */\n    const map = {};\n    if (keys) {\n        // case 1: map\n        for (let i = 0; i < keys.length; i++) {\n            /** @type {?} */\n            let key = keys[i];\n            key = trim ? key.trim() : key;\n            /** @type {?} */\n            const value = ((/** @type {?} */ (values)))[key];\n            setMapValues(map, key, value, parseOutUnits, allowSubKeys);\n        }\n    }\n    else {\n        // case 2: array\n        for (let i = 0; i < values.length; i++) {\n            /** @type {?} */\n            let value = ((/** @type {?} */ (values)))[i];\n            assertValidValue(errorPrefix, value);\n            value = trim ? value.trim() : value;\n            setMapValues(map, value, true, false, allowSubKeys);\n        }\n    }\n    return map;\n}\n/**\n * @param {?} errorPrefix\n * @param {?} value\n * @return {?}\n */\nfunction assertValidValue(errorPrefix, value) {\n    if (typeof value !== 'string') {\n        throw new Error(`${errorPrefix} can only toggle CSS classes expressed as strings, got ${value}`);\n    }\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @param {?} parseOutUnits\n * @param {?} allowSubKeys\n * @return {?}\n */\nfunction setMapValues(map, key, value, parseOutUnits, allowSubKeys) {\n    if (allowSubKeys && key.indexOf(' ') > 0) {\n        /** @type {?} */\n        const innerKeys = key.split(/\\s+/g);\n        for (let j = 0; j < innerKeys.length; j++) {\n            setIndividualMapValue(map, innerKeys[j], value, parseOutUnits);\n        }\n    }\n    else {\n        setIndividualMapValue(map, key, value, parseOutUnits);\n    }\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @param {?} parseOutUnits\n * @return {?}\n */\nfunction setIndividualMapValue(map, key, value, parseOutUnits) {\n    if (parseOutUnits) {\n        /** @type {?} */\n        const values = normalizeStyleKeyAndValue(key, value);\n        value = values.value;\n        key = values.key;\n    }\n    map[key] = value;\n}\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction normalizeStyleKeyAndValue(key, value) {\n    /** @type {?} */\n    const index = key.indexOf('.');\n    if (index > 0) {\n        /** @type {?} */\n        const unit = key.substr(index + 1);\n        key = key.substring(0, index);\n        if (value != null) { // we should not convert null values to string\n            value += unit;\n        }\n    }\n    return { key, value };\n}\n/**\n * @param {?} keys\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction mapHasChanged(keys, a, b) {\n    /** @type {?} */\n    const oldKeys = Object.keys(a);\n    /** @type {?} */\n    const newKeys = keys;\n    // the keys are different which means the map changed\n    if (!arrayEqualsArray(oldKeys, newKeys)) {\n        return true;\n    }\n    for (let i = 0; i < newKeys.length; i++) {\n        /** @type {?} */\n        const key = newKeys[i];\n        if (a[key] !== b[key]) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction arrayEqualsArray(a, b) {\n    if (a && b) {\n        if (a.length !== b.length)\n            return false;\n        for (let i = 0; i < a.length; i++) {\n            if (b.indexOf(a[i]) === -1)\n                return false;\n        }\n        return true;\n    }\n    return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used as a token for an injected service within the NgClass directive.\n *\n * NgClass behaves differenly whether or not VE is being used or not. If\n * present then the legacy ngClass diffing algorithm will be used as an\n * injected service. Otherwise the new diffing algorithm (which delegates\n * to the `[class]` binding) will be used. This toggle behavior is done so\n * via the ivy_switch mechanism.\n * @abstract\n */\nclass NgClassImpl {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    NgClassImpl.prototype.setClass = function (value) { };\n    /**\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    NgClassImpl.prototype.setNgClass = function (value) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    NgClassImpl.prototype.applyChanges = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    NgClassImpl.prototype.getValue = function () { };\n}\nclass NgClassR2Impl {\n    /**\n     * @param {?} _iterableDiffers\n     * @param {?} _keyValueDiffers\n     * @param {?} _ngEl\n     * @param {?} _renderer\n     */\n    constructor(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {\n        this._iterableDiffers = _iterableDiffers;\n        this._keyValueDiffers = _keyValueDiffers;\n        this._ngEl = _ngEl;\n        this._renderer = _renderer;\n        this._initialClasses = [];\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return null; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setClass(value) {\n        this._removeClasses(this._initialClasses);\n        this._initialClasses = typeof value === 'string' ? value.split(/\\s+/) : [];\n        this._applyClasses(this._initialClasses);\n        this._applyClasses(this._rawClass);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setNgClass(value) {\n        this._removeClasses(this._rawClass);\n        this._applyClasses(this._initialClasses);\n        this._iterableDiffer = null;\n        this._keyValueDiffer = null;\n        this._rawClass = typeof value === 'string' ? value.split(/\\s+/) : value;\n        if (this._rawClass) {\n            if (ÉµisListLikeIterable(this._rawClass)) {\n                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n            }\n            else {\n                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    applyChanges() {\n        if (this._iterableDiffer) {\n            /** @type {?} */\n            const iterableChanges = this._iterableDiffer.diff((/** @type {?} */ (this._rawClass)));\n            if (iterableChanges) {\n                this._applyIterableChanges(iterableChanges);\n            }\n        }\n        else if (this._keyValueDiffer) {\n            /** @type {?} */\n            const keyValueChanges = this._keyValueDiffer.diff((/** @type {?} */ (this._rawClass)));\n            if (keyValueChanges) {\n                this._applyKeyValueChanges(keyValueChanges);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyKeyValueChanges(changes) {\n        changes.forEachAddedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._toggleClass(record.key, record.currentValue)));\n        changes.forEachChangedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._toggleClass(record.key, record.currentValue)));\n        changes.forEachRemovedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            if (record.previousValue) {\n                this._toggleClass(record.key, false);\n            }\n        }));\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyIterableChanges(changes) {\n        changes.forEachAddedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            if (typeof record.item === 'string') {\n                this._toggleClass(record.item, true);\n            }\n            else {\n                throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${Éµstringify(record.item)}`);\n            }\n        }));\n        changes.forEachRemovedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._toggleClass(record.item, false)));\n    }\n    /**\n     * Applies a collection of CSS classes to the DOM element.\n     *\n     * For argument of type Set and Array CSS class names contained in those collections are always\n     * added.\n     * For argument of type Map CSS class name in the map's key is toggled based on the value (added\n     * for truthy and removed for falsy).\n     * @private\n     * @param {?} rawClassVal\n     * @return {?}\n     */\n    _applyClasses(rawClassVal) {\n        if (rawClassVal) {\n            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n                ((/** @type {?} */ (rawClassVal))).forEach((/**\n                 * @param {?} klass\n                 * @return {?}\n                 */\n                (klass) => this._toggleClass(klass, true)));\n            }\n            else {\n                Object.keys(rawClassVal).forEach((/**\n                 * @param {?} klass\n                 * @return {?}\n                 */\n                klass => this._toggleClass(klass, !!rawClassVal[klass])));\n            }\n        }\n    }\n    /**\n     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup\n     * purposes.\n     * @private\n     * @param {?} rawClassVal\n     * @return {?}\n     */\n    _removeClasses(rawClassVal) {\n        if (rawClassVal) {\n            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n                ((/** @type {?} */ (rawClassVal))).forEach((/**\n                 * @param {?} klass\n                 * @return {?}\n                 */\n                (klass) => this._toggleClass(klass, false)));\n            }\n            else {\n                Object.keys(rawClassVal).forEach((/**\n                 * @param {?} klass\n                 * @return {?}\n                 */\n                klass => this._toggleClass(klass, false)));\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} klass\n     * @param {?} enabled\n     * @return {?}\n     */\n    _toggleClass(klass, enabled) {\n        klass = klass.trim();\n        if (klass) {\n            klass.split(/\\s+/g).forEach((/**\n             * @param {?} klass\n             * @return {?}\n             */\n            klass => {\n                if (enabled) {\n                    this._renderer.addClass(this._ngEl.nativeElement, klass);\n                }\n                else {\n                    this._renderer.removeClass(this._ngEl.nativeElement, klass);\n                }\n            }));\n        }\n    }\n}\nNgClassR2Impl.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nNgClassR2Impl.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: KeyValueDiffers },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR2Impl.prototype._iterableDiffer;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR2Impl.prototype._keyValueDiffer;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR2Impl.prototype._initialClasses;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR2Impl.prototype._rawClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR2Impl.prototype._iterableDiffers;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR2Impl.prototype._keyValueDiffers;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR2Impl.prototype._ngEl;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR2Impl.prototype._renderer;\n}\nclass NgClassR3Impl {\n    constructor() {\n        this._value = null;\n        this._ngClassDiffer = new StylingDiffer('NgClass', 1 /* TrimProperties */ |\n            2 /* AllowSubKeys */ |\n            4 /* AllowStringValue */ | 16 /* ForceAsMap */);\n        this._classStringDiffer = null;\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setClass(value) {\n        // early exit incase the binding gets emitted as an empty value which\n        // means there is no reason to instantiate and diff the values...\n        if (!value && !this._classStringDiffer)\n            return;\n        this._classStringDiffer = this._classStringDiffer ||\n            new StylingDiffer('class', 4 /* AllowStringValue */ | 16 /* ForceAsMap */);\n        this._classStringDiffer.setValue(value);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setNgClass(value) {\n        this._ngClassDiffer.setValue(value);\n    }\n    /**\n     * @return {?}\n     */\n    applyChanges() {\n        /** @type {?} */\n        const classChanged = this._classStringDiffer ? this._classStringDiffer.hasValueChanged() : false;\n        /** @type {?} */\n        const ngClassChanged = this._ngClassDiffer.hasValueChanged();\n        if (classChanged || ngClassChanged) {\n            /** @type {?} */\n            let value = this._ngClassDiffer.value;\n            if (this._classStringDiffer) {\n                /** @type {?} */\n                let classValue = this._classStringDiffer.value;\n                if (classValue) {\n                    value = value ? Object.assign({}, classValue, value) : classValue;\n                }\n            }\n            this._value = value;\n        }\n    }\n}\nNgClassR3Impl.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR3Impl.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR3Impl.prototype._ngClassDiffer;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgClassR3Impl.prototype._classStringDiffer;\n}\n// the implementation for both NgStyleR2Impl and NgStyleR3Impl are\n// not ivy_switch'd away, instead they are only hooked up into the\n// DI via NgStyle's directive's provider property.\n/** @type {?} */\nconst NgClassImplProvider__PRE_R3__ = {\n    provide: NgClassImpl,\n    useClass: NgClassR2Impl\n};\n/** @type {?} */\nconst NgClassImplProvider__POST_R3__ = {\n    provide: NgClassImpl,\n    useClass: NgClassR3Impl\n};\n/** @type {?} */\nconst NgClassImplProvider = NgClassImplProvider__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n * NgClass (as well as NgStyle) behaves differently when loaded in the VE and when not.\n *\n * If the VE is present (which is for older versions of Angular) then NgClass will inject\n * the legacy diffing algorithm as a service and delegate all styling changes to that.\n *\n * If the VE is not present then NgStyle will normalize (through the injected service) and\n * then write all styling changes to the `[style]` binding directly (through a host binding).\n * Then Angular will notice the host binding change and treat the changes as styling\n * changes and apply them via the core styling instructions that exist within Angular.\n */\n// used when the VE is present\n/** @type {?} */\nconst ngClassDirectiveDef__PRE_R3__ = undefined;\n// used when the VE is not present (note the directive will\n// never be instantiated normally because it is apart of a\n// base class)\nconst Éµ0 = /**\n * @return {?}\n */\nfunction () { }, Éµ1 = /**\n * @return {?}\n */\n() => { }, Éµ2 = /**\n * @param {?} rf\n * @param {?} ctx\n * @param {?} elIndex\n * @return {?}\n */\nfunction (rf, ctx, elIndex) {\n    if (rf & 1 /* Create */) {\n        ÉµÉµallocHostVars(1);\n        ÉµÉµstyling();\n    }\n    if (rf & 2 /* Update */) {\n        ÉµÉµclassMap(ctx.getValue());\n        ÉµÉµstylingApply();\n    }\n};\n/** @type {?} */\nconst ngClassDirectiveDef__POST_R3__ = ÉµÉµdefineDirective({\n    type: (/** @type {?} */ ((Éµ0))),\n    selectors: (/** @type {?} */ (null)),\n    factory: (Éµ1),\n    hostBindings: (Éµ2)\n});\n/** @type {?} */\nconst ngClassDirectiveDef = ngClassDirectiveDef__PRE_R3__;\n/**\n * Serves as the base non-VE container for NgClass.\n *\n * While this is a base class that NgClass extends from, the\n * class itself acts as a container for non-VE code to setup\n * a link to the `[class]` host binding (via the static\n * `ngDirectiveDef` property on the class).\n *\n * Note that the `ngDirectiveDef` property's code is switched\n * depending if VE is present or not (this allows for the\n * binding code to be set only for newer versions of Angular).\n *\n * \\@publicApi\n */\nclass NgClassBase {\n    /**\n     * @param {?} _delegate\n     */\n    constructor(_delegate) {\n        this._delegate = _delegate;\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return this._delegate.getValue(); }\n}\n/** @nocollapse */ NgClassBase.ngDirectiveDef = ngClassDirectiveDef;\nif (false) {\n    /** @nocollapse @type {?} */\n    NgClassBase.ngDirectiveDef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    NgClassBase.prototype._delegate;\n}\n/**\n * \\@ngModule CommonModule\n *\n * \\@usageNotes\n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n *\n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n *\n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * \\@description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n * \\@publicApi\n */\nclass NgClass extends NgClassBase {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) { super(delegate); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set klass(value) { this._delegate.setClass(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ngClass(value) {\n        this._delegate.setNgClass(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() { this._delegate.applyChanges(); }\n}\nNgClass.decorators = [\n    { type: Directive, args: [{ selector: '[ngClass]', providers: [NgClassImplProvider] },] }\n];\n/** @nocollapse */\nNgClass.ctorParameters = () => [\n    { type: NgClassImpl }\n];\nNgClass.propDecorators = {\n    klass: [{ type: Input, args: ['class',] }],\n    ngClass: [{ type: Input, args: ['ngClass',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Instantiates a single {\\@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n *\n * \\@usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInjector`: Optional custom {\\@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n *\n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n *\n * ### Syntax\n *\n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {\\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {\\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n *\n * \\@publicApi\n * \\@ngModule CommonModule\n */\nclass NgComponentOutlet {\n    /**\n     * @param {?} _viewContainerRef\n     */\n    constructor(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._componentRef = null;\n        this._moduleRef = null;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._viewContainerRef.clear();\n        this._componentRef = null;\n        if (this.ngComponentOutlet) {\n            /** @type {?} */\n            const elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n            if (changes['ngComponentOutletNgModuleFactory']) {\n                if (this._moduleRef)\n                    this._moduleRef.destroy();\n                if (this.ngComponentOutletNgModuleFactory) {\n                    /** @type {?} */\n                    const parentModule = elInjector.get(NgModuleRef);\n                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n                }\n                else {\n                    this._moduleRef = null;\n                }\n            }\n            /** @type {?} */\n            const componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            /** @type {?} */\n            const componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._moduleRef)\n            this._moduleRef.destroy();\n    }\n}\nNgComponentOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[ngComponentOutlet]' },] }\n];\n/** @nocollapse */\nNgComponentOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nNgComponentOutlet.propDecorators = {\n    ngComponentOutlet: [{ type: Input }],\n    ngComponentOutletInjector: [{ type: Input }],\n    ngComponentOutletContent: [{ type: Input }],\n    ngComponentOutletNgModuleFactory: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    NgComponentOutlet.prototype.ngComponentOutlet;\n    /** @type {?} */\n    NgComponentOutlet.prototype.ngComponentOutletInjector;\n    /** @type {?} */\n    NgComponentOutlet.prototype.ngComponentOutletContent;\n    /** @type {?} */\n    NgComponentOutlet.prototype.ngComponentOutletNgModuleFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgComponentOutlet.prototype._componentRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgComponentOutlet.prototype._moduleRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgComponentOutlet.prototype._viewContainerRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @template T\n */\nclass NgForOfContext {\n    /**\n     * @param {?} $implicit\n     * @param {?} ngForOf\n     * @param {?} index\n     * @param {?} count\n     */\n    constructor($implicit, ngForOf, index, count) {\n        this.$implicit = $implicit;\n        this.ngForOf = ngForOf;\n        this.index = index;\n        this.count = count;\n    }\n    /**\n     * @return {?}\n     */\n    get first() { return this.index === 0; }\n    /**\n     * @return {?}\n     */\n    get last() { return this.index === this.count - 1; }\n    /**\n     * @return {?}\n     */\n    get even() { return this.index % 2 === 0; }\n    /**\n     * @return {?}\n     */\n    get odd() { return !this.even; }\n}\nif (false) {\n    /** @type {?} */\n    NgForOfContext.prototype.$implicit;\n    /** @type {?} */\n    NgForOfContext.prototype.ngForOf;\n    /** @type {?} */\n    NgForOfContext.prototype.index;\n    /** @type {?} */\n    NgForOfContext.prototype.count;\n}\n/**\n * A [structural directive](guide/structural-directives) that renders\n * a template for each item in a collection.\n * The directive is placed on an element, which becomes the parent\n * of the cloned templates.\n *\n * The `ngForOf` directive is generally used in the\n * [shorthand form](guide/structural-directives#the-asterisk--prefix) `*ngFor`.\n * In this form, the template to be rendered for each iteration is the content\n * of an anchor element containing the directive.\n *\n * The following example shows the shorthand syntax with some options,\n * contained in an `<li>` element.\n *\n * ```\n * <li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>\n * ```\n *\n * The shorthand form expands into a long form that uses the `ngForOf` selector\n * on an `<ng-template>` element.\n * The content of the `<ng-template>` element is the `<li>` element that held the\n * short-form directive.\n *\n * Here is the expanded version of the short-form example.\n *\n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * Angular automatically expands the shorthand syntax as it compiles the template.\n * The context for each embedded view is logically merged to the current component\n * context according to its lexical position.\n *\n * When using the shorthand syntax, Angular allows only [one structural directive\n * on an element](guide/structural-directives#one-structural-directive-per-host-element).\n * If you want to iterate conditionally, for example,\n * put the `*ngIf` on a container element that wraps the `*ngFor` element.\n * For futher discussion, see\n * [Structural Directives](guide/structural-directives#one-per-element).\n *\n * \\@usageNotes\n *\n * ### Local variables\n *\n * `NgForOf` provides exported values that can be aliased to local variables.\n * For example:\n *\n *  ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * The following exported values can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ### Change propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls that are present, such as `<input>` elements that accept user input. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).\n *\n * The identities of elements in the iterator can change while the data does not.\n * This can happen, for example, if the iterator is produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response produces objects with\n * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted).\n *\n * To avoid this expensive operation, you can customize the default tracking algorithm.\n * by supplying the `trackBy` option to `NgForOf`.\n * `trackBy` takes a function that has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * @see [Structural Directives](guide/structural-directives)\n * \\@ngModule CommonModule\n * \\@publicApi\n * @template T\n */\nclass NgForOf {\n    /**\n     * @param {?} _viewContainer\n     * @param {?} _template\n     * @param {?} _differs\n     */\n    constructor(_viewContainer, _template, _differs) {\n        this._viewContainer = _viewContainer;\n        this._template = _template;\n        this._differs = _differs;\n        this._ngForOfDirty = true;\n        this._differ = null;\n    }\n    /**\n     * The value of the iterable expression, which can be used as a\n     * [template input variable](guide/structural-directives#template-input-variable).\n     * @param {?} ngForOf\n     * @return {?}\n     */\n    set ngForOf(ngForOf) {\n        this._ngForOf = ngForOf;\n        this._ngForOfDirty = true;\n    }\n    /**\n     * A function that defines how to track changes for items in the iterable.\n     *\n     * When items are added, moved, or removed in the iterable,\n     * the directive must re-render the appropriate DOM nodes.\n     * To minimize churn in the DOM, only nodes that have changed\n     * are re-rendered.\n     *\n     * By default, the change detector assumes that\n     * the object instance identifies the node in the iterable.\n     * When this function is supplied, the directive uses\n     * the result of calling this function to identify the item node,\n     * rather than the identity of the object itself.\n     *\n     * The function receives two inputs,\n     * the iteration index and the node object ID.\n     * @param {?} fn\n     * @return {?}\n     */\n    set ngForTrackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function') {\n            // TODO(vicb): use a log service once there is a public one available\n            if ((/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n                console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n                    `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n            }\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * @return {?}\n     */\n    get ngForTrackBy() { return this._trackByFn; }\n    /**\n     * A reference to the template that is stamped out for each item in the iterable.\n     * @see [template reference variable](guide/template-syntax#template-reference-variables--var-)\n     * @param {?} value\n     * @return {?}\n     */\n    set ngForTemplate(value) {\n        // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n        // The current type is too restrictive; a template that just uses index, for example,\n        // should be acceptable.\n        if (value) {\n            this._template = value;\n        }\n    }\n    /**\n     * Applies the changes when needed.\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._ngForOfDirty) {\n            this._ngForOfDirty = false;\n            // React on ngForOf changes only once all inputs have been initialized\n            /** @type {?} */\n            const value = this._ngForOf;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.ngForTrackBy);\n                }\n                catch (_a) {\n                    throw new Error(`Cannot find a differ supporting object '${value}' of type '${getTypeName(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        if (this._differ) {\n            /** @type {?} */\n            const changes = this._differ.diff(this._ngForOf);\n            if (changes)\n                this._applyChanges(changes);\n        }\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        /** @type {?} */\n        const insertTuples = [];\n        changes.forEachOperation((/**\n         * @param {?} item\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                /** @type {?} */\n                const view = this._viewContainer.createEmbeddedView(this._template, new NgForOfContext((/** @type {?} */ (null)), this._ngForOf, -1, -1), currentIndex === null ? undefined : currentIndex);\n                /** @type {?} */\n                const tuple = new RecordViewTuple(item, view);\n                insertTuples.push(tuple);\n            }\n            else if (currentIndex == null) {\n                this._viewContainer.remove(adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);\n            }\n            else if (adjustedPreviousIndex !== null) {\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainer.get(adjustedPreviousIndex)));\n                this._viewContainer.move(view, currentIndex);\n                /** @type {?} */\n                const tuple = new RecordViewTuple(item, (/** @type {?} */ (view)));\n                insertTuples.push(tuple);\n            }\n        }));\n        for (let i = 0; i < insertTuples.length; i++) {\n            this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n        }\n        for (let i = 0, ilen = this._viewContainer.length; i < ilen; i++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (this._viewContainer.get(i)));\n            viewRef.context.index = i;\n            viewRef.context.count = ilen;\n            viewRef.context.ngForOf = this._ngForOf;\n        }\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (this._viewContainer.get(record.currentIndex)));\n            viewRef.context.$implicit = record.item;\n        }));\n    }\n    /**\n     * @private\n     * @param {?} view\n     * @param {?} record\n     * @return {?}\n     */\n    _perViewChange(view, record) {\n        view.context.$implicit = record.item;\n    }\n    /**\n     * Asserts the correct type of the context for the template that `NgForOf` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type-check compiler that the\n     * `NgForOf` structural directive renders its template with a specific context type.\n     * @template T\n     * @param {?} dir\n     * @param {?} ctx\n     * @return {?}\n     */\n    static ngTemplateContextGuard(dir, ctx) {\n        return true;\n    }\n}\nNgForOf.decorators = [\n    { type: Directive, args: [{ selector: '[ngFor][ngForOf]' },] }\n];\n/** @nocollapse */\nNgForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\nNgForOf.propDecorators = {\n    ngForOf: [{ type: Input }],\n    ngForTrackBy: [{ type: Input }],\n    ngForTemplate: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgForOf.prototype._ngForOf;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgForOf.prototype._ngForOfDirty;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgForOf.prototype._differ;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgForOf.prototype._trackByFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgForOf.prototype._viewContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgForOf.prototype._template;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgForOf.prototype._differs;\n}\n/**\n * @template T\n */\nclass RecordViewTuple {\n    /**\n     * @param {?} record\n     * @param {?} view\n     */\n    constructor(record, view) {\n        this.record = record;\n        this.view = view;\n    }\n}\nif (false) {\n    /** @type {?} */\n    RecordViewTuple.prototype.record;\n    /** @type {?} */\n    RecordViewTuple.prototype.view;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getTypeName(type) {\n    return type['name'] || typeof type;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean.\n * When the expression evaluates to true, Angular renders the template\n * provided in a `then` clause, and when  false or null,\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * A [shorthand form](guide/structural-directives#the-asterisk--prefix) of the directive,\n * `*ngIf=\"condition\"`, is generally used, provided\n * as an attribute of the anchor element for the inserted template.\n * Angular expands this into a more explicit version, in which the anchor element\n * is contained in an `<ng-template>` element.\n *\n * Simple form with shorthand syntax:\n *\n * ```\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\n * ```\n *\n * Simple form with expanded syntax:\n *\n * ```\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\n * true.</div></ng-template>\n * ```\n *\n * Form with an \"else\" block:\n *\n * ```\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Shorthand form with \"then\" and \"else\" blocks:\n *\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Form with storing the value locally:\n *\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\n * ```\n *\n * \\@usageNotes\n *\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\n * as seen in the following  example.\n * The default `else` template is blank.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * To display a template when `expression` evaluates to false, use an `else` template\n * binding as shown in the following example.\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\n * The template can be defined anywhere in the component view, but is typically placed right after\n * `ngIf` for readability.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using an external `then` template\n *\n * In the previous example, the then-clause template is specified inline, as the content of the\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\n * change which template to use at runtime, as shown in the following example.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing a conditional result in a variable\n *\n * You might want to show a set of properties from the same object. If you are waiting\n * for asynchronous data, the object can be undefined.\n * In this case, you can use `ngIf` and store the result of the condition in a local\n * variable as shown in the the following example.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * This code uses only one `AsyncPipe`, so only one subscription is created.\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\n * You can then bind the local `user` repeatedly.\n *\n * The conditional displays the data only if `userStream` returns a value,\n * so you don't need to use the\n * [safe-navigation-operator](guide/template-syntax#safe-navigation-operator) (`?.`)\n * to guard against null values when accessing properties.\n * You can display an alternative template while waiting for the data.\n *\n * ### Shorthand syntax\n *\n * The shorthand syntax `*ngIf` expands into two separate template specifications\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\n * that is meant to show a loading page while waiting for data to be loaded.\n *\n * ```\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\n *  ...\n * </div>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * You can see that the \"else\" clause references the `<ng-template>`\n * with the `#loading` label, and the template for the \"then\" clause\n * is provided as the content of the anchor element.\n *\n * However, when Angular expands the shorthand syntax, it creates\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\n * The anchor element containing the template for the \"then\" clause becomes\n * the content of this unlabeled `<ng-template>` tag.\n *\n * ```\n * <ng-template [ngIf]=\"hero-list\" [ngIfElse]=\"loading\">\n *  <div class=\"hero-list\">\n *   ...\n *  </div>\n * </ng-template>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * The presence of the implicit template object has implications for the nesting of\n * structural directives. For more on this subject, see\n * [Structural Directives](https://angular.io/guide/structural-directives#one-per-element).\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass NgIf {\n    /**\n     * @param {?} _viewContainer\n     * @param {?} templateRef\n     */\n    constructor(_viewContainer, templateRef) {\n        this._viewContainer = _viewContainer;\n        this._context = new NgIfContext();\n        this._thenTemplateRef = null;\n        this._elseTemplateRef = null;\n        this._thenViewRef = null;\n        this._elseViewRef = null;\n        this._thenTemplateRef = templateRef;\n    }\n    /**\n     * The Boolean expression to evaluate as the condition for showing a template.\n     * @param {?} condition\n     * @return {?}\n     */\n    set ngIf(condition) {\n        this._context.$implicit = this._context.ngIf = condition;\n        this._updateView();\n    }\n    /**\n     * A template to show if the condition expression evaluates to true.\n     * @param {?} templateRef\n     * @return {?}\n     */\n    set ngIfThen(templateRef) {\n        assertTemplate('ngIfThen', templateRef);\n        this._thenTemplateRef = templateRef;\n        this._thenViewRef = null; // clear previous view if any.\n        this._updateView();\n    }\n    /**\n     * A template to show if the condition expression evaluates to false.\n     * @param {?} templateRef\n     * @return {?}\n     */\n    set ngIfElse(templateRef) {\n        assertTemplate('ngIfElse', templateRef);\n        this._elseTemplateRef = templateRef;\n        this._elseViewRef = null; // clear previous view if any.\n        this._updateView();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateView() {\n        if (this._context.$implicit) {\n            if (!this._thenViewRef) {\n                this._viewContainer.clear();\n                this._elseViewRef = null;\n                if (this._thenTemplateRef) {\n                    this._thenViewRef =\n                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n                }\n            }\n        }\n        else {\n            if (!this._elseViewRef) {\n                this._viewContainer.clear();\n                this._thenViewRef = null;\n                if (this._elseTemplateRef) {\n                    this._elseViewRef =\n                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n                }\n            }\n        }\n    }\n}\nNgIf.decorators = [\n    { type: Directive, args: [{ selector: '[ngIf]' },] }\n];\n/** @nocollapse */\nNgIf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef }\n];\nNgIf.propDecorators = {\n    ngIf: [{ type: Input }],\n    ngIfThen: [{ type: Input }],\n    ngIfElse: [{ type: Input }]\n};\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgIf.ngIfUseIfTypeGuard;\n    /**\n     * Assert the correct type of the expression bound to the `ngIf` input within the template.\n     *\n     * The presence of this static field is a signal to the Ivy template type check compiler that\n     * when the `NgIf` structural directive renders its template, the type of the expression bound\n     * to `ngIf` should be narrowed in some way. For `NgIf`, the binding expression itself is used to\n     * narrow its type, which allows the strictNullChecks feature of TypeScript to work with `NgIf`.\n     * @type {?}\n     */\n    NgIf.ngTemplateGuard_ngIf;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._context;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._thenTemplateRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._elseTemplateRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._thenViewRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._elseViewRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._viewContainer;\n}\n/**\n * \\@publicApi\n */\nclass NgIfContext {\n    constructor() {\n        this.$implicit = null;\n        this.ngIf = null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    NgIfContext.prototype.$implicit;\n    /** @type {?} */\n    NgIfContext.prototype.ngIf;\n}\n/**\n * @param {?} property\n * @param {?} templateRef\n * @return {?}\n */\nfunction assertTemplate(property, templateRef) {\n    /** @type {?} */\n    const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\n    if (!isTemplateRefOrNull) {\n        throw new Error(`${property} must be a TemplateRef, but received '${Éµstringify(templateRef)}'.`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SwitchView {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _templateRef\n     */\n    constructor(_viewContainerRef, _templateRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._templateRef = _templateRef;\n        this._created = false;\n    }\n    /**\n     * @return {?}\n     */\n    create() {\n        this._created = true;\n        this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        this._created = false;\n        this._viewContainerRef.clear();\n    }\n    /**\n     * @param {?} created\n     * @return {?}\n     */\n    enforceState(created) {\n        if (created && !this._created) {\n            this.create();\n        }\n        else if (!created && this._created) {\n            this.destroy();\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    SwitchView.prototype._created;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwitchView.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwitchView.prototype._templateRef;\n}\n/**\n * \\@ngModule CommonModule\n *\n * \\@description A structural directive that adds or removes templates (displaying or hiding views)\n * when the next match expression matches the switch expression.\n *\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * \\@usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * \\@publicApi\n * @see `NgSwitchCase`\n * @see `NgSwitchDefault`\n * @see [Structural Directives](guide/structural-directives)\n *\n */\nclass NgSwitch {\n    constructor() {\n        this._defaultUsed = false;\n        this._caseCount = 0;\n        this._lastCaseCheckIndex = 0;\n        this._lastCasesMatched = false;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set ngSwitch(newValue) {\n        this._ngSwitch = newValue;\n        if (this._caseCount === 0) {\n            this._updateDefaultCases(true);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _addCase() { return this._caseCount++; }\n    /**\n     * \\@internal\n     * @param {?} view\n     * @return {?}\n     */\n    _addDefault(view) {\n        if (!this._defaultViews) {\n            this._defaultViews = [];\n        }\n        this._defaultViews.push(view);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _matchCase(value) {\n        /** @type {?} */\n        const matched = value == this._ngSwitch;\n        this._lastCasesMatched = this._lastCasesMatched || matched;\n        this._lastCaseCheckIndex++;\n        if (this._lastCaseCheckIndex === this._caseCount) {\n            this._updateDefaultCases(!this._lastCasesMatched);\n            this._lastCaseCheckIndex = 0;\n            this._lastCasesMatched = false;\n        }\n        return matched;\n    }\n    /**\n     * @private\n     * @param {?} useDefault\n     * @return {?}\n     */\n    _updateDefaultCases(useDefault) {\n        if (this._defaultViews && useDefault !== this._defaultUsed) {\n            this._defaultUsed = useDefault;\n            for (let i = 0; i < this._defaultViews.length; i++) {\n                /** @type {?} */\n                const defaultView = this._defaultViews[i];\n                defaultView.enforceState(useDefault);\n            }\n        }\n    }\n}\nNgSwitch.decorators = [\n    { type: Directive, args: [{ selector: '[ngSwitch]' },] }\n];\nNgSwitch.propDecorators = {\n    ngSwitch: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSwitch.prototype._defaultViews;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSwitch.prototype._defaultUsed;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSwitch.prototype._caseCount;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSwitch.prototype._lastCaseCheckIndex;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSwitch.prototype._lastCasesMatched;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSwitch.prototype._ngSwitch;\n}\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * \\@usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * Unlike JavaScript, which uses strict equality, Angular uses loose equality.\n * This means that the empty string, `\"\"` matches 0.\n *\n * \\@publicApi\n * @see `NgSwitch`\n * @see `NgSwitchDefault`\n *\n */\nclass NgSwitchCase {\n    /**\n     * @param {?} viewContainer\n     * @param {?} templateRef\n     * @param {?} ngSwitch\n     */\n    constructor(viewContainer, templateRef, ngSwitch) {\n        this.ngSwitch = ngSwitch;\n        ngSwitch._addCase();\n        this._view = new SwitchView(viewContainer, templateRef);\n    }\n    /**\n     * Performs case matching. For internal use only.\n     * @return {?}\n     */\n    ngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\n}\nNgSwitchCase.decorators = [\n    { type: Directive, args: [{ selector: '[ngSwitchCase]' },] }\n];\n/** @nocollapse */\nNgSwitchCase.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: NgSwitch, decorators: [{ type: Host }] }\n];\nNgSwitchCase.propDecorators = {\n    ngSwitchCase: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSwitchCase.prototype._view;\n    /**\n     * Stores the HTML template to be selected on match.\n     * @type {?}\n     */\n    NgSwitchCase.prototype.ngSwitchCase;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSwitchCase.prototype.ngSwitch;\n}\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * \\@publicApi\n * @see `NgSwitch`\n * @see `NgSwitchCase`\n *\n */\nclass NgSwitchDefault {\n    /**\n     * @param {?} viewContainer\n     * @param {?} templateRef\n     * @param {?} ngSwitch\n     */\n    constructor(viewContainer, templateRef, ngSwitch) {\n        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n    }\n}\nNgSwitchDefault.decorators = [\n    { type: Directive, args: [{ selector: '[ngSwitchDefault]' },] }\n];\n/** @nocollapse */\nNgSwitchDefault.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: NgSwitch, decorators: [{ type: Host }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n *\n * \\@usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n *\n * \\@description\n *\n * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n *\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n *\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n *\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n *\n * \\@publicApi\n */\nclass NgPlural {\n    /**\n     * @param {?} _localization\n     */\n    constructor(_localization) {\n        this._localization = _localization;\n        this._caseViews = {};\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ngPlural(value) {\n        this._switchValue = value;\n        this._updateView();\n    }\n    /**\n     * @param {?} value\n     * @param {?} switchView\n     * @return {?}\n     */\n    addCase(value, switchView) { this._caseViews[value] = switchView; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateView() {\n        this._clearViews();\n        /** @type {?} */\n        const cases = Object.keys(this._caseViews);\n        /** @type {?} */\n        const key = getPluralCategory(this._switchValue, cases, this._localization);\n        this._activateView(this._caseViews[key]);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _clearViews() {\n        if (this._activeView)\n            this._activeView.destroy();\n    }\n    /**\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _activateView(view) {\n        if (view) {\n            this._activeView = view;\n            this._activeView.create();\n        }\n    }\n}\nNgPlural.decorators = [\n    { type: Directive, args: [{ selector: '[ngPlural]' },] }\n];\n/** @nocollapse */\nNgPlural.ctorParameters = () => [\n    { type: NgLocalization }\n];\nNgPlural.propDecorators = {\n    ngPlural: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgPlural.prototype._switchValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgPlural.prototype._activeView;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgPlural.prototype._caseViews;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgPlural.prototype._localization;\n}\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\n * given expression matches the plural expression according to CLDR rules.\n *\n * \\@usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n * ```\n *\n * See {\\@link NgPlural} for more details and example.\n *\n * \\@publicApi\n */\nclass NgPluralCase {\n    /**\n     * @param {?} value\n     * @param {?} template\n     * @param {?} viewContainer\n     * @param {?} ngPlural\n     */\n    constructor(value, template, viewContainer, ngPlural) {\n        this.value = value;\n        /** @type {?} */\n        const isANumber = !isNaN(Number(value));\n        ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n    }\n}\nNgPluralCase.decorators = [\n    { type: Directive, args: [{ selector: '[ngPluralCase]' },] }\n];\n/** @nocollapse */\nNgPluralCase.ctorParameters = () => [\n    { type: String, decorators: [{ type: Attribute, args: ['ngPluralCase',] }] },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: NgPlural, decorators: [{ type: Host }] }\n];\nif (false) {\n    /** @type {?} */\n    NgPluralCase.prototype.value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used as a token for an injected service within the NgStyle directive.\n *\n * NgStyle behaves differenly whether or not VE is being used or not. If\n * present then the legacy ngClass diffing algorithm will be used as an\n * injected service. Otherwise the new diffing algorithm (which delegates\n * to the `[style]` binding) will be used. This toggle behavior is done so\n * via the ivy_switch mechanism.\n * @abstract\n */\nclass NgStyleImpl {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    NgStyleImpl.prototype.getValue = function () { };\n    /**\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    NgStyleImpl.prototype.setNgStyle = function (value) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    NgStyleImpl.prototype.applyChanges = function () { };\n}\nclass NgStyleR2Impl {\n    /**\n     * @param {?} _ngEl\n     * @param {?} _differs\n     * @param {?} _renderer\n     */\n    constructor(_ngEl, _differs, _renderer) {\n        this._ngEl = _ngEl;\n        this._differs = _differs;\n        this._renderer = _renderer;\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return null; }\n    /**\n     * A map of style properties, specified as colon-separated\n     * key-value pairs.\n     * * The key is a style name, with an optional `.<unit>` suffix\n     *    (such as 'top.px', 'font-style.em').\n     * * The value is an expression to be evaluated.\n     * @param {?} values\n     * @return {?}\n     */\n    setNgStyle(values) {\n        this._ngStyle = values;\n        if (!this._differ && values) {\n            this._differ = this._differs.find(values).create();\n        }\n    }\n    /**\n     * Applies the new styles if needed.\n     * @return {?}\n     */\n    applyChanges() {\n        if (this._differ) {\n            /** @type {?} */\n            const changes = this._differ.diff(this._ngStyle);\n            if (changes) {\n                this._applyChanges(changes);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        changes.forEachRemovedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._setStyle(record.key, null)));\n        changes.forEachAddedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._setStyle(record.key, record.currentValue)));\n        changes.forEachChangedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._setStyle(record.key, record.currentValue)));\n    }\n    /**\n     * @private\n     * @param {?} nameAndUnit\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(nameAndUnit, value) {\n        const [name, unit] = nameAndUnit.split('.');\n        value = value != null && unit ? `${value}${unit}` : value;\n        if (value != null) {\n            this._renderer.setStyle(this._ngEl.nativeElement, name, (/** @type {?} */ (value)));\n        }\n        else {\n            this._renderer.removeStyle(this._ngEl.nativeElement, name);\n        }\n    }\n}\nNgStyleR2Impl.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nNgStyleR2Impl.ctorParameters = () => [\n    { type: ElementRef },\n    { type: KeyValueDiffers },\n    { type: Renderer2 }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgStyleR2Impl.prototype._ngStyle;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgStyleR2Impl.prototype._differ;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgStyleR2Impl.prototype._ngEl;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgStyleR2Impl.prototype._differs;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgStyleR2Impl.prototype._renderer;\n}\nclass NgStyleR3Impl {\n    constructor() {\n        this._differ = new StylingDiffer('NgStyle', 8 /* AllowUnits */);\n        this._value = null;\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setNgStyle(value) { this._differ.setValue(value); }\n    /**\n     * @return {?}\n     */\n    applyChanges() {\n        if (this._differ.hasValueChanged()) {\n            this._value = this._differ.value;\n        }\n    }\n}\nNgStyleR3Impl.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgStyleR3Impl.prototype._differ;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgStyleR3Impl.prototype._value;\n}\n// the implementation for both NgClassR2Impl and NgClassR3Impl are\n// not ivy_switch'd away, instead they are only hooked up into the\n// DI via NgStyle's directive's provider property.\n/** @type {?} */\nconst NgStyleImplProvider__PRE_R3__ = {\n    provide: NgStyleImpl,\n    useClass: NgStyleR2Impl\n};\n/** @type {?} */\nconst NgStyleImplProvider__POST_R3__ = {\n    provide: NgStyleImpl,\n    useClass: NgStyleR3Impl\n};\n/** @type {?} */\nconst NgStyleImplProvider = NgStyleImplProvider__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n * NgStyle (as well as NgClass) behaves differently when loaded in the VE and when not.\n *\n * If the VE is present (which is for older versions of Angular) then NgStyle will inject\n * the legacy diffing algorithm as a service and delegate all styling changes to that.\n *\n * If the VE is not present then NgStyle will normalize (through the injected service) and\n * then write all styling changes to the `[style]` binding directly (through a host binding).\n * Then Angular will notice the host binding change and treat the changes as styling\n * changes and apply them via the core styling instructions that exist within Angular.\n */\n// used when the VE is present\n/** @type {?} */\nconst ngStyleDirectiveDef__PRE_R3__ = undefined;\n// used when the VE is not present (note the directive will\n// never be instantiated normally because it is apart of a\n// base class)\nconst Éµ0$1 = /**\n * @return {?}\n */\nfunction () { }, Éµ1$1 = /**\n * @return {?}\n */\n() => { }, Éµ2$1 = /**\n * @param {?} rf\n * @param {?} ctx\n * @param {?} elIndex\n * @return {?}\n */\nfunction (rf, ctx, elIndex) {\n    if (rf & 1 /* Create */) {\n        ÉµÉµstyling();\n    }\n    if (rf & 2 /* Update */) {\n        ÉµÉµstyleMap(ctx.getValue());\n        ÉµÉµstylingApply();\n    }\n};\n/** @type {?} */\nconst ngStyleDirectiveDef__POST_R3__ = ÉµÉµdefineDirective({\n    type: (/** @type {?} */ ((Éµ0$1))),\n    selectors: (/** @type {?} */ (null)),\n    factory: (Éµ1$1),\n    hostBindings: (Éµ2$1)\n});\n/** @type {?} */\nconst ngStyleDirectiveDef = ngStyleDirectiveDef__PRE_R3__;\n/**\n * Serves as the base non-VE container for NgStyle.\n *\n * While this is a base class that NgStyle extends from, the\n * class itself acts as a container for non-VE code to setup\n * a link to the `[style]` host binding (via the static\n * `ngDirectiveDef` property on the class).\n *\n * Note that the `ngDirectiveDef` property's code is switched\n * depending if VE is present or not (this allows for the\n * binding code to be set only for newer versions of Angular).\n *\n * \\@publicApi\n */\nclass NgStyleBase {\n    /**\n     * @param {?} _delegate\n     */\n    constructor(_delegate) {\n        this._delegate = _delegate;\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return this._delegate.getValue(); }\n}\n/** @nocollapse */ NgStyleBase.ngDirectiveDef = ngStyleDirectiveDef;\nif (false) {\n    /** @nocollapse @type {?} */\n    NgStyleBase.ngDirectiveDef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    NgStyleBase.prototype._delegate;\n}\n/**\n * \\@ngModule CommonModule\n *\n * \\@usageNotes\n *\n * Set the font of the containing element to the result of an expression.\n *\n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n * ```\n *\n * Set the width of the containing element to a pixel value returned by an expression.\n *\n * ```\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * ```\n *\n * Set a collection of style values using an expression that returns key-value pairs.\n *\n * ```\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * \\@description\n *\n * An attribute directive that updates styles for the containing HTML element.\n * Sets one or more style properties, specified as colon-separated key-value pairs.\n * The key is a style name, with an optional `.<unit>` suffix\n * (such as 'top.px', 'font-style.em').\n * The value is an expression to be evaluated.\n * The resulting non-null value, expressed in the given unit,\n * is assigned to the given style property.\n * If the result of evaluation is null, the corresponding style is removed.\n *\n * \\@publicApi\n */\nclass NgStyle extends NgStyleBase {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) { super(delegate); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ngStyle(value) { this._delegate.setNgStyle(value); }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() { this._delegate.applyChanges(); }\n}\nNgStyle.decorators = [\n    { type: Directive, args: [{ selector: '[ngStyle]', providers: [NgStyleImplProvider] },] }\n];\n/** @nocollapse */\nNgStyle.ctorParameters = () => [\n    { type: NgStyleImpl }\n];\nNgStyle.propDecorators = {\n    ngStyle: [{ type: Input, args: ['ngStyle',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * \\@usageNotes\n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n * \\@publicApi\n */\nclass NgTemplateOutlet {\n    /**\n     * @param {?} _viewContainerRef\n     */\n    constructor(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._viewRef = null;\n        /**\n         * A context object to attach to the {\\@link EmbeddedViewRef}. This should be an\n         * object, the object's keys will be available for binding by the local template `let`\n         * declarations.\n         * Using the key `$implicit` in the context object will set its value as default.\n         */\n        this.ngTemplateOutletContext = null;\n        /**\n         * A string defining the template reference and optionally the context object for the template.\n         */\n        this.ngTemplateOutlet = null;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const recreateView = this._shouldRecreateView(changes);\n        if (recreateView) {\n            if (this._viewRef) {\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            if (this.ngTemplateOutlet) {\n                this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);\n            }\n        }\n        else {\n            if (this._viewRef && this.ngTemplateOutletContext) {\n                this._updateExistingContext(this.ngTemplateOutletContext);\n            }\n        }\n    }\n    /**\n     * We need to re-create existing embedded view if:\n     * - templateRef has changed\n     * - context has changes\n     *\n     * We mark context object as changed when the corresponding object\n     * shape changes (new properties are added or existing properties are removed).\n     * In other words we consider context with the same properties as \"the same\" even\n     * if object reference changes (see https://github.com/angular/angular/issues/13407).\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _shouldRecreateView(changes) {\n        /** @type {?} */\n        const ctxChange = changes['ngTemplateOutletContext'];\n        return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n    /**\n     * @private\n     * @param {?} ctxChange\n     * @return {?}\n     */\n    _hasContextShapeChanged(ctxChange) {\n        /** @type {?} */\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        /** @type {?} */\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (let propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * @private\n     * @param {?} ctx\n     * @return {?}\n     */\n    _updateExistingContext(ctx) {\n        for (let propName of Object.keys(ctx)) {\n            ((/** @type {?} */ ((/** @type {?} */ (this._viewRef)).context)))[propName] = ((/** @type {?} */ (this.ngTemplateOutletContext)))[propName];\n        }\n    }\n}\nNgTemplateOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[ngTemplateOutlet]' },] }\n];\n/** @nocollapse */\nNgTemplateOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nNgTemplateOutlet.propDecorators = {\n    ngTemplateOutletContext: [{ type: Input }],\n    ngTemplateOutlet: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgTemplateOutlet.prototype._viewRef;\n    /**\n     * A context object to attach to the {\\@link EmbeddedViewRef}. This should be an\n     * object, the object's keys will be available for binding by the local template `let`\n     * declarations.\n     * Using the key `$implicit` in the context object will set its value as default.\n     * @type {?}\n     */\n    NgTemplateOutlet.prototype.ngTemplateOutletContext;\n    /**\n     * A string defining the template reference and optionally the context object for the template.\n     * @type {?}\n     */\n    NgTemplateOutlet.prototype.ngTemplateOutlet;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgTemplateOutlet.prototype._viewContainerRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n * @type {?}\n */\nconst COMMON_DIRECTIVES = [\n    NgClass,\n    NgComponentOutlet,\n    NgForOf,\n    NgIf,\n    NgTemplateOutlet,\n    NgStyle,\n    NgSwitch,\n    NgSwitchCase,\n    NgSwitchDefault,\n    NgPlural,\n    NgPluralCase,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} type\n * @param {?} value\n * @return {?}\n */\nfunction invalidPipeArgumentError(type, value) {\n    return Error(`InvalidPipeArgument: '${value}' for pipe '${Éµstringify(type)}'`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NumberFormatter {\n    /**\n     * @param {?} num\n     * @param {?} locale\n     * @param {?} style\n     * @param {?=} opts\n     * @return {?}\n     */\n    static format(num, locale, style, opts = {}) {\n        const { minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency, currencyAsSymbol = false } = opts;\n        /** @type {?} */\n        const options = {\n            minimumIntegerDigits,\n            minimumFractionDigits,\n            maximumFractionDigits,\n            style: NumberFormatStyle[style].toLowerCase()\n        };\n        if (style == NumberFormatStyle.Currency) {\n            options.currency = typeof currency == 'string' ? currency : undefined;\n            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n        }\n        return new Intl.NumberFormat(locale, options).format(num);\n    }\n}\n/** @type {?} */\nconst DATE_FORMATS_SPLIT$1 = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n/** @type {?} */\nconst PATTERN_ALIASES = {\n    // Keys are quoted so they do not get renamed during closure compilation.\n    'yMMMdjms': datePartGetterFactory(combine([\n        digitCondition('year', 1),\n        nameCondition('month', 3),\n        digitCondition('day', 1),\n        digitCondition('hour', 1),\n        digitCondition('minute', 1),\n        digitCondition('second', 1),\n    ])),\n    'yMdjm': datePartGetterFactory(combine([\n        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n        digitCondition('hour', 1), digitCondition('minute', 1)\n    ])),\n    'yMMMMEEEEd': datePartGetterFactory(combine([\n        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n        digitCondition('day', 1)\n    ])),\n    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n};\n/** @type {?} */\nconst DATE_FORMATS$1 = {\n    // Keys are quoted so they do not get renamed.\n    'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n    'yy': datePartGetterFactory(digitCondition('year', 2)),\n    'y': datePartGetterFactory(digitCondition('year', 1)),\n    'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n    'MMM': datePartGetterFactory(nameCondition('month', 3)),\n    'MM': datePartGetterFactory(digitCondition('month', 2)),\n    'M': datePartGetterFactory(digitCondition('month', 1)),\n    'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n    'L': datePartGetterFactory(nameCondition('month', 1)),\n    'dd': datePartGetterFactory(digitCondition('day', 2)),\n    'd': datePartGetterFactory(digitCondition('day', 1)),\n    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n    'jj': datePartGetterFactory(digitCondition('hour', 2)),\n    'j': datePartGetterFactory(digitCondition('hour', 1)),\n    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n    'm': datePartGetterFactory(digitCondition('minute', 1)),\n    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n    's': datePartGetterFactory(digitCondition('second', 1)),\n    // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n    // we can be just safely rely on using `sss` since we currently don't support single or two digit\n    // fractions\n    'sss': datePartGetterFactory(digitCondition('second', 3)),\n    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n    'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n    'E': datePartGetterFactory(nameCondition('weekday', 1)),\n    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n    'Z': timeZoneGetter$1('short'),\n    'z': timeZoneGetter$1('long'),\n    'ww': datePartGetterFactory({}),\n    // Week of year, padded (00-53). Week 01 is the week with the\n    // first Thursday of the year. not support ?\n    'w': datePartGetterFactory({}),\n    // Week of year (0-53). Week 1 is the week with the first Thursday\n    // of the year not support ?\n    'G': datePartGetterFactory(nameCondition('era', 1)),\n    'GG': datePartGetterFactory(nameCondition('era', 2)),\n    'GGG': datePartGetterFactory(nameCondition('era', 3)),\n    'GGGG': datePartGetterFactory(nameCondition('era', 4))\n};\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction digitModifier(inner) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) {\n        /** @type {?} */\n        const result = inner(date, locale);\n        return result.length == 1 ? '0' + result : result;\n    });\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourClockExtractor(inner) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) { return inner(date, locale).split(' ')[1]; });\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourExtractor(inner) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) { return inner(date, locale).split(' ')[0]; });\n}\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} options\n * @return {?}\n */\nfunction intlDateFormat(date, locale, options) {\n    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n}\n/**\n * @param {?} timezone\n * @return {?}\n */\nfunction timeZoneGetter$1(timezone) {\n    // To workaround `Intl` API restriction for single timezone let format with 24 hours\n    /** @type {?} */\n    const options = { hour: '2-digit', hour12: false, timeZoneName: timezone };\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) {\n        /** @type {?} */\n        const result = intlDateFormat(date, locale, options);\n        // Then extract first 3 letters that related to hours\n        return result ? result.substring(3) : '';\n    });\n}\n/**\n * @param {?} options\n * @param {?} value\n * @return {?}\n */\nfunction hour12Modify(options, value) {\n    options.hour12 = value;\n    return options;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction digitCondition(prop, len) {\n    /** @type {?} */\n    const result = {};\n    result[prop] = len === 2 ? '2-digit' : 'numeric';\n    return result;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction nameCondition(prop, len) {\n    /** @type {?} */\n    const result = {};\n    if (len < 4) {\n        result[prop] = len > 1 ? 'short' : 'narrow';\n    }\n    else {\n        result[prop] = 'long';\n    }\n    return result;\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction combine(options) {\n    return options.reduce((/**\n     * @param {?} merged\n     * @param {?} opt\n     * @return {?}\n     */\n    (merged, opt) => (Object.assign({}, merged, opt))), {});\n}\n/**\n * @param {?} ret\n * @return {?}\n */\nfunction datePartGetterFactory(ret) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    (date, locale) => intlDateFormat(date, locale, ret));\n}\n/** @type {?} */\nconst DATE_FORMATTER_CACHE = new Map();\n/**\n * @param {?} format\n * @param {?} date\n * @param {?} locale\n * @return {?}\n */\nfunction dateFormatter(format, date, locale) {\n    /** @type {?} */\n    const fn = PATTERN_ALIASES[format];\n    if (fn)\n        return fn(date, locale);\n    /** @type {?} */\n    const cacheKey = format;\n    /** @type {?} */\n    let parts = DATE_FORMATTER_CACHE.get(cacheKey);\n    if (!parts) {\n        parts = [];\n        /** @type {?} */\n        let match;\n        DATE_FORMATS_SPLIT$1.exec(format);\n        /** @type {?} */\n        let _format = format;\n        while (_format) {\n            match = DATE_FORMATS_SPLIT$1.exec(_format);\n            if (match) {\n                parts = parts.concat(match.slice(1));\n                _format = (/** @type {?} */ (parts.pop()));\n            }\n            else {\n                parts.push(_format);\n                _format = null;\n            }\n        }\n        DATE_FORMATTER_CACHE.set(cacheKey, parts);\n    }\n    return parts.reduce((/**\n     * @param {?} text\n     * @param {?} part\n     * @return {?}\n     */\n    (text, part) => {\n        /** @type {?} */\n        const fn = DATE_FORMATS$1[part];\n        return text + (fn ? fn(date, locale) : partToTime(part));\n    }), '');\n}\n/**\n * @param {?} part\n * @return {?}\n */\nfunction partToTime(part) {\n    return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}\nclass DateFormatter {\n    /**\n     * @param {?} date\n     * @param {?} locale\n     * @param {?} pattern\n     * @return {?}\n     */\n    static format(date, locale, pattern) {\n        return dateFormatter(pattern, date, locale);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a date according to locale rules.\n *\n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n *\n *\n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n *\n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n *\n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n *\n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n *\n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n *\n * \\@usageNotes\n *\n * ### Examples\n *\n * Assuming `dateObj` is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08)\n * in the _local_ time and locale is 'en-US':\n *\n * {\\@example common/pipes/ts/date_pipe.ts region='DeprecatedDatePipe'}\n *\n * \\@publicApi\n */\nclass DeprecatedDatePipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} pattern\n     * @return {?}\n     */\n    transform(value, pattern = 'mediumDate') {\n        if (value == null || value === '' || value !== value)\n            return null;\n        /** @type {?} */\n        let date;\n        if (typeof value === 'string') {\n            value = value.trim();\n        }\n        if (isDate$1(value)) {\n            date = value;\n        }\n        else if (!isNaN(value - parseFloat(value))) {\n            date = new Date(parseFloat(value));\n        }\n        else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n            /**\n             * For ISO Strings without time the day, month and year must be extracted from the ISO String\n             * before Date creation to avoid time offset and errors in the new Date.\n             * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n             * date, some browsers (e.g. IE 9) will throw an invalid Date error\n             * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the\n             * timeoffset\n             * is applied\n             * Note: ISO months are 0 for January, 1 for February, ...\n             */\n            const [y, m, d] = value.split('-').map((/**\n             * @param {?} val\n             * @return {?}\n             */\n            (val) => parseInt(val, 10)));\n            date = new Date(y, m - 1, d);\n        }\n        else {\n            date = new Date(value);\n        }\n        if (!isDate$1(date)) {\n            /** @type {?} */\n            let match;\n            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n                date = isoStringToDate(match);\n            }\n            else {\n                throw invalidPipeArgumentError(DeprecatedDatePipe, value);\n            }\n        }\n        return DateFormatter.format(date, this._locale, DeprecatedDatePipe._ALIASES[pattern] || pattern);\n    }\n}\n/**\n * \\@internal\n */\nDeprecatedDatePipe._ALIASES = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n};\nDeprecatedDatePipe.decorators = [\n    { type: Pipe, args: [{ name: 'date', pure: true },] }\n];\n/** @nocollapse */\nDeprecatedDatePipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    DeprecatedDatePipe._ALIASES;\n    /**\n     * @type {?}\n     * @private\n     */\n    DeprecatedDatePipe.prototype._locale;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate$1(value) {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?=} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber$1(pipe, locale, value, style, digits, currency = null, currencyAsSymbol = false) {\n    if (value == null)\n        return null;\n    // Convert strings to numbers\n    value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;\n    if (typeof value !== 'number') {\n        throw invalidPipeArgumentError(pipe, value);\n    }\n    /** @type {?} */\n    let minInt;\n    /** @type {?} */\n    let minFraction;\n    /** @type {?} */\n    let maxFraction;\n    if (style !== NumberFormatStyle.Currency) {\n        // rely on Intl default for currency\n        minInt = 1;\n        minFraction = 0;\n        maxFraction = 3;\n    }\n    if (digits) {\n        /** @type {?} */\n        const parts = digits.match(NUMBER_FORMAT_REGEXP);\n        if (parts === null) {\n            throw new Error(`${digits} is not a valid digit info for number pipes`);\n        }\n        if (parts[1] != null) { // min integer digits\n            minInt = parseIntAutoRadix(parts[1]);\n        }\n        if (parts[3] != null) { // min fraction digits\n            minFraction = parseIntAutoRadix(parts[3]);\n        }\n        if (parts[5] != null) { // max fraction digits\n            maxFraction = parseIntAutoRadix(parts[5]);\n        }\n    }\n    return NumberFormatter.format((/** @type {?} */ (value)), locale, style, {\n        minimumIntegerDigits: minInt,\n        minimumFractionDigits: minFraction,\n        maximumFractionDigits: maxFraction,\n        currency: currency,\n        currencyAsSymbol: currencyAsSymbol,\n    });\n}\n/**\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n *\n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n *\n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass DeprecatedDecimalPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} digits\n     * @return {?}\n     */\n    transform(value, digits) {\n        return formatNumber$1(DeprecatedDecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n    }\n}\nDeprecatedDecimalPipe.decorators = [\n    { type: Pipe, args: [{ name: 'number' },] }\n];\n/** @nocollapse */\nDeprecatedDecimalPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DeprecatedDecimalPipe.prototype._locale;\n}\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Formats a number as percentage according to locale rules.\n *\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}\n *\n * \\@publicApi\n */\nclass DeprecatedPercentPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} digits\n     * @return {?}\n     */\n    transform(value, digits) {\n        return formatNumber$1(DeprecatedPercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n    }\n}\nDeprecatedPercentPipe.decorators = [\n    { type: Pipe, args: [{ name: 'percent' },] }\n];\n/** @nocollapse */\nDeprecatedPercentPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DeprecatedPercentPipe.prototype._locale;\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as currency using locale rules.\n *\n * Use `currency` to format a number as currency.\n *\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}\n *\n * \\@publicApi\n */\nclass DeprecatedCurrencyPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} currencyCode\n     * @param {?=} symbolDisplay\n     * @param {?=} digits\n     * @return {?}\n     */\n    transform(value, currencyCode = 'USD', symbolDisplay = false, digits) {\n        return formatNumber$1(DeprecatedCurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);\n    }\n}\nDeprecatedCurrencyPipe.decorators = [\n    { type: Pipe, args: [{ name: 'currency' },] }\n];\n/** @nocollapse */\nDeprecatedCurrencyPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DeprecatedCurrencyPipe.prototype._locale;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A collection of deprecated i18n pipes that require intl api\n *\n * @deprecated from v5\n * @type {?}\n */\nconst COMMON_DEPRECATED_I18N_PIPES = [DeprecatedDecimalPipe, DeprecatedPercentPipe, DeprecatedCurrencyPipe, DeprecatedDatePipe];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction SubscriptionStrategy() { }\nif (false) {\n    /**\n     * @param {?} async\n     * @param {?} updateLatestValue\n     * @return {?}\n     */\n    SubscriptionStrategy.prototype.createSubscription = function (async, updateLatestValue) { };\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    SubscriptionStrategy.prototype.dispose = function (subscription) { };\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    SubscriptionStrategy.prototype.onDestroy = function (subscription) { };\n}\nclass ObservableStrategy {\n    /**\n     * @param {?} async\n     * @param {?} updateLatestValue\n     * @return {?}\n     */\n    createSubscription(async, updateLatestValue) {\n        return async.subscribe({ next: updateLatestValue, error: (/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => { throw e; }) });\n    }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    dispose(subscription) { subscription.unsubscribe(); }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    onDestroy(subscription) { subscription.unsubscribe(); }\n}\nclass PromiseStrategy {\n    /**\n     * @param {?} async\n     * @param {?} updateLatestValue\n     * @return {?}\n     */\n    createSubscription(async, updateLatestValue) {\n        return async.then(updateLatestValue, (/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => { throw e; }));\n    }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    dispose(subscription) { }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    onDestroy(subscription) { }\n}\n/** @type {?} */\nconst _promiseStrategy = new PromiseStrategy();\n/** @type {?} */\nconst _observableStrategy = new ObservableStrategy();\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n *\n * \\@usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * \\@publicApi\n */\nclass AsyncPipe {\n    /**\n     * @param {?} _ref\n     */\n    constructor(_ref) {\n        this._ref = _ref;\n        this._latestValue = null;\n        this._latestReturnedValue = null;\n        this._subscription = null;\n        this._obj = null;\n        this._strategy = (/** @type {?} */ (null));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._dispose();\n        }\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    transform(obj) {\n        if (!this._obj) {\n            if (obj) {\n                this._subscribe(obj);\n            }\n            this._latestReturnedValue = this._latestValue;\n            return this._latestValue;\n        }\n        if (obj !== this._obj) {\n            this._dispose();\n            return this.transform((/** @type {?} */ (obj)));\n        }\n        if (ÉµlooseIdentical(this._latestValue, this._latestReturnedValue)) {\n            return this._latestReturnedValue;\n        }\n        this._latestReturnedValue = this._latestValue;\n        return WrappedValue.wrap(this._latestValue);\n    }\n    /**\n     * @private\n     * @param {?} obj\n     * @return {?}\n     */\n    _subscribe(obj) {\n        this._obj = obj;\n        this._strategy = this._selectStrategy(obj);\n        this._subscription = this._strategy.createSubscription(obj, (/**\n         * @param {?} value\n         * @return {?}\n         */\n        (value) => this._updateLatestValue(obj, value)));\n    }\n    /**\n     * @private\n     * @param {?} obj\n     * @return {?}\n     */\n    _selectStrategy(obj) {\n        if (ÉµisPromise(obj)) {\n            return _promiseStrategy;\n        }\n        if (ÉµisObservable(obj)) {\n            return _observableStrategy;\n        }\n        throw invalidPipeArgumentError(AsyncPipe, obj);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dispose() {\n        this._strategy.dispose((/** @type {?} */ (this._subscription)));\n        this._latestValue = null;\n        this._latestReturnedValue = null;\n        this._subscription = null;\n        this._obj = null;\n    }\n    /**\n     * @private\n     * @param {?} async\n     * @param {?} value\n     * @return {?}\n     */\n    _updateLatestValue(async, value) {\n        if (async === this._obj) {\n            this._latestValue = value;\n            this._ref.markForCheck();\n        }\n    }\n}\nAsyncPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'async', pure: false },] }\n];\n/** @nocollapse */\nAsyncPipe.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AsyncPipe.prototype._latestValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    AsyncPipe.prototype._latestReturnedValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    AsyncPipe.prototype._subscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    AsyncPipe.prototype._obj;\n    /**\n     * @type {?}\n     * @private\n     */\n    AsyncPipe.prototype._strategy;\n    /**\n     * @type {?}\n     * @private\n     */\n    AsyncPipe.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Transforms text to all lower case.\n *\n * @see `UpperCasePipe`\n * @see `TitleCasePipe`\n * \\@usageNotes\n *\n * The following example defines a view that allows the user to enter\n * text, and then uses the pipe to convert the input text to all lower case.\n *\n * <code-example path=\"common/pipes/ts/lowerupper_pipe.ts\" region='LowerUpperPipe'></code-example>\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass LowerCasePipe {\n    /**\n     * @param {?} value The string to transform to lower case.\n     * @return {?}\n     */\n    transform(value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(LowerCasePipe, value);\n        }\n        return value.toLowerCase();\n    }\n}\nLowerCasePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'lowercase' },] }\n];\n//\n// Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result\n// can be achieved by using /\\p{L}\\S*/gu and also known as Unicode Property Escapes\n// (http://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no\n// transpilation of this functionality down to ES5 without external tool, the only solution is\n// to use already transpiled form. Example can be found here -\n// https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1\n//\n/** @type {?} */\nconst unicodeWordMatch = /(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])\\S*/g;\n/**\n * Transforms text to title case.\n * Capitalizes the first letter of each word, and transforms the\n * rest of the word to lower case.\n * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.\n *\n * @see `LowerCasePipe`\n * @see `UpperCasePipe`\n *\n * \\@usageNotes\n * The following example shows the result of transforming various strings into title case.\n *\n * <code-example path=\"common/pipes/ts/titlecase_pipe.ts\" region='TitleCasePipe'></code-example>\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass TitleCasePipe {\n    /**\n     * @param {?} value The string to transform to title case.\n     * @return {?}\n     */\n    transform(value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(TitleCasePipe, value);\n        }\n        return value.replace(unicodeWordMatch, ((/**\n         * @param {?} txt\n         * @return {?}\n         */\n        txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase())));\n    }\n}\nTitleCasePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'titlecase' },] }\n];\n/**\n * Transforms text to all upper case.\n * @see `LowerCasePipe`\n * @see `TitleCasePipe`\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass UpperCasePipe {\n    /**\n     * @param {?} value The string to transform to upper case.\n     * @return {?}\n     */\n    transform(value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(UpperCasePipe, value);\n        }\n        return value.toUpperCase();\n    }\n}\nUpperCasePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'uppercase' },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// clang-format off\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a date value according to locale rules.\n *\n * Only the `en-US` locale data comes with Angular. To localize dates\n * in another language, you must import the corresponding locale data.\n * See the [I18n guide](guide/i18n#i18n-pipes) for more information.\n *\n * @see `formatDate()`\n *\n *\n * \\@usageNotes\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to\n * reformat the date on every change-detection cycle, treat the date as an immutable object\n * and change the reference when the pipe needs to run again.\n *\n * ### Pre-defined format options\n *\n * Examples are given in `en-US` locale.\n *\n * - `'short'`: equivalent to `'M/d/yy, h:mm a'` (`6/15/15, 9:03 AM`).\n * - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (`Jun 15, 2015, 9:03:01 AM`).\n * - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (`June 15, 2015 at 9:03:01 AM\n * GMT+1`).\n * - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (`Monday, June 15, 2015 at\n * 9:03:01 AM GMT+01:00`).\n * - `'shortDate'`: equivalent to `'M/d/yy'` (`6/15/15`).\n * - `'mediumDate'`: equivalent to `'MMM d, y'` (`Jun 15, 2015`).\n * - `'longDate'`: equivalent to `'MMMM d, y'` (`June 15, 2015`).\n * - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (`Monday, June 15, 2015`).\n * - `'shortTime'`: equivalent to `'h:mm a'` (`9:03 AM`).\n * - `'mediumTime'`: equivalent to `'h:mm:ss a'` (`9:03:01 AM`).\n * - `'longTime'`: equivalent to `'h:mm:ss a z'` (`9:03:01 AM GMT+1`).\n * - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (`9:03:01 AM GMT+01:00`).\n *\n * ### Custom format options\n *\n * You can construct a format string using symbols to specify the components\n * of a date-time value, as described in the following table.\n * Format details depend on the locale.\n * Fields marked with (*) are only available in the extra data set for the given locale.\n *\n *  | Field type         | Format      | Description                                                   | Example Value                                              |\n *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\n *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |\n *  |                    | GGGGG       | Narrow                                                        | A                                                          |\n *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |\n *  |                    | MMMM        | Wide                                                          | September                                                  |\n *  |                    | MMMMM       | Narrow                                                        | S                                                          |\n *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |\n *  |                    | LLLL        | Wide                                                          | September                                                  |\n *  |                    | LLLLL       | Narrow                                                        | S                                                          |\n *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |\n *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |\n *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |\n *  |                    | EEEEE       | Narrow                                                        | T                                                          |\n *  |                    | EEEEEE      | Short                                                         | Tu                                                         |\n *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n * Note that timezone correction is not applied to an ISO string that has no time component, such as \"2016-09-19\"\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mm:ss' }}       // output is '43:11'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```\n * \\@Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();\n * }\n * ```\n *\n * \\@publicApi\n */\n// clang-format on\nclass DatePipe {\n    /**\n     * @param {?} locale\n     */\n    constructor(locale) {\n        this.locale = locale;\n    }\n    /**\n     * @param {?} value The date expression: a `Date` object,  a number\n     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).\n     * @param {?=} format The date/time components to include, using predefined options or a\n     * custom format string.\n     * @param {?=} timezone A timezone offset (such as `'+0430'`), or a standard\n     * UTC/GMT or continental US timezone abbreviation.\n     * When not supplied, uses the end-user's local system timezone.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?} A date string in the desired format.\n     */\n    transform(value, format = 'mediumDate', timezone, locale) {\n        if (value == null || value === '' || value !== value)\n            return null;\n        try {\n            return formatDate(value, format, locale || this.locale, timezone);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(DatePipe, error.message);\n        }\n    }\n}\nDatePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'date', pure: true },] }\n];\n/** @nocollapse */\nDatePipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DatePipe.prototype.locale;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _INTERPOLATION_REGEXP = /#/g;\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Maps a value to a string that pluralizes the value according to locale rules.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * \\@publicApi\n */\nclass I18nPluralPipe {\n    /**\n     * @param {?} _localization\n     */\n    constructor(_localization) {\n        this._localization = _localization;\n    }\n    /**\n     * @param {?} value the number to be formatted\n     * @param {?} pluralMap an object that mimics the ICU format, see\n     * http://userguide.icu-project.org/formatparse/messages.\n     * @param {?=} locale a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n     * default).\n     * @return {?}\n     */\n    transform(value, pluralMap, locale) {\n        if (value == null)\n            return '';\n        if (typeof pluralMap !== 'object' || pluralMap === null) {\n            throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n        }\n        /** @type {?} */\n        const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n    }\n}\nI18nPluralPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'i18nPlural', pure: true },] }\n];\n/** @nocollapse */\nI18nPluralPipe.ctorParameters = () => [\n    { type: NgLocalization }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    I18nPluralPipe.prototype._localization;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Generic selector that displays the string that matches the current value.\n *\n * If none of the keys of the `mapping` match the `value`, then the content\n * of the `other` key is returned when present, otherwise an empty string is returned.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n *\n * \\@publicApi\n */\nclass I18nSelectPipe {\n    /**\n     * @param {?} value a string to be internationalized.\n     * @param {?} mapping an object that indicates the text that should be displayed\n     * for different values of the provided `value`.\n     * @return {?}\n     */\n    transform(value, mapping) {\n        if (value == null)\n            return '';\n        if (typeof mapping !== 'object' || typeof value !== 'string') {\n            throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n        }\n        if (mapping.hasOwnProperty(value)) {\n            return mapping[value];\n        }\n        if (mapping.hasOwnProperty('other')) {\n            return mapping['other'];\n        }\n        return '';\n    }\n}\nI18nSelectPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'i18nSelect', pure: true },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Converts a value into its JSON-format representation.  Useful for debugging.\n *\n * \\@usageNotes\n *\n * The following component uses a JSON pipe to convert an object\n * to JSON format, and displays the string in both formats for comparison.\n *\n * {\\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n *\n * \\@publicApi\n */\nclass JsonPipe {\n    /**\n     * @param {?} value A value of any type to convert into a JSON-format string.\n     * @return {?}\n     */\n    transform(value) { return JSON.stringify(value, null, 2); }\n}\nJsonPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'json', pure: false },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template K, V\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction makeKeyValuePair(key, value) {\n    return { key: key, value: value };\n}\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * \\@publicApi\n * @record\n * @template K, V\n */\nfunction KeyValue() { }\nif (false) {\n    /** @type {?} */\n    KeyValue.prototype.key;\n    /** @type {?} */\n    KeyValue.prototype.value;\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * \\@usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue\n * pipe.\n *\n * {\\@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * \\@publicApi\n */\nclass KeyValuePipe {\n    /**\n     * @param {?} differs\n     */\n    constructor(differs) {\n        this.differs = differs;\n        this.keyValues = [];\n    }\n    /**\n     * @template K, V\n     * @param {?} input\n     * @param {?=} compareFn\n     * @return {?}\n     */\n    transform(input, compareFn = defaultComparator) {\n        if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n            return null;\n        }\n        if (!this.differ) {\n            // make a differ for whatever type we've been passed in\n            this.differ = this.differs.find(input).create();\n        }\n        /** @type {?} */\n        const differChanges = this.differ.diff((/** @type {?} */ (input)));\n        if (differChanges) {\n            this.keyValues = [];\n            differChanges.forEachItem((/**\n             * @param {?} r\n             * @return {?}\n             */\n            (r) => {\n                this.keyValues.push(makeKeyValuePair(r.key, (/** @type {?} */ (r.currentValue))));\n            }));\n            this.keyValues.sort(compareFn);\n        }\n        return this.keyValues;\n    }\n}\nKeyValuePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'keyvalue', pure: false },] }\n];\n/** @nocollapse */\nKeyValuePipe.ctorParameters = () => [\n    { type: KeyValueDiffers }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    KeyValuePipe.prototype.differ;\n    /**\n     * @type {?}\n     * @private\n     */\n    KeyValuePipe.prototype.keyValues;\n    /**\n     * @type {?}\n     * @private\n     */\n    KeyValuePipe.prototype.differs;\n}\n/**\n * @template K, V\n * @param {?} keyValueA\n * @param {?} keyValueB\n * @return {?}\n */\nfunction defaultComparator(keyValueA, keyValueB) {\n    /** @type {?} */\n    const a = keyValueA.key;\n    /** @type {?} */\n    const b = keyValueB.key;\n    // if same exit with 0;\n    if (a === b)\n        return 0;\n    // make sure that undefined are at the end of the sort.\n    if (a === undefined)\n        return 1;\n    if (b === undefined)\n        return -1;\n    // make sure that nulls are at the end of the sort.\n    if (a === null)\n        return 1;\n    if (b === null)\n        return -1;\n    if (typeof a == 'string' && typeof b == 'string') {\n        return a < b ? -1 : 1;\n    }\n    if (typeof a == 'number' && typeof b == 'number') {\n        return a - b;\n    }\n    if (typeof a == 'boolean' && typeof b == 'boolean') {\n        return a < b ? -1 : 1;\n    }\n    // `a` and `b` are of different types. Compare their string values.\n    /** @type {?} */\n    const aString = String(a);\n    /** @type {?} */\n    const bString = String(b);\n    return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms a number into a string,\n * formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * If no parameters are specified, the function rounds off to the nearest value using this\n * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).\n * The behavior differs from that of the JavaScript ```Math.round()``` function.\n * In the following case for example, the pipe rounds down where\n * ```Math.round()``` rounds up:\n *\n * ```html\n * -2.5 | number:'1.0-0'\n * > -3\n * Math.round(-2.5)\n * > -2\n * ```\n *\n * @see `formatNumber()`\n *\n * \\@usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * ### Example\n *\n * <code-example path=\"common/pipes/ts/number_pipe.ts\" region='NumberPipe'></code-example>\n *\n * \\@publicApi\n */\nclass DecimalPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value The number to be formatted.\n     * @param {?=} digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `3`.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?}\n     */\n    transform(value, digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        try {\n            /** @type {?} */\n            const num = strToNumber(value);\n            return formatNumber(num, locale, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(DecimalPipe, error.message);\n        }\n    }\n}\nDecimalPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'number' },] }\n];\n/** @nocollapse */\nDecimalPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DecimalPipe.prototype._locale;\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms a number to a percentage\n * string, formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * @see `formatPercent()`\n *\n * \\@usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/percent_pipe.ts\" region='PercentPipe'></code-example>\n *\n * \\@publicApi\n */\nclass PercentPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     *\n     * @param {?} value The number to be formatted as a percentage.\n     * @param {?=} digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `0`.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?}\n     */\n    transform(value, digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        try {\n            /** @type {?} */\n            const num = strToNumber(value);\n            return formatPercent(num, locale, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(PercentPipe, error.message);\n        }\n    }\n}\nPercentPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'percent' },] }\n];\n/** @nocollapse */\nPercentPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PercentPipe.prototype._locale;\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms a number to a currency string, formatted according to locale rules\n * that determine group sizing and separator, decimal-point character,\n * and other locale-specific configurations.\n *\n * @see `getCurrencySymbol()`\n * @see `formatCurrency()`\n *\n * \\@usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/currency_pipe.ts\" region='CurrencyPipe'></code-example>\n *\n * \\@publicApi\n */\nclass CurrencyPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     *\n     * @param {?} value The number to be formatted as currency.\n     * @param {?=} currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\n     * such as `USD` for the US dollar and `EUR` for the euro.\n     * @param {?=} display The format for the currency indicator. One of the following:\n     *   - `code`: Show the code (such as `USD`).\n     *   - `symbol`(default): Show the symbol (such as `$`).\n     *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their\n     * currency.\n     * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the\n     * locale has no narrow symbol, uses the standard symbol for the locale.\n     *   - String: Use the given string value instead of a code or a symbol.\n     * For example, an empty string will suppress the currency & symbol.\n     *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.\n     *\n     * @param {?=} digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `2`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `2`.\n     * If not provided, the number will be formatted with the proper amount of digits,\n     * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\n     * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?}\n     */\n    transform(value, currencyCode, display = 'symbol', digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        if (typeof display === 'boolean') {\n            if ((/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n                console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\n            }\n            display = display ? 'symbol' : 'code';\n        }\n        /** @type {?} */\n        let currency = currencyCode || 'USD';\n        if (display !== 'code') {\n            if (display === 'symbol' || display === 'symbol-narrow') {\n                currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\n            }\n            else {\n                currency = display;\n            }\n        }\n        try {\n            /** @type {?} */\n            const num = strToNumber(value);\n            return formatCurrency(num, locale, currency, currencyCode, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(CurrencyPipe, error.message);\n        }\n    }\n}\nCurrencyPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'currency' },] }\n];\n/** @nocollapse */\nCurrencyPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CurrencyPipe.prototype._locale;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmpty(value) {\n    return value == null || value === '' || value !== value;\n}\n/**\n * Transforms a string into a number (if needed).\n * @param {?} value\n * @return {?}\n */\nfunction strToNumber(value) {\n    // Convert strings to numbers\n    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n        return Number(value);\n    }\n    if (typeof value !== 'number') {\n        throw new Error(`${value} is not a number`);\n    }\n    return value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Creates a new `Array` or `String` containing a subset (slice) of the elements.\n *\n * \\@usageNotes\n *\n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n *\n * When operating on an `Array`, the returned `Array` is always a copy even when all\n * the elements are being returned.\n *\n * When operating on a blank value, the pipe returns the blank value.\n *\n * ### List Example\n *\n * This `ngFor` example:\n *\n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n *\n * produces the following:\n *\n * ```html\n * <li>b</li>\n * <li>c</li>\n * ```\n *\n * ### String Examples\n *\n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n *\n * \\@publicApi\n */\nclass SlicePipe {\n    /**\n     * @param {?} value\n     * @param {?} start\n     * @param {?=} end\n     * @return {?}\n     */\n    transform(value, start, end) {\n        if (value == null)\n            return value;\n        if (!this.supports(value)) {\n            throw invalidPipeArgumentError(SlicePipe, value);\n        }\n        return value.slice(start, end);\n    }\n    /**\n     * @private\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return typeof obj === 'string' || Array.isArray(obj); }\n}\nSlicePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'slice', pure: false },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n * @type {?}\n */\nconst COMMON_PIPES = [\n    AsyncPipe,\n    UpperCasePipe,\n    LowerCasePipe,\n    JsonPipe,\n    SlicePipe,\n    DecimalPipe,\n    PercentPipe,\n    TitleCasePipe,\n    CurrencyPipe,\n    DatePipe,\n    I18nPluralPipe,\n    I18nSelectPipe,\n    KeyValuePipe,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * * The `providers` options configure the NgModule's injector to provide\n * localization dependencies to members.\n * * The `exports` options make the declared directives and pipes available for import\n * by other NgModules.\n *\n * \\@publicApi\n */\nclass CommonModule {\n}\nCommonModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n                exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n                providers: [\n                    { provide: NgLocalization, useClass: NgLocaleLocalization },\n                ],\n            },] }\n];\nconst Éµ0$2 = getPluralCase;\n/**\n * A module that contains the deprecated i18n pipes.\n *\n * @deprecated from v5\n * \\@publicApi\n */\nclass DeprecatedI18NPipesModule {\n}\nDeprecatedI18NPipesModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [COMMON_DEPRECATED_I18N_PIPES],\n                exports: [COMMON_DEPRECATED_I18N_PIPES],\n                providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: Éµ0$2 }],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application in a Web Worker).\n *\n * \\@publicApi\n * @type {?}\n */\nconst DOCUMENT = new InjectionToken('DocumentToken');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst PLATFORM_BROWSER_ID = 'browser';\n/** @type {?} */\nconst PLATFORM_SERVER_ID = 'server';\n/** @type {?} */\nconst PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\n/** @type {?} */\nconst PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n/**\n * Returns whether a platform id represents a browser platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformBrowser(platformId) {\n    return platformId === PLATFORM_BROWSER_ID;\n}\n/**\n * Returns whether a platform id represents a server platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformServer(platformId) {\n    return platformId === PLATFORM_SERVER_ID;\n}\n/**\n * Returns whether a platform id represents a web worker app platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformWorkerApp(platformId) {\n    return platformId === PLATFORM_WORKER_APP_ID;\n}\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformWorkerUi(platformId) {\n    return platformId === PLATFORM_WORKER_UI_ID;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('8.2.14');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewportScroller {\n}\n// De-sugared tree-shakable injection\n// See #23917\n/** @nocollapse */\n/** @nocollapse */ ViewportScroller.ngInjectableDef = ÉµÉµdefineInjectable({\n    token: ViewportScroller,\n    providedIn: 'root',\n    factory: (/**\n     * @nocollapse @return {?}\n     */\n    () => new BrowserViewportScroller(ÉµÉµinject(DOCUMENT), window, ÉµÉµinject(ErrorHandler)))\n});\nif (false) {\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    ViewportScroller.ngInjectableDef;\n    /**\n     * Configures the top offset used when scrolling to an anchor.\n     * @abstract\n     * @param {?} offset A position in screen coordinates (a tuple with x and y values)\n     * or a function that returns the top offset position.\n     *\n     * @return {?}\n     */\n    ViewportScroller.prototype.setOffset = function (offset) { };\n    /**\n     * Retrieves the current scroll position.\n     * @abstract\n     * @return {?} A position in screen coordinates (a tuple with x and y values).\n     */\n    ViewportScroller.prototype.getScrollPosition = function () { };\n    /**\n     * Scrolls to a specified position.\n     * @abstract\n     * @param {?} position A position in screen coordinates (a tuple with x and y values).\n     * @return {?}\n     */\n    ViewportScroller.prototype.scrollToPosition = function (position) { };\n    /**\n     * Scrolls to an anchor element.\n     * @abstract\n     * @param {?} anchor The ID of the anchor element.\n     * @return {?}\n     */\n    ViewportScroller.prototype.scrollToAnchor = function (anchor) { };\n    /**\n     * Disables automatic scroll restoration provided by the browser.\n     * See also [window.history.scrollRestoration\n     * info](https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration).\n     * @abstract\n     * @param {?} scrollRestoration\n     * @return {?}\n     */\n    ViewportScroller.prototype.setHistoryScrollRestoration = function (scrollRestoration) { };\n}\n/**\n * Manages the scroll position for a browser window.\n */\nclass BrowserViewportScroller {\n    /**\n     * @param {?} document\n     * @param {?} window\n     * @param {?} errorHandler\n     */\n    constructor(document, window, errorHandler) {\n        this.document = document;\n        this.window = window;\n        this.errorHandler = errorHandler;\n        this.offset = (/**\n         * @return {?}\n         */\n        () => [0, 0]);\n    }\n    /**\n     * Configures the top offset used when scrolling to an anchor.\n     * @param {?} offset A position in screen coordinates (a tuple with x and y values)\n     * or a function that returns the top offset position.\n     *\n     * @return {?}\n     */\n    setOffset(offset) {\n        if (Array.isArray(offset)) {\n            this.offset = (/**\n             * @return {?}\n             */\n            () => offset);\n        }\n        else {\n            this.offset = offset;\n        }\n    }\n    /**\n     * Retrieves the current scroll position.\n     * @return {?} The position in screen coordinates.\n     */\n    getScrollPosition() {\n        if (this.supportScrollRestoration()) {\n            return [this.window.scrollX, this.window.scrollY];\n        }\n        else {\n            return [0, 0];\n        }\n    }\n    /**\n     * Sets the scroll position.\n     * @param {?} position The new position in screen coordinates.\n     * @return {?}\n     */\n    scrollToPosition(position) {\n        if (this.supportScrollRestoration()) {\n            this.window.scrollTo(position[0], position[1]);\n        }\n    }\n    /**\n     * Scrolls to an anchor element.\n     * @param {?} anchor The ID of the anchor element.\n     * @return {?}\n     */\n    scrollToAnchor(anchor) {\n        if (this.supportScrollRestoration()) {\n            // Escape anything passed to `querySelector` as it can throw errors and stop the application\n            // from working if invalid values are passed.\n            if (this.window.CSS && this.window.CSS.escape) {\n                anchor = this.window.CSS.escape(anchor);\n            }\n            else {\n                anchor = anchor.replace(/(\\\"|\\'\\ |:|\\.|\\[|\\]|,|=)/g, '\\\\$1');\n            }\n            try {\n                /** @type {?} */\n                const elSelectedById = this.document.querySelector(`#${anchor}`);\n                if (elSelectedById) {\n                    this.scrollToElement(elSelectedById);\n                    return;\n                }\n                /** @type {?} */\n                const elSelectedByName = this.document.querySelector(`[name='${anchor}']`);\n                if (elSelectedByName) {\n                    this.scrollToElement(elSelectedByName);\n                    return;\n                }\n            }\n            catch (e) {\n                this.errorHandler.handleError(e);\n            }\n        }\n    }\n    /**\n     * Disables automatic scroll restoration provided by the browser.\n     * @param {?} scrollRestoration\n     * @return {?}\n     */\n    setHistoryScrollRestoration(scrollRestoration) {\n        if (this.supportScrollRestoration()) {\n            /** @type {?} */\n            const history = this.window.history;\n            if (history && history.scrollRestoration) {\n                history.scrollRestoration = scrollRestoration;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} el\n     * @return {?}\n     */\n    scrollToElement(el) {\n        /** @type {?} */\n        const rect = el.getBoundingClientRect();\n        /** @type {?} */\n        const left = rect.left + this.window.pageXOffset;\n        /** @type {?} */\n        const top = rect.top + this.window.pageYOffset;\n        /** @type {?} */\n        const offset = this.offset();\n        this.window.scrollTo(left - offset[0], top - offset[1]);\n    }\n    /**\n     * We only support scroll restoration when we can get a hold of window.\n     * This means that we do not support this behavior when running in a web worker.\n     *\n     * Lifting this restriction right now would require more changes in the dom adapter.\n     * Since webworkers aren't widely used, we will lift it once RouterScroller is\n     * battle-tested.\n     * @private\n     * @return {?}\n     */\n    supportScrollRestoration() {\n        try {\n            return !!this.window && !!this.window.scrollTo;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    BrowserViewportScroller.prototype.offset;\n    /**\n     * @type {?}\n     * @private\n     */\n    BrowserViewportScroller.prototype.document;\n    /**\n     * @type {?}\n     * @private\n     */\n    BrowserViewportScroller.prototype.window;\n    /**\n     * @type {?}\n     * @private\n     */\n    BrowserViewportScroller.prototype.errorHandler;\n}\n/**\n * Provides an empty implementation of the viewport scroller. This will\n * live in \\@angular/common as it will be used by both platform-server and platform-webworker.\n */\nclass NullViewportScroller {\n    /**\n     * Empty implementation\n     * @param {?} offset\n     * @return {?}\n     */\n    setOffset(offset) { }\n    /**\n     * Empty implementation\n     * @return {?}\n     */\n    getScrollPosition() { return [0, 0]; }\n    /**\n     * Empty implementation\n     * @param {?} position\n     * @return {?}\n     */\n    scrollToPosition(position) { }\n    /**\n     * Empty implementation\n     * @param {?} anchor\n     * @return {?}\n     */\n    scrollToAnchor(anchor) { }\n    /**\n     * Empty implementation\n     * @param {?} scrollRestoration\n     * @return {?}\n     */\n    setHistoryScrollRestoration(scrollRestoration) { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { COMMON_DIRECTIVES as Éµangular_packages_common_common_c, NgClassImplProvider as Éµangular_packages_common_common_h, NgClassImplProvider__PRE_R3__ as Éµangular_packages_common_common_g, NgClassR3Impl as Éµangular_packages_common_common_f, NgStyleImplProvider as Éµangular_packages_common_common_k, NgStyleImplProvider__PRE_R3__ as Éµangular_packages_common_common_j, NgStyleR3Impl as Éµangular_packages_common_common_i, DEPRECATED_PLURAL_FN as Éµangular_packages_common_common_a, getPluralCase as Éµangular_packages_common_common_b, COMMON_DEPRECATED_I18N_PIPES as Éµangular_packages_common_common_e, COMMON_PIPES as Éµangular_packages_common_common_d, registerLocaleData as ÉµregisterLocaleData, registerLocaleData, formatDate, formatCurrency, formatNumber, formatPercent, NgLocaleLocalization, NgLocalization, Plural, NumberFormatStyle, FormStyle, TranslationWidth, FormatWidth, NumberSymbol, WeekDay, getNumberOfCurrencyDigits, getCurrencySymbol, getLocaleDayPeriods, getLocaleDayNames, getLocaleMonthNames, getLocaleId, getLocaleEraNames, getLocaleWeekEndRange, getLocaleFirstDayOfWeek, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocalePluralCase, getLocaleTimeFormat, getLocaleNumberSymbol, getLocaleNumberFormat, getLocaleCurrencyName, getLocaleCurrencySymbol, parseCookieValue as ÉµparseCookieValue, CommonModule, DeprecatedI18NPipesModule, NgClass, NgClassBase, NgForOf, NgForOfContext, NgIf, NgIfContext, NgPlural, NgPluralCase, NgStyle, NgStyleBase, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NgComponentOutlet, DOCUMENT, AsyncPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, JsonPipe, LowerCasePipe, CurrencyPipe, DecimalPipe, PercentPipe, SlicePipe, UpperCasePipe, TitleCasePipe, KeyValuePipe, DeprecatedDatePipe, DeprecatedCurrencyPipe, DeprecatedDecimalPipe, DeprecatedPercentPipe, PLATFORM_BROWSER_ID as ÉµPLATFORM_BROWSER_ID, PLATFORM_SERVER_ID as ÉµPLATFORM_SERVER_ID, PLATFORM_WORKER_APP_ID as ÉµPLATFORM_WORKER_APP_ID, PLATFORM_WORKER_UI_ID as ÉµPLATFORM_WORKER_UI_ID, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi, VERSION, ViewportScroller, NullViewportScroller as ÉµNullViewportScroller, NgClassImplProvider__POST_R3__ as ÉµNgClassImplProvider__POST_R3__, NgClassR2Impl as ÉµNgClassR2Impl, NgClassImpl as ÉµNgClassImpl, NgStyleImplProvider__POST_R3__ as ÉµNgStyleImplProvider__POST_R3__, NgStyleR2Impl as ÉµNgStyleR2Impl, NgStyleImpl as ÉµNgStyleImpl, ngStyleDirectiveDef__POST_R3__ as ÉµngStyleDirectiveDef__POST_R3__, ngClassDirectiveDef__POST_R3__ as ÉµngClassDirectiveDef__POST_R3__, PlatformLocation, LOCATION_INITIALIZED, LocationStrategy, APP_BASE_HREF, HashLocationStrategy, PathLocationStrategy, Location };\n//# sourceMappingURL=common.js.map\n","import { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (result instanceof Observable) {\n        return (subscriber) => {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\nexport function first(predicate, defaultValue) {\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n//# sourceMappingURL=first.js.map","import { tap } from './tap';\nimport { EmptyError } from '../util/EmptyError';\nexport const throwIfEmpty = (errorFactory = defaultErrorFactory) => tap({\n    hasValue: false,\n    next() { this.hasValue = true; },\n    complete() {\n        if (!this.hasValue) {\n            throw errorFactory();\n        }\n    }\n});\nfunction defaultErrorFactory() {\n    return new EmptyError();\n}\n//# sourceMappingURL=throwIfEmpty.js.map","import { Subscription } from './Subscription';\nexport class SubjectSubscription extends Subscription {\n    constructor(subject, subscriber) {\n        super();\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        const subject = this.subject;\n        const observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        const subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    }\n}\n//# sourceMappingURL=SubjectSubscription.js.map","import { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nexport class SubjectSubscriber extends Subscriber {\n    constructor(destination) {\n        super(destination);\n        this.destination = destination;\n    }\n}\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    [rxSubscriberSymbol]() {\n        return new SubjectSubscriber(this);\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    next(value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            const { observers } = this;\n            const len = observers.length;\n            const copy = observers.slice();\n            for (let i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    }\n    error(err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        const { observers } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    }\n    complete() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        const { observers } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    }\n    unsubscribe() {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    }\n    _trySubscribe(subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return super._trySubscribe(subscriber);\n        }\n    }\n    _subscribe(subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        const { destination } = this;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    }\n    error(err) {\n        const { destination } = this;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    }\n    complete() {\n        const { destination } = this;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    }\n}\n//# sourceMappingURL=Subject.js.map","import { Observable } from '../Observable';\nexport function scalar(value) {\n    const result = new Observable(subscriber => {\n        subscriber.next(value);\n        subscriber.complete();\n    });\n    result._isScalar = true;\n    result.value = value;\n    return result;\n}\n//# sourceMappingURL=scalar.js.map","export function isObject(x) {\n    return x !== null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map","import { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)) {\n    if (destination.closed) {\n        return;\n    }\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map","import { hostReportError } from './hostReportError';\nexport const subscribeToPromise = (promise) => (subscriber) => {\n    promise.then((value) => {\n        if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n        }\n    }, (err) => subscriber.error(err))\n        .then(null, hostReportError);\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToPromise.js.map","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Number.POSITIVE_INFINITY) {\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map","import { mergeMap } from './mergeMap';\nexport function concatMap(project, resultSelector) {\n    return mergeMap(project, resultSelector, 1);\n}\n//# sourceMappingURL=concatMap.js.map","export function isPromise(value) {\n    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map","/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ÉµparseCookieValue, PlatformLocation, DOCUMENT, isPlatformServer, ÉµPLATFORM_BROWSER_ID, CommonModule } from '@angular/common';\nimport { Éµglobal, Injectable, Inject, InjectionToken, ApplicationInitStatus, APP_INITIALIZER, Injector, setTestabilityGetter, ApplicationRef, NgZone, getDebugNode, NgProbeToken, Optional, ViewEncapsulation, APP_ID, RendererStyleFlags2, PLATFORM_ID, ÉµConsole, SecurityContext, Éµ_sanitizeHtml, Éµ_sanitizeStyle, Éµ_sanitizeUrl, PLATFORM_INITIALIZER, Sanitizer, createPlatformFactory, platformCore, ErrorHandler, ÉµAPP_ROOT, RendererFactory2, Testability, NgModule, ApplicationModule, SkipSelf, ÉµÉµinject, ÉµÉµdefineInjectable, Version } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nlet _DOM = (/** @type {?} */ (null));\n/**\n * @return {?}\n */\nfunction getDOM() {\n    return _DOM;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\nfunction setDOM(adapter) {\n    _DOM = adapter;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\nfunction setRootDomAdapter(adapter) {\n    if (!_DOM) {\n        _DOM = adapter;\n    }\n}\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nclass DomAdapter {\n    constructor() {\n        this.resourceLoaderType = (/** @type {?} */ (null));\n    }\n    /**\n     * Maps attribute names to their corresponding property names for cases\n     * where attribute name doesn't match property name.\n     * @return {?}\n     */\n    get attrToPropMap() { return this._attrToPropMap; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set attrToPropMap(value) { this._attrToPropMap = value; }\n}\nif (false) {\n    /** @type {?} */\n    DomAdapter.prototype.resourceLoaderType;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    DomAdapter.prototype._attrToPropMap;\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.hasProperty = function (element, name) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setProperty = function (el, name, value) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.getProperty = function (el, name) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    DomAdapter.prototype.invoke = function (el, methodName, args) { };\n    /**\n     * @abstract\n     * @param {?} error\n     * @return {?}\n     */\n    DomAdapter.prototype.logError = function (error) { };\n    /**\n     * @abstract\n     * @param {?} error\n     * @return {?}\n     */\n    DomAdapter.prototype.log = function (error) { };\n    /**\n     * @abstract\n     * @param {?} error\n     * @return {?}\n     */\n    DomAdapter.prototype.logGroup = function (error) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.logGroupEnd = function () { };\n    /**\n     * @abstract\n     * @param {?} nodeA\n     * @param {?} nodeB\n     * @return {?}\n     */\n    DomAdapter.prototype.contains = function (nodeA, nodeB) { };\n    /**\n     * @abstract\n     * @param {?} templateHtml\n     * @return {?}\n     */\n    DomAdapter.prototype.parse = function (templateHtml) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    DomAdapter.prototype.querySelector = function (el, selector) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    DomAdapter.prototype.querySelectorAll = function (el, selector) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    DomAdapter.prototype.on = function (el, evt, listener) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    DomAdapter.prototype.onAndCancel = function (el, evt, listener) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} evt\n     * @return {?}\n     */\n    DomAdapter.prototype.dispatchEvent = function (el, evt) { };\n    /**\n     * @abstract\n     * @param {?} eventType\n     * @return {?}\n     */\n    DomAdapter.prototype.createMouseEvent = function (eventType) { };\n    /**\n     * @abstract\n     * @param {?} eventType\n     * @return {?}\n     */\n    DomAdapter.prototype.createEvent = function (eventType) { };\n    /**\n     * @abstract\n     * @param {?} evt\n     * @return {?}\n     */\n    DomAdapter.prototype.preventDefault = function (evt) { };\n    /**\n     * @abstract\n     * @param {?} evt\n     * @return {?}\n     */\n    DomAdapter.prototype.isPrevented = function (evt) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getInnerHTML = function (el) { };\n    /**\n     * Returns content if el is a <template> element, null otherwise.\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getTemplateContent = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getOuterHTML = function (el) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.nodeName = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.nodeValue = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.type = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.content = function (node) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.firstChild = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.nextSibling = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.parentElement = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.childNodes = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.childNodesAsList = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.clearNodes = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.appendChild = function (el, node) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.removeChild = function (el, node) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} newNode\n     * @param {?} oldNode\n     * @return {?}\n     */\n    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.remove = function (el) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.insertBefore = function (parent, ref, node) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} nodes\n     * @return {?}\n     */\n    DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.insertAfter = function (parent, el, node) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setInnerHTML = function (el, value) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getText = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setText = function (el, value) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getValue = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setValue = function (el, value) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getChecked = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setChecked = function (el, value) { };\n    /**\n     * @abstract\n     * @param {?} text\n     * @return {?}\n     */\n    DomAdapter.prototype.createComment = function (text) { };\n    /**\n     * @abstract\n     * @param {?} html\n     * @return {?}\n     */\n    DomAdapter.prototype.createTemplate = function (html) { };\n    /**\n     * @abstract\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.createElement = function (tagName, doc) { };\n    /**\n     * @abstract\n     * @param {?} ns\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };\n    /**\n     * @abstract\n     * @param {?} text\n     * @param {?=} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.createTextNode = function (text, doc) { };\n    /**\n     * @abstract\n     * @param {?} attrName\n     * @param {?} attrValue\n     * @param {?=} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };\n    /**\n     * @abstract\n     * @param {?} css\n     * @param {?=} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.createStyleElement = function (css, doc) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.createShadowRoot = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getShadowRoot = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getHost = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getDistributedNodes = function (el) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.clone = function (node) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.getElementsByClassName = function (element, name) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.getElementsByTagName = function (element, name) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @return {?}\n     */\n    DomAdapter.prototype.classList = function (element) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    DomAdapter.prototype.addClass = function (element, className) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    DomAdapter.prototype.removeClass = function (element, className) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    DomAdapter.prototype.hasClass = function (element, className) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    DomAdapter.prototype.removeStyle = function (element, styleName) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    DomAdapter.prototype.getStyle = function (element, styleName) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @return {?}\n     */\n    DomAdapter.prototype.tagName = function (element) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @return {?}\n     */\n    DomAdapter.prototype.attributeMap = function (element) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.hasAttribute = function (element, attribute) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.getAttribute = function (element, attribute) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setAttribute = function (element, name, value) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.removeAttribute = function (element, attribute) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.templateAwareRoot = function (el) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.createHtmlDocument = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getDefaultDocument = function () { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getBoundingClientRect = function (el) { };\n    /**\n     * @abstract\n     * @param {?} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.getTitle = function (doc) { };\n    /**\n     * @abstract\n     * @param {?} doc\n     * @param {?} newTitle\n     * @return {?}\n     */\n    DomAdapter.prototype.setTitle = function (doc, newTitle) { };\n    /**\n     * @abstract\n     * @param {?} n\n     * @param {?} selector\n     * @return {?}\n     */\n    DomAdapter.prototype.elementMatches = function (n, selector) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.isTemplateElement = function (el) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.isTextNode = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.isCommentNode = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.isElementNode = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.hasShadowRoot = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.isShadowRoot = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.importIntoDoc = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.adoptNode = function (node) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @return {?}\n     */\n    DomAdapter.prototype.getHref = function (element) { };\n    /**\n     * @abstract\n     * @param {?} event\n     * @return {?}\n     */\n    DomAdapter.prototype.getEventKey = function (event) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} baseUrl\n     * @param {?} href\n     * @return {?}\n     */\n    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.supportsDOMEvents = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.supportsNativeShadowDOM = function () { };\n    /**\n     * @abstract\n     * @param {?} doc\n     * @param {?} target\n     * @return {?}\n     */\n    DomAdapter.prototype.getGlobalEventTarget = function (doc, target) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getHistory = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getLocation = function () { };\n    /**\n     * @abstract\n     * @param {?} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.getBaseHref = function (doc) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.resetBaseElement = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getUserAgent = function () { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setData = function (element, name, value) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @return {?}\n     */\n    DomAdapter.prototype.getComputedStyle = function (element) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.getData = function (element, name) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.supportsWebAnimation = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.performanceNow = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getAnimationPrefix = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getTransitionEnd = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.supportsAnimation = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.supportsCookies = function () { };\n    /**\n     * @abstract\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.getCookie = function (name) { };\n    /**\n     * @abstract\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setCookie = function (name, value) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides DOM operations in any browser environment.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nclass GenericBrowserDomAdapter extends DomAdapter {\n    constructor() {\n        super();\n        this._animationPrefix = null;\n        this._transitionEnd = null;\n        try {\n            /** @type {?} */\n            const element = this.createElement('div', document);\n            if (this.getStyle(element, 'animationName') != null) {\n                this._animationPrefix = '';\n            }\n            else {\n                /** @type {?} */\n                const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n                for (let i = 0; i < domPrefixes.length; i++) {\n                    if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\n                        this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n                        break;\n                    }\n                }\n            }\n            /** @type {?} */\n            const transEndEventNames = {\n                WebkitTransition: 'webkitTransitionEnd',\n                MozTransition: 'transitionend',\n                OTransition: 'oTransitionEnd otransitionend',\n                transition: 'transitionend'\n            };\n            Object.keys(transEndEventNames).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            (key) => {\n                if (this.getStyle(element, key) != null) {\n                    this._transitionEnd = transEndEventNames[key];\n                }\n            }));\n        }\n        catch (_a) {\n            this._animationPrefix = null;\n            this._transitionEnd = null;\n        }\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getDistributedNodes(el) { return ((/** @type {?} */ (el))).getDistributedNodes(); }\n    /**\n     * @param {?} el\n     * @param {?} baseUrl\n     * @param {?} href\n     * @return {?}\n     */\n    resolveAndSetHref(el, baseUrl, href) {\n        el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n    }\n    /**\n     * @return {?}\n     */\n    supportsDOMEvents() { return true; }\n    /**\n     * @return {?}\n     */\n    supportsNativeShadowDOM() {\n        return typeof ((/** @type {?} */ (document.body))).createShadowRoot === 'function';\n    }\n    /**\n     * @return {?}\n     */\n    getAnimationPrefix() { return this._animationPrefix ? this._animationPrefix : ''; }\n    /**\n     * @return {?}\n     */\n    getTransitionEnd() { return this._transitionEnd ? this._transitionEnd : ''; }\n    /**\n     * @return {?}\n     */\n    supportsAnimation() {\n        return this._animationPrefix != null && this._transitionEnd != null;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    GenericBrowserDomAdapter.prototype._animationPrefix;\n    /**\n     * @type {?}\n     * @private\n     */\n    GenericBrowserDomAdapter.prototype._transitionEnd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _attrToPropMap = {\n    'class': 'className',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\n/** @type {?} */\nconst DOM_KEY_LOCATION_NUMPAD = 3;\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\n/** @type {?} */\nconst _keyMap = {\n    // The following values are here for cross-browser compatibility and to match the W3C standard\n    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n    '\\b': 'Backspace',\n    '\\t': 'Tab',\n    '\\x7F': 'Delete',\n    '\\x1B': 'Escape',\n    'Del': 'Delete',\n    'Esc': 'Escape',\n    'Left': 'ArrowLeft',\n    'Right': 'ArrowRight',\n    'Up': 'ArrowUp',\n    'Down': 'ArrowDown',\n    'Menu': 'ContextMenu',\n    'Scroll': 'ScrollLock',\n    'Win': 'OS'\n};\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\n/** @type {?} */\nconst _chromeNumKeyPadMap = {\n    'A': '1',\n    'B': '2',\n    'C': '3',\n    'D': '4',\n    'E': '5',\n    'F': '6',\n    'G': '7',\n    'H': '8',\n    'I': '9',\n    'J': '*',\n    'K': '+',\n    'M': '-',\n    'N': '.',\n    'O': '/',\n    '\\x60': '0',\n    '\\x90': 'NumLock'\n};\nconst Éµ0 = /**\n * @return {?}\n */\n() => {\n    if (Éµglobal['Node']) {\n        return Éµglobal['Node'].prototype.contains || (/**\n         * @this {?}\n         * @param {?} node\n         * @return {?}\n         */\n        function (node) {\n            return !!(this.compareDocumentPosition(node) & 16);\n        });\n    }\n    return (/** @type {?} */ (undefined));\n};\n/** @type {?} */\nconst nodeContains = ((Éµ0))();\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nclass BrowserDomAdapter extends GenericBrowserDomAdapter {\n    /**\n     * @param {?} templateHtml\n     * @return {?}\n     */\n    parse(templateHtml) { throw new Error('parse not implemented'); }\n    /**\n     * @return {?}\n     */\n    static makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    hasProperty(element, name) { return name in element; }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) { ((/** @type {?} */ (el)))[name] = value; }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    getProperty(el, name) { return ((/** @type {?} */ (el)))[name]; }\n    /**\n     * @param {?} el\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    invoke(el, methodName, args) { ((/** @type {?} */ (el)))[methodName](...args); }\n    // TODO(tbosch): move this into a separate environment class once we have it\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    logError(error) {\n        if (window.console) {\n            if (console.error) {\n                console.error(error);\n            }\n            else {\n                console.log(error);\n            }\n        }\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    log(error) {\n        if (window.console) {\n            window.console.log && window.console.log(error);\n        }\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    logGroup(error) {\n        if (window.console) {\n            window.console.group && window.console.group(error);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    logGroupEnd() {\n        if (window.console) {\n            window.console.groupEnd && window.console.groupEnd();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get attrToPropMap() { return _attrToPropMap; }\n    /**\n     * @param {?} nodeA\n     * @param {?} nodeB\n     * @return {?}\n     */\n    contains(nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); }\n    /**\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    querySelector(el, selector) { return el.querySelector(selector); }\n    /**\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    querySelectorAll(el, selector) { return el.querySelectorAll(selector); }\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    on(el, evt, listener) { el.addEventListener(evt, listener, false); }\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    onAndCancel(el, evt, listener) {\n        el.addEventListener(evt, listener, false);\n        // Needed to follow Dart's subscription semantic, until fix of\n        // https://code.google.com/p/dart/issues/detail?id=17406\n        return (/**\n         * @return {?}\n         */\n        () => { el.removeEventListener(evt, listener, false); });\n    }\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @return {?}\n     */\n    dispatchEvent(el, evt) { el.dispatchEvent(evt); }\n    /**\n     * @param {?} eventType\n     * @return {?}\n     */\n    createMouseEvent(eventType) {\n        /** @type {?} */\n        const evt = this.getDefaultDocument().createEvent('MouseEvent');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    }\n    /**\n     * @param {?} eventType\n     * @return {?}\n     */\n    createEvent(eventType) {\n        /** @type {?} */\n        const evt = this.getDefaultDocument().createEvent('Event');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    }\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n    preventDefault(evt) {\n        evt.preventDefault();\n        evt.returnValue = false;\n    }\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n    isPrevented(evt) {\n        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getInnerHTML(el) { return el.innerHTML; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getTemplateContent(el) {\n        return 'content' in el && this.isTemplateElement(el) ? ((/** @type {?} */ (el))).content : null;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getOuterHTML(el) { return el.outerHTML; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nodeName(node) { return node.nodeName; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nodeValue(node) { return node.nodeValue; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    type(node) { return node.type; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    content(node) {\n        if (this.hasProperty(node, 'content')) {\n            return ((/** @type {?} */ (node))).content;\n        }\n        else {\n            return node;\n        }\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    firstChild(el) { return el.firstChild; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    nextSibling(el) { return el.nextSibling; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    parentElement(el) { return el.parentNode; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    childNodes(el) { return el.childNodes; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    childNodesAsList(el) {\n        /** @type {?} */\n        const childNodes = el.childNodes;\n        /** @type {?} */\n        const res = new Array(childNodes.length);\n        for (let i = 0; i < childNodes.length; i++) {\n            res[i] = childNodes[i];\n        }\n        return res;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    clearNodes(el) {\n        while (el.firstChild) {\n            el.removeChild(el.firstChild);\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    appendChild(el, node) { el.appendChild(node); }\n    /**\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    removeChild(el, node) { el.removeChild(node); }\n    /**\n     * @param {?} el\n     * @param {?} newChild\n     * @param {?} oldChild\n     * @return {?}\n     */\n    replaceChild(el, newChild, oldChild) { el.replaceChild(newChild, oldChild); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    remove(node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n        return node;\n    }\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} node\n     * @return {?}\n     */\n    insertBefore(parent, ref, node) { parent.insertBefore(node, ref); }\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} nodes\n     * @return {?}\n     */\n    insertAllBefore(parent, ref, nodes) {\n        nodes.forEach((/**\n         * @param {?} n\n         * @return {?}\n         */\n        (n) => parent.insertBefore(n, ref)));\n    }\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} node\n     * @return {?}\n     */\n    insertAfter(parent, ref, node) { parent.insertBefore(node, ref.nextSibling); }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setInnerHTML(el, value) { el.innerHTML = value; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getText(el) { return el.textContent; }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setText(el, value) { el.textContent = value; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getValue(el) { return el.value; }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(el, value) { el.value = value; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getChecked(el) { return el.checked; }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setChecked(el, value) { el.checked = value; }\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    createComment(text) { return this.getDefaultDocument().createComment(text); }\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    createTemplate(html) {\n        /** @type {?} */\n        const t = this.getDefaultDocument().createElement('template');\n        t.innerHTML = html;\n        return t;\n    }\n    /**\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    createElement(tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElement(tagName);\n    }\n    /**\n     * @param {?} ns\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    createElementNS(ns, tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElementNS(ns, tagName);\n    }\n    /**\n     * @param {?} text\n     * @param {?=} doc\n     * @return {?}\n     */\n    createTextNode(text, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createTextNode(text);\n    }\n    /**\n     * @param {?} attrName\n     * @param {?} attrValue\n     * @param {?=} doc\n     * @return {?}\n     */\n    createScriptTag(attrName, attrValue, doc) {\n        doc = doc || this.getDefaultDocument();\n        /** @type {?} */\n        const el = (/** @type {?} */ (doc.createElement('SCRIPT')));\n        el.setAttribute(attrName, attrValue);\n        return el;\n    }\n    /**\n     * @param {?} css\n     * @param {?=} doc\n     * @return {?}\n     */\n    createStyleElement(css, doc) {\n        doc = doc || this.getDefaultDocument();\n        /** @type {?} */\n        const style = (/** @type {?} */ (doc.createElement('style')));\n        this.appendChild(style, this.createTextNode(css, doc));\n        return style;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    createShadowRoot(el) { return ((/** @type {?} */ (el))).createShadowRoot(); }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getShadowRoot(el) { return ((/** @type {?} */ (el))).shadowRoot; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getHost(el) { return ((/** @type {?} */ (el))).host; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    clone(node) { return node.cloneNode(true); }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    getElementsByClassName(element, name) {\n        return element.getElementsByClassName(name);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    getElementsByTagName(element, name) {\n        return element.getElementsByTagName(name);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    classList(element) { return Array.prototype.slice.call(element.classList, 0); }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    addClass(element, className) { element.classList.add(className); }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    removeClass(element, className) { element.classList.remove(className); }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    hasClass(element, className) {\n        return element.classList.contains(className);\n    }\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    setStyle(element, styleName, styleValue) {\n        element.style[styleName] = styleValue;\n    }\n    /**\n     * @param {?} element\n     * @param {?} stylename\n     * @return {?}\n     */\n    removeStyle(element, stylename) {\n        // IE requires '' instead of null\n        // see https://github.com/angular/angular/issues/7916\n        element.style[stylename] = '';\n    }\n    /**\n     * @param {?} element\n     * @param {?} stylename\n     * @return {?}\n     */\n    getStyle(element, stylename) { return element.style[stylename]; }\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    hasStyle(element, styleName, styleValue) {\n        /** @type {?} */\n        const value = this.getStyle(element, styleName) || '';\n        return styleValue ? value == styleValue : value.length > 0;\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    tagName(element) { return element.tagName; }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    attributeMap(element) {\n        /** @type {?} */\n        const res = new Map();\n        /** @type {?} */\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            const attrib = elAttrs.item(i);\n            res.set(attrib.name, attrib.value);\n        }\n        return res;\n    }\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    hasAttribute(element, attribute) {\n        return element.hasAttribute(attribute);\n    }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} attribute\n     * @return {?}\n     */\n    hasAttributeNS(element, ns, attribute) {\n        return element.hasAttributeNS(ns, attribute);\n    }\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    getAttribute(element, attribute) {\n        return element.getAttribute(attribute);\n    }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @return {?}\n     */\n    getAttributeNS(element, ns, name) {\n        return element.getAttributeNS(ns, name);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setAttribute(element, name, value) { element.setAttribute(name, value); }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setAttributeNS(element, ns, name, value) {\n        element.setAttributeNS(ns, name, value);\n    }\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    removeAttribute(element, attribute) { element.removeAttribute(attribute); }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @return {?}\n     */\n    removeAttributeNS(element, ns, name) {\n        element.removeAttributeNS(ns, name);\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    templateAwareRoot(el) { return this.isTemplateElement(el) ? this.content(el) : el; }\n    /**\n     * @return {?}\n     */\n    createHtmlDocument() {\n        return document.implementation.createHTMLDocument('fakeTitle');\n    }\n    /**\n     * @return {?}\n     */\n    getDefaultDocument() { return document; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getBoundingClientRect(el) {\n        try {\n            return el.getBoundingClientRect();\n        }\n        catch (_a) {\n            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\n        }\n    }\n    /**\n     * @param {?} doc\n     * @return {?}\n     */\n    getTitle(doc) { return doc.title; }\n    /**\n     * @param {?} doc\n     * @param {?} newTitle\n     * @return {?}\n     */\n    setTitle(doc, newTitle) { doc.title = newTitle || ''; }\n    /**\n     * @param {?} n\n     * @param {?} selector\n     * @return {?}\n     */\n    elementMatches(n, selector) {\n        if (this.isElementNode(n)) {\n            return n.matches && n.matches(selector) ||\n                n.msMatchesSelector && n.msMatchesSelector(selector) ||\n                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n        }\n        return false;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    isTemplateElement(el) {\n        return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isTextNode(node) { return node.nodeType === Node.TEXT_NODE; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isCommentNode(node) { return node.nodeType === Node.COMMENT_NODE; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isElementNode(node) { return node.nodeType === Node.ELEMENT_NODE; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    hasShadowRoot(node) {\n        return node.shadowRoot != null && node instanceof HTMLElement;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isShadowRoot(node) { return node instanceof DocumentFragment; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    importIntoDoc(node) { return document.importNode(this.templateAwareRoot(node), true); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    adoptNode(node) { return document.adoptNode(node); }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getHref(el) { return (/** @type {?} */ (el.getAttribute('href'))); }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    getEventKey(event) {\n        /** @type {?} */\n        let key = event.key;\n        if (key == null) {\n            key = event.keyIdentifier;\n            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n            // Safari cf\n            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n            if (key == null) {\n                return 'Unidentified';\n            }\n            if (key.startsWith('U+')) {\n                key = String.fromCharCode(parseInt(key.substring(2), 16));\n                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n                    // There is a bug in Chrome for numeric keypad keys:\n                    // https://code.google.com/p/chromium/issues/detail?id=155654\n                    // 1, 2, 3 ... are reported as A, B, C ...\n                    key = ((/** @type {?} */ (_chromeNumKeyPadMap)))[key];\n                }\n            }\n        }\n        return _keyMap[key] || key;\n    }\n    /**\n     * @param {?} doc\n     * @param {?} target\n     * @return {?}\n     */\n    getGlobalEventTarget(doc, target) {\n        if (target === 'window') {\n            return window;\n        }\n        if (target === 'document') {\n            return doc;\n        }\n        if (target === 'body') {\n            return doc.body;\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    getHistory() { return window.history; }\n    /**\n     * @return {?}\n     */\n    getLocation() { return window.location; }\n    /**\n     * @param {?} doc\n     * @return {?}\n     */\n    getBaseHref(doc) {\n        /** @type {?} */\n        const href = getBaseElementHref();\n        return href == null ? null : relativePath(href);\n    }\n    /**\n     * @return {?}\n     */\n    resetBaseElement() { baseElement = null; }\n    /**\n     * @return {?}\n     */\n    getUserAgent() { return window.navigator.userAgent; }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setData(element, name, value) {\n        this.setAttribute(element, 'data-' + name, value);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    getData(element, name) {\n        return this.getAttribute(element, 'data-' + name);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    getComputedStyle(element) { return getComputedStyle(element); }\n    // TODO(tbosch): move this into a separate environment class once we have it\n    /**\n     * @return {?}\n     */\n    supportsWebAnimation() {\n        return typeof ((/** @type {?} */ (Element))).prototype['animate'] === 'function';\n    }\n    /**\n     * @return {?}\n     */\n    performanceNow() {\n        // performance.now() is not available in all browsers, see\n        // http://caniuse.com/#search=performance.now\n        return window.performance && window.performance.now ? window.performance.now() :\n            new Date().getTime();\n    }\n    /**\n     * @return {?}\n     */\n    supportsCookies() { return true; }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getCookie(name) { return ÉµparseCookieValue(document.cookie, name); }\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setCookie(name, value) {\n        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n        // not clear other cookies.\n        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    }\n}\n/** @type {?} */\nlet baseElement = null;\n/**\n * @return {?}\n */\nfunction getBaseElementHref() {\n    if (!baseElement) {\n        baseElement = (/** @type {?} */ (document.querySelector('base')));\n        if (!baseElement) {\n            return null;\n        }\n    }\n    return baseElement.getAttribute('href');\n}\n// based on urlUtils.js in AngularJS 1\n/** @type {?} */\nlet urlParsingNode;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction relativePath(url) {\n    if (!urlParsingNode) {\n        urlParsingNode = document.createElement('a');\n    }\n    urlParsingNode.setAttribute('href', url);\n    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n        '/' + urlParsingNode.pathname;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction supportsState() {\n    return !!window.history.pushState;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n */\nclass BrowserPlatformLocation extends PlatformLocation {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n        this._init();\n    }\n    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _init() {\n        ((/** @type {?} */ (this))).location = getDOM().getLocation();\n        this._history = getDOM().getHistory();\n    }\n    /**\n     * @return {?}\n     */\n    getBaseHrefFromDOM() { return (/** @type {?} */ (getDOM().getBaseHref(this._doc))); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onHashChange(fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n    }\n    /**\n     * @return {?}\n     */\n    get href() { return this.location.href; }\n    /**\n     * @return {?}\n     */\n    get protocol() { return this.location.protocol; }\n    /**\n     * @return {?}\n     */\n    get hostname() { return this.location.hostname; }\n    /**\n     * @return {?}\n     */\n    get port() { return this.location.port; }\n    /**\n     * @return {?}\n     */\n    get pathname() { return this.location.pathname; }\n    /**\n     * @return {?}\n     */\n    get search() { return this.location.search; }\n    /**\n     * @return {?}\n     */\n    get hash() { return this.location.hash; }\n    /**\n     * @param {?} newPath\n     * @return {?}\n     */\n    set pathname(newPath) { this.location.pathname = newPath; }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @return {?}\n     */\n    pushState(state, title, url) {\n        if (supportsState()) {\n            this._history.pushState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @return {?}\n     */\n    replaceState(state, title, url) {\n        if (supportsState()) {\n            this._history.replaceState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    forward() { this._history.forward(); }\n    /**\n     * @return {?}\n     */\n    back() { this._history.back(); }\n    /**\n     * @return {?}\n     */\n    getState() { return this._history.state; }\n}\nBrowserPlatformLocation.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserPlatformLocation.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /** @type {?} */\n    BrowserPlatformLocation.prototype.location;\n    /**\n     * @type {?}\n     * @private\n     */\n    BrowserPlatformLocation.prototype._history;\n    /**\n     * @type {?}\n     * @private\n     */\n    BrowserPlatformLocation.prototype._doc;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n * @type {?}\n */\nconst TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n/**\n * @param {?} transitionId\n * @param {?} document\n * @param {?} injector\n * @return {?}\n */\nfunction appInitializerFactory(transitionId, document, injector) {\n    return (/**\n     * @return {?}\n     */\n    () => {\n        // Wait for all application initializers to be completed before removing the styles set by\n        // the server.\n        injector.get(ApplicationInitStatus).donePromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const dom = getDOM();\n            /** @type {?} */\n            const styles = Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\n            styles.filter((/**\n             * @param {?} el\n             * @return {?}\n             */\n            el => dom.getAttribute(el, 'ng-transition') === transitionId))\n                .forEach((/**\n             * @param {?} el\n             * @return {?}\n             */\n            el => dom.remove(el)));\n        }));\n    });\n}\n/** @type {?} */\nconst SERVER_TRANSITION_PROVIDERS = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: appInitializerFactory,\n        deps: [TRANSITION_ID, DOCUMENT, Injector],\n        multi: true\n    },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BrowserGetTestability {\n    /**\n     * @return {?}\n     */\n    static init() { setTestabilityGetter(new BrowserGetTestability()); }\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    addToWindow(registry) {\n        Éµglobal['getAngularTestability'] = (/**\n         * @param {?} elem\n         * @param {?=} findInAncestors\n         * @return {?}\n         */\n        (elem, findInAncestors = true) => {\n            /** @type {?} */\n            const testability = registry.findTestabilityInTree(elem, findInAncestors);\n            if (testability == null) {\n                throw new Error('Could not find testability for element.');\n            }\n            return testability;\n        });\n        Éµglobal['getAllAngularTestabilities'] = (/**\n         * @return {?}\n         */\n        () => registry.getAllTestabilities());\n        Éµglobal['getAllAngularRootElements'] = (/**\n         * @return {?}\n         */\n        () => registry.getAllRootElements());\n        /** @type {?} */\n        const whenAllStable = (/**\n         * @param {?} callback\n         * @return {?}\n         */\n        (callback /** TODO #9100 */) => {\n            /** @type {?} */\n            const testabilities = Éµglobal['getAllAngularTestabilities']();\n            /** @type {?} */\n            let count = testabilities.length;\n            /** @type {?} */\n            let didWork = false;\n            /** @type {?} */\n            const decrement = (/**\n             * @param {?} didWork_\n             * @return {?}\n             */\n            function (didWork_ /** TODO #9100 */) {\n                didWork = didWork || didWork_;\n                count--;\n                if (count == 0) {\n                    callback(didWork);\n                }\n            });\n            testabilities.forEach((/**\n             * @param {?} testability\n             * @return {?}\n             */\n            function (testability /** TODO #9100 */) {\n                testability.whenStable(decrement);\n            }));\n        });\n        if (!Éµglobal['frameworkStabilizers']) {\n            Éµglobal['frameworkStabilizers'] = [];\n        }\n        Éµglobal['frameworkStabilizers'].push(whenAllStable);\n    }\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    findTestabilityInTree(registry, elem, findInAncestors) {\n        if (elem == null) {\n            return null;\n        }\n        /** @type {?} */\n        const t = registry.getTestability(elem);\n        if (t != null) {\n            return t;\n        }\n        else if (!findInAncestors) {\n            return null;\n        }\n        if (getDOM().isShadowRoot(elem)) {\n            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n        }\n        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\n/** @type {?} */\nconst DASH_CASE_REGEXP = /-([a-z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, (/**\n     * @param {...?} m\n     * @return {?}\n     */\n    (...m) => '-' + m[1].toLowerCase()));\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, (/**\n     * @param {...?} m\n     * @return {?}\n     */\n    (...m) => m[1].toUpperCase()));\n}\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param {?} value The value to export.\n * @return {?}\n */\nfunction exportNgVar(name, value) {\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\n        // Note: we can't export `ng` when using closure enhanced optimization as:\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\n        //   for typings for angularJS (via `goog.provide('ng....')`).\n        /** @type {?} */\n        const ng = Éµglobal['ng'] = ((/** @type {?} */ (Éµglobal['ng']))) || {};\n        ng[name] = value;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst Éµ0$1 = /**\n * @return {?}\n */\n() => ({\n    'ApplicationRef': ApplicationRef,\n    'NgZone': NgZone,\n});\n/** @type {?} */\nconst CORE_TOKENS = ((Éµ0$1))();\n/** @type {?} */\nconst INSPECT_GLOBAL_NAME = 'probe';\n/** @type {?} */\nconst CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n/**\n * Returns a {\\@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n * @param {?} element\n * @return {?}\n */\nfunction inspectNativeElement(element) {\n    return getDebugNode(element);\n}\n/**\n * @param {?} coreTokens\n * @return {?}\n */\nfunction _createNgProbe(coreTokens) {\n    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n    exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign({}, CORE_TOKENS, _ngProbeTokensToMap(coreTokens || [])));\n    return (/**\n     * @return {?}\n     */\n    () => inspectNativeElement);\n}\n/**\n * @param {?} tokens\n * @return {?}\n */\nfunction _ngProbeTokensToMap(tokens) {\n    return tokens.reduce((/**\n     * @param {?} prev\n     * @param {?} t\n     * @return {?}\n     */\n    (prev, t) => (prev[t.name] = t.token, prev)), {});\n}\n/**\n * In Ivy, we don't support NgProbe because we have our own set of testing utilities\n * with more robust functionality.\n *\n * We shouldn't bring in NgProbe because it prevents DebugNode and friends from\n * tree-shaking properly.\n * @type {?}\n */\nconst ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n * @type {?}\n */\nconst ELEMENT_PROBE_PROVIDERS__PRE_R3__ = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: _createNgProbe,\n        deps: [\n            [NgProbeToken, new Optional()],\n        ],\n        multi: true,\n    },\n];\n/** @type {?} */\nconst ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token for the event-manager plug-in service.\n *\n * \\@publicApi\n * @type {?}\n */\nconst EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * \\@publicApi\n */\nclass EventManager {\n    /**\n     * Initializes an instance of the event-manager service.\n     * @param {?} plugins\n     * @param {?} _zone\n     */\n    constructor(plugins, _zone) {\n        this._zone = _zone;\n        this._eventNameToPlugin = new Map();\n        plugins.forEach((/**\n         * @template THIS\n         * @this {THIS}\n         * @param {?} p\n         * @return {THIS}\n         */\n        p => p.manager = this));\n        this._plugins = plugins.slice().reverse();\n    }\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param {?} element The HTML element to receive event notifications.\n     * @param {?} eventName The name of the event to listen for.\n     * @param {?} handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @return {?} A callback function that can be used to remove the handler.\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const plugin = this._findPluginFor(eventName);\n        return plugin.addEventListener(element, eventName, handler);\n    }\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param {?} target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param {?} eventName The name of the event to listen for.\n     * @param {?} handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @return {?} A callback function that can be used to remove the handler.\n     */\n    addGlobalEventListener(target, eventName, handler) {\n        /** @type {?} */\n        const plugin = this._findPluginFor(eventName);\n        return plugin.addGlobalEventListener(target, eventName, handler);\n    }\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     * @return {?}\n     */\n    getZone() { return this._zone; }\n    /**\n     * \\@internal\n     * @param {?} eventName\n     * @return {?}\n     */\n    _findPluginFor(eventName) {\n        /** @type {?} */\n        const plugin = this._eventNameToPlugin.get(eventName);\n        if (plugin) {\n            return plugin;\n        }\n        /** @type {?} */\n        const plugins = this._plugins;\n        for (let i = 0; i < plugins.length; i++) {\n            /** @type {?} */\n            const plugin = plugins[i];\n            if (plugin.supports(eventName)) {\n                this._eventNameToPlugin.set(eventName, plugin);\n                return plugin;\n            }\n        }\n        throw new Error(`No event manager plugin found for event ${eventName}`);\n    }\n}\nEventManager.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nEventManager.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] }] },\n    { type: NgZone }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    EventManager.prototype._plugins;\n    /**\n     * @type {?}\n     * @private\n     */\n    EventManager.prototype._eventNameToPlugin;\n    /**\n     * @type {?}\n     * @private\n     */\n    EventManager.prototype._zone;\n}\n/**\n * @abstract\n */\nclass EventManagerPlugin {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    addGlobalEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const target = getDOM().getGlobalEventTarget(this._doc, element);\n        if (!target) {\n            throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n        }\n        return this.addEventListener(target, eventName, handler);\n    }\n}\nif (false) {\n    /** @type {?} */\n    EventManagerPlugin.prototype.manager;\n    /**\n     * @type {?}\n     * @private\n     */\n    EventManagerPlugin.prototype._doc;\n    /**\n     * @abstract\n     * @param {?} eventName\n     * @return {?}\n     */\n    EventManagerPlugin.prototype.supports = function (eventName) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SharedStylesHost {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._stylesSet = new Set();\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    addStyles(styles) {\n        /** @type {?} */\n        const additions = new Set();\n        styles.forEach((/**\n         * @param {?} style\n         * @return {?}\n         */\n        style => {\n            if (!this._stylesSet.has(style)) {\n                this._stylesSet.add(style);\n                additions.add(style);\n            }\n        }));\n        this.onStylesAdded(additions);\n    }\n    /**\n     * @param {?} additions\n     * @return {?}\n     */\n    onStylesAdded(additions) { }\n    /**\n     * @return {?}\n     */\n    getAllStyles() { return Array.from(this._stylesSet); }\n}\nSharedStylesHost.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     * @protected\n     */\n    SharedStylesHost.prototype._stylesSet;\n}\nclass DomSharedStylesHost extends SharedStylesHost {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n        this._hostNodes = new Set();\n        this._styleNodes = new Set();\n        this._hostNodes.add(_doc.head);\n    }\n    /**\n     * @private\n     * @param {?} styles\n     * @param {?} host\n     * @return {?}\n     */\n    _addStylesToHost(styles, host) {\n        styles.forEach((/**\n         * @param {?} style\n         * @return {?}\n         */\n        (style) => {\n            /** @type {?} */\n            const styleEl = this._doc.createElement('style');\n            styleEl.textContent = style;\n            this._styleNodes.add(host.appendChild(styleEl));\n        }));\n    }\n    /**\n     * @param {?} hostNode\n     * @return {?}\n     */\n    addHost(hostNode) {\n        this._addStylesToHost(this._stylesSet, hostNode);\n        this._hostNodes.add(hostNode);\n    }\n    /**\n     * @param {?} hostNode\n     * @return {?}\n     */\n    removeHost(hostNode) { this._hostNodes.delete(hostNode); }\n    /**\n     * @param {?} additions\n     * @return {?}\n     */\n    onStylesAdded(additions) {\n        this._hostNodes.forEach((/**\n         * @param {?} hostNode\n         * @return {?}\n         */\n        hostNode => this._addStylesToHost(additions, hostNode)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this._styleNodes.forEach((/**\n     * @param {?} styleNode\n     * @return {?}\n     */\n    styleNode => getDOM().remove(styleNode))); }\n}\nDomSharedStylesHost.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomSharedStylesHost.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DomSharedStylesHost.prototype._hostNodes;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomSharedStylesHost.prototype._styleNodes;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomSharedStylesHost.prototype._doc;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NAMESPACE_URIS = {\n    'svg': 'http://www.w3.org/2000/svg',\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'xlink': 'http://www.w3.org/1999/xlink',\n    'xml': 'http://www.w3.org/XML/1998/namespace',\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n/** @type {?} */\nconst COMPONENT_REGEX = /%COMP%/g;\n/** @type {?} */\nconst COMPONENT_VARIABLE = '%COMP%';\n/** @type {?} */\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\n/** @type {?} */\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nfunction shimContentAttribute(componentShortId) {\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nfunction shimHostAttribute(componentShortId) {\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} compId\n * @param {?} styles\n * @param {?} target\n * @return {?}\n */\nfunction flattenStyles(compId, styles, target) {\n    for (let i = 0; i < styles.length; i++) {\n        /** @type {?} */\n        let style = styles[i];\n        if (Array.isArray(style)) {\n            flattenStyles(compId, style, target);\n        }\n        else {\n            style = style.replace(COMPONENT_REGEX, compId);\n            target.push(style);\n        }\n    }\n    return target;\n}\n/**\n * @param {?} eventHandler\n * @return {?}\n */\nfunction decoratePreventDefault(eventHandler) {\n    return (/**\n     * @param {?} event\n     * @return {?}\n     */\n    (event) => {\n        /** @type {?} */\n        const allowDefaultBehavior = eventHandler(event);\n        if (allowDefaultBehavior === false) {\n            // TODO(tbosch): move preventDefault into event plugins...\n            event.preventDefault();\n            event.returnValue = false;\n        }\n    });\n}\nclass DomRendererFactory2 {\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     * @param {?} appId\n     */\n    constructor(eventManager, sharedStylesHost, appId) {\n        this.eventManager = eventManager;\n        this.sharedStylesHost = sharedStylesHost;\n        this.appId = appId;\n        this.rendererByCompId = new Map();\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n    }\n    /**\n     * @param {?} element\n     * @param {?} type\n     * @return {?}\n     */\n    createRenderer(element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        switch (type.encapsulation) {\n            case ViewEncapsulation.Emulated: {\n                /** @type {?} */\n                let renderer = this.rendererByCompId.get(type.id);\n                if (!renderer) {\n                    renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);\n                    this.rendererByCompId.set(type.id, renderer);\n                }\n                ((/** @type {?} */ (renderer))).applyToHost(element);\n                return renderer;\n            }\n            case ViewEncapsulation.Native:\n            case ViewEncapsulation.ShadowDom:\n                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n            default: {\n                if (!this.rendererByCompId.has(type.id)) {\n                    /** @type {?} */\n                    const styles = flattenStyles(type.id, type.styles, []);\n                    this.sharedStylesHost.addStyles(styles);\n                    this.rendererByCompId.set(type.id, this.defaultRenderer);\n                }\n                return this.defaultRenderer;\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    begin() { }\n    /**\n     * @return {?}\n     */\n    end() { }\n}\nDomRendererFactory2.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomRendererFactory2.ctorParameters = () => [\n    { type: EventManager },\n    { type: DomSharedStylesHost },\n    { type: String, decorators: [{ type: Inject, args: [APP_ID,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DomRendererFactory2.prototype.rendererByCompId;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomRendererFactory2.prototype.defaultRenderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomRendererFactory2.prototype.eventManager;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomRendererFactory2.prototype.sharedStylesHost;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomRendererFactory2.prototype.appId;\n}\nclass DefaultDomRenderer2 {\n    /**\n     * @param {?} eventManager\n     */\n    constructor(eventManager) {\n        this.eventManager = eventManager;\n        this.data = Object.create(null);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() { }\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    createElement(name, namespace) {\n        if (namespace) {\n            // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key\n            // will result in undefined, so we just return the namespace here.\n            return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n        }\n        return document.createElement(name);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createComment(value) { return document.createComment(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createText(value) { return document.createTextNode(value); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) { parent.appendChild(newChild); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        if (parent) {\n            parent.insertBefore(newChild, refChild);\n        }\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        if (parent) {\n            parent.removeChild(oldChild);\n        }\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode, preserveContent) {\n        /** @type {?} */\n        let el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n            selectorOrNode;\n        if (!el) {\n            throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n        }\n        if (!preserveContent) {\n            el.textContent = '';\n        }\n        return el;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) { return node.parentNode; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nextSibling(node) { return node.nextSibling; }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    setAttribute(el, name, value, namespace) {\n        if (namespace) {\n            name = namespace + ':' + name;\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            /** @type {?} */\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.setAttributeNS(namespaceUri, name, value);\n            }\n            else {\n                el.setAttribute(name, value);\n            }\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    removeAttribute(el, name, namespace) {\n        if (namespace) {\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            /** @type {?} */\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.removeAttributeNS(namespaceUri, name);\n            }\n            else {\n                // TODO(benlesh): Since ivy is passing around full URIs for namespaces\n                // this could result in properties like `http://www.w3.org/2000/svg:cx=\"123\"`,\n                // which is wrong.\n                el.removeAttribute(`${namespace}:${name}`);\n            }\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    addClass(el, name) { el.classList.add(name); }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    removeClass(el, name) { el.classList.remove(name); }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    setStyle(el, style, value, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n        }\n        else {\n            el.style[style] = value;\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    removeStyle(el, style, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.removeProperty(style);\n        }\n        else {\n            // IE requires '' instead of null\n            // see https://github.com/angular/angular/issues/7916\n            el.style[style] = '';\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        checkNoSyntheticProp(name, 'property');\n        el[name] = value;\n    }\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(node, value) { node.nodeValue = value; }\n    /**\n     * @param {?} target\n     * @param {?} event\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, event, callback) {\n        checkNoSyntheticProp(event, 'listener');\n        if (typeof target === 'string') {\n            return (/** @type {?} */ (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback))));\n        }\n        return (/** @type {?} */ ((/** @type {?} */ (this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))))));\n    }\n}\nif (false) {\n    /** @type {?} */\n    DefaultDomRenderer2.prototype.data;\n    /** @type {?} */\n    DefaultDomRenderer2.prototype.destroyNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultDomRenderer2.prototype.eventManager;\n}\nconst Éµ0$2 = /**\n * @return {?}\n */\n() => '@'.charCodeAt(0);\n/** @type {?} */\nconst AT_CHARCODE = ((Éµ0$2))();\n/**\n * @param {?} name\n * @param {?} nameKind\n * @return {?}\n */\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new Error(`Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n    }\n}\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     * @param {?} component\n     * @param {?} appId\n     */\n    constructor(eventManager, sharedStylesHost, component, appId) {\n        super(eventManager);\n        this.component = component;\n        /** @type {?} */\n        const styles = flattenStyles(appId + '-' + component.id, component.styles, []);\n        sharedStylesHost.addStyles(styles);\n        this.contentAttr = shimContentAttribute(appId + '-' + component.id);\n        this.hostAttr = shimHostAttribute(appId + '-' + component.id);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    applyToHost(element) { super.setAttribute(element, this.hostAttr, ''); }\n    /**\n     * @param {?} parent\n     * @param {?} name\n     * @return {?}\n     */\n    createElement(parent, name) {\n        /** @type {?} */\n        const el = super.createElement(parent, name);\n        super.setAttribute(el, this.contentAttr, '');\n        return el;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    EmulatedEncapsulationDomRenderer2.prototype.contentAttr;\n    /**\n     * @type {?}\n     * @private\n     */\n    EmulatedEncapsulationDomRenderer2.prototype.hostAttr;\n    /**\n     * @type {?}\n     * @private\n     */\n    EmulatedEncapsulationDomRenderer2.prototype.component;\n}\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     * @param {?} hostEl\n     * @param {?} component\n     */\n    constructor(eventManager, sharedStylesHost, hostEl, component) {\n        super(eventManager);\n        this.sharedStylesHost = sharedStylesHost;\n        this.hostEl = hostEl;\n        this.component = component;\n        if (component.encapsulation === ViewEncapsulation.ShadowDom) {\n            this.shadowRoot = ((/** @type {?} */ (hostEl))).attachShadow({ mode: 'open' });\n        }\n        else {\n            this.shadowRoot = ((/** @type {?} */ (hostEl))).createShadowRoot();\n        }\n        this.sharedStylesHost.addHost(this.shadowRoot);\n        /** @type {?} */\n        const styles = flattenStyles(component.id, component.styles, []);\n        for (let i = 0; i < styles.length; i++) {\n            /** @type {?} */\n            const styleEl = document.createElement('style');\n            styleEl.textContent = styles[i];\n            this.shadowRoot.appendChild(styleEl);\n        }\n    }\n    /**\n     * @private\n     * @param {?} node\n     * @return {?}\n     */\n    nodeOrShadowRoot(node) { return node === this.hostEl ? this.shadowRoot : node; }\n    /**\n     * @return {?}\n     */\n    destroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) {\n        return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) {\n        return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ShadowDomRenderer.prototype.shadowRoot;\n    /**\n     * @type {?}\n     * @private\n     */\n    ShadowDomRenderer.prototype.sharedStylesHost;\n    /**\n     * @type {?}\n     * @private\n     */\n    ShadowDomRenderer.prototype.hostEl;\n    /**\n     * @type {?}\n     * @private\n     */\n    ShadowDomRenderer.prototype.component;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst Éµ0$3 = /**\n * @return {?}\n */\n() => (typeof Zone !== 'undefined') && ((/** @type {?} */ (Zone)))['__symbol__'] ||\n    (/**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return '__zone_symbol__' + v; });\n/**\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\n * since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n * @type {?}\n */\nconst __symbol__ = ((Éµ0$3))();\n/** @type {?} */\nconst ADD_EVENT_LISTENER = __symbol__('addEventListener');\n/** @type {?} */\nconst REMOVE_EVENT_LISTENER = __symbol__('removeEventListener');\n/** @type {?} */\nconst symbolNames = {};\n/** @type {?} */\nconst FALSE = 'FALSE';\n/** @type {?} */\nconst ANGULAR = 'ANGULAR';\n/** @type {?} */\nconst NATIVE_ADD_LISTENER = 'addEventListener';\n/** @type {?} */\nconst NATIVE_REMOVE_LISTENER = 'removeEventListener';\n// use the same symbol string which is used in zone.js\n/** @type {?} */\nconst stopSymbol = '__zone_symbol__propagationStopped';\n/** @type {?} */\nconst stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\nconst Éµ1 = /**\n * @return {?}\n */\n() => {\n    /** @type {?} */\n    const blackListedEvents = (typeof Zone !== 'undefined') && ((/** @type {?} */ (Zone)))[__symbol__('BLACK_LISTED_EVENTS')];\n    if (blackListedEvents) {\n        /** @type {?} */\n        const res = {};\n        blackListedEvents.forEach((/**\n         * @param {?} eventName\n         * @return {?}\n         */\n        eventName => { res[eventName] = eventName; }));\n        return res;\n    }\n    return undefined;\n};\n/** @type {?} */\nconst blackListedMap = ((Éµ1))();\n/** @type {?} */\nconst isBlackListedEvent = (/**\n * @param {?} eventName\n * @return {?}\n */\nfunction (eventName) {\n    if (!blackListedMap) {\n        return false;\n    }\n    return blackListedMap.hasOwnProperty(eventName);\n});\nconst Éµ2 = isBlackListedEvent;\n/**\n * @record\n */\nfunction TaskData() { }\nif (false) {\n    /** @type {?} */\n    TaskData.prototype.zone;\n    /** @type {?} */\n    TaskData.prototype.handler;\n}\n// a global listener to handle all dom event,\n// so we do not need to create a closure every time\n/** @type {?} */\nconst globalListener = (/**\n * @this {?}\n * @param {?} event\n * @return {?}\n */\nfunction (event) {\n    /** @type {?} */\n    const symbolName = symbolNames[event.type];\n    if (!symbolName) {\n        return;\n    }\n    /** @type {?} */\n    const taskDatas = this[symbolName];\n    if (!taskDatas) {\n        return;\n    }\n    /** @type {?} */\n    const args = [event];\n    if (taskDatas.length === 1) {\n        // if taskDatas only have one element, just invoke it\n        /** @type {?} */\n        const taskData = taskDatas[0];\n        if (taskData.zone !== Zone.current) {\n            // only use Zone.run when Zone.current not equals to stored zone\n            return taskData.zone.run(taskData.handler, this, args);\n        }\n        else {\n            return taskData.handler.apply(this, args);\n        }\n    }\n    else {\n        // copy tasks as a snapshot to avoid event handlers remove\n        // itself or others\n        /** @type {?} */\n        const copiedTasks = taskDatas.slice();\n        for (let i = 0; i < copiedTasks.length; i++) {\n            // if other listener call event.stopImmediatePropagation\n            // just break\n            if (((/** @type {?} */ (event)))[stopSymbol] === true) {\n                break;\n            }\n            /** @type {?} */\n            const taskData = copiedTasks[i];\n            if (taskData.zone !== Zone.current) {\n                // only use Zone.run when Zone.current not equals to stored zone\n                taskData.zone.run(taskData.handler, this, args);\n            }\n            else {\n                taskData.handler.apply(this, args);\n            }\n        }\n    }\n});\nconst Éµ3 = globalListener;\nclass DomEventsPlugin extends EventManagerPlugin {\n    /**\n     * @param {?} doc\n     * @param {?} ngZone\n     * @param {?} platformId\n     */\n    constructor(doc, ngZone, platformId) {\n        super(doc);\n        this.ngZone = ngZone;\n        if (!platformId || !isPlatformServer(platformId)) {\n            this.patchEvent();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    patchEvent() {\n        if (typeof Event === 'undefined' || !Event || !Event.prototype) {\n            return;\n        }\n        if (((/** @type {?} */ (Event.prototype)))[stopMethodSymbol]) {\n            // already patched by zone.js\n            return;\n        }\n        /** @type {?} */\n        const delegate = ((/** @type {?} */ (Event.prototype)))[stopMethodSymbol] =\n            Event.prototype.stopImmediatePropagation;\n        Event.prototype.stopImmediatePropagation = (/**\n         * @this {?}\n         * @return {?}\n         */\n        function () {\n            if (this) {\n                this[stopSymbol] = true;\n            }\n            // We should call native delegate in case in some environment part of\n            // the application will not use the patched Event. Also we cast the\n            // \"arguments\" to any since \"stopImmediatePropagation\" technically does not\n            // accept any arguments, but we don't know what developers pass through the\n            // function and we want to not break these calls.\n            delegate && delegate.apply(this, (/** @type {?} */ (arguments)));\n        });\n    }\n    // This plugin should come last in the list of plugins, because it accepts all\n    // events.\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    supports(eventName) { return true; }\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    addEventListener(element, eventName, handler) {\n        /**\n         * This code is about to add a listener to the DOM. If Zone.js is present, than\n         * `addEventListener` has been patched. The patched code adds overhead in both\n         * memory and speed (3x slower) than native. For this reason if we detect that\n         * Zone.js is present we use a simple version of zone aware addEventListener instead.\n         * The result is faster registration and the zone will be restored.\n         * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask\n         * will not be invoked\n         * We also do manual zone restoration in element.ts renderEventHandlerClosure method.\n         *\n         * NOTE: it is possible that the element is from different iframe, and so we\n         * have to check before we execute the method.\n         * @type {?}\n         */\n        const self = this;\n        /** @type {?} */\n        const zoneJsLoaded = element[ADD_EVENT_LISTENER];\n        /** @type {?} */\n        let callback = (/** @type {?} */ (handler));\n        // if zonejs is loaded and current zone is not ngZone\n        // we keep Zone.current on target for later restoration.\n        if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\n            /** @type {?} */\n            let symbolName = symbolNames[eventName];\n            if (!symbolName) {\n                symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\n            }\n            /** @type {?} */\n            let taskDatas = ((/** @type {?} */ (element)))[symbolName];\n            /** @type {?} */\n            const globalListenerRegistered = taskDatas && taskDatas.length > 0;\n            if (!taskDatas) {\n                taskDatas = ((/** @type {?} */ (element)))[symbolName] = [];\n            }\n            /** @type {?} */\n            const zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\n            if (taskDatas.length === 0) {\n                taskDatas.push({ zone: zone, handler: callback });\n            }\n            else {\n                /** @type {?} */\n                let callbackRegistered = false;\n                for (let i = 0; i < taskDatas.length; i++) {\n                    if (taskDatas[i].handler === callback) {\n                        callbackRegistered = true;\n                        break;\n                    }\n                }\n                if (!callbackRegistered) {\n                    taskDatas.push({ zone: zone, handler: callback });\n                }\n            }\n            if (!globalListenerRegistered) {\n                element[ADD_EVENT_LISTENER](eventName, globalListener, false);\n            }\n        }\n        else {\n            element[NATIVE_ADD_LISTENER](eventName, callback, false);\n        }\n        return (/**\n         * @return {?}\n         */\n        () => this.removeEventListener(element, eventName, callback));\n    }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    removeEventListener(target, eventName, callback) {\n        /** @type {?} */\n        let underlyingRemove = target[REMOVE_EVENT_LISTENER];\n        // zone.js not loaded, use native removeEventListener\n        if (!underlyingRemove) {\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        /** @type {?} */\n        let symbolName = symbolNames[eventName];\n        /** @type {?} */\n        let taskDatas = symbolName && target[symbolName];\n        if (!taskDatas) {\n            // addEventListener not using patched version\n            // just call native removeEventListener\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        // fix issue 20532, should be able to remove\n        // listener which was added inside of ngZone\n        /** @type {?} */\n        let found = false;\n        for (let i = 0; i < taskDatas.length; i++) {\n            // remove listener from taskDatas if the callback equals\n            if (taskDatas[i].handler === callback) {\n                found = true;\n                taskDatas.splice(i, 1);\n                break;\n            }\n        }\n        if (found) {\n            if (taskDatas.length === 0) {\n                // all listeners are removed, we can remove the globalListener from target\n                underlyingRemove.apply(target, [eventName, globalListener, false]);\n            }\n        }\n        else {\n            // not found in taskDatas, the callback may be added inside of ngZone\n            // use native remove listener to remove the callback\n            target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n    }\n}\nDomEventsPlugin.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomEventsPlugin.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PLATFORM_ID,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DomEventsPlugin.prototype.ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Supported HammerJS recognizer event names.\n * @type {?}\n */\nconst EVENT_NAMES = {\n    // pan\n    'pan': true,\n    'panstart': true,\n    'panmove': true,\n    'panend': true,\n    'pancancel': true,\n    'panleft': true,\n    'panright': true,\n    'panup': true,\n    'pandown': true,\n    // pinch\n    'pinch': true,\n    'pinchstart': true,\n    'pinchmove': true,\n    'pinchend': true,\n    'pinchcancel': true,\n    'pinchin': true,\n    'pinchout': true,\n    // press\n    'press': true,\n    'pressup': true,\n    // rotate\n    'rotate': true,\n    'rotatestart': true,\n    'rotatemove': true,\n    'rotateend': true,\n    'rotatecancel': true,\n    // swipe\n    'swipe': true,\n    'swipeleft': true,\n    'swiperight': true,\n    'swipeup': true,\n    'swipedown': true,\n    // tap\n    'tap': true,\n};\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * \\@publicApi\n * @type {?}\n */\nconst HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\n/**\n * Injection token used to provide a {\\@link HammerLoader} to Angular.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HAMMER_LOADER = new InjectionToken('HammerLoader');\n/**\n * @record\n */\nfunction HammerInstance() { }\nif (false) {\n    /**\n     * @param {?} eventName\n     * @param {?=} callback\n     * @return {?}\n     */\n    HammerInstance.prototype.on = function (eventName, callback) { };\n    /**\n     * @param {?} eventName\n     * @param {?=} callback\n     * @return {?}\n     */\n    HammerInstance.prototype.off = function (eventName, callback) { };\n    /**\n     * @return {?}\n     */\n    HammerInstance.prototype.destroy = function () { };\n}\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * \\@publicApi\n */\nclass HammerGestureConfig {\n    constructor() {\n        /**\n         * A set of supported event names for gestures to be used in Angular.\n         * Angular supports all built-in recognizers, as listed in\n         * [HammerJS documentation](http://hammerjs.github.io/).\n         */\n        this.events = [];\n        /**\n         * Maps gesture event names to a set of configuration options\n         * that specify overrides to the default values for specific properties.\n         *\n         * The key is a supported event name to be configured,\n         * and the options object contains a set of properties, with override values\n         * to be applied to the named recognizer event.\n         * For example, to disable recognition of the rotate event, specify\n         *  `{\"rotate\": {\"enable\": false}}`.\n         *\n         * Properties that are not present take the HammerJS default values.\n         * For information about which properties are supported for which events,\n         * and their allowed and default values, see\n         * [HammerJS documentation](http://hammerjs.github.io/).\n         *\n         */\n        this.overrides = {};\n    }\n    /**\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n     * and attaches it to a given HTML element.\n     * @param {?} element The element that will recognize gestures.\n     * @return {?} A HammerJS event-manager object.\n     */\n    buildHammer(element) {\n        /** @type {?} */\n        const mc = new (/** @type {?} */ (Hammer))(element, this.options);\n        mc.get('pinch').set({ enable: true });\n        mc.get('rotate').set({ enable: true });\n        for (const eventName in this.overrides) {\n            mc.get(eventName).set(this.overrides[eventName]);\n        }\n        return mc;\n    }\n}\nHammerGestureConfig.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /**\n     * A set of supported event names for gestures to be used in Angular.\n     * Angular supports all built-in recognizers, as listed in\n     * [HammerJS documentation](http://hammerjs.github.io/).\n     * @type {?}\n     */\n    HammerGestureConfig.prototype.events;\n    /**\n     * Maps gesture event names to a set of configuration options\n     * that specify overrides to the default values for specific properties.\n     *\n     * The key is a supported event name to be configured,\n     * and the options object contains a set of properties, with override values\n     * to be applied to the named recognizer event.\n     * For example, to disable recognition of the rotate event, specify\n     *  `{\"rotate\": {\"enable\": false}}`.\n     *\n     * Properties that are not present take the HammerJS default values.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](http://hammerjs.github.io/).\n     *\n     * @type {?}\n     */\n    HammerGestureConfig.prototype.overrides;\n    /**\n     * Properties whose default values can be overridden for a given event.\n     * Different sets of properties apply to different events.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](http://hammerjs.github.io/).\n     * @type {?}\n     */\n    HammerGestureConfig.prototype.options;\n}\nclass HammerGesturesPlugin extends EventManagerPlugin {\n    /**\n     * @param {?} doc\n     * @param {?} _config\n     * @param {?} console\n     * @param {?=} loader\n     */\n    constructor(doc, _config, console, loader) {\n        super(doc);\n        this._config = _config;\n        this.console = console;\n        this.loader = loader;\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    supports(eventName) {\n        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n            return false;\n        }\n        if (!((/** @type {?} */ (window))).Hammer && !this.loader) {\n            this.console.warn(`The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n                `loaded and no custom loader has been specified.`);\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const zone = this.manager.getZone();\n        eventName = eventName.toLowerCase();\n        // If Hammer is not present but a loader is specified, we defer adding the event listener\n        // until Hammer is loaded.\n        if (!((/** @type {?} */ (window))).Hammer && this.loader) {\n            // This `addEventListener` method returns a function to remove the added listener.\n            // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n            // than remove anything.\n            /** @type {?} */\n            let cancelRegistration = false;\n            /** @type {?} */\n            let deregister = (/**\n             * @return {?}\n             */\n            () => { cancelRegistration = true; });\n            this.loader()\n                .then((/**\n             * @return {?}\n             */\n            () => {\n                // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                if (!((/** @type {?} */ (window))).Hammer) {\n                    this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n                    deregister = (/**\n                     * @return {?}\n                     */\n                    () => { });\n                    return;\n                }\n                if (!cancelRegistration) {\n                    // Now that Hammer is loaded and the listener is being loaded for real,\n                    // the deregistration function changes from canceling registration to removal.\n                    deregister = this.addEventListener(element, eventName, handler);\n                }\n            }))\n                .catch((/**\n             * @return {?}\n             */\n            () => {\n                this.console.warn(`The \"${eventName}\" event cannot be bound because the custom ` +\n                    `Hammer.JS loader failed.`);\n                deregister = (/**\n                 * @return {?}\n                 */\n                () => { });\n            }));\n            // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n            // can change the behavior of `deregister` once the listener is added. Using a closure in\n            // this way allows us to avoid any additional data structures to track listener removal.\n            return (/**\n             * @return {?}\n             */\n            () => { deregister(); });\n        }\n        return zone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            // Creating the manager bind events, must be done outside of angular\n            /** @type {?} */\n            const mc = this._config.buildHammer(element);\n            /** @type {?} */\n            const callback = (/**\n             * @param {?} eventObj\n             * @return {?}\n             */\n            function (eventObj) {\n                zone.runGuarded((/**\n                 * @return {?}\n                 */\n                function () { handler(eventObj); }));\n            });\n            mc.on(eventName, callback);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                mc.off(eventName, callback);\n                // destroy mc to prevent memory leak\n                if (typeof mc.destroy === 'function') {\n                    mc.destroy();\n                }\n            });\n        }));\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    isCustomEvent(eventName) { return this._config.events.indexOf(eventName) > -1; }\n}\nHammerGesturesPlugin.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHammerGesturesPlugin.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG,] }] },\n    { type: ÉµConsole },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HAMMER_LOADER,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HammerGesturesPlugin.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    HammerGesturesPlugin.prototype.console;\n    /**\n     * @type {?}\n     * @private\n     */\n    HammerGesturesPlugin.prototype.loader;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines supported modifiers for key events.\n * @type {?}\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nconst Éµ0$4 = /**\n * @param {?} event\n * @return {?}\n */\n(event) => event.altKey, Éµ1$1 = /**\n * @param {?} event\n * @return {?}\n */\n(event) => event.ctrlKey, Éµ2$1 = /**\n * @param {?} event\n * @return {?}\n */\n(event) => event.metaKey, Éµ3$1 = /**\n * @param {?} event\n * @return {?}\n */\n(event) => event.shiftKey;\n/**\n * Retrieves modifiers from key-event objects.\n * @type {?}\n */\nconst MODIFIER_KEY_GETTERS = {\n    'alt': (Éµ0$4),\n    'control': (Éµ1$1),\n    'meta': (Éµ2$1),\n    'shift': (Éµ3$1)\n};\n/**\n * \\@publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nclass KeyEventsPlugin extends EventManagerPlugin {\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param {?} doc The document in which key events will be detected.\n     */\n    constructor(doc) { super(doc); }\n    /**\n     * Reports whether a named key event is supported.\n     * @param {?} eventName The event name to query.\n     * @return {?} True if the named key event is supported.\n     */\n    supports(eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; }\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param {?} element The HTML element to receive event notifications.\n     * @param {?} eventName The name of the key event to listen for.\n     * @param {?} handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @return {?} The key event that was registered.\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const parsedEvent = (/** @type {?} */ (KeyEventsPlugin.parseEventName(eventName)));\n        /** @type {?} */\n        const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n        return this.manager.getZone().runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n        }));\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    static parseEventName(eventName) {\n        /** @type {?} */\n        const parts = eventName.toLowerCase().split('.');\n        /** @type {?} */\n        const domEventName = parts.shift();\n        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n            return null;\n        }\n        /** @type {?} */\n        const key = KeyEventsPlugin._normalizeKey((/** @type {?} */ (parts.pop())));\n        /** @type {?} */\n        let fullKey = '';\n        MODIFIER_KEYS.forEach((/**\n         * @param {?} modifierName\n         * @return {?}\n         */\n        modifierName => {\n            /** @type {?} */\n            const index = parts.indexOf(modifierName);\n            if (index > -1) {\n                parts.splice(index, 1);\n                fullKey += modifierName + '.';\n            }\n        }));\n        fullKey += key;\n        if (parts.length != 0 || key.length === 0) {\n            // returning null instead of throwing to let another plugin process the event\n            return null;\n        }\n        /** @type {?} */\n        const result = {};\n        result['domEventName'] = domEventName;\n        result['fullKey'] = fullKey;\n        return result;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    static getEventFullKey(event) {\n        /** @type {?} */\n        let fullKey = '';\n        /** @type {?} */\n        let key = getDOM().getEventKey(event);\n        key = key.toLowerCase();\n        if (key === ' ') {\n            key = 'space'; // for readability\n        }\n        else if (key === '.') {\n            key = 'dot'; // because '.' is used as a separator in event names\n        }\n        MODIFIER_KEYS.forEach((/**\n         * @param {?} modifierName\n         * @return {?}\n         */\n        modifierName => {\n            if (modifierName != key) {\n                /** @type {?} */\n                const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n                if (modifierGetter(event)) {\n                    fullKey += modifierName + '.';\n                }\n            }\n        }));\n        fullKey += key;\n        return fullKey;\n    }\n    /**\n     * Configures a handler callback for a key event.\n     * @param {?} fullKey The event name that combines all simultaneous keystrokes.\n     * @param {?} handler The function that responds to the key event.\n     * @param {?} zone The zone in which the event occurred.\n     * @return {?} A callback function.\n     */\n    static eventCallback(fullKey, handler, zone) {\n        return (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event /** TODO #9100 */) => {\n            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n                zone.runGuarded((/**\n                 * @return {?}\n                 */\n                () => handler(event)));\n            }\n        });\n    }\n    /**\n     * \\@internal\n     * @param {?} keyName\n     * @return {?}\n     */\n    static _normalizeKey(keyName) {\n        // TODO: switch to a Map if the mapping grows too much\n        switch (keyName) {\n            case 'esc':\n                return 'escape';\n            default:\n                return keyName;\n        }\n    }\n}\nKeyEventsPlugin.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nKeyEventsPlugin.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * \\@publicApi\n * @record\n */\nfunction SafeValue() { }\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * \\@publicApi\n * @record\n */\nfunction SafeHtml() { }\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * \\@publicApi\n * @record\n */\nfunction SafeStyle() { }\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * \\@publicApi\n * @record\n */\nfunction SafeScript() { }\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * \\@publicApi\n * @record\n */\nfunction SafeUrl() { }\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * \\@publicApi\n * @record\n */\nfunction SafeResourceUrl() { }\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @abstract\n */\nclass DomSanitizer {\n}\nif (false) {\n    /**\n     * Sanitizes a value for use in the given SecurityContext.\n     *\n     * If value is trusted for the context, this method will unwrap the contained safe value and use\n     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n     * is responsible to make sure that the value can definitely be safely used in the given context.\n     * @abstract\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.sanitize = function (context, value) { };\n    /**\n     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n     * leave safe HTML intact, so in most situations this method should not be used.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };\n    /**\n     * Bypass security and trust the given value to be safe style value (CSS).\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };\n    /**\n     * Bypass security and trust the given value to be safe JavaScript.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };\n    /**\n     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n     * in hyperlinks or `<img src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };\n    /**\n     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n     * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };\n}\nclass DomSanitizerImpl extends DomSanitizer {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n    }\n    /**\n     * @param {?} ctx\n     * @param {?} value\n     * @return {?}\n     */\n    sanitize(ctx, value) {\n        if (value == null)\n            return null;\n        switch (ctx) {\n            case SecurityContext.NONE:\n                return (/** @type {?} */ (value));\n            case SecurityContext.HTML:\n                if (value instanceof SafeHtmlImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'HTML');\n                return Éµ_sanitizeHtml(this._doc, String(value));\n            case SecurityContext.STYLE:\n                if (value instanceof SafeStyleImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Style');\n                return Éµ_sanitizeStyle((/** @type {?} */ (value)));\n            case SecurityContext.SCRIPT:\n                if (value instanceof SafeScriptImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Script');\n                throw new Error('unsafe value used in a script context');\n            case SecurityContext.URL:\n                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n                    // Allow resource URLs in URL contexts, they are strictly more trusted.\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'URL');\n                return Éµ_sanitizeUrl(String(value));\n            case SecurityContext.RESOURCE_URL:\n                if (value instanceof SafeResourceUrlImpl) {\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'ResourceURL');\n                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n            default:\n                throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @param {?} expectedType\n     * @return {?}\n     */\n    checkNotSafeValue(value, expectedType) {\n        if (value instanceof SafeValueImpl) {\n            throw new Error(`Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n                `(see http://g.co/ng/security#xss)`);\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustHtml(value) { return new SafeHtmlImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustStyle(value) { return new SafeStyleImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustScript(value) { return new SafeScriptImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustUrl(value) { return new SafeUrlImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustResourceUrl(value) {\n        return new SafeResourceUrlImpl(value);\n    }\n}\nDomSanitizerImpl.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomSanitizerImpl.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DomSanitizerImpl.prototype._doc;\n}\n/**\n * @abstract\n */\nclass SafeValueImpl {\n    /**\n     * @param {?} changingThisBreaksApplicationSecurity\n     */\n    constructor(changingThisBreaksApplicationSecurity) {\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n        // empty\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n            ` (see http://g.co/ng/security#xss)`;\n    }\n}\nif (false) {\n    /** @type {?} */\n    SafeValueImpl.prototype.changingThisBreaksApplicationSecurity;\n    /**\n     * @abstract\n     * @return {?}\n     */\n    SafeValueImpl.prototype.getTypeName = function () { };\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'ResourceURL'; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst Éµ0$5 = ÉµPLATFORM_BROWSER_ID;\n/** @type {?} */\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\n    { provide: PLATFORM_ID, useValue: Éµ0$5 },\n    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\n    { provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT] },\n    { provide: DOCUMENT, useFactory: _document, deps: [] },\n];\n/**\n * \\@security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * \\@publicApi\n * @type {?}\n */\nconst BROWSER_SANITIZATION_PROVIDERS = [\n    { provide: Sanitizer, useExisting: DomSanitizer },\n    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT] },\n];\n/**\n * \\@publicApi\n * @type {?}\n */\nconst platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * @return {?}\n */\nfunction initDomAdapter() {\n    BrowserDomAdapter.makeCurrent();\n    BrowserGetTestability.init();\n}\n/**\n * @return {?}\n */\nfunction errorHandler() {\n    return new ErrorHandler();\n}\n/**\n * @return {?}\n */\nfunction _document() {\n    return document;\n}\n/** @type {?} */\nconst BROWSER_MODULE_PROVIDERS = [\n    BROWSER_SANITIZATION_PROVIDERS,\n    { provide: ÉµAPP_ROOT, useValue: true },\n    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: DomEventsPlugin,\n        multi: true,\n        deps: [DOCUMENT, NgZone, PLATFORM_ID]\n    },\n    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: HammerGesturesPlugin,\n        multi: true,\n        deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, ÉµConsole, [new Optional(), HAMMER_LOADER]]\n    },\n    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },\n    {\n        provide: DomRendererFactory2,\n        useClass: DomRendererFactory2,\n        deps: [EventManager, DomSharedStylesHost, APP_ID]\n    },\n    { provide: RendererFactory2, useExisting: DomRendererFactory2 },\n    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\n    { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT] },\n    { provide: Testability, useClass: Testability, deps: [NgZone] },\n    { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone] },\n    ELEMENT_PROBE_PROVIDERS,\n];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * \\@publicApi\n */\nclass BrowserModule {\n    /**\n     * @param {?} parentModule\n     */\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error(`BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n        }\n    }\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param {?} params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @return {?} The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    static withServerTransition(params) {\n        return {\n            ngModule: BrowserModule,\n            providers: [\n                { provide: APP_ID, useValue: params.appId },\n                { provide: TRANSITION_ID, useExisting: APP_ID },\n                SERVER_TRANSITION_PROVIDERS,\n            ],\n        };\n    }\n}\nBrowserModule.decorators = [\n    { type: NgModule, args: [{ providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule] },] }\n];\n/** @nocollapse */\nBrowserModule.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [BrowserModule,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Factory to create Meta service.\n * @return {?}\n */\nfunction createMeta() {\n    return new Meta(ÉµÉµinject(DOCUMENT));\n}\n/**\n * A service that can be used to get and add meta tags.\n *\n * \\@publicApi\n */\nclass Meta {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        this._doc = _doc;\n        this._dom = getDOM();\n    }\n    /**\n     * @param {?} tag\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    addTag(tag, forceCreation = false) {\n        if (!tag)\n            return null;\n        return this._getOrCreateElement(tag, forceCreation);\n    }\n    /**\n     * @param {?} tags\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    addTags(tags, forceCreation = false) {\n        if (!tags)\n            return [];\n        return tags.reduce((/**\n         * @param {?} result\n         * @param {?} tag\n         * @return {?}\n         */\n        (result, tag) => {\n            if (tag) {\n                result.push(this._getOrCreateElement(tag, forceCreation));\n            }\n            return result;\n        }), []);\n    }\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    getTag(attrSelector) {\n        if (!attrSelector)\n            return null;\n        return this._dom.querySelector(this._doc, `meta[${attrSelector}]`) || null;\n    }\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    getTags(attrSelector) {\n        if (!attrSelector)\n            return [];\n        /** @type {?} */\n        const list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n        return list ? [].slice.call(list) : [];\n    }\n    /**\n     * @param {?} tag\n     * @param {?=} selector\n     * @return {?}\n     */\n    updateTag(tag, selector) {\n        if (!tag)\n            return null;\n        selector = selector || this._parseSelector(tag);\n        /** @type {?} */\n        const meta = (/** @type {?} */ (this.getTag(selector)));\n        if (meta) {\n            return this._setMetaElementAttributes(tag, meta);\n        }\n        return this._getOrCreateElement(tag, true);\n    }\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    removeTag(attrSelector) { this.removeTagElement((/** @type {?} */ (this.getTag(attrSelector)))); }\n    /**\n     * @param {?} meta\n     * @return {?}\n     */\n    removeTagElement(meta) {\n        if (meta) {\n            this._dom.remove(meta);\n        }\n    }\n    /**\n     * @private\n     * @param {?} meta\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    _getOrCreateElement(meta, forceCreation = false) {\n        if (!forceCreation) {\n            /** @type {?} */\n            const selector = this._parseSelector(meta);\n            /** @type {?} */\n            const elem = (/** @type {?} */ (this.getTag(selector)));\n            // It's allowed to have multiple elements with the same name so it's not enough to\n            // just check that element with the same name already present on the page. We also need to\n            // check if element has tag attributes\n            if (elem && this._containsAttributes(meta, elem))\n                return elem;\n        }\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._dom.createElement('meta')));\n        this._setMetaElementAttributes(meta, element);\n        /** @type {?} */\n        const head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n        this._dom.appendChild(head, element);\n        return element;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @param {?} el\n     * @return {?}\n     */\n    _setMetaElementAttributes(tag, el) {\n        Object.keys(tag).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        (prop) => this._dom.setAttribute(el, prop, tag[prop])));\n        return el;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @return {?}\n     */\n    _parseSelector(tag) {\n        /** @type {?} */\n        const attr = tag.name ? 'name' : 'property';\n        return `${attr}=\"${tag[attr]}\"`;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @param {?} elem\n     * @return {?}\n     */\n    _containsAttributes(tag, elem) {\n        return Object.keys(tag).every((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => this._dom.getAttribute(elem, key) === tag[key]));\n    }\n}\nMeta.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: createMeta, deps: [] },] }\n];\n/** @nocollapse */\nMeta.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ Meta.ngInjectableDef = ÉµÉµdefineInjectable({ factory: createMeta, token: Meta, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Meta.prototype._dom;\n    /**\n     * @type {?}\n     * @private\n     */\n    Meta.prototype._doc;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Factory to create Title service.\n * @return {?}\n */\nfunction createTitle() {\n    return new Title(ÉµÉµinject(DOCUMENT));\n}\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * \\@publicApi\n */\nclass Title {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * Get the title of the current HTML document.\n     * @return {?}\n     */\n    getTitle() { return getDOM().getTitle(this._doc); }\n    /**\n     * Set the title of the current HTML document.\n     * @param {?} newTitle\n     * @return {?}\n     */\n    setTitle(newTitle) { getDOM().setTitle(this._doc, newTitle); }\n}\nTitle.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: createTitle, deps: [] },] }\n];\n/** @nocollapse */\nTitle.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ Title.ngInjectableDef = ÉµÉµdefineInjectable({ factory: createTitle, token: Title, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Title.prototype._doc;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst win = typeof window !== 'undefined' && window || (/** @type {?} */ ({}));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ChangeDetectionPerfRecord {\n    /**\n     * @param {?} msPerTick\n     * @param {?} numTicks\n     */\n    constructor(msPerTick, numTicks) {\n        this.msPerTick = msPerTick;\n        this.numTicks = numTicks;\n    }\n}\nif (false) {\n    /** @type {?} */\n    ChangeDetectionPerfRecord.prototype.msPerTick;\n    /** @type {?} */\n    ChangeDetectionPerfRecord.prototype.numTicks;\n}\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nclass AngularProfiler {\n    /**\n     * @param {?} ref\n     */\n    constructor(ref) { this.appRef = ref.injector.get(ApplicationRef); }\n    // tslint:disable:no-console\n    /**\n     * Exercises change detection in a loop and then prints the average amount of\n     * time in milliseconds how long a single round of change detection takes for\n     * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n     * of 500 milliseconds.\n     *\n     * Optionally, a user may pass a `config` parameter containing a map of\n     * options. Supported options are:\n     *\n     * `record` (boolean) - causes the profiler to record a CPU profile while\n     * it exercises the change detector. Example:\n     *\n     * ```\n     * ng.profiler.timeChangeDetection({record: true})\n     * ```\n     * @param {?} config\n     * @return {?}\n     */\n    timeChangeDetection(config) {\n        /** @type {?} */\n        const record = config && config['record'];\n        /** @type {?} */\n        const profileName = 'Change Detection';\n        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n        /** @type {?} */\n        const isProfilerAvailable = win.console.profile != null;\n        if (record && isProfilerAvailable) {\n            win.console.profile(profileName);\n        }\n        /** @type {?} */\n        const start = getDOM().performanceNow();\n        /** @type {?} */\n        let numTicks = 0;\n        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n            this.appRef.tick();\n            numTicks++;\n        }\n        /** @type {?} */\n        const end = getDOM().performanceNow();\n        if (record && isProfilerAvailable) {\n            win.console.profileEnd(profileName);\n        }\n        /** @type {?} */\n        const msPerTick = (end - start) / numTicks;\n        win.console.log(`ran ${numTicks} change detection cycles`);\n        win.console.log(`${msPerTick.toFixed(2)} ms per check`);\n        return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n    }\n}\nif (false) {\n    /** @type {?} */\n    AngularProfiler.prototype.appRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PROFILER_GLOBAL_NAME = 'profiler';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * \\@publicApi\n * @template T\n * @param {?} ref\n * @return {?}\n */\nfunction enableDebugTools(ref) {\n    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n    return ref;\n}\n/**\n * Disables Angular tools.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction disableDebugTools() {\n    exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} text\n * @return {?}\n */\nfunction escapeHtml(text) {\n    /** @type {?} */\n    const escapedText = {\n        '&': '&a;',\n        '\"': '&q;',\n        '\\'': '&s;',\n        '<': '&l;',\n        '>': '&g;',\n    };\n    return text.replace(/[&\"'<>]/g, (/**\n     * @param {?} s\n     * @return {?}\n     */\n    s => escapedText[s]));\n}\n/**\n * @param {?} text\n * @return {?}\n */\nfunction unescapeHtml(text) {\n    /** @type {?} */\n    const unescapedText = {\n        '&a;': '&',\n        '&q;': '\"',\n        '&s;': '\\'',\n        '&l;': '<',\n        '&g;': '>',\n    };\n    return text.replace(/&[^;]+;/g, (/**\n     * @param {?} s\n     * @return {?}\n     */\n    s => unescapedText[s]));\n}\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * \\@publicApi\n * @template T\n * @param {?} key\n * @return {?}\n */\nfunction makeStateKey(key) {\n    return (/** @type {?} */ (key));\n}\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\n * non-lossy manner.\n *\n * \\@publicApi\n */\nclass TransferState {\n    constructor() {\n        this.store = {};\n        this.onSerializeCallbacks = {};\n    }\n    /**\n     * \\@internal\n     * @param {?} initState\n     * @return {?}\n     */\n    static init(initState) {\n        /** @type {?} */\n        const transferState = new TransferState();\n        transferState.store = initState;\n        return transferState;\n    }\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     * @template T\n     * @param {?} key\n     * @param {?} defaultValue\n     * @return {?}\n     */\n    get(key, defaultValue) {\n        return this.store[key] !== undefined ? (/** @type {?} */ (this.store[key])) : defaultValue;\n    }\n    /**\n     * Set the value corresponding to a key.\n     * @template T\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    set(key, value) { this.store[key] = value; }\n    /**\n     * Remove a key from the store.\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    remove(key) { delete this.store[key]; }\n    /**\n     * Test whether a key exists in the store.\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    hasKey(key) { return this.store.hasOwnProperty(key); }\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     * @template T\n     * @param {?} key\n     * @param {?} callback\n     * @return {?}\n     */\n    onSerialize(key, callback) {\n        this.onSerializeCallbacks[key] = callback;\n    }\n    /**\n     * Serialize the current state of the store to JSON.\n     * @return {?}\n     */\n    toJson() {\n        // Call the onSerialize callbacks and put those values into the store.\n        for (const key in this.onSerializeCallbacks) {\n            if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n                try {\n                    this.store[key] = this.onSerializeCallbacks[key]();\n                }\n                catch (e) {\n                    console.warn('Exception in onSerialize callback: ', e);\n                }\n            }\n        }\n        return JSON.stringify(this.store);\n    }\n}\nTransferState.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TransferState.prototype.store;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransferState.prototype.onSerializeCallbacks;\n}\n/**\n * @param {?} doc\n * @param {?} appId\n * @return {?}\n */\nfunction initTransferState(doc, appId) {\n    // Locate the script tag with the JSON data transferred from the server.\n    // The id of the script tag is set to the Angular appId + 'state'.\n    /** @type {?} */\n    const script = doc.getElementById(appId + '-state');\n    /** @type {?} */\n    let initialState = {};\n    if (script && script.textContent) {\n        try {\n            initialState = JSON.parse(unescapeHtml(script.textContent));\n        }\n        catch (e) {\n            console.warn('Exception while restoring TransferState for app ' + appId, e);\n        }\n    }\n    return TransferState.init(initialState);\n}\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * \\@publicApi\n */\nclass BrowserTransferStateModule {\n}\nBrowserTransferStateModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [{ provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT, APP_ID] }],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Predicates for use with {\\@link DebugElement}'s query functions.\n *\n * \\@publicApi\n */\nclass By {\n    /**\n     * Match all nodes.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n     * @return {?}\n     */\n    static all() { return (/**\n     * @return {?}\n     */\n    () => true); }\n    /**\n     * Match elements by the given CSS selector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n     * @param {?} selector\n     * @return {?}\n     */\n    static css(selector) {\n        return (/**\n         * @param {?} debugElement\n         * @return {?}\n         */\n        (debugElement) => {\n            return debugElement.nativeElement != null ?\n                getDOM().elementMatches(debugElement.nativeElement, selector) :\n                false;\n        });\n    }\n    /**\n     * Match nodes that have the given directive present.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n     * @param {?} type\n     * @return {?}\n     */\n    static directive(type) {\n        return (/**\n         * @param {?} debugNode\n         * @return {?}\n         */\n        (debugNode) => (/** @type {?} */ (debugNode.providerTokens)).indexOf(type) !== -1);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('8.2.14');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BROWSER_MODULE_PROVIDERS as Éµangular_packages_platform_browser_platform_browser_c, _document as Éµangular_packages_platform_browser_platform_browser_b, errorHandler as Éµangular_packages_platform_browser_platform_browser_a, GenericBrowserDomAdapter as Éµangular_packages_platform_browser_platform_browser_l, createMeta as Éµangular_packages_platform_browser_platform_browser_d, SERVER_TRANSITION_PROVIDERS as Éµangular_packages_platform_browser_platform_browser_i, appInitializerFactory as Éµangular_packages_platform_browser_platform_browser_h, createTitle as Éµangular_packages_platform_browser_platform_browser_e, initTransferState as Éµangular_packages_platform_browser_platform_browser_f, ELEMENT_PROBE_PROVIDERS__PRE_R3__ as Éµangular_packages_platform_browser_platform_browser_k, _createNgProbe as Éµangular_packages_platform_browser_platform_browser_j, EventManagerPlugin as Éµangular_packages_platform_browser_platform_browser_g, BrowserModule, platformBrowser, Meta, Title, disableDebugTools, enableDebugTools, BrowserTransferStateModule, TransferState, makeStateKey, By, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, DomSanitizer, VERSION, ELEMENT_PROBE_PROVIDERS__POST_R3__ as ÉµELEMENT_PROBE_PROVIDERS__POST_R3__, BROWSER_SANITIZATION_PROVIDERS as ÉµBROWSER_SANITIZATION_PROVIDERS, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ÉµINTERNAL_BROWSER_PLATFORM_PROVIDERS, initDomAdapter as ÉµinitDomAdapter, BrowserDomAdapter as ÉµBrowserDomAdapter, BrowserPlatformLocation as ÉµBrowserPlatformLocation, TRANSITION_ID as ÉµTRANSITION_ID, BrowserGetTestability as ÉµBrowserGetTestability, escapeHtml as ÉµescapeHtml, ELEMENT_PROBE_PROVIDERS as ÉµELEMENT_PROBE_PROVIDERS, DomAdapter as ÉµDomAdapter, getDOM as ÉµgetDOM, setRootDomAdapter as ÉµsetRootDomAdapter, DomRendererFactory2 as ÉµDomRendererFactory2, NAMESPACE_URIS as ÉµNAMESPACE_URIS, flattenStyles as ÉµflattenStyles, shimContentAttribute as ÉµshimContentAttribute, shimHostAttribute as ÉµshimHostAttribute, DomEventsPlugin as ÉµDomEventsPlugin, HammerGesturesPlugin as ÉµHammerGesturesPlugin, KeyEventsPlugin as ÉµKeyEventsPlugin, DomSharedStylesHost as ÉµDomSharedStylesHost, SharedStylesHost as ÉµSharedStylesHost, DomSanitizerImpl as ÉµDomSanitizerImpl };\n//# sourceMappingURL=platform-browser.js.map\n","/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { NoopAnimationPlayer, ÉµAnimationGroupPlayer, ÉµPRE_STYLE, AUTO_STYLE, sequence, style } from '@angular/animations';\nimport { Injectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction isBrowser() {\n    return (typeof window !== 'undefined' && typeof window.document !== 'undefined');\n}\n/**\n * @return {?}\n */\nfunction isNode() {\n    return (typeof process !== 'undefined');\n}\n/**\n * @param {?} players\n * @return {?}\n */\nfunction optimizeGroupPlayer(players) {\n    switch (players.length) {\n        case 0:\n            return new NoopAnimationPlayer();\n        case 1:\n            return players[0];\n        default:\n            return new ÉµAnimationGroupPlayer(players);\n    }\n}\n/**\n * @param {?} driver\n * @param {?} normalizer\n * @param {?} element\n * @param {?} keyframes\n * @param {?=} preStyles\n * @param {?=} postStyles\n * @return {?}\n */\nfunction normalizeKeyframes(driver, normalizer, element, keyframes, preStyles = {}, postStyles = {}) {\n    /** @type {?} */\n    const errors = [];\n    /** @type {?} */\n    const normalizedKeyframes = [];\n    /** @type {?} */\n    let previousOffset = -1;\n    /** @type {?} */\n    let previousKeyframe = null;\n    keyframes.forEach((/**\n     * @param {?} kf\n     * @return {?}\n     */\n    kf => {\n        /** @type {?} */\n        const offset = (/** @type {?} */ (kf['offset']));\n        /** @type {?} */\n        const isSameOffset = offset == previousOffset;\n        /** @type {?} */\n        const normalizedKeyframe = (isSameOffset && previousKeyframe) || {};\n        Object.keys(kf).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            /** @type {?} */\n            let normalizedProp = prop;\n            /** @type {?} */\n            let normalizedValue = kf[prop];\n            if (prop !== 'offset') {\n                normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);\n                switch (normalizedValue) {\n                    case ÉµPRE_STYLE:\n                        normalizedValue = preStyles[prop];\n                        break;\n                    case AUTO_STYLE:\n                        normalizedValue = postStyles[prop];\n                        break;\n                    default:\n                        normalizedValue =\n                            normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);\n                        break;\n                }\n            }\n            normalizedKeyframe[normalizedProp] = normalizedValue;\n        }));\n        if (!isSameOffset) {\n            normalizedKeyframes.push(normalizedKeyframe);\n        }\n        previousKeyframe = normalizedKeyframe;\n        previousOffset = offset;\n    }));\n    if (errors.length) {\n        /** @type {?} */\n        const LINE_START = '\\n - ';\n        throw new Error(`Unable to animate due to the following errors:${LINE_START}${errors.join(LINE_START)}`);\n    }\n    return normalizedKeyframes;\n}\n/**\n * @param {?} player\n * @param {?} eventName\n * @param {?} event\n * @param {?} callback\n * @return {?}\n */\nfunction listenOnPlayer(player, eventName, event, callback) {\n    switch (eventName) {\n        case 'start':\n            player.onStart((/**\n             * @return {?}\n             */\n            () => callback(event && copyAnimationEvent(event, 'start', player))));\n            break;\n        case 'done':\n            player.onDone((/**\n             * @return {?}\n             */\n            () => callback(event && copyAnimationEvent(event, 'done', player))));\n            break;\n        case 'destroy':\n            player.onDestroy((/**\n             * @return {?}\n             */\n            () => callback(event && copyAnimationEvent(event, 'destroy', player))));\n            break;\n    }\n}\n/**\n * @param {?} e\n * @param {?} phaseName\n * @param {?} player\n * @return {?}\n */\nfunction copyAnimationEvent(e, phaseName, player) {\n    /** @type {?} */\n    const totalTime = player.totalTime;\n    /** @type {?} */\n    const disabled = ((/** @type {?} */ (player))).disabled ? true : false;\n    /** @type {?} */\n    const event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime, disabled);\n    /** @type {?} */\n    const data = ((/** @type {?} */ (e)))['_data'];\n    if (data != null) {\n        ((/** @type {?} */ (event)))['_data'] = data;\n    }\n    return event;\n}\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?=} phaseName\n * @param {?=} totalTime\n * @param {?=} disabled\n * @return {?}\n */\nfunction makeAnimationEvent(element, triggerName, fromState, toState, phaseName = '', totalTime = 0, disabled) {\n    return { element, triggerName, fromState, toState, phaseName, totalTime, disabled: !!disabled };\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} defaultValue\n * @return {?}\n */\nfunction getOrSetAsInMap(map, key, defaultValue) {\n    /** @type {?} */\n    let value;\n    if (map instanceof Map) {\n        value = map.get(key);\n        if (!value) {\n            map.set(key, value = defaultValue);\n        }\n    }\n    else {\n        value = map[key];\n        if (!value) {\n            value = map[key] = defaultValue;\n        }\n    }\n    return value;\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction parseTimelineCommand(command) {\n    /** @type {?} */\n    const separatorPos = command.indexOf(':');\n    /** @type {?} */\n    const id = command.substring(1, separatorPos);\n    /** @type {?} */\n    const action = command.substr(separatorPos + 1);\n    return [id, action];\n}\n/** @type {?} */\nlet _contains = (/**\n * @param {?} elm1\n * @param {?} elm2\n * @return {?}\n */\n(elm1, elm2) => false);\nconst Éµ0 = _contains;\n/** @type {?} */\nlet _matches = (/**\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\n(element, selector) => false);\nconst Éµ1 = _matches;\n/** @type {?} */\nlet _query = (/**\n * @param {?} element\n * @param {?} selector\n * @param {?} multi\n * @return {?}\n */\n(element, selector, multi) => {\n    return [];\n});\nconst Éµ2 = _query;\n// Define utility methods for browsers and platform-server(domino) where Element\n// and utility methods exist.\n/** @type {?} */\nconst _isNode = isNode();\nif (_isNode || typeof Element !== 'undefined') {\n    // this is well supported in all browsers\n    _contains = (/**\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    (elm1, elm2) => { return (/** @type {?} */ (elm1.contains(elm2))); });\n    _matches = ((/**\n     * @return {?}\n     */\n    () => {\n        if (_isNode || Element.prototype.matches) {\n            return (/**\n             * @param {?} element\n             * @param {?} selector\n             * @return {?}\n             */\n            (element, selector) => element.matches(selector));\n        }\n        else {\n            /** @type {?} */\n            const proto = (/** @type {?} */ (Element.prototype));\n            /** @type {?} */\n            const fn = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector ||\n                proto.oMatchesSelector || proto.webkitMatchesSelector;\n            if (fn) {\n                return (/**\n                 * @param {?} element\n                 * @param {?} selector\n                 * @return {?}\n                 */\n                (element, selector) => fn.apply(element, [selector]));\n            }\n            else {\n                return _matches;\n            }\n        }\n    }))();\n    _query = (/**\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    (element, selector, multi) => {\n        /** @type {?} */\n        let results = [];\n        if (multi) {\n            results.push(...element.querySelectorAll(selector));\n        }\n        else {\n            /** @type {?} */\n            const elm = element.querySelector(selector);\n            if (elm) {\n                results.push(elm);\n            }\n        }\n        return results;\n    });\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction containsVendorPrefix(prop) {\n    // Webkit is the only real popular vendor prefix nowadays\n    // cc: http://shouldiprefix.com/\n    return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit\n}\n/** @type {?} */\nlet _CACHED_BODY = null;\n/** @type {?} */\nlet _IS_WEBKIT = false;\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction validateStyleProperty(prop) {\n    if (!_CACHED_BODY) {\n        _CACHED_BODY = getBodyNode() || {};\n        _IS_WEBKIT = (/** @type {?} */ (_CACHED_BODY)).style ? ('WebkitAppearance' in (/** @type {?} */ (_CACHED_BODY)).style) : false;\n    }\n    /** @type {?} */\n    let result = true;\n    if ((/** @type {?} */ (_CACHED_BODY)).style && !containsVendorPrefix(prop)) {\n        result = prop in (/** @type {?} */ (_CACHED_BODY)).style;\n        if (!result && _IS_WEBKIT) {\n            /** @type {?} */\n            const camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);\n            result = camelProp in (/** @type {?} */ (_CACHED_BODY)).style;\n        }\n    }\n    return result;\n}\n/**\n * @return {?}\n */\nfunction getBodyNode() {\n    if (typeof document != 'undefined') {\n        return document.body;\n    }\n    return null;\n}\n/** @type {?} */\nconst matchesElement = _matches;\n/** @type {?} */\nconst containsElement = _contains;\n/** @type {?} */\nconst invokeQuery = _query;\n/**\n * @param {?} object\n * @return {?}\n */\nfunction hypenatePropsObject(object) {\n    /** @type {?} */\n    const newObj = {};\n    Object.keys(object).forEach((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => {\n        /** @type {?} */\n        const newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');\n        newObj[newProp] = object[prop];\n    }));\n    return newObj;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n */\nclass NoopAnimationDriver {\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    validateStyleProperty(prop) { return validateStyleProperty(prop); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    /**\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    computeStyle(element, prop, defaultValue) {\n        return defaultValue || '';\n    }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @param {?=} scrubberAccessRequested\n     * @return {?}\n     */\n    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {\n        return new NoopAnimationPlayer(duration, delay);\n    }\n}\nNoopAnimationDriver.decorators = [\n    { type: Injectable }\n];\n/**\n * \\@publicApi\n * @abstract\n */\nclass AnimationDriver {\n}\nAnimationDriver.NOOP = new NoopAnimationDriver();\nif (false) {\n    /** @type {?} */\n    AnimationDriver.NOOP;\n    /**\n     * @abstract\n     * @param {?} prop\n     * @return {?}\n     */\n    AnimationDriver.prototype.validateStyleProperty = function (prop) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    AnimationDriver.prototype.matchesElement = function (element, selector) { };\n    /**\n     * @abstract\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    AnimationDriver.prototype.containsElement = function (elm1, elm2) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    AnimationDriver.prototype.query = function (element, selector, multi) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} prop\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    AnimationDriver.prototype.computeStyle = function (element, prop, defaultValue) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?=} easing\n     * @param {?=} previousPlayers\n     * @param {?=} scrubberAccessRequested\n     * @return {?}\n     */\n    AnimationDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers, scrubberAccessRequested) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ONE_SECOND = 1000;\n/** @type {?} */\nconst SUBSTITUTION_EXPR_START = '{{';\n/** @type {?} */\nconst SUBSTITUTION_EXPR_END = '}}';\n/** @type {?} */\nconst ENTER_CLASSNAME = 'ng-enter';\n/** @type {?} */\nconst LEAVE_CLASSNAME = 'ng-leave';\n/** @type {?} */\nconst ENTER_SELECTOR = '.ng-enter';\n/** @type {?} */\nconst LEAVE_SELECTOR = '.ng-leave';\n/** @type {?} */\nconst NG_TRIGGER_CLASSNAME = 'ng-trigger';\n/** @type {?} */\nconst NG_TRIGGER_SELECTOR = '.ng-trigger';\n/** @type {?} */\nconst NG_ANIMATING_CLASSNAME = 'ng-animating';\n/** @type {?} */\nconst NG_ANIMATING_SELECTOR = '.ng-animating';\n/**\n * @param {?} value\n * @return {?}\n */\nfunction resolveTimingValue(value) {\n    if (typeof value == 'number')\n        return value;\n    /** @type {?} */\n    const matches = ((/** @type {?} */ (value))).match(/^(-?[\\.\\d]+)(m?s)/);\n    if (!matches || matches.length < 2)\n        return 0;\n    return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);\n}\n/**\n * @param {?} value\n * @param {?} unit\n * @return {?}\n */\nfunction _convertTimeValueToMS(value, unit) {\n    switch (unit) {\n        case 's':\n            return value * ONE_SECOND;\n        default: // ms or something else\n            return value;\n    }\n}\n/**\n * @param {?} timings\n * @param {?} errors\n * @param {?=} allowNegativeValues\n * @return {?}\n */\nfunction resolveTiming(timings, errors, allowNegativeValues) {\n    return timings.hasOwnProperty('duration') ?\n        (/** @type {?} */ (timings)) :\n        parseTimeExpression((/** @type {?} */ (timings)), errors, allowNegativeValues);\n}\n/**\n * @param {?} exp\n * @param {?} errors\n * @param {?=} allowNegativeValues\n * @return {?}\n */\nfunction parseTimeExpression(exp, errors, allowNegativeValues) {\n    /** @type {?} */\n    const regex = /^(-?[\\.\\d]+)(m?s)(?:\\s+(-?[\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?$/i;\n    /** @type {?} */\n    let duration;\n    /** @type {?} */\n    let delay = 0;\n    /** @type {?} */\n    let easing = '';\n    if (typeof exp === 'string') {\n        /** @type {?} */\n        const matches = exp.match(regex);\n        if (matches === null) {\n            errors.push(`The provided timing value \"${exp}\" is invalid.`);\n            return { duration: 0, delay: 0, easing: '' };\n        }\n        duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);\n        /** @type {?} */\n        const delayMatch = matches[3];\n        if (delayMatch != null) {\n            delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);\n        }\n        /** @type {?} */\n        const easingVal = matches[5];\n        if (easingVal) {\n            easing = easingVal;\n        }\n    }\n    else {\n        duration = (/** @type {?} */ (exp));\n    }\n    if (!allowNegativeValues) {\n        /** @type {?} */\n        let containsErrors = false;\n        /** @type {?} */\n        let startIndex = errors.length;\n        if (duration < 0) {\n            errors.push(`Duration values below 0 are not allowed for this animation step.`);\n            containsErrors = true;\n        }\n        if (delay < 0) {\n            errors.push(`Delay values below 0 are not allowed for this animation step.`);\n            containsErrors = true;\n        }\n        if (containsErrors) {\n            errors.splice(startIndex, 0, `The provided timing value \"${exp}\" is invalid.`);\n        }\n    }\n    return { duration, delay, easing };\n}\n/**\n * @param {?} obj\n * @param {?=} destination\n * @return {?}\n */\nfunction copyObj(obj, destination = {}) {\n    Object.keys(obj).forEach((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => { destination[prop] = obj[prop]; }));\n    return destination;\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction normalizeStyles(styles) {\n    /** @type {?} */\n    const normalizedStyles = {};\n    if (Array.isArray(styles)) {\n        styles.forEach((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => copyStyles(data, false, normalizedStyles)));\n    }\n    else {\n        copyStyles(styles, false, normalizedStyles);\n    }\n    return normalizedStyles;\n}\n/**\n * @param {?} styles\n * @param {?} readPrototype\n * @param {?=} destination\n * @return {?}\n */\nfunction copyStyles(styles, readPrototype, destination = {}) {\n    if (readPrototype) {\n        // we make use of a for-in loop so that the\n        // prototypically inherited properties are\n        // revealed from the backFill map\n        for (let prop in styles) {\n            destination[prop] = styles[prop];\n        }\n    }\n    else {\n        copyObj(styles, destination);\n    }\n    return destination;\n}\n/**\n * @param {?} element\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction getStyleAttributeString(element, key, value) {\n    // Return the key-value pair string to be added to the style attribute for the\n    // given CSS style key.\n    if (value) {\n        return key + ':' + value + ';';\n    }\n    else {\n        return '';\n    }\n}\n/**\n * @param {?} element\n * @return {?}\n */\nfunction writeStyleAttribute(element) {\n    // Read the style property of the element and manually reflect it to the\n    // style attribute. This is needed because Domino on platform-server doesn't\n    // understand the full set of allowed CSS properties and doesn't reflect some\n    // of them automatically.\n    /** @type {?} */\n    let styleAttrValue = '';\n    for (let i = 0; i < element.style.length; i++) {\n        /** @type {?} */\n        const key = element.style.item(i);\n        styleAttrValue += getStyleAttributeString(element, key, element.style.getPropertyValue(key));\n    }\n    for (const key in element.style) {\n        // Skip internal Domino properties that don't need to be reflected.\n        if (!element.style.hasOwnProperty(key) || key.startsWith('_')) {\n            continue;\n        }\n        /** @type {?} */\n        const dashKey = camelCaseToDashCase(key);\n        styleAttrValue += getStyleAttributeString(element, dashKey, element.style[key]);\n    }\n    element.setAttribute('style', styleAttrValue);\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @param {?=} formerStyles\n * @return {?}\n */\nfunction setStyles(element, styles, formerStyles) {\n    if (element['style']) {\n        Object.keys(styles).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            /** @type {?} */\n            const camelProp = dashCaseToCamelCase(prop);\n            if (formerStyles && !formerStyles.hasOwnProperty(prop)) {\n                formerStyles[prop] = element.style[camelProp];\n            }\n            element.style[camelProp] = styles[prop];\n        }));\n        // On the server set the 'style' attribute since it's not automatically reflected.\n        if (isNode()) {\n            writeStyleAttribute(element);\n        }\n    }\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nfunction eraseStyles(element, styles) {\n    if (element['style']) {\n        Object.keys(styles).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            /** @type {?} */\n            const camelProp = dashCaseToCamelCase(prop);\n            element.style[camelProp] = '';\n        }));\n        // On the server set the 'style' attribute since it's not automatically reflected.\n        if (isNode()) {\n            writeStyleAttribute(element);\n        }\n    }\n}\n/**\n * @param {?} steps\n * @return {?}\n */\nfunction normalizeAnimationEntry(steps) {\n    if (Array.isArray(steps)) {\n        if (steps.length == 1)\n            return steps[0];\n        return sequence(steps);\n    }\n    return (/** @type {?} */ (steps));\n}\n/**\n * @param {?} value\n * @param {?} options\n * @param {?} errors\n * @return {?}\n */\nfunction validateStyleParams(value, options, errors) {\n    /** @type {?} */\n    const params = options.params || {};\n    /** @type {?} */\n    const matches = extractStyleParams(value);\n    if (matches.length) {\n        matches.forEach((/**\n         * @param {?} varName\n         * @return {?}\n         */\n        varName => {\n            if (!params.hasOwnProperty(varName)) {\n                errors.push(`Unable to resolve the local animation param ${varName} in the given list of values`);\n            }\n        }));\n    }\n}\n/** @type {?} */\nconst PARAM_REGEX = new RegExp(`${SUBSTITUTION_EXPR_START}\\\\s*(.+?)\\\\s*${SUBSTITUTION_EXPR_END}`, 'g');\n/**\n * @param {?} value\n * @return {?}\n */\nfunction extractStyleParams(value) {\n    /** @type {?} */\n    let params = [];\n    if (typeof value === 'string') {\n        /** @type {?} */\n        const val = value.toString();\n        /** @type {?} */\n        let match;\n        while (match = PARAM_REGEX.exec(val)) {\n            params.push((/** @type {?} */ (match[1])));\n        }\n        PARAM_REGEX.lastIndex = 0;\n    }\n    return params;\n}\n/**\n * @param {?} value\n * @param {?} params\n * @param {?} errors\n * @return {?}\n */\nfunction interpolateParams(value, params, errors) {\n    /** @type {?} */\n    const original = value.toString();\n    /** @type {?} */\n    const str = original.replace(PARAM_REGEX, (/**\n     * @param {?} _\n     * @param {?} varName\n     * @return {?}\n     */\n    (_, varName) => {\n        /** @type {?} */\n        let localVal = params[varName];\n        // this means that the value was never overridden by the data passed in by the user\n        if (!params.hasOwnProperty(varName)) {\n            errors.push(`Please provide a value for the animation param ${varName}`);\n            localVal = '';\n        }\n        return localVal.toString();\n    }));\n    // we do this to assert that numeric values stay as they are\n    return str == original ? value : str;\n}\n/**\n * @param {?} iterator\n * @return {?}\n */\nfunction iteratorToArray(iterator) {\n    /** @type {?} */\n    const arr = [];\n    /** @type {?} */\n    let item = iterator.next();\n    while (!item.done) {\n        arr.push(item.value);\n        item = iterator.next();\n    }\n    return arr;\n}\n/**\n * @param {?} source\n * @param {?} destination\n * @return {?}\n */\nfunction mergeAnimationOptions(source, destination) {\n    if (source.params) {\n        /** @type {?} */\n        const p0 = source.params;\n        if (!destination.params) {\n            destination.params = {};\n        }\n        /** @type {?} */\n        const p1 = destination.params;\n        Object.keys(p0).forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        param => {\n            if (!p1.hasOwnProperty(param)) {\n                p1[param] = p0[param];\n            }\n        }));\n    }\n    return destination;\n}\n/** @type {?} */\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, (/**\n     * @param {...?} m\n     * @return {?}\n     */\n    (...m) => m[1].toUpperCase()));\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n/**\n * @param {?} duration\n * @param {?} delay\n * @return {?}\n */\nfunction allowPreviousPlayerStylesMerge(duration, delay) {\n    return duration === 0 || delay === 0;\n}\n/**\n * @param {?} element\n * @param {?} keyframes\n * @param {?} previousStyles\n * @return {?}\n */\nfunction balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {\n    /** @type {?} */\n    const previousStyleProps = Object.keys(previousStyles);\n    if (previousStyleProps.length && keyframes.length) {\n        /** @type {?} */\n        let startingKeyframe = keyframes[0];\n        /** @type {?} */\n        let missingStyleProps = [];\n        previousStyleProps.forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            if (!startingKeyframe.hasOwnProperty(prop)) {\n                missingStyleProps.push(prop);\n            }\n            startingKeyframe[prop] = previousStyles[prop];\n        }));\n        if (missingStyleProps.length) {\n            // tslint:disable-next-line\n            for (var i = 1; i < keyframes.length; i++) {\n                /** @type {?} */\n                let kf = keyframes[i];\n                missingStyleProps.forEach((/**\n                 * @param {?} prop\n                 * @return {?}\n                 */\n                function (prop) { kf[prop] = computeStyle(element, prop); }));\n            }\n        }\n    }\n    return keyframes;\n}\n/**\n * @param {?} visitor\n * @param {?} node\n * @param {?} context\n * @return {?}\n */\nfunction visitDslNode(visitor, node, context) {\n    switch (node.type) {\n        case 7 /* Trigger */:\n            return visitor.visitTrigger(node, context);\n        case 0 /* State */:\n            return visitor.visitState(node, context);\n        case 1 /* Transition */:\n            return visitor.visitTransition(node, context);\n        case 2 /* Sequence */:\n            return visitor.visitSequence(node, context);\n        case 3 /* Group */:\n            return visitor.visitGroup(node, context);\n        case 4 /* Animate */:\n            return visitor.visitAnimate(node, context);\n        case 5 /* Keyframes */:\n            return visitor.visitKeyframes(node, context);\n        case 6 /* Style */:\n            return visitor.visitStyle(node, context);\n        case 8 /* Reference */:\n            return visitor.visitReference(node, context);\n        case 9 /* AnimateChild */:\n            return visitor.visitAnimateChild(node, context);\n        case 10 /* AnimateRef */:\n            return visitor.visitAnimateRef(node, context);\n        case 11 /* Query */:\n            return visitor.visitQuery(node, context);\n        case 12 /* Stagger */:\n            return visitor.visitStagger(node, context);\n        default:\n            throw new Error(`Unable to resolve animation metadata node #${node.type}`);\n    }\n}\n/**\n * @param {?} element\n * @param {?} prop\n * @return {?}\n */\nfunction computeStyle(element, prop) {\n    return ((/** @type {?} */ (window.getComputedStyle(element))))[prop];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst ANY_STATE = '*';\n/**\n * @param {?} transitionValue\n * @param {?} errors\n * @return {?}\n */\nfunction parseTransitionExpr(transitionValue, errors) {\n    /** @type {?} */\n    const expressions = [];\n    if (typeof transitionValue == 'string') {\n        ((/** @type {?} */ (transitionValue)))\n            .split(/\\s*,\\s*/)\n            .forEach((/**\n         * @param {?} str\n         * @return {?}\n         */\n        str => parseInnerTransitionStr(str, expressions, errors)));\n    }\n    else {\n        expressions.push((/** @type {?} */ (transitionValue)));\n    }\n    return expressions;\n}\n/**\n * @param {?} eventStr\n * @param {?} expressions\n * @param {?} errors\n * @return {?}\n */\nfunction parseInnerTransitionStr(eventStr, expressions, errors) {\n    if (eventStr[0] == ':') {\n        /** @type {?} */\n        const result = parseAnimationAlias(eventStr, errors);\n        if (typeof result == 'function') {\n            expressions.push(result);\n            return;\n        }\n        eventStr = (/** @type {?} */ (result));\n    }\n    /** @type {?} */\n    const match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n    if (match == null || match.length < 4) {\n        errors.push(`The provided transition expression \"${eventStr}\" is not supported`);\n        return expressions;\n    }\n    /** @type {?} */\n    const fromState = match[1];\n    /** @type {?} */\n    const separator = match[2];\n    /** @type {?} */\n    const toState = match[3];\n    expressions.push(makeLambdaFromStates(fromState, toState));\n    /** @type {?} */\n    const isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;\n    if (separator[0] == '<' && !isFullAnyStateExpr) {\n        expressions.push(makeLambdaFromStates(toState, fromState));\n    }\n}\n/**\n * @param {?} alias\n * @param {?} errors\n * @return {?}\n */\nfunction parseAnimationAlias(alias, errors) {\n    switch (alias) {\n        case ':enter':\n            return 'void => *';\n        case ':leave':\n            return '* => void';\n        case ':increment':\n            return (/**\n             * @param {?} fromState\n             * @param {?} toState\n             * @return {?}\n             */\n            (fromState, toState) => parseFloat(toState) > parseFloat(fromState));\n        case ':decrement':\n            return (/**\n             * @param {?} fromState\n             * @param {?} toState\n             * @return {?}\n             */\n            (fromState, toState) => parseFloat(toState) < parseFloat(fromState));\n        default:\n            errors.push(`The transition alias value \"${alias}\" is not supported`);\n            return '* => *';\n    }\n}\n// DO NOT REFACTOR ... keep the follow set instantiations\n// with the values intact (closure compiler for some reason\n// removes follow-up lines that add the values outside of\n// the constructor...\n/** @type {?} */\nconst TRUE_BOOLEAN_VALUES = new Set(['true', '1']);\n/** @type {?} */\nconst FALSE_BOOLEAN_VALUES = new Set(['false', '0']);\n/**\n * @param {?} lhs\n * @param {?} rhs\n * @return {?}\n */\nfunction makeLambdaFromStates(lhs, rhs) {\n    /** @type {?} */\n    const LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);\n    /** @type {?} */\n    const RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);\n    return (/**\n     * @param {?} fromState\n     * @param {?} toState\n     * @return {?}\n     */\n    (fromState, toState) => {\n        /** @type {?} */\n        let lhsMatch = lhs == ANY_STATE || lhs == fromState;\n        /** @type {?} */\n        let rhsMatch = rhs == ANY_STATE || rhs == toState;\n        if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {\n            lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);\n        }\n        if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {\n            rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);\n        }\n        return lhsMatch && rhsMatch;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELF_TOKEN = ':self';\n/** @type {?} */\nconst SELF_TOKEN_REGEX = new RegExp(`\\s*${SELF_TOKEN}\\s*,?`, 'g');\n/*\n * [Validation]\n * The visitor code below will traverse the animation AST generated by the animation verb functions\n * (the output is a tree of objects) and attempt to perform a series of validations on the data. The\n * following corner-cases will be validated:\n *\n * 1. Overlap of animations\n * Given that a CSS property cannot be animated in more than one place at the same time, it's\n * important that this behavior is detected and validated. The way in which this occurs is that\n * each time a style property is examined, a string-map containing the property will be updated with\n * the start and end times for when the property is used within an animation step.\n *\n * If there are two or more parallel animations that are currently running (these are invoked by the\n * group()) on the same element then the validator will throw an error. Since the start/end timing\n * values are collected for each property then if the current animation step is animating the same\n * property and its timing values fall anywhere into the window of time that the property is\n * currently being animated within then this is what causes an error.\n *\n * 2. Timing values\n * The validator will validate to see if a timing value of `duration delay easing` or\n * `durationNumber` is valid or not.\n *\n * (note that upon validation the code below will replace the timing data with an object containing\n * {duration,delay,easing}.\n *\n * 3. Offset Validation\n * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().\n * Offsets within keyframes() are considered valid when:\n *\n *   - No offsets are used at all\n *   - Each style() entry contains an offset value\n *   - Each offset is between 0 and 1\n *   - Each offset is greater to or equal than the previous one\n *\n * Otherwise an error will be thrown.\n */\n/**\n * @param {?} driver\n * @param {?} metadata\n * @param {?} errors\n * @return {?}\n */\nfunction buildAnimationAst(driver, metadata, errors) {\n    return new AnimationAstBuilderVisitor(driver).build(metadata, errors);\n}\n/** @type {?} */\nconst ROOT_SELECTOR = '';\nclass AnimationAstBuilderVisitor {\n    /**\n     * @param {?} _driver\n     */\n    constructor(_driver) {\n        this._driver = _driver;\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} errors\n     * @return {?}\n     */\n    build(metadata, errors) {\n        /** @type {?} */\n        const context = new AnimationAstBuilderContext(errors);\n        this._resetContextStyleTimingState(context);\n        return (/** @type {?} */ (visitDslNode(this, normalizeAnimationEntry(metadata), context)));\n    }\n    /**\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    _resetContextStyleTimingState(context) {\n        context.currentQuerySelector = ROOT_SELECTOR;\n        context.collectedStyles = {};\n        context.collectedStyles[ROOT_SELECTOR] = {};\n        context.currentTime = 0;\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitTrigger(metadata, context) {\n        /** @type {?} */\n        let queryCount = context.queryCount = 0;\n        /** @type {?} */\n        let depCount = context.depCount = 0;\n        /** @type {?} */\n        const states = [];\n        /** @type {?} */\n        const transitions = [];\n        if (metadata.name.charAt(0) == '@') {\n            context.errors.push('animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\\'@foo\\', [...]))');\n        }\n        metadata.definitions.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => {\n            this._resetContextStyleTimingState(context);\n            if (def.type == 0 /* State */) {\n                /** @type {?} */\n                const stateDef = (/** @type {?} */ (def));\n                /** @type {?} */\n                const name = stateDef.name;\n                name.toString().split(/\\s*,\\s*/).forEach((/**\n                 * @param {?} n\n                 * @return {?}\n                 */\n                n => {\n                    stateDef.name = n;\n                    states.push(this.visitState(stateDef, context));\n                }));\n                stateDef.name = name;\n            }\n            else if (def.type == 1 /* Transition */) {\n                /** @type {?} */\n                const transition = this.visitTransition((/** @type {?} */ (def)), context);\n                queryCount += transition.queryCount;\n                depCount += transition.depCount;\n                transitions.push(transition);\n            }\n            else {\n                context.errors.push('only state() and transition() definitions can sit inside of a trigger()');\n            }\n        }));\n        return {\n            type: 7 /* Trigger */,\n            name: metadata.name, states, transitions, queryCount, depCount,\n            options: null\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitState(metadata, context) {\n        /** @type {?} */\n        const styleAst = this.visitStyle(metadata.styles, context);\n        /** @type {?} */\n        const astParams = (metadata.options && metadata.options.params) || null;\n        if (styleAst.containsDynamicStyles) {\n            /** @type {?} */\n            const missingSubs = new Set();\n            /** @type {?} */\n            const params = astParams || {};\n            styleAst.styles.forEach((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => {\n                if (isObject(value)) {\n                    /** @type {?} */\n                    const stylesObj = (/** @type {?} */ (value));\n                    Object.keys(stylesObj).forEach((/**\n                     * @param {?} prop\n                     * @return {?}\n                     */\n                    prop => {\n                        extractStyleParams(stylesObj[prop]).forEach((/**\n                         * @param {?} sub\n                         * @return {?}\n                         */\n                        sub => {\n                            if (!params.hasOwnProperty(sub)) {\n                                missingSubs.add(sub);\n                            }\n                        }));\n                    }));\n                }\n            }));\n            if (missingSubs.size) {\n                /** @type {?} */\n                const missingSubsArr = iteratorToArray(missingSubs.values());\n                context.errors.push(`state(\"${metadata.name}\", ...) must define default values for all the following style substitutions: ${missingSubsArr.join(', ')}`);\n            }\n        }\n        return {\n            type: 0 /* State */,\n            name: metadata.name,\n            style: styleAst,\n            options: astParams ? { params: astParams } : null\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitTransition(metadata, context) {\n        context.queryCount = 0;\n        context.depCount = 0;\n        /** @type {?} */\n        const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);\n        /** @type {?} */\n        const matchers = parseTransitionExpr(metadata.expr, context.errors);\n        return {\n            type: 1 /* Transition */,\n            matchers,\n            animation,\n            queryCount: context.queryCount,\n            depCount: context.depCount,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitSequence(metadata, context) {\n        return {\n            type: 2 /* Sequence */,\n            steps: metadata.steps.map((/**\n             * @param {?} s\n             * @return {?}\n             */\n            s => visitDslNode(this, s, context))),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitGroup(metadata, context) {\n        /** @type {?} */\n        const currentTime = context.currentTime;\n        /** @type {?} */\n        let furthestTime = 0;\n        /** @type {?} */\n        const steps = metadata.steps.map((/**\n         * @param {?} step\n         * @return {?}\n         */\n        step => {\n            context.currentTime = currentTime;\n            /** @type {?} */\n            const innerAst = visitDslNode(this, step, context);\n            furthestTime = Math.max(furthestTime, context.currentTime);\n            return innerAst;\n        }));\n        context.currentTime = furthestTime;\n        return {\n            type: 3 /* Group */,\n            steps,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimate(metadata, context) {\n        /** @type {?} */\n        const timingAst = constructTimingAst(metadata.timings, context.errors);\n        context.currentAnimateTimings = timingAst;\n        /** @type {?} */\n        let styleAst;\n        /** @type {?} */\n        let styleMetadata = metadata.styles ? metadata.styles : style({});\n        if (styleMetadata.type == 5 /* Keyframes */) {\n            styleAst = this.visitKeyframes((/** @type {?} */ (styleMetadata)), context);\n        }\n        else {\n            /** @type {?} */\n            let styleMetadata = (/** @type {?} */ (metadata.styles));\n            /** @type {?} */\n            let isEmpty = false;\n            if (!styleMetadata) {\n                isEmpty = true;\n                /** @type {?} */\n                const newStyleData = {};\n                if (timingAst.easing) {\n                    newStyleData['easing'] = timingAst.easing;\n                }\n                styleMetadata = style(newStyleData);\n            }\n            context.currentTime += timingAst.duration + timingAst.delay;\n            /** @type {?} */\n            const _styleAst = this.visitStyle(styleMetadata, context);\n            _styleAst.isEmptyStep = isEmpty;\n            styleAst = _styleAst;\n        }\n        context.currentAnimateTimings = null;\n        return {\n            type: 4 /* Animate */,\n            timings: timingAst,\n            style: styleAst,\n            options: null\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitStyle(metadata, context) {\n        /** @type {?} */\n        const ast = this._makeStyleAst(metadata, context);\n        this._validateStyleAst(ast, context);\n        return ast;\n    }\n    /**\n     * @private\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    _makeStyleAst(metadata, context) {\n        /** @type {?} */\n        const styles = [];\n        if (Array.isArray(metadata.styles)) {\n            ((/** @type {?} */ (metadata.styles))).forEach((/**\n             * @param {?} styleTuple\n             * @return {?}\n             */\n            styleTuple => {\n                if (typeof styleTuple == 'string') {\n                    if (styleTuple == AUTO_STYLE) {\n                        styles.push((/** @type {?} */ (styleTuple)));\n                    }\n                    else {\n                        context.errors.push(`The provided style string value ${styleTuple} is not allowed.`);\n                    }\n                }\n                else {\n                    styles.push((/** @type {?} */ (styleTuple)));\n                }\n            }));\n        }\n        else {\n            styles.push(metadata.styles);\n        }\n        /** @type {?} */\n        let containsDynamicStyles = false;\n        /** @type {?} */\n        let collectedEasing = null;\n        styles.forEach((/**\n         * @param {?} styleData\n         * @return {?}\n         */\n        styleData => {\n            if (isObject(styleData)) {\n                /** @type {?} */\n                const styleMap = (/** @type {?} */ (styleData));\n                /** @type {?} */\n                const easing = styleMap['easing'];\n                if (easing) {\n                    collectedEasing = (/** @type {?} */ (easing));\n                    delete styleMap['easing'];\n                }\n                if (!containsDynamicStyles) {\n                    for (let prop in styleMap) {\n                        /** @type {?} */\n                        const value = styleMap[prop];\n                        if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {\n                            containsDynamicStyles = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }));\n        return {\n            type: 6 /* Style */,\n            styles,\n            easing: collectedEasing,\n            offset: metadata.offset, containsDynamicStyles,\n            options: null\n        };\n    }\n    /**\n     * @private\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _validateStyleAst(ast, context) {\n        /** @type {?} */\n        const timings = context.currentAnimateTimings;\n        /** @type {?} */\n        let endTime = context.currentTime;\n        /** @type {?} */\n        let startTime = context.currentTime;\n        if (timings && startTime > 0) {\n            startTime -= timings.duration + timings.delay;\n        }\n        ast.styles.forEach((/**\n         * @param {?} tuple\n         * @return {?}\n         */\n        tuple => {\n            if (typeof tuple == 'string')\n                return;\n            Object.keys(tuple).forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => {\n                if (!this._driver.validateStyleProperty(prop)) {\n                    context.errors.push(`The provided animation property \"${prop}\" is not a supported CSS property for animations`);\n                    return;\n                }\n                /** @type {?} */\n                const collectedStyles = context.collectedStyles[(/** @type {?} */ (context.currentQuerySelector))];\n                /** @type {?} */\n                const collectedEntry = collectedStyles[prop];\n                /** @type {?} */\n                let updateCollectedStyle = true;\n                if (collectedEntry) {\n                    if (startTime != endTime && startTime >= collectedEntry.startTime &&\n                        endTime <= collectedEntry.endTime) {\n                        context.errors.push(`The CSS property \"${prop}\" that exists between the times of \"${collectedEntry.startTime}ms\" and \"${collectedEntry.endTime}ms\" is also being animated in a parallel animation between the times of \"${startTime}ms\" and \"${endTime}ms\"`);\n                        updateCollectedStyle = false;\n                    }\n                    // we always choose the smaller start time value since we\n                    // want to have a record of the entire animation window where\n                    // the style property is being animated in between\n                    startTime = collectedEntry.startTime;\n                }\n                if (updateCollectedStyle) {\n                    collectedStyles[prop] = { startTime, endTime };\n                }\n                if (context.options) {\n                    validateStyleParams(tuple[prop], context.options, context.errors);\n                }\n            }));\n        }));\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitKeyframes(metadata, context) {\n        /** @type {?} */\n        const ast = { type: 5 /* Keyframes */, styles: [], options: null };\n        if (!context.currentAnimateTimings) {\n            context.errors.push(`keyframes() must be placed inside of a call to animate()`);\n            return ast;\n        }\n        /** @type {?} */\n        const MAX_KEYFRAME_OFFSET = 1;\n        /** @type {?} */\n        let totalKeyframesWithOffsets = 0;\n        /** @type {?} */\n        const offsets = [];\n        /** @type {?} */\n        let offsetsOutOfOrder = false;\n        /** @type {?} */\n        let keyframesOutOfRange = false;\n        /** @type {?} */\n        let previousOffset = 0;\n        /** @type {?} */\n        const keyframes = metadata.steps.map((/**\n         * @param {?} styles\n         * @return {?}\n         */\n        styles => {\n            /** @type {?} */\n            const style = this._makeStyleAst(styles, context);\n            /** @type {?} */\n            let offsetVal = style.offset != null ? style.offset : consumeOffset(style.styles);\n            /** @type {?} */\n            let offset = 0;\n            if (offsetVal != null) {\n                totalKeyframesWithOffsets++;\n                offset = style.offset = offsetVal;\n            }\n            keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;\n            offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;\n            previousOffset = offset;\n            offsets.push(offset);\n            return style;\n        }));\n        if (keyframesOutOfRange) {\n            context.errors.push(`Please ensure that all keyframe offsets are between 0 and 1`);\n        }\n        if (offsetsOutOfOrder) {\n            context.errors.push(`Please ensure that all keyframe offsets are in order`);\n        }\n        /** @type {?} */\n        const length = metadata.steps.length;\n        /** @type {?} */\n        let generatedOffset = 0;\n        if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {\n            context.errors.push(`Not all style() steps within the declared keyframes() contain offsets`);\n        }\n        else if (totalKeyframesWithOffsets == 0) {\n            generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);\n        }\n        /** @type {?} */\n        const limit = length - 1;\n        /** @type {?} */\n        const currentTime = context.currentTime;\n        /** @type {?} */\n        const currentAnimateTimings = (/** @type {?} */ (context.currentAnimateTimings));\n        /** @type {?} */\n        const animateDuration = currentAnimateTimings.duration;\n        keyframes.forEach((/**\n         * @param {?} kf\n         * @param {?} i\n         * @return {?}\n         */\n        (kf, i) => {\n            /** @type {?} */\n            const offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];\n            /** @type {?} */\n            const durationUpToThisFrame = offset * animateDuration;\n            context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;\n            currentAnimateTimings.duration = durationUpToThisFrame;\n            this._validateStyleAst(kf, context);\n            kf.offset = offset;\n            ast.styles.push(kf);\n        }));\n        return ast;\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitReference(metadata, context) {\n        return {\n            type: 8 /* Reference */,\n            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateChild(metadata, context) {\n        context.depCount++;\n        return {\n            type: 9 /* AnimateChild */,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateRef(metadata, context) {\n        return {\n            type: 10 /* AnimateRef */,\n            animation: this.visitReference(metadata.animation, context),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitQuery(metadata, context) {\n        /** @type {?} */\n        const parentSelector = (/** @type {?} */ (context.currentQuerySelector));\n        /** @type {?} */\n        const options = (/** @type {?} */ ((metadata.options || {})));\n        context.queryCount++;\n        context.currentQuery = metadata;\n        const [selector, includeSelf] = normalizeSelector(metadata.selector);\n        context.currentQuerySelector =\n            parentSelector.length ? (parentSelector + ' ' + selector) : selector;\n        getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});\n        /** @type {?} */\n        const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);\n        context.currentQuery = null;\n        context.currentQuerySelector = parentSelector;\n        return {\n            type: 11 /* Query */,\n            selector,\n            limit: options.limit || 0,\n            optional: !!options.optional, includeSelf, animation,\n            originalSelector: metadata.selector,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitStagger(metadata, context) {\n        if (!context.currentQuery) {\n            context.errors.push(`stagger() can only be used inside of query()`);\n        }\n        /** @type {?} */\n        const timings = metadata.timings === 'full' ?\n            { duration: 0, delay: 0, easing: 'full' } :\n            resolveTiming(metadata.timings, context.errors, true);\n        return {\n            type: 12 /* Stagger */,\n            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context), timings,\n            options: null\n        };\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationAstBuilderVisitor.prototype._driver;\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction normalizeSelector(selector) {\n    /** @type {?} */\n    const hasAmpersand = selector.split(/\\s*,\\s*/).find((/**\n     * @param {?} token\n     * @return {?}\n     */\n    token => token == SELF_TOKEN)) ? true : false;\n    if (hasAmpersand) {\n        selector = selector.replace(SELF_TOKEN_REGEX, '');\n    }\n    // the :enter and :leave selectors are filled in at runtime during timeline building\n    selector = selector.replace(/@\\*/g, NG_TRIGGER_SELECTOR)\n        .replace(/@\\w+/g, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    match => NG_TRIGGER_SELECTOR + '-' + match.substr(1)))\n        .replace(/:animating/g, NG_ANIMATING_SELECTOR);\n    return [selector, hasAmpersand];\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction normalizeParams(obj) {\n    return obj ? copyObj(obj) : null;\n}\nclass AnimationAstBuilderContext {\n    /**\n     * @param {?} errors\n     */\n    constructor(errors) {\n        this.errors = errors;\n        this.queryCount = 0;\n        this.depCount = 0;\n        this.currentTransition = null;\n        this.currentQuery = null;\n        this.currentQuerySelector = null;\n        this.currentAnimateTimings = null;\n        this.currentTime = 0;\n        this.collectedStyles = {};\n        this.options = null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    AnimationAstBuilderContext.prototype.queryCount;\n    /** @type {?} */\n    AnimationAstBuilderContext.prototype.depCount;\n    /** @type {?} */\n    AnimationAstBuilderContext.prototype.currentTransition;\n    /** @type {?} */\n    AnimationAstBuilderContext.prototype.currentQuery;\n    /** @type {?} */\n    AnimationAstBuilderContext.prototype.currentQuerySelector;\n    /** @type {?} */\n    AnimationAstBuilderContext.prototype.currentAnimateTimings;\n    /** @type {?} */\n    AnimationAstBuilderContext.prototype.currentTime;\n    /** @type {?} */\n    AnimationAstBuilderContext.prototype.collectedStyles;\n    /** @type {?} */\n    AnimationAstBuilderContext.prototype.options;\n    /** @type {?} */\n    AnimationAstBuilderContext.prototype.errors;\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction consumeOffset(styles) {\n    if (typeof styles == 'string')\n        return null;\n    /** @type {?} */\n    let offset = null;\n    if (Array.isArray(styles)) {\n        styles.forEach((/**\n         * @param {?} styleTuple\n         * @return {?}\n         */\n        styleTuple => {\n            if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {\n                /** @type {?} */\n                const obj = (/** @type {?} */ (styleTuple));\n                offset = parseFloat((/** @type {?} */ (obj['offset'])));\n                delete obj['offset'];\n            }\n        }));\n    }\n    else if (isObject(styles) && styles.hasOwnProperty('offset')) {\n        /** @type {?} */\n        const obj = (/** @type {?} */ (styles));\n        offset = parseFloat((/** @type {?} */ (obj['offset'])));\n        delete obj['offset'];\n    }\n    return offset;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isObject(value) {\n    return !Array.isArray(value) && typeof value == 'object';\n}\n/**\n * @param {?} value\n * @param {?} errors\n * @return {?}\n */\nfunction constructTimingAst(value, errors) {\n    /** @type {?} */\n    let timings = null;\n    if (value.hasOwnProperty('duration')) {\n        timings = (/** @type {?} */ (value));\n    }\n    else if (typeof value == 'number') {\n        /** @type {?} */\n        const duration = resolveTiming((/** @type {?} */ (value)), errors).duration;\n        return makeTimingAst((/** @type {?} */ (duration)), 0, '');\n    }\n    /** @type {?} */\n    const strValue = (/** @type {?} */ (value));\n    /** @type {?} */\n    const isDynamic = strValue.split(/\\s+/).some((/**\n     * @param {?} v\n     * @return {?}\n     */\n    v => v.charAt(0) == '{' && v.charAt(1) == '{'));\n    if (isDynamic) {\n        /** @type {?} */\n        const ast = (/** @type {?} */ (makeTimingAst(0, 0, '')));\n        ast.dynamic = true;\n        ast.strValue = strValue;\n        return (/** @type {?} */ (ast));\n    }\n    timings = timings || resolveTiming(strValue, errors);\n    return makeTimingAst(timings.duration, timings.delay, timings.easing);\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction normalizeAnimationOptions(options) {\n    if (options) {\n        options = copyObj(options);\n        if (options['params']) {\n            options['params'] = (/** @type {?} */ (normalizeParams(options['params'])));\n        }\n    }\n    else {\n        options = {};\n    }\n    return options;\n}\n/**\n * @param {?} duration\n * @param {?} delay\n * @param {?} easing\n * @return {?}\n */\nfunction makeTimingAst(duration, delay, easing) {\n    return { duration, delay, easing };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction AnimationTimelineInstruction() { }\nif (false) {\n    /** @type {?} */\n    AnimationTimelineInstruction.prototype.element;\n    /** @type {?} */\n    AnimationTimelineInstruction.prototype.keyframes;\n    /** @type {?} */\n    AnimationTimelineInstruction.prototype.preStyleProps;\n    /** @type {?} */\n    AnimationTimelineInstruction.prototype.postStyleProps;\n    /** @type {?} */\n    AnimationTimelineInstruction.prototype.duration;\n    /** @type {?} */\n    AnimationTimelineInstruction.prototype.delay;\n    /** @type {?} */\n    AnimationTimelineInstruction.prototype.totalTime;\n    /** @type {?} */\n    AnimationTimelineInstruction.prototype.easing;\n    /** @type {?|undefined} */\n    AnimationTimelineInstruction.prototype.stretchStartingKeyframe;\n    /** @type {?} */\n    AnimationTimelineInstruction.prototype.subTimeline;\n}\n/**\n * @param {?} element\n * @param {?} keyframes\n * @param {?} preStyleProps\n * @param {?} postStyleProps\n * @param {?} duration\n * @param {?} delay\n * @param {?=} easing\n * @param {?=} subTimeline\n * @return {?}\n */\nfunction createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay, easing = null, subTimeline = false) {\n    return {\n        type: 1 /* TimelineAnimation */,\n        element,\n        keyframes,\n        preStyleProps,\n        postStyleProps,\n        duration,\n        delay,\n        totalTime: duration + delay, easing, subTimeline\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ElementInstructionMap {\n    constructor() {\n        this._map = new Map();\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    consume(element) {\n        /** @type {?} */\n        let instructions = this._map.get(element);\n        if (instructions) {\n            this._map.delete(element);\n        }\n        else {\n            instructions = [];\n        }\n        return instructions;\n    }\n    /**\n     * @param {?} element\n     * @param {?} instructions\n     * @return {?}\n     */\n    append(element, instructions) {\n        /** @type {?} */\n        let existingInstructions = this._map.get(element);\n        if (!existingInstructions) {\n            this._map.set(element, existingInstructions = []);\n        }\n        existingInstructions.push(...instructions);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    has(element) { return this._map.has(element); }\n    /**\n     * @return {?}\n     */\n    clear() { this._map.clear(); }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementInstructionMap.prototype._map;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ONE_FRAME_IN_MILLISECONDS = 1;\n/** @type {?} */\nconst ENTER_TOKEN = ':enter';\n/** @type {?} */\nconst ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');\n/** @type {?} */\nconst LEAVE_TOKEN = ':leave';\n/** @type {?} */\nconst LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');\n/*\n * The code within this file aims to generate web-animations-compatible keyframes from Angular's\n * animation DSL code.\n *\n * The code below will be converted from:\n *\n * ```\n * sequence([\n *   style({ opacity: 0 }),\n *   animate(1000, style({ opacity: 0 }))\n * ])\n * ```\n *\n * To:\n * ```\n * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]\n * duration = 1000\n * delay = 0\n * easing = ''\n * ```\n *\n * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a\n * combination of prototypical inheritance, AST traversal and merge-sort-like algorithms are used.\n *\n * [AST Traversal]\n * Each of the animation verbs, when executed, will return an string-map object representing what\n * type of action it is (style, animate, group, etc...) and the data associated with it. This means\n * that when functional composition mix of these functions is evaluated (like in the example above)\n * then it will end up producing a tree of objects representing the animation itself.\n *\n * When this animation object tree is processed by the visitor code below it will visit each of the\n * verb statements within the visitor. And during each visit it will build the context of the\n * animation keyframes by interacting with the `TimelineBuilder`.\n *\n * [TimelineBuilder]\n * This class is responsible for tracking the styles and building a series of keyframe objects for a\n * timeline between a start and end time. The builder starts off with an initial timeline and each\n * time the AST comes across a `group()`, `keyframes()` or a combination of the two wihtin a\n * `sequence()` then it will generate a sub timeline for each step as well as a new one after\n * they are complete.\n *\n * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub\n * timeline was created (based on one of the cases above) then the parent timeline will attempt to\n * merge the styles used within the sub timelines into itself (only with group() this will happen).\n * This happens with a merge operation (much like how the merge works in mergesort) and it will only\n * copy the most recently used styles from the sub timelines into the parent timeline. This ensures\n * that if the styles are used later on in another phase of the animation then they will be the most\n * up-to-date values.\n *\n * [How Missing Styles Are Updated]\n * Each timeline has a `backFill` property which is responsible for filling in new styles into\n * already processed keyframes if a new style shows up later within the animation sequence.\n *\n * ```\n * sequence([\n *   style({ width: 0 }),\n *   animate(1000, style({ width: 100 })),\n *   animate(1000, style({ width: 200 })),\n *   animate(1000, style({ width: 300 }))\n *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere\n * else\n * ])\n * ```\n *\n * What is happening here is that the `height` value is added later in the sequence, but is missing\n * from all previous animation steps. Therefore when a keyframe is created it would also be missing\n * from all previous keyframes up until where it is first used. For the timeline keyframe generation\n * to properly fill in the style it will place the previous value (the value from the parent\n * timeline) or a default value of `*` into the backFill object. Given that each of the keyframe\n * styles are objects that prototypically inhert from the backFill object, this means that if a\n * value is added into the backFill then it will automatically propagate any missing values to all\n * keyframes. Therefore the missing `height` value will be properly filled into the already\n * processed keyframes.\n *\n * When a sub-timeline is created it will have its own backFill property. This is done so that\n * styles present within the sub-timeline do not accidentally seep into the previous/future timeline\n * keyframes\n *\n * (For prototypically-inherited contents to be detected a `for(i in obj)` loop must be used.)\n *\n * [Validation]\n * The code in this file is not responsible for validation. That functionality happens with within\n * the `AnimationValidatorVisitor` code.\n */\n/**\n * @param {?} driver\n * @param {?} rootElement\n * @param {?} ast\n * @param {?} enterClassName\n * @param {?} leaveClassName\n * @param {?=} startingStyles\n * @param {?=} finalStyles\n * @param {?=} options\n * @param {?=} subInstructions\n * @param {?=} errors\n * @return {?}\n */\nfunction buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles = {}, finalStyles = {}, options, subInstructions, errors = []) {\n    return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);\n}\nclass AnimationTimelineBuilderVisitor {\n    /**\n     * @param {?} driver\n     * @param {?} rootElement\n     * @param {?} ast\n     * @param {?} enterClassName\n     * @param {?} leaveClassName\n     * @param {?} startingStyles\n     * @param {?} finalStyles\n     * @param {?} options\n     * @param {?=} subInstructions\n     * @param {?=} errors\n     * @return {?}\n     */\n    buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors = []) {\n        subInstructions = subInstructions || new ElementInstructionMap();\n        /** @type {?} */\n        const context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);\n        context.options = options;\n        context.currentTimeline.setStyles([startingStyles], null, context.errors, options);\n        visitDslNode(this, ast, context);\n        // this checks to see if an actual animation happened\n        /** @type {?} */\n        const timelines = context.timelines.filter((/**\n         * @param {?} timeline\n         * @return {?}\n         */\n        timeline => timeline.containsAnimation()));\n        if (timelines.length && Object.keys(finalStyles).length) {\n            /** @type {?} */\n            const tl = timelines[timelines.length - 1];\n            if (!tl.allowOnlyTimelineStyles()) {\n                tl.setStyles([finalStyles], null, context.errors, options);\n            }\n        }\n        return timelines.length ? timelines.map((/**\n         * @param {?} timeline\n         * @return {?}\n         */\n        timeline => timeline.buildKeyframes())) :\n            [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitTrigger(ast, context) {\n        // these values are not visited in this AST\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitState(ast, context) {\n        // these values are not visited in this AST\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitTransition(ast, context) {\n        // these values are not visited in this AST\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateChild(ast, context) {\n        /** @type {?} */\n        const elementInstructions = context.subInstructions.consume(context.element);\n        if (elementInstructions) {\n            /** @type {?} */\n            const innerContext = context.createSubContext(ast.options);\n            /** @type {?} */\n            const startTime = context.currentTimeline.currentTime;\n            /** @type {?} */\n            const endTime = this._visitSubInstructions(elementInstructions, innerContext, (/** @type {?} */ (innerContext.options)));\n            if (startTime != endTime) {\n                // we do this on the upper context because we created a sub context for\n                // the sub child animations\n                context.transformIntoNewTimeline(endTime);\n            }\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateRef(ast, context) {\n        /** @type {?} */\n        const innerContext = context.createSubContext(ast.options);\n        innerContext.transformIntoNewTimeline();\n        this.visitReference(ast.animation, innerContext);\n        context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);\n        context.previousNode = ast;\n    }\n    /**\n     * @private\n     * @param {?} instructions\n     * @param {?} context\n     * @param {?} options\n     * @return {?}\n     */\n    _visitSubInstructions(instructions, context, options) {\n        /** @type {?} */\n        const startTime = context.currentTimeline.currentTime;\n        /** @type {?} */\n        let furthestTime = startTime;\n        // this is a special-case for when a user wants to skip a sub\n        // animation from being fired entirely.\n        /** @type {?} */\n        const duration = options.duration != null ? resolveTimingValue(options.duration) : null;\n        /** @type {?} */\n        const delay = options.delay != null ? resolveTimingValue(options.delay) : null;\n        if (duration !== 0) {\n            instructions.forEach((/**\n             * @param {?} instruction\n             * @return {?}\n             */\n            instruction => {\n                /** @type {?} */\n                const instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);\n                furthestTime =\n                    Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);\n            }));\n        }\n        return furthestTime;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitReference(ast, context) {\n        context.updateOptions(ast.options, true);\n        visitDslNode(this, ast.animation, context);\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitSequence(ast, context) {\n        /** @type {?} */\n        const subContextCount = context.subContextCount;\n        /** @type {?} */\n        let ctx = context;\n        /** @type {?} */\n        const options = ast.options;\n        if (options && (options.params || options.delay)) {\n            ctx = context.createSubContext(options);\n            ctx.transformIntoNewTimeline();\n            if (options.delay != null) {\n                if (ctx.previousNode.type == 6 /* Style */) {\n                    ctx.currentTimeline.snapshotCurrentStyles();\n                    ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n                }\n                /** @type {?} */\n                const delay = resolveTimingValue(options.delay);\n                ctx.delayNextStep(delay);\n            }\n        }\n        if (ast.steps.length) {\n            ast.steps.forEach((/**\n             * @param {?} s\n             * @return {?}\n             */\n            s => visitDslNode(this, s, ctx)));\n            // this is here just incase the inner steps only contain or end with a style() call\n            ctx.currentTimeline.applyStylesToKeyframe();\n            // this means that some animation function within the sequence\n            // ended up creating a sub timeline (which means the current\n            // timeline cannot overlap with the contents of the sequence)\n            if (ctx.subContextCount > subContextCount) {\n                ctx.transformIntoNewTimeline();\n            }\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitGroup(ast, context) {\n        /** @type {?} */\n        const innerTimelines = [];\n        /** @type {?} */\n        let furthestTime = context.currentTimeline.currentTime;\n        /** @type {?} */\n        const delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;\n        ast.steps.forEach((/**\n         * @param {?} s\n         * @return {?}\n         */\n        s => {\n            /** @type {?} */\n            const innerContext = context.createSubContext(ast.options);\n            if (delay) {\n                innerContext.delayNextStep(delay);\n            }\n            visitDslNode(this, s, innerContext);\n            furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);\n            innerTimelines.push(innerContext.currentTimeline);\n        }));\n        // this operation is run after the AST loop because otherwise\n        // if the parent timeline's collected styles were updated then\n        // it would pass in invalid data into the new-to-be forked items\n        innerTimelines.forEach((/**\n         * @param {?} timeline\n         * @return {?}\n         */\n        timeline => context.currentTimeline.mergeTimelineCollectedStyles(timeline)));\n        context.transformIntoNewTimeline(furthestTime);\n        context.previousNode = ast;\n    }\n    /**\n     * @private\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _visitTiming(ast, context) {\n        if (((/** @type {?} */ (ast))).dynamic) {\n            /** @type {?} */\n            const strValue = ((/** @type {?} */ (ast))).strValue;\n            /** @type {?} */\n            const timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;\n            return resolveTiming(timingValue, context.errors);\n        }\n        else {\n            return { duration: ast.duration, delay: ast.delay, easing: ast.easing };\n        }\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimate(ast, context) {\n        /** @type {?} */\n        const timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);\n        /** @type {?} */\n        const timeline = context.currentTimeline;\n        if (timings.delay) {\n            context.incrementTime(timings.delay);\n            timeline.snapshotCurrentStyles();\n        }\n        /** @type {?} */\n        const style = ast.style;\n        if (style.type == 5 /* Keyframes */) {\n            this.visitKeyframes(style, context);\n        }\n        else {\n            context.incrementTime(timings.duration);\n            this.visitStyle((/** @type {?} */ (style)), context);\n            timeline.applyStylesToKeyframe();\n        }\n        context.currentAnimateTimings = null;\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitStyle(ast, context) {\n        /** @type {?} */\n        const timeline = context.currentTimeline;\n        /** @type {?} */\n        const timings = (/** @type {?} */ (context.currentAnimateTimings));\n        // this is a special case for when a style() call\n        // directly follows  an animate() call (but not inside of an animate() call)\n        if (!timings && timeline.getCurrentStyleProperties().length) {\n            timeline.forwardFrame();\n        }\n        /** @type {?} */\n        const easing = (timings && timings.easing) || ast.easing;\n        if (ast.isEmptyStep) {\n            timeline.applyEmptyStep(easing);\n        }\n        else {\n            timeline.setStyles(ast.styles, easing, context.errors, context.options);\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitKeyframes(ast, context) {\n        /** @type {?} */\n        const currentAnimateTimings = (/** @type {?} */ (context.currentAnimateTimings));\n        /** @type {?} */\n        const startTime = ((/** @type {?} */ (context.currentTimeline))).duration;\n        /** @type {?} */\n        const duration = currentAnimateTimings.duration;\n        /** @type {?} */\n        const innerContext = context.createSubContext();\n        /** @type {?} */\n        const innerTimeline = innerContext.currentTimeline;\n        innerTimeline.easing = currentAnimateTimings.easing;\n        ast.styles.forEach((/**\n         * @param {?} step\n         * @return {?}\n         */\n        step => {\n            /** @type {?} */\n            const offset = step.offset || 0;\n            innerTimeline.forwardTime(offset * duration);\n            innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);\n            innerTimeline.applyStylesToKeyframe();\n        }));\n        // this will ensure that the parent timeline gets all the styles from\n        // the child even if the new timeline below is not used\n        context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);\n        // we do this because the window between this timeline and the sub timeline\n        // should ensure that the styles within are exactly the same as they were before\n        context.transformIntoNewTimeline(startTime + duration);\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitQuery(ast, context) {\n        // in the event that the first step before this is a style step we need\n        // to ensure the styles are applied before the children are animated\n        /** @type {?} */\n        const startTime = context.currentTimeline.currentTime;\n        /** @type {?} */\n        const options = (/** @type {?} */ ((ast.options || {})));\n        /** @type {?} */\n        const delay = options.delay ? resolveTimingValue(options.delay) : 0;\n        if (delay && (context.previousNode.type === 6 /* Style */ ||\n            (startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length))) {\n            context.currentTimeline.snapshotCurrentStyles();\n            context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        }\n        /** @type {?} */\n        let furthestTime = startTime;\n        /** @type {?} */\n        const elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);\n        context.currentQueryTotal = elms.length;\n        /** @type {?} */\n        let sameElementTimeline = null;\n        elms.forEach((/**\n         * @param {?} element\n         * @param {?} i\n         * @return {?}\n         */\n        (element, i) => {\n            context.currentQueryIndex = i;\n            /** @type {?} */\n            const innerContext = context.createSubContext(ast.options, element);\n            if (delay) {\n                innerContext.delayNextStep(delay);\n            }\n            if (element === context.element) {\n                sameElementTimeline = innerContext.currentTimeline;\n            }\n            visitDslNode(this, ast.animation, innerContext);\n            // this is here just incase the inner steps only contain or end\n            // with a style() call (which is here to signal that this is a preparatory\n            // call to style an element before it is animated again)\n            innerContext.currentTimeline.applyStylesToKeyframe();\n            /** @type {?} */\n            const endTime = innerContext.currentTimeline.currentTime;\n            furthestTime = Math.max(furthestTime, endTime);\n        }));\n        context.currentQueryIndex = 0;\n        context.currentQueryTotal = 0;\n        context.transformIntoNewTimeline(furthestTime);\n        if (sameElementTimeline) {\n            context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);\n            context.currentTimeline.snapshotCurrentStyles();\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitStagger(ast, context) {\n        /** @type {?} */\n        const parentContext = (/** @type {?} */ (context.parentContext));\n        /** @type {?} */\n        const tl = context.currentTimeline;\n        /** @type {?} */\n        const timings = ast.timings;\n        /** @type {?} */\n        const duration = Math.abs(timings.duration);\n        /** @type {?} */\n        const maxTime = duration * (context.currentQueryTotal - 1);\n        /** @type {?} */\n        let delay = duration * context.currentQueryIndex;\n        /** @type {?} */\n        let staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;\n        switch (staggerTransformer) {\n            case 'reverse':\n                delay = maxTime - delay;\n                break;\n            case 'full':\n                delay = parentContext.currentStaggerTime;\n                break;\n        }\n        /** @type {?} */\n        const timeline = context.currentTimeline;\n        if (delay) {\n            timeline.delayNextStep(delay);\n        }\n        /** @type {?} */\n        const startingTime = timeline.currentTime;\n        visitDslNode(this, ast.animation, context);\n        context.previousNode = ast;\n        // time = duration + delay\n        // the reason why this computation is so complex is because\n        // the inner timeline may either have a delay value or a stretched\n        // keyframe depending on if a subtimeline is not used or is used.\n        parentContext.currentStaggerTime =\n            (tl.currentTime - startingTime) + (tl.startTime - parentContext.currentTimeline.startTime);\n    }\n}\n/** @type {?} */\nconst DEFAULT_NOOP_PREVIOUS_NODE = (/** @type {?} */ ({}));\nclass AnimationTimelineContext {\n    /**\n     * @param {?} _driver\n     * @param {?} element\n     * @param {?} subInstructions\n     * @param {?} _enterClassName\n     * @param {?} _leaveClassName\n     * @param {?} errors\n     * @param {?} timelines\n     * @param {?=} initialTimeline\n     */\n    constructor(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {\n        this._driver = _driver;\n        this.element = element;\n        this.subInstructions = subInstructions;\n        this._enterClassName = _enterClassName;\n        this._leaveClassName = _leaveClassName;\n        this.errors = errors;\n        this.timelines = timelines;\n        this.parentContext = null;\n        this.currentAnimateTimings = null;\n        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        this.subContextCount = 0;\n        this.options = {};\n        this.currentQueryIndex = 0;\n        this.currentQueryTotal = 0;\n        this.currentStaggerTime = 0;\n        this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);\n        timelines.push(this.currentTimeline);\n    }\n    /**\n     * @return {?}\n     */\n    get params() { return this.options.params; }\n    /**\n     * @param {?} options\n     * @param {?=} skipIfExists\n     * @return {?}\n     */\n    updateOptions(options, skipIfExists) {\n        if (!options)\n            return;\n        /** @type {?} */\n        const newOptions = (/** @type {?} */ (options));\n        /** @type {?} */\n        let optionsToUpdate = this.options;\n        // NOTE: this will get patched up when other animation methods support duration overrides\n        if (newOptions.duration != null) {\n            ((/** @type {?} */ (optionsToUpdate))).duration = resolveTimingValue(newOptions.duration);\n        }\n        if (newOptions.delay != null) {\n            optionsToUpdate.delay = resolveTimingValue(newOptions.delay);\n        }\n        /** @type {?} */\n        const newParams = newOptions.params;\n        if (newParams) {\n            /** @type {?} */\n            let paramsToUpdate = (/** @type {?} */ (optionsToUpdate.params));\n            if (!paramsToUpdate) {\n                paramsToUpdate = this.options.params = {};\n            }\n            Object.keys(newParams).forEach((/**\n             * @param {?} name\n             * @return {?}\n             */\n            name => {\n                if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {\n                    paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, this.errors);\n                }\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _copyOptions() {\n        /** @type {?} */\n        const options = {};\n        if (this.options) {\n            /** @type {?} */\n            const oldParams = this.options.params;\n            if (oldParams) {\n                /** @type {?} */\n                const params = options['params'] = {};\n                Object.keys(oldParams).forEach((/**\n                 * @param {?} name\n                 * @return {?}\n                 */\n                name => { params[name] = oldParams[name]; }));\n            }\n        }\n        return options;\n    }\n    /**\n     * @param {?=} options\n     * @param {?=} element\n     * @param {?=} newTime\n     * @return {?}\n     */\n    createSubContext(options = null, element, newTime) {\n        /** @type {?} */\n        const target = element || this.element;\n        /** @type {?} */\n        const context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));\n        context.previousNode = this.previousNode;\n        context.currentAnimateTimings = this.currentAnimateTimings;\n        context.options = this._copyOptions();\n        context.updateOptions(options);\n        context.currentQueryIndex = this.currentQueryIndex;\n        context.currentQueryTotal = this.currentQueryTotal;\n        context.parentContext = this;\n        this.subContextCount++;\n        return context;\n    }\n    /**\n     * @param {?=} newTime\n     * @return {?}\n     */\n    transformIntoNewTimeline(newTime) {\n        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        this.currentTimeline = this.currentTimeline.fork(this.element, newTime);\n        this.timelines.push(this.currentTimeline);\n        return this.currentTimeline;\n    }\n    /**\n     * @param {?} instruction\n     * @param {?} duration\n     * @param {?} delay\n     * @return {?}\n     */\n    appendInstructionToTimeline(instruction, duration, delay) {\n        /** @type {?} */\n        const updatedTimings = {\n            duration: duration != null ? duration : instruction.duration,\n            delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,\n            easing: ''\n        };\n        /** @type {?} */\n        const builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);\n        this.timelines.push(builder);\n        return updatedTimings;\n    }\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    incrementTime(time) {\n        this.currentTimeline.forwardTime(this.currentTimeline.duration + time);\n    }\n    /**\n     * @param {?} delay\n     * @return {?}\n     */\n    delayNextStep(delay) {\n        // negative delays are not yet supported\n        if (delay > 0) {\n            this.currentTimeline.delayNextStep(delay);\n        }\n    }\n    /**\n     * @param {?} selector\n     * @param {?} originalSelector\n     * @param {?} limit\n     * @param {?} includeSelf\n     * @param {?} optional\n     * @param {?} errors\n     * @return {?}\n     */\n    invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {\n        /** @type {?} */\n        let results = [];\n        if (includeSelf) {\n            results.push(this.element);\n        }\n        if (selector.length > 0) { // if :self is only used then the selector is empty\n            selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);\n            selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);\n            /** @type {?} */\n            const multi = limit != 1;\n            /** @type {?} */\n            let elements = this._driver.query(this.element, selector, multi);\n            if (limit !== 0) {\n                elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) :\n                    elements.slice(0, limit);\n            }\n            results.push(...elements);\n        }\n        if (!optional && results.length == 0) {\n            errors.push(`\\`query(\"${originalSelector}\")\\` returned zero elements. (Use \\`query(\"${originalSelector}\", { optional: true })\\` if you wish to allow this.)`);\n        }\n        return results;\n    }\n}\nif (false) {\n    /** @type {?} */\n    AnimationTimelineContext.prototype.parentContext;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.currentTimeline;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.currentAnimateTimings;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.previousNode;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.subContextCount;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.options;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.currentQueryIndex;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.currentQueryTotal;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.currentStaggerTime;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationTimelineContext.prototype._driver;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.element;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.subInstructions;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationTimelineContext.prototype._enterClassName;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationTimelineContext.prototype._leaveClassName;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.errors;\n    /** @type {?} */\n    AnimationTimelineContext.prototype.timelines;\n}\nclass TimelineBuilder {\n    /**\n     * @param {?} _driver\n     * @param {?} element\n     * @param {?} startTime\n     * @param {?=} _elementTimelineStylesLookup\n     */\n    constructor(_driver, element, startTime, _elementTimelineStylesLookup) {\n        this._driver = _driver;\n        this.element = element;\n        this.startTime = startTime;\n        this._elementTimelineStylesLookup = _elementTimelineStylesLookup;\n        this.duration = 0;\n        this._previousKeyframe = {};\n        this._currentKeyframe = {};\n        this._keyframes = new Map();\n        this._styleSummary = {};\n        this._pendingStyles = {};\n        this._backFill = {};\n        this._currentEmptyStepKeyframe = null;\n        if (!this._elementTimelineStylesLookup) {\n            this._elementTimelineStylesLookup = new Map();\n        }\n        this._localTimelineStyles = Object.create(this._backFill, {});\n        this._globalTimelineStyles = (/** @type {?} */ (this._elementTimelineStylesLookup.get(element)));\n        if (!this._globalTimelineStyles) {\n            this._globalTimelineStyles = this._localTimelineStyles;\n            this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);\n        }\n        this._loadKeyframe();\n    }\n    /**\n     * @return {?}\n     */\n    containsAnimation() {\n        switch (this._keyframes.size) {\n            case 0:\n                return false;\n            case 1:\n                return this.getCurrentStyleProperties().length > 0;\n            default:\n                return true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getCurrentStyleProperties() { return Object.keys(this._currentKeyframe); }\n    /**\n     * @return {?}\n     */\n    get currentTime() { return this.startTime + this.duration; }\n    /**\n     * @param {?} delay\n     * @return {?}\n     */\n    delayNextStep(delay) {\n        // in the event that a style() step is placed right before a stagger()\n        // and that style() step is the very first style() value in the animation\n        // then we need to make a copy of the keyframe [0, copy, 1] so that the delay\n        // properly applies the style() values to work with the stagger...\n        /** @type {?} */\n        const hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;\n        if (this.duration || hasPreStyleStep) {\n            this.forwardTime(this.currentTime + delay);\n            if (hasPreStyleStep) {\n                this.snapshotCurrentStyles();\n            }\n        }\n        else {\n            this.startTime += delay;\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?=} currentTime\n     * @return {?}\n     */\n    fork(element, currentTime) {\n        this.applyStylesToKeyframe();\n        return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _loadKeyframe() {\n        if (this._currentKeyframe) {\n            this._previousKeyframe = this._currentKeyframe;\n        }\n        this._currentKeyframe = (/** @type {?} */ (this._keyframes.get(this.duration)));\n        if (!this._currentKeyframe) {\n            this._currentKeyframe = Object.create(this._backFill, {});\n            this._keyframes.set(this.duration, this._currentKeyframe);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    forwardFrame() {\n        this.duration += ONE_FRAME_IN_MILLISECONDS;\n        this._loadKeyframe();\n    }\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    forwardTime(time) {\n        this.applyStylesToKeyframe();\n        this.duration = time;\n        this._loadKeyframe();\n    }\n    /**\n     * @private\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    _updateStyle(prop, value) {\n        this._localTimelineStyles[prop] = value;\n        this._globalTimelineStyles[prop] = value;\n        this._styleSummary[prop] = { time: this.currentTime, value };\n    }\n    /**\n     * @return {?}\n     */\n    allowOnlyTimelineStyles() { return this._currentEmptyStepKeyframe !== this._currentKeyframe; }\n    /**\n     * @param {?} easing\n     * @return {?}\n     */\n    applyEmptyStep(easing) {\n        if (easing) {\n            this._previousKeyframe['easing'] = easing;\n        }\n        // special case for animate(duration):\n        // all missing styles are filled with a `*` value then\n        // if any destination styles are filled in later on the same\n        // keyframe then they will override the overridden styles\n        // We use `_globalTimelineStyles` here because there may be\n        // styles in previous keyframes that are not present in this timeline\n        Object.keys(this._globalTimelineStyles).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            this._backFill[prop] = this._globalTimelineStyles[prop] || AUTO_STYLE;\n            this._currentKeyframe[prop] = AUTO_STYLE;\n        }));\n        this._currentEmptyStepKeyframe = this._currentKeyframe;\n    }\n    /**\n     * @param {?} input\n     * @param {?} easing\n     * @param {?} errors\n     * @param {?=} options\n     * @return {?}\n     */\n    setStyles(input, easing, errors, options) {\n        if (easing) {\n            this._previousKeyframe['easing'] = easing;\n        }\n        /** @type {?} */\n        const params = (options && options.params) || {};\n        /** @type {?} */\n        const styles = flattenStyles(input, this._globalTimelineStyles);\n        Object.keys(styles).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            /** @type {?} */\n            const val = interpolateParams(styles[prop], params, errors);\n            this._pendingStyles[prop] = val;\n            if (!this._localTimelineStyles.hasOwnProperty(prop)) {\n                this._backFill[prop] = this._globalTimelineStyles.hasOwnProperty(prop) ?\n                    this._globalTimelineStyles[prop] :\n                    AUTO_STYLE;\n            }\n            this._updateStyle(prop, val);\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    applyStylesToKeyframe() {\n        /** @type {?} */\n        const styles = this._pendingStyles;\n        /** @type {?} */\n        const props = Object.keys(styles);\n        if (props.length == 0)\n            return;\n        this._pendingStyles = {};\n        props.forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            /** @type {?} */\n            const val = styles[prop];\n            this._currentKeyframe[prop] = val;\n        }));\n        Object.keys(this._localTimelineStyles).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            if (!this._currentKeyframe.hasOwnProperty(prop)) {\n                this._currentKeyframe[prop] = this._localTimelineStyles[prop];\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    snapshotCurrentStyles() {\n        Object.keys(this._localTimelineStyles).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            /** @type {?} */\n            const val = this._localTimelineStyles[prop];\n            this._pendingStyles[prop] = val;\n            this._updateStyle(prop, val);\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    getFinalKeyframe() { return this._keyframes.get(this.duration); }\n    /**\n     * @return {?}\n     */\n    get properties() {\n        /** @type {?} */\n        const properties = [];\n        for (let prop in this._currentKeyframe) {\n            properties.push(prop);\n        }\n        return properties;\n    }\n    /**\n     * @param {?} timeline\n     * @return {?}\n     */\n    mergeTimelineCollectedStyles(timeline) {\n        Object.keys(timeline._styleSummary).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            /** @type {?} */\n            const details0 = this._styleSummary[prop];\n            /** @type {?} */\n            const details1 = timeline._styleSummary[prop];\n            if (!details0 || details1.time > details0.time) {\n                this._updateStyle(prop, details1.value);\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    buildKeyframes() {\n        this.applyStylesToKeyframe();\n        /** @type {?} */\n        const preStyleProps = new Set();\n        /** @type {?} */\n        const postStyleProps = new Set();\n        /** @type {?} */\n        const isEmpty = this._keyframes.size === 1 && this.duration === 0;\n        /** @type {?} */\n        let finalKeyframes = [];\n        this._keyframes.forEach((/**\n         * @param {?} keyframe\n         * @param {?} time\n         * @return {?}\n         */\n        (keyframe, time) => {\n            /** @type {?} */\n            const finalKeyframe = copyStyles(keyframe, true);\n            Object.keys(finalKeyframe).forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => {\n                /** @type {?} */\n                const value = finalKeyframe[prop];\n                if (value == ÉµPRE_STYLE) {\n                    preStyleProps.add(prop);\n                }\n                else if (value == AUTO_STYLE) {\n                    postStyleProps.add(prop);\n                }\n            }));\n            if (!isEmpty) {\n                finalKeyframe['offset'] = time / this.duration;\n            }\n            finalKeyframes.push(finalKeyframe);\n        }));\n        /** @type {?} */\n        const preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];\n        /** @type {?} */\n        const postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : [];\n        // special case for a 0-second animation (which is designed just to place styles onscreen)\n        if (isEmpty) {\n            /** @type {?} */\n            const kf0 = finalKeyframes[0];\n            /** @type {?} */\n            const kf1 = copyObj(kf0);\n            kf0['offset'] = 0;\n            kf1['offset'] = 1;\n            finalKeyframes = [kf0, kf1];\n        }\n        return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);\n    }\n}\nif (false) {\n    /** @type {?} */\n    TimelineBuilder.prototype.duration;\n    /** @type {?} */\n    TimelineBuilder.prototype.easing;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._previousKeyframe;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._currentKeyframe;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._keyframes;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._styleSummary;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._localTimelineStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._globalTimelineStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._pendingStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._backFill;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._currentEmptyStepKeyframe;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._driver;\n    /** @type {?} */\n    TimelineBuilder.prototype.element;\n    /** @type {?} */\n    TimelineBuilder.prototype.startTime;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineBuilder.prototype._elementTimelineStylesLookup;\n}\nclass SubTimelineBuilder extends TimelineBuilder {\n    /**\n     * @param {?} driver\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} preStyleProps\n     * @param {?} postStyleProps\n     * @param {?} timings\n     * @param {?=} _stretchStartingKeyframe\n     */\n    constructor(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe = false) {\n        super(driver, element, timings.delay);\n        this.element = element;\n        this.keyframes = keyframes;\n        this.preStyleProps = preStyleProps;\n        this.postStyleProps = postStyleProps;\n        this._stretchStartingKeyframe = _stretchStartingKeyframe;\n        this.timings = { duration: timings.duration, delay: timings.delay, easing: timings.easing };\n    }\n    /**\n     * @return {?}\n     */\n    containsAnimation() { return this.keyframes.length > 1; }\n    /**\n     * @return {?}\n     */\n    buildKeyframes() {\n        /** @type {?} */\n        let keyframes = this.keyframes;\n        let { delay, duration, easing } = this.timings;\n        if (this._stretchStartingKeyframe && delay) {\n            /** @type {?} */\n            const newKeyframes = [];\n            /** @type {?} */\n            const totalTime = duration + delay;\n            /** @type {?} */\n            const startingGap = delay / totalTime;\n            // the original starting keyframe now starts once the delay is done\n            /** @type {?} */\n            const newFirstKeyframe = copyStyles(keyframes[0], false);\n            newFirstKeyframe['offset'] = 0;\n            newKeyframes.push(newFirstKeyframe);\n            /** @type {?} */\n            const oldFirstKeyframe = copyStyles(keyframes[0], false);\n            oldFirstKeyframe['offset'] = roundOffset(startingGap);\n            newKeyframes.push(oldFirstKeyframe);\n            /*\n                    When the keyframe is stretched then it means that the delay before the animation\n                    starts is gone. Instead the first keyframe is placed at the start of the animation\n                    and it is then copied to where it starts when the original delay is over. This basically\n                    means nothing animates during that delay, but the styles are still renderered. For this\n                    to work the original offset values that exist in the original keyframes must be \"warped\"\n                    so that they can take the new keyframe + delay into account.\n            \n                    delay=1000, duration=1000, keyframes = 0 .5 1\n            \n                    turns into\n            \n                    delay=0, duration=2000, keyframes = 0 .33 .66 1\n                   */\n            // offsets between 1 ... n -1 are all warped by the keyframe stretch\n            /** @type {?} */\n            const limit = keyframes.length - 1;\n            for (let i = 1; i <= limit; i++) {\n                /** @type {?} */\n                let kf = copyStyles(keyframes[i], false);\n                /** @type {?} */\n                const oldOffset = (/** @type {?} */ (kf['offset']));\n                /** @type {?} */\n                const timeAtKeyframe = delay + oldOffset * duration;\n                kf['offset'] = roundOffset(timeAtKeyframe / totalTime);\n                newKeyframes.push(kf);\n            }\n            // the new starting keyframe should be added at the start\n            duration = totalTime;\n            delay = 0;\n            easing = '';\n            keyframes = newKeyframes;\n        }\n        return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);\n    }\n}\nif (false) {\n    /** @type {?} */\n    SubTimelineBuilder.prototype.timings;\n    /** @type {?} */\n    SubTimelineBuilder.prototype.element;\n    /** @type {?} */\n    SubTimelineBuilder.prototype.keyframes;\n    /** @type {?} */\n    SubTimelineBuilder.prototype.preStyleProps;\n    /** @type {?} */\n    SubTimelineBuilder.prototype.postStyleProps;\n    /**\n     * @type {?}\n     * @private\n     */\n    SubTimelineBuilder.prototype._stretchStartingKeyframe;\n}\n/**\n * @param {?} offset\n * @param {?=} decimalPoints\n * @return {?}\n */\nfunction roundOffset(offset, decimalPoints = 3) {\n    /** @type {?} */\n    const mult = Math.pow(10, decimalPoints - 1);\n    return Math.round(offset * mult) / mult;\n}\n/**\n * @param {?} input\n * @param {?} allStyles\n * @return {?}\n */\nfunction flattenStyles(input, allStyles) {\n    /** @type {?} */\n    const styles = {};\n    /** @type {?} */\n    let allProperties;\n    input.forEach((/**\n     * @param {?} token\n     * @return {?}\n     */\n    token => {\n        if (token === '*') {\n            allProperties = allProperties || Object.keys(allStyles);\n            allProperties.forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => { styles[prop] = AUTO_STYLE; }));\n        }\n        else {\n            copyStyles((/** @type {?} */ (token)), false, styles);\n        }\n    }));\n    return styles;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Animation {\n    /**\n     * @param {?} _driver\n     * @param {?} input\n     */\n    constructor(_driver, input) {\n        this._driver = _driver;\n        /** @type {?} */\n        const errors = [];\n        /** @type {?} */\n        const ast = buildAnimationAst(_driver, input, errors);\n        if (errors.length) {\n            /** @type {?} */\n            const errorMessage = `animation validation failed:\\n${errors.join(\"\\n\")}`;\n            throw new Error(errorMessage);\n        }\n        this._animationAst = ast;\n    }\n    /**\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} destinationStyles\n     * @param {?} options\n     * @param {?=} subInstructions\n     * @return {?}\n     */\n    buildTimelines(element, startingStyles, destinationStyles, options, subInstructions) {\n        /** @type {?} */\n        const start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) :\n            (/** @type {?} */ (startingStyles));\n        /** @type {?} */\n        const dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) :\n            (/** @type {?} */ (destinationStyles));\n        /** @type {?} */\n        const errors = [];\n        subInstructions = subInstructions || new ElementInstructionMap();\n        /** @type {?} */\n        const result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);\n        if (errors.length) {\n            /** @type {?} */\n            const errorMessage = `animation building failed:\\n${errors.join(\"\\n\")}`;\n            throw new Error(errorMessage);\n        }\n        return result;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Animation.prototype._animationAst;\n    /**\n     * @type {?}\n     * @private\n     */\n    Animation.prototype._driver;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@publicApi\n * @abstract\n */\nclass AnimationStyleNormalizer {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    AnimationStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) { };\n    /**\n     * @abstract\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    AnimationStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) { };\n}\n/**\n * \\@publicApi\n */\nclass NoopAnimationStyleNormalizer {\n    /**\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizePropertyName(propertyName, errors) { return propertyName; }\n    /**\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {\n        return (/** @type {?} */ (value));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n    /**\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizePropertyName(propertyName, errors) {\n        return dashCaseToCamelCase(propertyName);\n    }\n    /**\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {\n        /** @type {?} */\n        let unit = '';\n        /** @type {?} */\n        const strVal = value.toString().trim();\n        if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n            if (typeof value === 'number') {\n                unit = 'px';\n            }\n            else {\n                /** @type {?} */\n                const valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);\n                }\n            }\n        }\n        return strVal + unit;\n    }\n}\nconst Éµ0$1 = /**\n * @return {?}\n */\n() => makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'\n    .split(','));\n/** @type {?} */\nconst DIMENSIONAL_PROP_MAP = ((Éµ0$1))();\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction makeBooleanMap(keys) {\n    /** @type {?} */\n    const map = {};\n    keys.forEach((/**\n     * @param {?} key\n     * @return {?}\n     */\n    key => map[key] = true));\n    return map;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction AnimationTransitionInstruction() { }\nif (false) {\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.element;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.triggerName;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.isRemovalTransition;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.fromState;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.fromStyles;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.toState;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.toStyles;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.timelines;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.queriedElements;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.preStyleProps;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.postStyleProps;\n    /** @type {?} */\n    AnimationTransitionInstruction.prototype.totalTime;\n    /** @type {?|undefined} */\n    AnimationTransitionInstruction.prototype.errors;\n}\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} isRemovalTransition\n * @param {?} fromStyles\n * @param {?} toStyles\n * @param {?} timelines\n * @param {?} queriedElements\n * @param {?} preStyleProps\n * @param {?} postStyleProps\n * @param {?} totalTime\n * @param {?=} errors\n * @return {?}\n */\nfunction createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {\n    return {\n        type: 0 /* TransitionAnimation */,\n        element,\n        triggerName,\n        isRemovalTransition,\n        fromState,\n        fromStyles,\n        toState,\n        toStyles,\n        timelines,\n        queriedElements,\n        preStyleProps,\n        postStyleProps,\n        totalTime,\n        errors\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_OBJECT = {};\nclass AnimationTransitionFactory {\n    /**\n     * @param {?} _triggerName\n     * @param {?} ast\n     * @param {?} _stateStyles\n     */\n    constructor(_triggerName, ast, _stateStyles) {\n        this._triggerName = _triggerName;\n        this.ast = ast;\n        this._stateStyles = _stateStyles;\n    }\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @param {?} element\n     * @param {?} params\n     * @return {?}\n     */\n    match(currentState, nextState, element, params) {\n        return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);\n    }\n    /**\n     * @param {?} stateName\n     * @param {?} params\n     * @param {?} errors\n     * @return {?}\n     */\n    buildStyles(stateName, params, errors) {\n        /** @type {?} */\n        const backupStateStyler = this._stateStyles['*'];\n        /** @type {?} */\n        const stateStyler = this._stateStyles[stateName];\n        /** @type {?} */\n        const backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};\n        return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;\n    }\n    /**\n     * @param {?} driver\n     * @param {?} element\n     * @param {?} currentState\n     * @param {?} nextState\n     * @param {?} enterClassName\n     * @param {?} leaveClassName\n     * @param {?=} currentOptions\n     * @param {?=} nextOptions\n     * @param {?=} subInstructions\n     * @param {?=} skipAstBuild\n     * @return {?}\n     */\n    build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {\n        /** @type {?} */\n        const errors = [];\n        /** @type {?} */\n        const transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;\n        /** @type {?} */\n        const currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;\n        /** @type {?} */\n        const currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);\n        /** @type {?} */\n        const nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;\n        /** @type {?} */\n        const nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);\n        /** @type {?} */\n        const queriedElements = new Set();\n        /** @type {?} */\n        const preStyleMap = new Map();\n        /** @type {?} */\n        const postStyleMap = new Map();\n        /** @type {?} */\n        const isRemoval = nextState === 'void';\n        /** @type {?} */\n        const animationOptions = { params: Object.assign({}, transitionAnimationParams, nextAnimationParams) };\n        /** @type {?} */\n        const timelines = skipAstBuild ? [] : buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);\n        /** @type {?} */\n        let totalTime = 0;\n        timelines.forEach((/**\n         * @param {?} tl\n         * @return {?}\n         */\n        tl => { totalTime = Math.max(tl.duration + tl.delay, totalTime); }));\n        if (errors.length) {\n            return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);\n        }\n        timelines.forEach((/**\n         * @param {?} tl\n         * @return {?}\n         */\n        tl => {\n            /** @type {?} */\n            const elm = tl.element;\n            /** @type {?} */\n            const preProps = getOrSetAsInMap(preStyleMap, elm, {});\n            tl.preStyleProps.forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => preProps[prop] = true));\n            /** @type {?} */\n            const postProps = getOrSetAsInMap(postStyleMap, elm, {});\n            tl.postStyleProps.forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => postProps[prop] = true));\n            if (elm !== element) {\n                queriedElements.add(elm);\n            }\n        }));\n        /** @type {?} */\n        const queriedElementsList = iteratorToArray(queriedElements.values());\n        return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationTransitionFactory.prototype._triggerName;\n    /** @type {?} */\n    AnimationTransitionFactory.prototype.ast;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationTransitionFactory.prototype._stateStyles;\n}\n/**\n * @param {?} matchFns\n * @param {?} currentState\n * @param {?} nextState\n * @param {?} element\n * @param {?} params\n * @return {?}\n */\nfunction oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {\n    return matchFns.some((/**\n     * @param {?} fn\n     * @return {?}\n     */\n    fn => fn(currentState, nextState, element, params)));\n}\nclass AnimationStateStyles {\n    /**\n     * @param {?} styles\n     * @param {?} defaultParams\n     */\n    constructor(styles, defaultParams) {\n        this.styles = styles;\n        this.defaultParams = defaultParams;\n    }\n    /**\n     * @param {?} params\n     * @param {?} errors\n     * @return {?}\n     */\n    buildStyles(params, errors) {\n        /** @type {?} */\n        const finalStyles = {};\n        /** @type {?} */\n        const combinedParams = copyObj(this.defaultParams);\n        Object.keys(params).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const value = params[key];\n            if (value != null) {\n                combinedParams[key] = value;\n            }\n        }));\n        this.styles.styles.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            if (typeof value !== 'string') {\n                /** @type {?} */\n                const styleObj = (/** @type {?} */ (value));\n                Object.keys(styleObj).forEach((/**\n                 * @param {?} prop\n                 * @return {?}\n                 */\n                prop => {\n                    /** @type {?} */\n                    let val = styleObj[prop];\n                    if (val.length > 1) {\n                        val = interpolateParams(val, combinedParams, errors);\n                    }\n                    finalStyles[prop] = val;\n                }));\n            }\n        }));\n        return finalStyles;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationStateStyles.prototype.styles;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationStateStyles.prototype.defaultParams;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @param {?} name\n * @param {?} ast\n * @return {?}\n */\nfunction buildTrigger(name, ast) {\n    return new AnimationTrigger(name, ast);\n}\n/**\n * \\@publicApi\n */\nclass AnimationTrigger {\n    /**\n     * @param {?} name\n     * @param {?} ast\n     */\n    constructor(name, ast) {\n        this.name = name;\n        this.ast = ast;\n        this.transitionFactories = [];\n        this.states = {};\n        ast.states.forEach((/**\n         * @param {?} ast\n         * @return {?}\n         */\n        ast => {\n            /** @type {?} */\n            const defaultParams = (ast.options && ast.options.params) || {};\n            this.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);\n        }));\n        balanceProperties(this.states, 'true', '1');\n        balanceProperties(this.states, 'false', '0');\n        ast.transitions.forEach((/**\n         * @param {?} ast\n         * @return {?}\n         */\n        ast => {\n            this.transitionFactories.push(new AnimationTransitionFactory(name, ast, this.states));\n        }));\n        this.fallbackTransition = createFallbackTransition(name, this.states);\n    }\n    /**\n     * @return {?}\n     */\n    get containsQueries() { return this.ast.queryCount > 0; }\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @param {?} element\n     * @param {?} params\n     * @return {?}\n     */\n    matchTransition(currentState, nextState, element, params) {\n        /** @type {?} */\n        const entry = this.transitionFactories.find((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => f.match(currentState, nextState, element, params)));\n        return entry || null;\n    }\n    /**\n     * @param {?} currentState\n     * @param {?} params\n     * @param {?} errors\n     * @return {?}\n     */\n    matchStyles(currentState, params, errors) {\n        return this.fallbackTransition.buildStyles(currentState, params, errors);\n    }\n}\nif (false) {\n    /** @type {?} */\n    AnimationTrigger.prototype.transitionFactories;\n    /** @type {?} */\n    AnimationTrigger.prototype.fallbackTransition;\n    /** @type {?} */\n    AnimationTrigger.prototype.states;\n    /** @type {?} */\n    AnimationTrigger.prototype.name;\n    /** @type {?} */\n    AnimationTrigger.prototype.ast;\n}\n/**\n * @param {?} triggerName\n * @param {?} states\n * @return {?}\n */\nfunction createFallbackTransition(triggerName, states) {\n    /** @type {?} */\n    const matchers = [(/**\n         * @param {?} fromState\n         * @param {?} toState\n         * @return {?}\n         */\n        (fromState, toState) => true)];\n    /** @type {?} */\n    const animation = { type: 2 /* Sequence */, steps: [], options: null };\n    /** @type {?} */\n    const transition = {\n        type: 1 /* Transition */,\n        animation,\n        matchers,\n        options: null,\n        queryCount: 0,\n        depCount: 0\n    };\n    return new AnimationTransitionFactory(triggerName, transition, states);\n}\n/**\n * @param {?} obj\n * @param {?} key1\n * @param {?} key2\n * @return {?}\n */\nfunction balanceProperties(obj, key1, key2) {\n    if (obj.hasOwnProperty(key1)) {\n        if (!obj.hasOwnProperty(key2)) {\n            obj[key2] = obj[key1];\n        }\n    }\n    else if (obj.hasOwnProperty(key2)) {\n        obj[key1] = obj[key2];\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();\nclass TimelineAnimationEngine {\n    /**\n     * @param {?} bodyNode\n     * @param {?} _driver\n     * @param {?} _normalizer\n     */\n    constructor(bodyNode, _driver, _normalizer) {\n        this.bodyNode = bodyNode;\n        this._driver = _driver;\n        this._normalizer = _normalizer;\n        this._animations = {};\n        this._playersById = {};\n        this.players = [];\n    }\n    /**\n     * @param {?} id\n     * @param {?} metadata\n     * @return {?}\n     */\n    register(id, metadata) {\n        /** @type {?} */\n        const errors = [];\n        /** @type {?} */\n        const ast = buildAnimationAst(this._driver, metadata, errors);\n        if (errors.length) {\n            throw new Error(`Unable to build the animation due to the following errors: ${errors.join(\"\\n\")}`);\n        }\n        else {\n            this._animations[id] = ast;\n        }\n    }\n    /**\n     * @private\n     * @param {?} i\n     * @param {?} preStyles\n     * @param {?=} postStyles\n     * @return {?}\n     */\n    _buildPlayer(i, preStyles, postStyles) {\n        /** @type {?} */\n        const element = i.element;\n        /** @type {?} */\n        const keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);\n        return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);\n    }\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?=} options\n     * @return {?}\n     */\n    create(id, element, options = {}) {\n        /** @type {?} */\n        const errors = [];\n        /** @type {?} */\n        const ast = this._animations[id];\n        /** @type {?} */\n        let instructions;\n        /** @type {?} */\n        const autoStylesMap = new Map();\n        if (ast) {\n            instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);\n            instructions.forEach((/**\n             * @param {?} inst\n             * @return {?}\n             */\n            inst => {\n                /** @type {?} */\n                const styles = getOrSetAsInMap(autoStylesMap, inst.element, {});\n                inst.postStyleProps.forEach((/**\n                 * @param {?} prop\n                 * @return {?}\n                 */\n                prop => styles[prop] = null));\n            }));\n        }\n        else {\n            errors.push('The requested animation doesn\\'t exist or has already been destroyed');\n            instructions = [];\n        }\n        if (errors.length) {\n            throw new Error(`Unable to create the animation due to the following errors: ${errors.join(\"\\n\")}`);\n        }\n        autoStylesMap.forEach((/**\n         * @param {?} styles\n         * @param {?} element\n         * @return {?}\n         */\n        (styles, element) => {\n            Object.keys(styles).forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => { styles[prop] = this._driver.computeStyle(element, prop, AUTO_STYLE); }));\n        }));\n        /** @type {?} */\n        const players = instructions.map((/**\n         * @param {?} i\n         * @return {?}\n         */\n        i => {\n            /** @type {?} */\n            const styles = autoStylesMap.get(i.element);\n            return this._buildPlayer(i, {}, styles);\n        }));\n        /** @type {?} */\n        const player = optimizeGroupPlayer(players);\n        this._playersById[id] = player;\n        player.onDestroy((/**\n         * @return {?}\n         */\n        () => this.destroy(id)));\n        this.players.push(player);\n        return player;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    destroy(id) {\n        /** @type {?} */\n        const player = this._getPlayer(id);\n        player.destroy();\n        delete this._playersById[id];\n        /** @type {?} */\n        const index = this.players.indexOf(player);\n        if (index >= 0) {\n            this.players.splice(index, 1);\n        }\n    }\n    /**\n     * @private\n     * @param {?} id\n     * @return {?}\n     */\n    _getPlayer(id) {\n        /** @type {?} */\n        const player = this._playersById[id];\n        if (!player) {\n            throw new Error(`Unable to find the timeline player referenced by ${id}`);\n        }\n        return player;\n    }\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(id, element, eventName, callback) {\n        // triggerName, fromState, toState are all ignored for timeline animations\n        /** @type {?} */\n        const baseEvent = makeAnimationEvent(element, '', '', '');\n        listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);\n        return (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?} command\n     * @param {?} args\n     * @return {?}\n     */\n    command(id, element, command, args) {\n        if (command == 'register') {\n            this.register(id, (/** @type {?} */ (args[0])));\n            return;\n        }\n        if (command == 'create') {\n            /** @type {?} */\n            const options = (/** @type {?} */ ((args[0] || {})));\n            this.create(id, element, options);\n            return;\n        }\n        /** @type {?} */\n        const player = this._getPlayer(id);\n        switch (command) {\n            case 'play':\n                player.play();\n                break;\n            case 'pause':\n                player.pause();\n                break;\n            case 'reset':\n                player.reset();\n                break;\n            case 'restart':\n                player.restart();\n                break;\n            case 'finish':\n                player.finish();\n                break;\n            case 'init':\n                player.init();\n                break;\n            case 'setPosition':\n                player.setPosition(parseFloat((/** @type {?} */ (args[0]))));\n                break;\n            case 'destroy':\n                this.destroy(id);\n                break;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineAnimationEngine.prototype._animations;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineAnimationEngine.prototype._playersById;\n    /** @type {?} */\n    TimelineAnimationEngine.prototype.players;\n    /** @type {?} */\n    TimelineAnimationEngine.prototype.bodyNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineAnimationEngine.prototype._driver;\n    /**\n     * @type {?}\n     * @private\n     */\n    TimelineAnimationEngine.prototype._normalizer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst QUEUED_CLASSNAME = 'ng-animate-queued';\n/** @type {?} */\nconst QUEUED_SELECTOR = '.ng-animate-queued';\n/** @type {?} */\nconst DISABLED_CLASSNAME = 'ng-animate-disabled';\n/** @type {?} */\nconst DISABLED_SELECTOR = '.ng-animate-disabled';\n/** @type {?} */\nconst STAR_CLASSNAME = 'ng-star-inserted';\n/** @type {?} */\nconst STAR_SELECTOR = '.ng-star-inserted';\n/** @type {?} */\nconst EMPTY_PLAYER_ARRAY = [];\n/** @type {?} */\nconst NULL_REMOVAL_STATE = {\n    namespaceId: '',\n    setForRemoval: false,\n    setForMove: false,\n    hasAnimation: false,\n    removedBeforeQueried: false\n};\n/** @type {?} */\nconst NULL_REMOVED_QUERIED_STATE = {\n    namespaceId: '',\n    setForMove: false,\n    setForRemoval: false,\n    hasAnimation: false,\n    removedBeforeQueried: true\n};\n/**\n * @record\n */\nfunction TriggerListener() { }\nif (false) {\n    /** @type {?} */\n    TriggerListener.prototype.name;\n    /** @type {?} */\n    TriggerListener.prototype.phase;\n    /** @type {?} */\n    TriggerListener.prototype.callback;\n}\n/**\n * @record\n */\nfunction QueueInstruction() { }\nif (false) {\n    /** @type {?} */\n    QueueInstruction.prototype.element;\n    /** @type {?} */\n    QueueInstruction.prototype.triggerName;\n    /** @type {?} */\n    QueueInstruction.prototype.fromState;\n    /** @type {?} */\n    QueueInstruction.prototype.toState;\n    /** @type {?} */\n    QueueInstruction.prototype.transition;\n    /** @type {?} */\n    QueueInstruction.prototype.player;\n    /** @type {?} */\n    QueueInstruction.prototype.isFallbackTransition;\n}\n/** @type {?} */\nconst REMOVAL_FLAG = '__ng_removed';\n/**\n * @record\n */\nfunction ElementAnimationState() { }\nif (false) {\n    /** @type {?} */\n    ElementAnimationState.prototype.setForRemoval;\n    /** @type {?} */\n    ElementAnimationState.prototype.setForMove;\n    /** @type {?} */\n    ElementAnimationState.prototype.hasAnimation;\n    /** @type {?} */\n    ElementAnimationState.prototype.namespaceId;\n    /** @type {?} */\n    ElementAnimationState.prototype.removedBeforeQueried;\n}\nclass StateValue {\n    /**\n     * @param {?} input\n     * @param {?=} namespaceId\n     */\n    constructor(input, namespaceId = '') {\n        this.namespaceId = namespaceId;\n        /** @type {?} */\n        const isObj = input && input.hasOwnProperty('value');\n        /** @type {?} */\n        const value = isObj ? input['value'] : input;\n        this.value = normalizeTriggerValue(value);\n        if (isObj) {\n            /** @type {?} */\n            const options = copyObj((/** @type {?} */ (input)));\n            delete options['value'];\n            this.options = (/** @type {?} */ (options));\n        }\n        else {\n            this.options = {};\n        }\n        if (!this.options.params) {\n            this.options.params = {};\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get params() { return (/** @type {?} */ (this.options.params)); }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    absorbOptions(options) {\n        /** @type {?} */\n        const newParams = options.params;\n        if (newParams) {\n            /** @type {?} */\n            const oldParams = (/** @type {?} */ (this.options.params));\n            Object.keys(newParams).forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => {\n                if (oldParams[prop] == null) {\n                    oldParams[prop] = newParams[prop];\n                }\n            }));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    StateValue.prototype.value;\n    /** @type {?} */\n    StateValue.prototype.options;\n    /** @type {?} */\n    StateValue.prototype.namespaceId;\n}\n/** @type {?} */\nconst VOID_VALUE = 'void';\n/** @type {?} */\nconst DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);\nclass AnimationTransitionNamespace {\n    /**\n     * @param {?} id\n     * @param {?} hostElement\n     * @param {?} _engine\n     */\n    constructor(id, hostElement, _engine) {\n        this.id = id;\n        this.hostElement = hostElement;\n        this._engine = _engine;\n        this.players = [];\n        this._triggers = {};\n        this._queue = [];\n        this._elementListeners = new Map();\n        this._hostClassName = 'ng-tns-' + id;\n        addClass(hostElement, this._hostClassName);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} phase\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(element, name, phase, callback) {\n        if (!this._triggers.hasOwnProperty(name)) {\n            throw new Error(`Unable to listen on the animation trigger event \"${phase}\" because the animation trigger \"${name}\" doesn\\'t exist!`);\n        }\n        if (phase == null || phase.length == 0) {\n            throw new Error(`Unable to listen on the animation trigger \"${name}\" because the provided event is undefined!`);\n        }\n        if (!isTriggerEventValid(phase)) {\n            throw new Error(`The provided animation trigger event \"${phase}\" for the animation trigger \"${name}\" is not supported!`);\n        }\n        /** @type {?} */\n        const listeners = getOrSetAsInMap(this._elementListeners, element, []);\n        /** @type {?} */\n        const data = { name, phase, callback };\n        listeners.push(data);\n        /** @type {?} */\n        const triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});\n        if (!triggersWithStates.hasOwnProperty(name)) {\n            addClass(element, NG_TRIGGER_CLASSNAME);\n            addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);\n            triggersWithStates[name] = DEFAULT_STATE_VALUE;\n        }\n        return (/**\n         * @return {?}\n         */\n        () => {\n            // the event listener is removed AFTER the flush has occurred such\n            // that leave animations callbacks can fire (otherwise if the node\n            // is removed in between then the listeners would be deregistered)\n            this._engine.afterFlush((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const index = listeners.indexOf(data);\n                if (index >= 0) {\n                    listeners.splice(index, 1);\n                }\n                if (!this._triggers[name]) {\n                    delete triggersWithStates[name];\n                }\n            }));\n        });\n    }\n    /**\n     * @param {?} name\n     * @param {?} ast\n     * @return {?}\n     */\n    register(name, ast) {\n        if (this._triggers[name]) {\n            // throw\n            return false;\n        }\n        else {\n            this._triggers[name] = ast;\n            return true;\n        }\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @return {?}\n     */\n    _getTrigger(name) {\n        /** @type {?} */\n        const trigger = this._triggers[name];\n        if (!trigger) {\n            throw new Error(`The provided animation trigger \"${name}\" has not been registered!`);\n        }\n        return trigger;\n    }\n    /**\n     * @param {?} element\n     * @param {?} triggerName\n     * @param {?} value\n     * @param {?=} defaultToFallback\n     * @return {?}\n     */\n    trigger(element, triggerName, value, defaultToFallback = true) {\n        /** @type {?} */\n        const trigger = this._getTrigger(triggerName);\n        /** @type {?} */\n        const player = new TransitionAnimationPlayer(this.id, triggerName, element);\n        /** @type {?} */\n        let triggersWithStates = this._engine.statesByElement.get(element);\n        if (!triggersWithStates) {\n            addClass(element, NG_TRIGGER_CLASSNAME);\n            addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);\n            this._engine.statesByElement.set(element, triggersWithStates = {});\n        }\n        /** @type {?} */\n        let fromState = triggersWithStates[triggerName];\n        /** @type {?} */\n        const toState = new StateValue(value, this.id);\n        /** @type {?} */\n        const isObj = value && value.hasOwnProperty('value');\n        if (!isObj && fromState) {\n            toState.absorbOptions(fromState.options);\n        }\n        triggersWithStates[triggerName] = toState;\n        if (!fromState) {\n            fromState = DEFAULT_STATE_VALUE;\n        }\n        /** @type {?} */\n        const isRemoval = toState.value === VOID_VALUE;\n        // normally this isn't reached by here, however, if an object expression\n        // is passed in then it may be a new object each time. Comparing the value\n        // is important since that will stay the same despite there being a new object.\n        // The removal arc here is special cased because the same element is triggered\n        // twice in the event that it contains animations on the outer/inner portions\n        // of the host container\n        if (!isRemoval && fromState.value === toState.value) {\n            // this means that despite the value not changing, some inner params\n            // have changed which means that the animation final styles need to be applied\n            if (!objEquals(fromState.params, toState.params)) {\n                /** @type {?} */\n                const errors = [];\n                /** @type {?} */\n                const fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);\n                /** @type {?} */\n                const toStyles = trigger.matchStyles(toState.value, toState.params, errors);\n                if (errors.length) {\n                    this._engine.reportError(errors);\n                }\n                else {\n                    this._engine.afterFlush((/**\n                     * @return {?}\n                     */\n                    () => {\n                        eraseStyles(element, fromStyles);\n                        setStyles(element, toStyles);\n                    }));\n                }\n            }\n            return;\n        }\n        /** @type {?} */\n        const playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);\n        playersOnElement.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            // only remove the player if it is queued on the EXACT same trigger/namespace\n            // we only also deal with queued players here because if the animation has\n            // started then we want to keep the player alive until the flush happens\n            // (which is where the previousPlayers are passed into the new palyer)\n            if (player.namespaceId == this.id && player.triggerName == triggerName && player.queued) {\n                player.destroy();\n            }\n        }));\n        /** @type {?} */\n        let transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);\n        /** @type {?} */\n        let isFallbackTransition = false;\n        if (!transition) {\n            if (!defaultToFallback)\n                return;\n            transition = trigger.fallbackTransition;\n            isFallbackTransition = true;\n        }\n        this._engine.totalQueuedPlayers++;\n        this._queue.push({ element, triggerName, transition, fromState, toState, player, isFallbackTransition });\n        if (!isFallbackTransition) {\n            addClass(element, QUEUED_CLASSNAME);\n            player.onStart((/**\n             * @return {?}\n             */\n            () => { removeClass(element, QUEUED_CLASSNAME); }));\n        }\n        player.onDone((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            let index = this.players.indexOf(player);\n            if (index >= 0) {\n                this.players.splice(index, 1);\n            }\n            /** @type {?} */\n            const players = this._engine.playersByElement.get(element);\n            if (players) {\n                /** @type {?} */\n                let index = players.indexOf(player);\n                if (index >= 0) {\n                    players.splice(index, 1);\n                }\n            }\n        }));\n        this.players.push(player);\n        playersOnElement.push(player);\n        return player;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    deregister(name) {\n        delete this._triggers[name];\n        this._engine.statesByElement.forEach((/**\n         * @param {?} stateMap\n         * @param {?} element\n         * @return {?}\n         */\n        (stateMap, element) => { delete stateMap[name]; }));\n        this._elementListeners.forEach((/**\n         * @param {?} listeners\n         * @param {?} element\n         * @return {?}\n         */\n        (listeners, element) => {\n            this._elementListeners.set(element, listeners.filter((/**\n             * @param {?} entry\n             * @return {?}\n             */\n            entry => { return entry.name != name; })));\n        }));\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    clearElementCache(element) {\n        this._engine.statesByElement.delete(element);\n        this._elementListeners.delete(element);\n        /** @type {?} */\n        const elementPlayers = this._engine.playersByElement.get(element);\n        if (elementPlayers) {\n            elementPlayers.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => player.destroy()));\n            this._engine.playersByElement.delete(element);\n        }\n    }\n    /**\n     * @private\n     * @param {?} rootElement\n     * @param {?} context\n     * @param {?=} animate\n     * @return {?}\n     */\n    _signalRemovalForInnerTriggers(rootElement, context, animate = false) {\n        // emulate a leave animation for all inner nodes within this node.\n        // If there are no animations found for any of the nodes then clear the cache\n        // for the element.\n        this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true).forEach((/**\n         * @param {?} elm\n         * @return {?}\n         */\n        elm => {\n            // this means that an inner remove() operation has already kicked off\n            // the animation on this element...\n            if (elm[REMOVAL_FLAG])\n                return;\n            /** @type {?} */\n            const namespaces = this._engine.fetchNamespacesByElement(elm);\n            if (namespaces.size) {\n                namespaces.forEach((/**\n                 * @param {?} ns\n                 * @return {?}\n                 */\n                ns => ns.triggerLeaveAnimation(elm, context, false, true)));\n            }\n            else {\n                this.clearElementCache(elm);\n            }\n        }));\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @param {?=} destroyAfterComplete\n     * @param {?=} defaultToFallback\n     * @return {?}\n     */\n    triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {\n        /** @type {?} */\n        const triggerStates = this._engine.statesByElement.get(element);\n        if (triggerStates) {\n            /** @type {?} */\n            const players = [];\n            Object.keys(triggerStates).forEach((/**\n             * @param {?} triggerName\n             * @return {?}\n             */\n            triggerName => {\n                // this check is here in the event that an element is removed\n                // twice (both on the host level and the component level)\n                if (this._triggers[triggerName]) {\n                    /** @type {?} */\n                    const player = this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);\n                    if (player) {\n                        players.push(player);\n                    }\n                }\n            }));\n            if (players.length) {\n                this._engine.markElementAsRemoved(this.id, element, true, context);\n                if (destroyAfterComplete) {\n                    optimizeGroupPlayer(players).onDone((/**\n                     * @return {?}\n                     */\n                    () => this._engine.processLeaveNode(element)));\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    prepareLeaveAnimationListeners(element) {\n        /** @type {?} */\n        const listeners = this._elementListeners.get(element);\n        if (listeners) {\n            /** @type {?} */\n            const visitedTriggers = new Set();\n            listeners.forEach((/**\n             * @param {?} listener\n             * @return {?}\n             */\n            listener => {\n                /** @type {?} */\n                const triggerName = listener.name;\n                if (visitedTriggers.has(triggerName))\n                    return;\n                visitedTriggers.add(triggerName);\n                /** @type {?} */\n                const trigger = this._triggers[triggerName];\n                /** @type {?} */\n                const transition = trigger.fallbackTransition;\n                /** @type {?} */\n                const elementStates = (/** @type {?} */ (this._engine.statesByElement.get(element)));\n                /** @type {?} */\n                const fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;\n                /** @type {?} */\n                const toState = new StateValue(VOID_VALUE);\n                /** @type {?} */\n                const player = new TransitionAnimationPlayer(this.id, triggerName, element);\n                this._engine.totalQueuedPlayers++;\n                this._queue.push({\n                    element,\n                    triggerName,\n                    transition,\n                    fromState,\n                    toState,\n                    player,\n                    isFallbackTransition: true\n                });\n            }));\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    removeNode(element, context) {\n        /** @type {?} */\n        const engine = this._engine;\n        if (element.childElementCount) {\n            this._signalRemovalForInnerTriggers(element, context, true);\n        }\n        // this means that a * => VOID animation was detected and kicked off\n        if (this.triggerLeaveAnimation(element, context, true))\n            return;\n        // find the player that is animating and make sure that the\n        // removal is delayed until that player has completed\n        /** @type {?} */\n        let containsPotentialParentTransition = false;\n        if (engine.totalAnimations) {\n            /** @type {?} */\n            const currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];\n            // when this `if statement` does not continue forward it means that\n            // a previous animation query has selected the current element and\n            // is animating it. In this situation want to continue forwards and\n            // allow the element to be queued up for animation later.\n            if (currentPlayers && currentPlayers.length) {\n                containsPotentialParentTransition = true;\n            }\n            else {\n                /** @type {?} */\n                let parent = element;\n                while (parent = parent.parentNode) {\n                    /** @type {?} */\n                    const triggers = engine.statesByElement.get(parent);\n                    if (triggers) {\n                        containsPotentialParentTransition = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // at this stage we know that the element will either get removed\n        // during flush or will be picked up by a parent query. Either way\n        // we need to fire the listeners for this element when it DOES get\n        // removed (once the query parent animation is done or after flush)\n        this.prepareLeaveAnimationListeners(element);\n        // whether or not a parent has an animation we need to delay the deferral of the leave\n        // operation until we have more information (which we do after flush() has been called)\n        if (containsPotentialParentTransition) {\n            engine.markElementAsRemoved(this.id, element, false, context);\n        }\n        else {\n            // we do this after the flush has occurred such\n            // that the callbacks can be fired\n            engine.afterFlush((/**\n             * @return {?}\n             */\n            () => this.clearElementCache(element)));\n            engine.destroyInnerAnimations(element);\n            engine._onRemovalComplete(element, context);\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?} parent\n     * @return {?}\n     */\n    insertNode(element, parent) { addClass(element, this._hostClassName); }\n    /**\n     * @param {?} microtaskId\n     * @return {?}\n     */\n    drainQueuedTransitions(microtaskId) {\n        /** @type {?} */\n        const instructions = [];\n        this._queue.forEach((/**\n         * @param {?} entry\n         * @return {?}\n         */\n        entry => {\n            /** @type {?} */\n            const player = entry.player;\n            if (player.destroyed)\n                return;\n            /** @type {?} */\n            const element = entry.element;\n            /** @type {?} */\n            const listeners = this._elementListeners.get(element);\n            if (listeners) {\n                listeners.forEach((/**\n                 * @param {?} listener\n                 * @return {?}\n                 */\n                (listener) => {\n                    if (listener.name == entry.triggerName) {\n                        /** @type {?} */\n                        const baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);\n                        ((/** @type {?} */ (baseEvent)))['_data'] = microtaskId;\n                        listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);\n                    }\n                }));\n            }\n            if (player.markedForDestroy) {\n                this._engine.afterFlush((/**\n                 * @return {?}\n                 */\n                () => {\n                    // now we can destroy the element properly since the event listeners have\n                    // been bound to the player\n                    player.destroy();\n                }));\n            }\n            else {\n                instructions.push(entry);\n            }\n        }));\n        this._queue = [];\n        return instructions.sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            // if depCount == 0 them move to front\n            // otherwise if a contains b then move back\n            /** @type {?} */\n            const d0 = a.transition.ast.depCount;\n            /** @type {?} */\n            const d1 = b.transition.ast.depCount;\n            if (d0 == 0 || d1 == 0) {\n                return d0 - d1;\n            }\n            return this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;\n        }));\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    destroy(context) {\n        this.players.forEach((/**\n         * @param {?} p\n         * @return {?}\n         */\n        p => p.destroy()));\n        this._signalRemovalForInnerTriggers(this.hostElement, context);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    elementContainsData(element) {\n        /** @type {?} */\n        let containsData = false;\n        if (this._elementListeners.has(element))\n            containsData = true;\n        containsData =\n            (this._queue.find((/**\n             * @param {?} entry\n             * @return {?}\n             */\n            entry => entry.element === element)) ? true : false) || containsData;\n        return containsData;\n    }\n}\nif (false) {\n    /** @type {?} */\n    AnimationTransitionNamespace.prototype.players;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationTransitionNamespace.prototype._triggers;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationTransitionNamespace.prototype._queue;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationTransitionNamespace.prototype._elementListeners;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationTransitionNamespace.prototype._hostClassName;\n    /** @type {?} */\n    AnimationTransitionNamespace.prototype.id;\n    /** @type {?} */\n    AnimationTransitionNamespace.prototype.hostElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationTransitionNamespace.prototype._engine;\n}\n/**\n * @record\n */\nfunction QueuedTransition() { }\nif (false) {\n    /** @type {?} */\n    QueuedTransition.prototype.element;\n    /** @type {?} */\n    QueuedTransition.prototype.instruction;\n    /** @type {?} */\n    QueuedTransition.prototype.player;\n}\nclass TransitionAnimationEngine {\n    /**\n     * @param {?} bodyNode\n     * @param {?} driver\n     * @param {?} _normalizer\n     */\n    constructor(bodyNode, driver, _normalizer) {\n        this.bodyNode = bodyNode;\n        this.driver = driver;\n        this._normalizer = _normalizer;\n        this.players = [];\n        this.newHostElements = new Map();\n        this.playersByElement = new Map();\n        this.playersByQueriedElement = new Map();\n        this.statesByElement = new Map();\n        this.disabledNodes = new Set();\n        this.totalAnimations = 0;\n        this.totalQueuedPlayers = 0;\n        this._namespaceLookup = {};\n        this._namespaceList = [];\n        this._flushFns = [];\n        this._whenQuietFns = [];\n        this.namespacesByHostElement = new Map();\n        this.collectedEnterElements = [];\n        this.collectedLeaveElements = [];\n        // this method is designed to be overridden by the code that uses this engine\n        this.onRemovalComplete = (/**\n         * @param {?} element\n         * @param {?} context\n         * @return {?}\n         */\n        (element, context) => { });\n    }\n    /**\n     * \\@internal\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    _onRemovalComplete(element, context) { this.onRemovalComplete(element, context); }\n    /**\n     * @return {?}\n     */\n    get queuedPlayers() {\n        /** @type {?} */\n        const players = [];\n        this._namespaceList.forEach((/**\n         * @param {?} ns\n         * @return {?}\n         */\n        ns => {\n            ns.players.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => {\n                if (player.queued) {\n                    players.push(player);\n                }\n            }));\n        }));\n        return players;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @return {?}\n     */\n    createNamespace(namespaceId, hostElement) {\n        /** @type {?} */\n        const ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);\n        if (hostElement.parentNode) {\n            this._balanceNamespaceList(ns, hostElement);\n        }\n        else {\n            // defer this later until flush during when the host element has\n            // been inserted so that we know exactly where to place it in\n            // the namespace list\n            this.newHostElements.set(hostElement, ns);\n            // given that this host element is apart of the animation code, it\n            // may or may not be inserted by a parent node that is an of an\n            // animation renderer type. If this happens then we can still have\n            // access to this item when we query for :enter nodes. If the parent\n            // is a renderer then the set data-structure will normalize the entry\n            this.collectEnterElement(hostElement);\n        }\n        return this._namespaceLookup[namespaceId] = ns;\n    }\n    /**\n     * @private\n     * @param {?} ns\n     * @param {?} hostElement\n     * @return {?}\n     */\n    _balanceNamespaceList(ns, hostElement) {\n        /** @type {?} */\n        const limit = this._namespaceList.length - 1;\n        if (limit >= 0) {\n            /** @type {?} */\n            let found = false;\n            for (let i = limit; i >= 0; i--) {\n                /** @type {?} */\n                const nextNamespace = this._namespaceList[i];\n                if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {\n                    this._namespaceList.splice(i + 1, 0, ns);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                this._namespaceList.splice(0, 0, ns);\n            }\n        }\n        else {\n            this._namespaceList.push(ns);\n        }\n        this.namespacesByHostElement.set(hostElement, ns);\n        return ns;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @return {?}\n     */\n    register(namespaceId, hostElement) {\n        /** @type {?} */\n        let ns = this._namespaceLookup[namespaceId];\n        if (!ns) {\n            ns = this.createNamespace(namespaceId, hostElement);\n        }\n        return ns;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} name\n     * @param {?} trigger\n     * @return {?}\n     */\n    registerTrigger(namespaceId, name, trigger) {\n        /** @type {?} */\n        let ns = this._namespaceLookup[namespaceId];\n        if (ns && ns.register(name, trigger)) {\n            this.totalAnimations++;\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} context\n     * @return {?}\n     */\n    destroy(namespaceId, context) {\n        if (!namespaceId)\n            return;\n        /** @type {?} */\n        const ns = this._fetchNamespace(namespaceId);\n        this.afterFlush((/**\n         * @return {?}\n         */\n        () => {\n            this.namespacesByHostElement.delete(ns.hostElement);\n            delete this._namespaceLookup[namespaceId];\n            /** @type {?} */\n            const index = this._namespaceList.indexOf(ns);\n            if (index >= 0) {\n                this._namespaceList.splice(index, 1);\n            }\n        }));\n        this.afterFlushAnimationsDone((/**\n         * @return {?}\n         */\n        () => ns.destroy(context)));\n    }\n    /**\n     * @private\n     * @param {?} id\n     * @return {?}\n     */\n    _fetchNamespace(id) { return this._namespaceLookup[id]; }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    fetchNamespacesByElement(element) {\n        // normally there should only be one namespace per element, however\n        // if @triggers are placed on both the component element and then\n        // its host element (within the component code) then there will be\n        // two namespaces returned. We use a set here to simply the dedupe\n        // of namespaces incase there are multiple triggers both the elm and host\n        /** @type {?} */\n        const namespaces = new Set();\n        /** @type {?} */\n        const elementStates = this.statesByElement.get(element);\n        if (elementStates) {\n            /** @type {?} */\n            const keys = Object.keys(elementStates);\n            for (let i = 0; i < keys.length; i++) {\n                /** @type {?} */\n                const nsId = elementStates[keys[i]].namespaceId;\n                if (nsId) {\n                    /** @type {?} */\n                    const ns = this._fetchNamespace(nsId);\n                    if (ns) {\n                        namespaces.add(ns);\n                    }\n                }\n            }\n        }\n        return namespaces;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    trigger(namespaceId, element, name, value) {\n        if (isElementNode(element)) {\n            /** @type {?} */\n            const ns = this._fetchNamespace(namespaceId);\n            if (ns) {\n                ns.trigger(element, name, value);\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} parent\n     * @param {?} insertBefore\n     * @return {?}\n     */\n    insertNode(namespaceId, element, parent, insertBefore) {\n        if (!isElementNode(element))\n            return;\n        // special case for when an element is removed and reinserted (move operation)\n        // when this occurs we do not want to use the element for deletion later\n        /** @type {?} */\n        const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n        if (details && details.setForRemoval) {\n            details.setForRemoval = false;\n            details.setForMove = true;\n            /** @type {?} */\n            const index = this.collectedLeaveElements.indexOf(element);\n            if (index >= 0) {\n                this.collectedLeaveElements.splice(index, 1);\n            }\n        }\n        // in the event that the namespaceId is blank then the caller\n        // code does not contain any animation code in it, but it is\n        // just being called so that the node is marked as being inserted\n        if (namespaceId) {\n            /** @type {?} */\n            const ns = this._fetchNamespace(namespaceId);\n            // This if-statement is a workaround for router issue #21947.\n            // The router sometimes hits a race condition where while a route\n            // is being instantiated a new navigation arrives, triggering leave\n            // animation of DOM that has not been fully initialized, until this\n            // is resolved, we need to handle the scenario when DOM is not in a\n            // consistent state during the animation.\n            if (ns) {\n                ns.insertNode(element, parent);\n            }\n        }\n        // only *directives and host elements are inserted before\n        if (insertBefore) {\n            this.collectEnterElement(element);\n        }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    collectEnterElement(element) { this.collectedEnterElements.push(element); }\n    /**\n     * @param {?} element\n     * @param {?} value\n     * @return {?}\n     */\n    markElementAsDisabled(element, value) {\n        if (value) {\n            if (!this.disabledNodes.has(element)) {\n                this.disabledNodes.add(element);\n                addClass(element, DISABLED_CLASSNAME);\n            }\n        }\n        else if (this.disabledNodes.has(element)) {\n            this.disabledNodes.delete(element);\n            removeClass(element, DISABLED_CLASSNAME);\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} isHostElement\n     * @param {?} context\n     * @return {?}\n     */\n    removeNode(namespaceId, element, isHostElement, context) {\n        if (isElementNode(element)) {\n            /** @type {?} */\n            const ns = namespaceId ? this._fetchNamespace(namespaceId) : null;\n            if (ns) {\n                ns.removeNode(element, context);\n            }\n            else {\n                this.markElementAsRemoved(namespaceId, element, false, context);\n            }\n            if (isHostElement) {\n                /** @type {?} */\n                const hostNS = this.namespacesByHostElement.get(element);\n                if (hostNS && hostNS.id !== namespaceId) {\n                    hostNS.removeNode(element, context);\n                }\n            }\n        }\n        else {\n            this._onRemovalComplete(element, context);\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?=} hasAnimation\n     * @param {?=} context\n     * @return {?}\n     */\n    markElementAsRemoved(namespaceId, element, hasAnimation, context) {\n        this.collectedLeaveElements.push(element);\n        element[REMOVAL_FLAG] = {\n            namespaceId,\n            setForRemoval: context, hasAnimation,\n            removedBeforeQueried: false\n        };\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} name\n     * @param {?} phase\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(namespaceId, element, name, phase, callback) {\n        if (isElementNode(element)) {\n            return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);\n        }\n        return (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * @private\n     * @param {?} entry\n     * @param {?} subTimelines\n     * @param {?} enterClassName\n     * @param {?} leaveClassName\n     * @param {?=} skipBuildAst\n     * @return {?}\n     */\n    _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {\n        return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);\n    }\n    /**\n     * @param {?} containerElement\n     * @return {?}\n     */\n    destroyInnerAnimations(containerElement) {\n        /** @type {?} */\n        let elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);\n        elements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        element => this.destroyActiveAnimationsForElement(element)));\n        if (this.playersByQueriedElement.size == 0)\n            return;\n        elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);\n        elements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        element => this.finishActiveQueriedAnimationOnElement(element)));\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    destroyActiveAnimationsForElement(element) {\n        /** @type {?} */\n        const players = this.playersByElement.get(element);\n        if (players) {\n            players.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => {\n                // special case for when an element is set for destruction, but hasn't started.\n                // in this situation we want to delay the destruction until the flush occurs\n                // so that any event listeners attached to the player are triggered.\n                if (player.queued) {\n                    player.markedForDestroy = true;\n                }\n                else {\n                    player.destroy();\n                }\n            }));\n        }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    finishActiveQueriedAnimationOnElement(element) {\n        /** @type {?} */\n        const players = this.playersByQueriedElement.get(element);\n        if (players) {\n            players.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => player.finish()));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @return {?}\n         */\n        resolve => {\n            if (this.players.length) {\n                return optimizeGroupPlayer(this.players).onDone((/**\n                 * @return {?}\n                 */\n                () => resolve()));\n            }\n            else {\n                resolve();\n            }\n        }));\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    processLeaveNode(element) {\n        /** @type {?} */\n        const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n        if (details && details.setForRemoval) {\n            // this will prevent it from removing it twice\n            element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;\n            if (details.namespaceId) {\n                this.destroyInnerAnimations(element);\n                /** @type {?} */\n                const ns = this._fetchNamespace(details.namespaceId);\n                if (ns) {\n                    ns.clearElementCache(element);\n                }\n            }\n            this._onRemovalComplete(element, details.setForRemoval);\n        }\n        if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {\n            this.markElementAsDisabled(element, false);\n        }\n        this.driver.query(element, DISABLED_SELECTOR, true).forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            this.markElementAsDisabled(node, false);\n        }));\n    }\n    /**\n     * @param {?=} microtaskId\n     * @return {?}\n     */\n    flush(microtaskId = -1) {\n        /** @type {?} */\n        let players = [];\n        if (this.newHostElements.size) {\n            this.newHostElements.forEach((/**\n             * @param {?} ns\n             * @param {?} element\n             * @return {?}\n             */\n            (ns, element) => this._balanceNamespaceList(ns, element)));\n            this.newHostElements.clear();\n        }\n        if (this.totalAnimations && this.collectedEnterElements.length) {\n            for (let i = 0; i < this.collectedEnterElements.length; i++) {\n                /** @type {?} */\n                const elm = this.collectedEnterElements[i];\n                addClass(elm, STAR_CLASSNAME);\n            }\n        }\n        if (this._namespaceList.length &&\n            (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {\n            /** @type {?} */\n            const cleanupFns = [];\n            try {\n                players = this._flushAnimations(cleanupFns, microtaskId);\n            }\n            finally {\n                for (let i = 0; i < cleanupFns.length; i++) {\n                    cleanupFns[i]();\n                }\n            }\n        }\n        else {\n            for (let i = 0; i < this.collectedLeaveElements.length; i++) {\n                /** @type {?} */\n                const element = this.collectedLeaveElements[i];\n                this.processLeaveNode(element);\n            }\n        }\n        this.totalQueuedPlayers = 0;\n        this.collectedEnterElements.length = 0;\n        this.collectedLeaveElements.length = 0;\n        this._flushFns.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        this._flushFns = [];\n        if (this._whenQuietFns.length) {\n            // we move these over to a variable so that\n            // if any new callbacks are registered in another\n            // flush they do not populate the existing set\n            /** @type {?} */\n            const quietFns = this._whenQuietFns;\n            this._whenQuietFns = [];\n            if (players.length) {\n                optimizeGroupPlayer(players).onDone((/**\n                 * @return {?}\n                 */\n                () => { quietFns.forEach((/**\n                 * @param {?} fn\n                 * @return {?}\n                 */\n                fn => fn())); }));\n            }\n            else {\n                quietFns.forEach((/**\n                 * @param {?} fn\n                 * @return {?}\n                 */\n                fn => fn()));\n            }\n        }\n    }\n    /**\n     * @param {?} errors\n     * @return {?}\n     */\n    reportError(errors) {\n        throw new Error(`Unable to process animations due to the following failed trigger transitions\\n ${errors.join('\\n')}`);\n    }\n    /**\n     * @private\n     * @param {?} cleanupFns\n     * @param {?} microtaskId\n     * @return {?}\n     */\n    _flushAnimations(cleanupFns, microtaskId) {\n        /** @type {?} */\n        const subTimelines = new ElementInstructionMap();\n        /** @type {?} */\n        const skippedPlayers = [];\n        /** @type {?} */\n        const skippedPlayersMap = new Map();\n        /** @type {?} */\n        const queuedInstructions = [];\n        /** @type {?} */\n        const queriedElements = new Map();\n        /** @type {?} */\n        const allPreStyleElements = new Map();\n        /** @type {?} */\n        const allPostStyleElements = new Map();\n        /** @type {?} */\n        const disabledElementsSet = new Set();\n        this.disabledNodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            disabledElementsSet.add(node);\n            /** @type {?} */\n            const nodesThatAreDisabled = this.driver.query(node, QUEUED_SELECTOR, true);\n            for (let i = 0; i < nodesThatAreDisabled.length; i++) {\n                disabledElementsSet.add(nodesThatAreDisabled[i]);\n            }\n        }));\n        /** @type {?} */\n        const bodyNode = this.bodyNode;\n        /** @type {?} */\n        const allTriggerElements = Array.from(this.statesByElement.keys());\n        /** @type {?} */\n        const enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);\n        // this must occur before the instructions are built below such that\n        // the :enter queries match the elements (since the timeline queries\n        // are fired during instruction building).\n        /** @type {?} */\n        const enterNodeMapIds = new Map();\n        /** @type {?} */\n        let i = 0;\n        enterNodeMap.forEach((/**\n         * @param {?} nodes\n         * @param {?} root\n         * @return {?}\n         */\n        (nodes, root) => {\n            /** @type {?} */\n            const className = ENTER_CLASSNAME + i++;\n            enterNodeMapIds.set(root, className);\n            nodes.forEach((/**\n             * @param {?} node\n             * @return {?}\n             */\n            node => addClass(node, className)));\n        }));\n        /** @type {?} */\n        const allLeaveNodes = [];\n        /** @type {?} */\n        const mergedLeaveNodes = new Set();\n        /** @type {?} */\n        const leaveNodesWithoutAnimations = new Set();\n        for (let i = 0; i < this.collectedLeaveElements.length; i++) {\n            /** @type {?} */\n            const element = this.collectedLeaveElements[i];\n            /** @type {?} */\n            const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n            if (details && details.setForRemoval) {\n                allLeaveNodes.push(element);\n                mergedLeaveNodes.add(element);\n                if (details.hasAnimation) {\n                    this.driver.query(element, STAR_SELECTOR, true).forEach((/**\n                     * @param {?} elm\n                     * @return {?}\n                     */\n                    elm => mergedLeaveNodes.add(elm)));\n                }\n                else {\n                    leaveNodesWithoutAnimations.add(element);\n                }\n            }\n        }\n        /** @type {?} */\n        const leaveNodeMapIds = new Map();\n        /** @type {?} */\n        const leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));\n        leaveNodeMap.forEach((/**\n         * @param {?} nodes\n         * @param {?} root\n         * @return {?}\n         */\n        (nodes, root) => {\n            /** @type {?} */\n            const className = LEAVE_CLASSNAME + i++;\n            leaveNodeMapIds.set(root, className);\n            nodes.forEach((/**\n             * @param {?} node\n             * @return {?}\n             */\n            node => addClass(node, className)));\n        }));\n        cleanupFns.push((/**\n         * @return {?}\n         */\n        () => {\n            enterNodeMap.forEach((/**\n             * @param {?} nodes\n             * @param {?} root\n             * @return {?}\n             */\n            (nodes, root) => {\n                /** @type {?} */\n                const className = (/** @type {?} */ (enterNodeMapIds.get(root)));\n                nodes.forEach((/**\n                 * @param {?} node\n                 * @return {?}\n                 */\n                node => removeClass(node, className)));\n            }));\n            leaveNodeMap.forEach((/**\n             * @param {?} nodes\n             * @param {?} root\n             * @return {?}\n             */\n            (nodes, root) => {\n                /** @type {?} */\n                const className = (/** @type {?} */ (leaveNodeMapIds.get(root)));\n                nodes.forEach((/**\n                 * @param {?} node\n                 * @return {?}\n                 */\n                node => removeClass(node, className)));\n            }));\n            allLeaveNodes.forEach((/**\n             * @param {?} element\n             * @return {?}\n             */\n            element => { this.processLeaveNode(element); }));\n        }));\n        /** @type {?} */\n        const allPlayers = [];\n        /** @type {?} */\n        const erroneousTransitions = [];\n        for (let i = this._namespaceList.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const ns = this._namespaceList[i];\n            ns.drainQueuedTransitions(microtaskId).forEach((/**\n             * @param {?} entry\n             * @return {?}\n             */\n            entry => {\n                /** @type {?} */\n                const player = entry.player;\n                /** @type {?} */\n                const element = entry.element;\n                allPlayers.push(player);\n                if (this.collectedEnterElements.length) {\n                    /** @type {?} */\n                    const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n                    // move animations are currently not supported...\n                    if (details && details.setForMove) {\n                        player.destroy();\n                        return;\n                    }\n                }\n                /** @type {?} */\n                const nodeIsOrphaned = !bodyNode || !this.driver.containsElement(bodyNode, element);\n                /** @type {?} */\n                const leaveClassName = (/** @type {?} */ (leaveNodeMapIds.get(element)));\n                /** @type {?} */\n                const enterClassName = (/** @type {?} */ (enterNodeMapIds.get(element)));\n                /** @type {?} */\n                const instruction = (/** @type {?} */ (this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned)));\n                if (instruction.errors && instruction.errors.length) {\n                    erroneousTransitions.push(instruction);\n                    return;\n                }\n                // even though the element may not be apart of the DOM, it may\n                // still be added at a later point (due to the mechanics of content\n                // projection and/or dynamic component insertion) therefore it's\n                // important we still style the element.\n                if (nodeIsOrphaned) {\n                    player.onStart((/**\n                     * @return {?}\n                     */\n                    () => eraseStyles(element, instruction.fromStyles)));\n                    player.onDestroy((/**\n                     * @return {?}\n                     */\n                    () => setStyles(element, instruction.toStyles)));\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // if a unmatched transition is queued to go then it SHOULD NOT render\n                // an animation and cancel the previously running animations.\n                if (entry.isFallbackTransition) {\n                    player.onStart((/**\n                     * @return {?}\n                     */\n                    () => eraseStyles(element, instruction.fromStyles)));\n                    player.onDestroy((/**\n                     * @return {?}\n                     */\n                    () => setStyles(element, instruction.toStyles)));\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // this means that if a parent animation uses this animation as a sub trigger\n                // then it will instruct the timeline builder to not add a player delay, but\n                // instead stretch the first keyframe gap up until the animation starts. The\n                // reason this is important is to prevent extra initialization styles from being\n                // required by the user in the animation.\n                instruction.timelines.forEach((/**\n                 * @param {?} tl\n                 * @return {?}\n                 */\n                tl => tl.stretchStartingKeyframe = true));\n                subTimelines.append(element, instruction.timelines);\n                /** @type {?} */\n                const tuple = { instruction, player, element };\n                queuedInstructions.push(tuple);\n                instruction.queriedElements.forEach((/**\n                 * @param {?} element\n                 * @return {?}\n                 */\n                element => getOrSetAsInMap(queriedElements, element, []).push(player)));\n                instruction.preStyleProps.forEach((/**\n                 * @param {?} stringMap\n                 * @param {?} element\n                 * @return {?}\n                 */\n                (stringMap, element) => {\n                    /** @type {?} */\n                    const props = Object.keys(stringMap);\n                    if (props.length) {\n                        /** @type {?} */\n                        let setVal = (/** @type {?} */ (allPreStyleElements.get(element)));\n                        if (!setVal) {\n                            allPreStyleElements.set(element, setVal = new Set());\n                        }\n                        props.forEach((/**\n                         * @param {?} prop\n                         * @return {?}\n                         */\n                        prop => setVal.add(prop)));\n                    }\n                }));\n                instruction.postStyleProps.forEach((/**\n                 * @param {?} stringMap\n                 * @param {?} element\n                 * @return {?}\n                 */\n                (stringMap, element) => {\n                    /** @type {?} */\n                    const props = Object.keys(stringMap);\n                    /** @type {?} */\n                    let setVal = (/** @type {?} */ (allPostStyleElements.get(element)));\n                    if (!setVal) {\n                        allPostStyleElements.set(element, setVal = new Set());\n                    }\n                    props.forEach((/**\n                     * @param {?} prop\n                     * @return {?}\n                     */\n                    prop => setVal.add(prop)));\n                }));\n            }));\n        }\n        if (erroneousTransitions.length) {\n            /** @type {?} */\n            const errors = [];\n            erroneousTransitions.forEach((/**\n             * @param {?} instruction\n             * @return {?}\n             */\n            instruction => {\n                errors.push(`@${instruction.triggerName} has failed due to:\\n`);\n                (/** @type {?} */ (instruction.errors)).forEach((/**\n                 * @param {?} error\n                 * @return {?}\n                 */\n                error => errors.push(`- ${error}\\n`)));\n            }));\n            allPlayers.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => player.destroy()));\n            this.reportError(errors);\n        }\n        /** @type {?} */\n        const allPreviousPlayersMap = new Map();\n        // this map works to tell which element in the DOM tree is contained by\n        // which animation. Further down below this map will get populated once\n        // the players are built and in doing so it can efficiently figure out\n        // if a sub player is skipped due to a parent player having priority.\n        /** @type {?} */\n        const animationElementMap = new Map();\n        queuedInstructions.forEach((/**\n         * @param {?} entry\n         * @return {?}\n         */\n        entry => {\n            /** @type {?} */\n            const element = entry.element;\n            if (subTimelines.has(element)) {\n                animationElementMap.set(element, element);\n                this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);\n            }\n        }));\n        skippedPlayers.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            /** @type {?} */\n            const element = player.element;\n            /** @type {?} */\n            const previousPlayers = this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);\n            previousPlayers.forEach((/**\n             * @param {?} prevPlayer\n             * @return {?}\n             */\n            prevPlayer => {\n                getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);\n                prevPlayer.destroy();\n            }));\n        }));\n        // this is a special case for nodes that will be removed (either by)\n        // having their own leave animations or by being queried in a container\n        // that will be removed once a parent animation is complete. The idea\n        // here is that * styles must be identical to ! styles because of\n        // backwards compatibility (* is also filled in by default in many places).\n        // Otherwise * styles will return an empty value or auto since the element\n        // that is being getComputedStyle'd will not be visible (since * = destination)\n        /** @type {?} */\n        const replaceNodes = allLeaveNodes.filter((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);\n        }));\n        // POST STAGE: fill the * styles\n        /** @type {?} */\n        const postStylesMap = new Map();\n        /** @type {?} */\n        const allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, AUTO_STYLE);\n        allLeaveQueriedNodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {\n                replaceNodes.push(node);\n            }\n        }));\n        // PRE STAGE: fill the ! styles\n        /** @type {?} */\n        const preStylesMap = new Map();\n        enterNodeMap.forEach((/**\n         * @param {?} nodes\n         * @param {?} root\n         * @return {?}\n         */\n        (nodes, root) => {\n            cloakAndComputeStyles(preStylesMap, this.driver, new Set(nodes), allPreStyleElements, ÉµPRE_STYLE);\n        }));\n        replaceNodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            /** @type {?} */\n            const post = postStylesMap.get(node);\n            /** @type {?} */\n            const pre = preStylesMap.get(node);\n            postStylesMap.set(node, (/** @type {?} */ (Object.assign({}, post, pre))));\n        }));\n        /** @type {?} */\n        const rootPlayers = [];\n        /** @type {?} */\n        const subPlayers = [];\n        /** @type {?} */\n        const NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};\n        queuedInstructions.forEach((/**\n         * @param {?} entry\n         * @return {?}\n         */\n        entry => {\n            const { element, player, instruction } = entry;\n            // this means that it was never consumed by a parent animation which\n            // means that it is independent and therefore should be set for animation\n            if (subTimelines.has(element)) {\n                if (disabledElementsSet.has(element)) {\n                    player.onDestroy((/**\n                     * @return {?}\n                     */\n                    () => setStyles(element, instruction.toStyles)));\n                    player.disabled = true;\n                    player.overrideTotalTime(instruction.totalTime);\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // this will flow up the DOM and query the map to figure out\n                // if a parent animation has priority over it. In the situation\n                // that a parent is detected then it will cancel the loop. If\n                // nothing is detected, or it takes a few hops to find a parent,\n                // then it will fill in the missing nodes and signal them as having\n                // a detected parent (or a NO_PARENT value via a special constant).\n                /** @type {?} */\n                let parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;\n                if (animationElementMap.size > 1) {\n                    /** @type {?} */\n                    let elm = element;\n                    /** @type {?} */\n                    const parentsToAdd = [];\n                    while (elm = elm.parentNode) {\n                        /** @type {?} */\n                        const detectedParent = animationElementMap.get(elm);\n                        if (detectedParent) {\n                            parentWithAnimation = detectedParent;\n                            break;\n                        }\n                        parentsToAdd.push(elm);\n                    }\n                    parentsToAdd.forEach((/**\n                     * @param {?} parent\n                     * @return {?}\n                     */\n                    parent => animationElementMap.set(parent, parentWithAnimation)));\n                }\n                /** @type {?} */\n                const innerPlayer = this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);\n                player.setRealPlayer(innerPlayer);\n                if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {\n                    rootPlayers.push(player);\n                }\n                else {\n                    /** @type {?} */\n                    const parentPlayers = this.playersByElement.get(parentWithAnimation);\n                    if (parentPlayers && parentPlayers.length) {\n                        player.parentPlayer = optimizeGroupPlayer(parentPlayers);\n                    }\n                    skippedPlayers.push(player);\n                }\n            }\n            else {\n                eraseStyles(element, instruction.fromStyles);\n                player.onDestroy((/**\n                 * @return {?}\n                 */\n                () => setStyles(element, instruction.toStyles)));\n                // there still might be a ancestor player animating this\n                // element therefore we will still add it as a sub player\n                // even if its animation may be disabled\n                subPlayers.push(player);\n                if (disabledElementsSet.has(element)) {\n                    skippedPlayers.push(player);\n                }\n            }\n        }));\n        // find all of the sub players' corresponding inner animation player\n        subPlayers.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            // even if any players are not found for a sub animation then it\n            // will still complete itself after the next tick since it's Noop\n            /** @type {?} */\n            const playersForElement = skippedPlayersMap.get(player.element);\n            if (playersForElement && playersForElement.length) {\n                /** @type {?} */\n                const innerPlayer = optimizeGroupPlayer(playersForElement);\n                player.setRealPlayer(innerPlayer);\n            }\n        }));\n        // the reason why we don't actually play the animation is\n        // because all that a skipped player is designed to do is to\n        // fire the start/done transition callback events\n        skippedPlayers.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            if (player.parentPlayer) {\n                player.syncPlayerEvents(player.parentPlayer);\n            }\n            else {\n                player.destroy();\n            }\n        }));\n        // run through all of the queued removals and see if they\n        // were picked up by a query. If not then perform the removal\n        // operation right away unless a parent animation is ongoing.\n        for (let i = 0; i < allLeaveNodes.length; i++) {\n            /** @type {?} */\n            const element = allLeaveNodes[i];\n            /** @type {?} */\n            const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n            removeClass(element, LEAVE_CLASSNAME);\n            // this means the element has a removal animation that is being\n            // taken care of and therefore the inner elements will hang around\n            // until that animation is over (or the parent queried animation)\n            if (details && details.hasAnimation)\n                continue;\n            /** @type {?} */\n            let players = [];\n            // if this element is queried or if it contains queried children\n            // then we want for the element not to be removed from the page\n            // until the queried animations have finished\n            if (queriedElements.size) {\n                /** @type {?} */\n                let queriedPlayerResults = queriedElements.get(element);\n                if (queriedPlayerResults && queriedPlayerResults.length) {\n                    players.push(...queriedPlayerResults);\n                }\n                /** @type {?} */\n                let queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);\n                for (let j = 0; j < queriedInnerElements.length; j++) {\n                    /** @type {?} */\n                    let queriedPlayers = queriedElements.get(queriedInnerElements[j]);\n                    if (queriedPlayers && queriedPlayers.length) {\n                        players.push(...queriedPlayers);\n                    }\n                }\n            }\n            /** @type {?} */\n            const activePlayers = players.filter((/**\n             * @param {?} p\n             * @return {?}\n             */\n            p => !p.destroyed));\n            if (activePlayers.length) {\n                removeNodesAfterAnimationDone(this, element, activePlayers);\n            }\n            else {\n                this.processLeaveNode(element);\n            }\n        }\n        // this is required so the cleanup method doesn't remove them\n        allLeaveNodes.length = 0;\n        rootPlayers.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            this.players.push(player);\n            player.onDone((/**\n             * @return {?}\n             */\n            () => {\n                player.destroy();\n                /** @type {?} */\n                const index = this.players.indexOf(player);\n                this.players.splice(index, 1);\n            }));\n            player.play();\n        }));\n        return rootPlayers;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @return {?}\n     */\n    elementContainsData(namespaceId, element) {\n        /** @type {?} */\n        let containsData = false;\n        /** @type {?} */\n        const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n        if (details && details.setForRemoval)\n            containsData = true;\n        if (this.playersByElement.has(element))\n            containsData = true;\n        if (this.playersByQueriedElement.has(element))\n            containsData = true;\n        if (this.statesByElement.has(element))\n            containsData = true;\n        return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    afterFlush(callback) { this._flushFns.push(callback); }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    afterFlushAnimationsDone(callback) { this._whenQuietFns.push(callback); }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} isQueriedElement\n     * @param {?=} namespaceId\n     * @param {?=} triggerName\n     * @param {?=} toStateValue\n     * @return {?}\n     */\n    _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {\n        /** @type {?} */\n        let players = [];\n        if (isQueriedElement) {\n            /** @type {?} */\n            const queriedElementPlayers = this.playersByQueriedElement.get(element);\n            if (queriedElementPlayers) {\n                players = queriedElementPlayers;\n            }\n        }\n        else {\n            /** @type {?} */\n            const elementPlayers = this.playersByElement.get(element);\n            if (elementPlayers) {\n                /** @type {?} */\n                const isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;\n                elementPlayers.forEach((/**\n                 * @param {?} player\n                 * @return {?}\n                 */\n                player => {\n                    if (player.queued)\n                        return;\n                    if (!isRemovalAnimation && player.triggerName != triggerName)\n                        return;\n                    players.push(player);\n                }));\n            }\n        }\n        if (namespaceId || triggerName) {\n            players = players.filter((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => {\n                if (namespaceId && namespaceId != player.namespaceId)\n                    return false;\n                if (triggerName && triggerName != player.triggerName)\n                    return false;\n                return true;\n            }));\n        }\n        return players;\n    }\n    /**\n     * @private\n     * @param {?} namespaceId\n     * @param {?} instruction\n     * @param {?} allPreviousPlayersMap\n     * @return {?}\n     */\n    _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {\n        /** @type {?} */\n        const triggerName = instruction.triggerName;\n        /** @type {?} */\n        const rootElement = instruction.element;\n        // when a removal animation occurs, ALL previous players are collected\n        // and destroyed (even if they are outside of the current namespace)\n        /** @type {?} */\n        const targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;\n        /** @type {?} */\n        const targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;\n        for (const timelineInstruction of instruction.timelines) {\n            /** @type {?} */\n            const element = timelineInstruction.element;\n            /** @type {?} */\n            const isQueriedElement = element !== rootElement;\n            /** @type {?} */\n            const players = getOrSetAsInMap(allPreviousPlayersMap, element, []);\n            /** @type {?} */\n            const previousPlayers = this._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);\n            previousPlayers.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => {\n                /** @type {?} */\n                const realPlayer = (/** @type {?} */ (player.getRealPlayer()));\n                if (realPlayer.beforeDestroy) {\n                    realPlayer.beforeDestroy();\n                }\n                player.destroy();\n                players.push(player);\n            }));\n        }\n        // this needs to be done so that the PRE/POST styles can be\n        // computed properly without interfering with the previous animation\n        eraseStyles(rootElement, instruction.fromStyles);\n    }\n    /**\n     * @private\n     * @param {?} namespaceId\n     * @param {?} instruction\n     * @param {?} allPreviousPlayersMap\n     * @param {?} skippedPlayersMap\n     * @param {?} preStylesMap\n     * @param {?} postStylesMap\n     * @return {?}\n     */\n    _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {\n        /** @type {?} */\n        const triggerName = instruction.triggerName;\n        /** @type {?} */\n        const rootElement = instruction.element;\n        // we first run this so that the previous animation player\n        // data can be passed into the successive animation players\n        /** @type {?} */\n        const allQueriedPlayers = [];\n        /** @type {?} */\n        const allConsumedElements = new Set();\n        /** @type {?} */\n        const allSubElements = new Set();\n        /** @type {?} */\n        const allNewPlayers = instruction.timelines.map((/**\n         * @param {?} timelineInstruction\n         * @return {?}\n         */\n        timelineInstruction => {\n            /** @type {?} */\n            const element = timelineInstruction.element;\n            allConsumedElements.add(element);\n            // FIXME (matsko): make sure to-be-removed animations are removed properly\n            /** @type {?} */\n            const details = element[REMOVAL_FLAG];\n            if (details && details.removedBeforeQueried)\n                return new NoopAnimationPlayer(timelineInstruction.duration, timelineInstruction.delay);\n            /** @type {?} */\n            const isQueriedElement = element !== rootElement;\n            /** @type {?} */\n            const previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY)\n                .map((/**\n             * @param {?} p\n             * @return {?}\n             */\n            p => p.getRealPlayer())))\n                .filter((/**\n             * @param {?} p\n             * @return {?}\n             */\n            p => {\n                // the `element` is not apart of the AnimationPlayer definition, but\n                // Mock/WebAnimations\n                // use the element within their implementation. This will be added in Angular5 to\n                // AnimationPlayer\n                /** @type {?} */\n                const pp = (/** @type {?} */ (p));\n                return pp.element ? pp.element === element : false;\n            }));\n            /** @type {?} */\n            const preStyles = preStylesMap.get(element);\n            /** @type {?} */\n            const postStyles = postStylesMap.get(element);\n            /** @type {?} */\n            const keyframes = normalizeKeyframes(this.driver, this._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);\n            /** @type {?} */\n            const player = this._buildPlayer(timelineInstruction, keyframes, previousPlayers);\n            // this means that this particular player belongs to a sub trigger. It is\n            // important that we match this player up with the corresponding (@trigger.listener)\n            if (timelineInstruction.subTimeline && skippedPlayersMap) {\n                allSubElements.add(element);\n            }\n            if (isQueriedElement) {\n                /** @type {?} */\n                const wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);\n                wrappedPlayer.setRealPlayer(player);\n                allQueriedPlayers.push(wrappedPlayer);\n            }\n            return player;\n        }));\n        allQueriedPlayers.forEach((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            getOrSetAsInMap(this.playersByQueriedElement, player.element, []).push(player);\n            player.onDone((/**\n             * @return {?}\n             */\n            () => deleteOrUnsetInMap(this.playersByQueriedElement, player.element, player)));\n        }));\n        allConsumedElements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        element => addClass(element, NG_ANIMATING_CLASSNAME)));\n        /** @type {?} */\n        const player = optimizeGroupPlayer(allNewPlayers);\n        player.onDestroy((/**\n         * @return {?}\n         */\n        () => {\n            allConsumedElements.forEach((/**\n             * @param {?} element\n             * @return {?}\n             */\n            element => removeClass(element, NG_ANIMATING_CLASSNAME)));\n            setStyles(rootElement, instruction.toStyles);\n        }));\n        // this basically makes all of the callbacks for sub element animations\n        // be dependent on the upper players for when they finish\n        allSubElements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        element => { getOrSetAsInMap(skippedPlayersMap, element, []).push(player); }));\n        return player;\n    }\n    /**\n     * @private\n     * @param {?} instruction\n     * @param {?} keyframes\n     * @param {?} previousPlayers\n     * @return {?}\n     */\n    _buildPlayer(instruction, keyframes, previousPlayers) {\n        if (keyframes.length > 0) {\n            return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);\n        }\n        // special case for when an empty transition|definition is provided\n        // ... there is no point in rendering an empty animation\n        return new NoopAnimationPlayer(instruction.duration, instruction.delay);\n    }\n}\nif (false) {\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.players;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.newHostElements;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.playersByElement;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.playersByQueriedElement;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.statesByElement;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.disabledNodes;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.totalAnimations;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.totalQueuedPlayers;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransitionAnimationEngine.prototype._namespaceLookup;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransitionAnimationEngine.prototype._namespaceList;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransitionAnimationEngine.prototype._flushFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransitionAnimationEngine.prototype._whenQuietFns;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.namespacesByHostElement;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.collectedEnterElements;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.collectedLeaveElements;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.onRemovalComplete;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.bodyNode;\n    /** @type {?} */\n    TransitionAnimationEngine.prototype.driver;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransitionAnimationEngine.prototype._normalizer;\n}\nclass TransitionAnimationPlayer {\n    /**\n     * @param {?} namespaceId\n     * @param {?} triggerName\n     * @param {?} element\n     */\n    constructor(namespaceId, triggerName, element) {\n        this.namespaceId = namespaceId;\n        this.triggerName = triggerName;\n        this.element = element;\n        this._player = new NoopAnimationPlayer();\n        this._containsRealPlayer = false;\n        this._queuedCallbacks = {};\n        this.destroyed = false;\n        this.markedForDestroy = false;\n        this.disabled = false;\n        this.queued = true;\n        this.totalTime = 0;\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    setRealPlayer(player) {\n        if (this._containsRealPlayer)\n            return;\n        this._player = player;\n        Object.keys(this._queuedCallbacks).forEach((/**\n         * @param {?} phase\n         * @return {?}\n         */\n        phase => {\n            this._queuedCallbacks[phase].forEach((/**\n             * @param {?} callback\n             * @return {?}\n             */\n            callback => listenOnPlayer(player, phase, undefined, callback)));\n        }));\n        this._queuedCallbacks = {};\n        this._containsRealPlayer = true;\n        this.overrideTotalTime(player.totalTime);\n        ((/** @type {?} */ (this))).queued = false;\n    }\n    /**\n     * @return {?}\n     */\n    getRealPlayer() { return this._player; }\n    /**\n     * @param {?} totalTime\n     * @return {?}\n     */\n    overrideTotalTime(totalTime) { ((/** @type {?} */ (this))).totalTime = totalTime; }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    syncPlayerEvents(player) {\n        /** @type {?} */\n        const p = (/** @type {?} */ (this._player));\n        if (p.triggerCallback) {\n            player.onStart((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (p.triggerCallback))('start')));\n        }\n        player.onDone((/**\n         * @return {?}\n         */\n        () => this.finish()));\n        player.onDestroy((/**\n         * @return {?}\n         */\n        () => this.destroy()));\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    _queueEvent(name, callback) {\n        getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) {\n        if (this.queued) {\n            this._queueEvent('done', fn);\n        }\n        this._player.onDone(fn);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) {\n        if (this.queued) {\n            this._queueEvent('start', fn);\n        }\n        this._player.onStart(fn);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) {\n        if (this.queued) {\n            this._queueEvent('destroy', fn);\n        }\n        this._player.onDestroy(fn);\n    }\n    /**\n     * @return {?}\n     */\n    init() { this._player.init(); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this.queued ? false : this._player.hasStarted(); }\n    /**\n     * @return {?}\n     */\n    play() { !this.queued && this._player.play(); }\n    /**\n     * @return {?}\n     */\n    pause() { !this.queued && this._player.pause(); }\n    /**\n     * @return {?}\n     */\n    restart() { !this.queued && this._player.restart(); }\n    /**\n     * @return {?}\n     */\n    finish() { this._player.finish(); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ((/** @type {?} */ (this))).destroyed = true;\n        this._player.destroy();\n    }\n    /**\n     * @return {?}\n     */\n    reset() { !this.queued && this._player.reset(); }\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    setPosition(p) {\n        if (!this.queued) {\n            this._player.setPosition(p);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getPosition() { return this.queued ? 0 : this._player.getPosition(); }\n    /**\n     * \\@internal\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        /** @type {?} */\n        const p = (/** @type {?} */ (this._player));\n        if (p.triggerCallback) {\n            p.triggerCallback(phaseName);\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TransitionAnimationPlayer.prototype._player;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransitionAnimationPlayer.prototype._containsRealPlayer;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransitionAnimationPlayer.prototype._queuedCallbacks;\n    /** @type {?} */\n    TransitionAnimationPlayer.prototype.destroyed;\n    /** @type {?} */\n    TransitionAnimationPlayer.prototype.parentPlayer;\n    /** @type {?} */\n    TransitionAnimationPlayer.prototype.markedForDestroy;\n    /** @type {?} */\n    TransitionAnimationPlayer.prototype.disabled;\n    /** @type {?} */\n    TransitionAnimationPlayer.prototype.queued;\n    /** @type {?} */\n    TransitionAnimationPlayer.prototype.totalTime;\n    /** @type {?} */\n    TransitionAnimationPlayer.prototype.namespaceId;\n    /** @type {?} */\n    TransitionAnimationPlayer.prototype.triggerName;\n    /** @type {?} */\n    TransitionAnimationPlayer.prototype.element;\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction deleteOrUnsetInMap(map, key, value) {\n    /** @type {?} */\n    let currentValues;\n    if (map instanceof Map) {\n        currentValues = map.get(key);\n        if (currentValues) {\n            if (currentValues.length) {\n                /** @type {?} */\n                const index = currentValues.indexOf(value);\n                currentValues.splice(index, 1);\n            }\n            if (currentValues.length == 0) {\n                map.delete(key);\n            }\n        }\n    }\n    else {\n        currentValues = map[key];\n        if (currentValues) {\n            if (currentValues.length) {\n                /** @type {?} */\n                const index = currentValues.indexOf(value);\n                currentValues.splice(index, 1);\n            }\n            if (currentValues.length == 0) {\n                delete map[key];\n            }\n        }\n    }\n    return currentValues;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeTriggerValue(value) {\n    // we use `!= null` here because it's the most simple\n    // way to test against a \"falsy\" value without mixing\n    // in empty strings or a zero value. DO NOT OPTIMIZE.\n    return value != null ? value : null;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isElementNode(node) {\n    return node && node['nodeType'] === 1;\n}\n/**\n * @param {?} eventName\n * @return {?}\n */\nfunction isTriggerEventValid(eventName) {\n    return eventName == 'start' || eventName == 'done';\n}\n/**\n * @param {?} element\n * @param {?=} value\n * @return {?}\n */\nfunction cloakElement(element, value) {\n    /** @type {?} */\n    const oldValue = element.style.display;\n    element.style.display = value != null ? value : 'none';\n    return oldValue;\n}\n/**\n * @param {?} valuesMap\n * @param {?} driver\n * @param {?} elements\n * @param {?} elementPropsMap\n * @param {?} defaultStyle\n * @return {?}\n */\nfunction cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {\n    /** @type {?} */\n    const cloakVals = [];\n    elements.forEach((/**\n     * @param {?} element\n     * @return {?}\n     */\n    element => cloakVals.push(cloakElement(element))));\n    /** @type {?} */\n    const failedElements = [];\n    elementPropsMap.forEach((/**\n     * @param {?} props\n     * @param {?} element\n     * @return {?}\n     */\n    (props, element) => {\n        /** @type {?} */\n        const styles = {};\n        props.forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            /** @type {?} */\n            const value = styles[prop] = driver.computeStyle(element, prop, defaultStyle);\n            // there is no easy way to detect this because a sub element could be removed\n            // by a parent animation element being detached.\n            if (!value || value.length == 0) {\n                element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;\n                failedElements.push(element);\n            }\n        }));\n        valuesMap.set(element, styles);\n    }));\n    // we use a index variable here since Set.forEach(a, i) does not return\n    // an index value for the closure (but instead just the value)\n    /** @type {?} */\n    let i = 0;\n    elements.forEach((/**\n     * @param {?} element\n     * @return {?}\n     */\n    element => cloakElement(element, cloakVals[i++])));\n    return failedElements;\n}\n/*\nSince the Angular renderer code will return a collection of inserted\nnodes in all areas of a DOM tree, it's up to this algorithm to figure\nout which nodes are roots for each animation @trigger.\n\nBy placing each inserted node into a Set and traversing upwards, it\nis possible to find the @trigger elements and well any direct *star\ninsertion nodes, if a @trigger root is found then the enter element\nis placed into the Map[@trigger] spot.\n */\n/**\n * @param {?} roots\n * @param {?} nodes\n * @return {?}\n */\nfunction buildRootMap(roots, nodes) {\n    /** @type {?} */\n    const rootMap = new Map();\n    roots.forEach((/**\n     * @param {?} root\n     * @return {?}\n     */\n    root => rootMap.set(root, [])));\n    if (nodes.length == 0)\n        return rootMap;\n    /** @type {?} */\n    const NULL_NODE = 1;\n    /** @type {?} */\n    const nodeSet = new Set(nodes);\n    /** @type {?} */\n    const localRootMap = new Map();\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function getRoot(node) {\n        if (!node)\n            return NULL_NODE;\n        /** @type {?} */\n        let root = localRootMap.get(node);\n        if (root)\n            return root;\n        /** @type {?} */\n        const parent = node.parentNode;\n        if (rootMap.has(parent)) { // ngIf inside @trigger\n            root = parent;\n        }\n        else if (nodeSet.has(parent)) { // ngIf inside ngIf\n            root = NULL_NODE;\n        }\n        else { // recurse upwards\n            root = getRoot(parent);\n        }\n        localRootMap.set(node, root);\n        return root;\n    }\n    nodes.forEach((/**\n     * @param {?} node\n     * @return {?}\n     */\n    node => {\n        /** @type {?} */\n        const root = getRoot(node);\n        if (root !== NULL_NODE) {\n            (/** @type {?} */ (rootMap.get(root))).push(node);\n        }\n    }));\n    return rootMap;\n}\n/** @type {?} */\nconst CLASSES_CACHE_KEY = '$$classes';\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nfunction containsClass(element, className) {\n    if (element.classList) {\n        return element.classList.contains(className);\n    }\n    else {\n        /** @type {?} */\n        const classes = element[CLASSES_CACHE_KEY];\n        return classes && classes[className];\n    }\n}\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nfunction addClass(element, className) {\n    if (element.classList) {\n        element.classList.add(className);\n    }\n    else {\n        /** @type {?} */\n        let classes = element[CLASSES_CACHE_KEY];\n        if (!classes) {\n            classes = element[CLASSES_CACHE_KEY] = {};\n        }\n        classes[className] = true;\n    }\n}\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nfunction removeClass(element, className) {\n    if (element.classList) {\n        element.classList.remove(className);\n    }\n    else {\n        /** @type {?} */\n        let classes = element[CLASSES_CACHE_KEY];\n        if (classes) {\n            delete classes[className];\n        }\n    }\n}\n/**\n * @param {?} engine\n * @param {?} element\n * @param {?} players\n * @return {?}\n */\nfunction removeNodesAfterAnimationDone(engine, element, players) {\n    optimizeGroupPlayer(players).onDone((/**\n     * @return {?}\n     */\n    () => engine.processLeaveNode(element)));\n}\n/**\n * @param {?} players\n * @return {?}\n */\nfunction flattenGroupPlayers(players) {\n    /** @type {?} */\n    const finalPlayers = [];\n    _flattenGroupPlayersRecur(players, finalPlayers);\n    return finalPlayers;\n}\n/**\n * @param {?} players\n * @param {?} finalPlayers\n * @return {?}\n */\nfunction _flattenGroupPlayersRecur(players, finalPlayers) {\n    for (let i = 0; i < players.length; i++) {\n        /** @type {?} */\n        const player = players[i];\n        if (player instanceof ÉµAnimationGroupPlayer) {\n            _flattenGroupPlayersRecur(player.players, finalPlayers);\n        }\n        else {\n            finalPlayers.push((/** @type {?} */ (player)));\n        }\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction objEquals(a, b) {\n    /** @type {?} */\n    const k1 = Object.keys(a);\n    /** @type {?} */\n    const k2 = Object.keys(b);\n    if (k1.length != k2.length)\n        return false;\n    for (let i = 0; i < k1.length; i++) {\n        /** @type {?} */\n        const prop = k1[i];\n        if (!b.hasOwnProperty(prop) || a[prop] !== b[prop])\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} element\n * @param {?} allPreStyleElements\n * @param {?} allPostStyleElements\n * @return {?}\n */\nfunction replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {\n    /** @type {?} */\n    const postEntry = allPostStyleElements.get(element);\n    if (!postEntry)\n        return false;\n    /** @type {?} */\n    let preEntry = allPreStyleElements.get(element);\n    if (preEntry) {\n        postEntry.forEach((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => (/** @type {?} */ (preEntry)).add(data)));\n    }\n    else {\n        allPreStyleElements.set(element, postEntry);\n    }\n    allPostStyleElements.delete(element);\n    return true;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AnimationEngine {\n    /**\n     * @param {?} bodyNode\n     * @param {?} _driver\n     * @param {?} normalizer\n     */\n    constructor(bodyNode, _driver, normalizer) {\n        this.bodyNode = bodyNode;\n        this._driver = _driver;\n        this._triggerCache = {};\n        // this method is designed to be overridden by the code that uses this engine\n        this.onRemovalComplete = (/**\n         * @param {?} element\n         * @param {?} context\n         * @return {?}\n         */\n        (element, context) => { });\n        this._transitionEngine = new TransitionAnimationEngine(bodyNode, _driver, normalizer);\n        this._timelineEngine = new TimelineAnimationEngine(bodyNode, _driver, normalizer);\n        this._transitionEngine.onRemovalComplete = (/**\n         * @param {?} element\n         * @param {?} context\n         * @return {?}\n         */\n        (element, context) => this.onRemovalComplete(element, context));\n    }\n    /**\n     * @param {?} componentId\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @param {?} name\n     * @param {?} metadata\n     * @return {?}\n     */\n    registerTrigger(componentId, namespaceId, hostElement, name, metadata) {\n        /** @type {?} */\n        const cacheKey = componentId + '-' + name;\n        /** @type {?} */\n        let trigger = this._triggerCache[cacheKey];\n        if (!trigger) {\n            /** @type {?} */\n            const errors = [];\n            /** @type {?} */\n            const ast = (/** @type {?} */ (buildAnimationAst(this._driver, (/** @type {?} */ (metadata)), errors)));\n            if (errors.length) {\n                throw new Error(`The animation trigger \"${name}\" has failed to build due to the following errors:\\n - ${errors.join(\"\\n - \")}`);\n            }\n            trigger = buildTrigger(name, ast);\n            this._triggerCache[cacheKey] = trigger;\n        }\n        this._transitionEngine.registerTrigger(namespaceId, name, trigger);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @return {?}\n     */\n    register(namespaceId, hostElement) {\n        this._transitionEngine.register(namespaceId, hostElement);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} context\n     * @return {?}\n     */\n    destroy(namespaceId, context) {\n        this._transitionEngine.destroy(namespaceId, context);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} parent\n     * @param {?} insertBefore\n     * @return {?}\n     */\n    onInsert(namespaceId, element, parent, insertBefore) {\n        this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} context\n     * @param {?=} isHostElement\n     * @return {?}\n     */\n    onRemove(namespaceId, element, context, isHostElement) {\n        this._transitionEngine.removeNode(namespaceId, element, isHostElement || false, context);\n    }\n    /**\n     * @param {?} element\n     * @param {?} disable\n     * @return {?}\n     */\n    disableAnimations(element, disable) {\n        this._transitionEngine.markElementAsDisabled(element, disable);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    process(namespaceId, element, property, value) {\n        if (property.charAt(0) == '@') {\n            const [id, action] = parseTimelineCommand(property);\n            /** @type {?} */\n            const args = (/** @type {?} */ (value));\n            this._timelineEngine.command(id, element, action, args);\n        }\n        else {\n            this._transitionEngine.trigger(namespaceId, element, property, value);\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} eventPhase\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(namespaceId, element, eventName, eventPhase, callback) {\n        // @@listen\n        if (eventName.charAt(0) == '@') {\n            const [id, action] = parseTimelineCommand(eventName);\n            return this._timelineEngine.listen(id, element, action, callback);\n        }\n        return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);\n    }\n    /**\n     * @param {?=} microtaskId\n     * @return {?}\n     */\n    flush(microtaskId = -1) { this._transitionEngine.flush(microtaskId); }\n    /**\n     * @return {?}\n     */\n    get players() {\n        return ((/** @type {?} */ (this._transitionEngine.players)))\n            .concat((/** @type {?} */ (this._timelineEngine.players)));\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() { return this._transitionEngine.whenRenderingDone(); }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationEngine.prototype._transitionEngine;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationEngine.prototype._timelineEngine;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationEngine.prototype._triggerCache;\n    /** @type {?} */\n    AnimationEngine.prototype.onRemovalComplete;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationEngine.prototype.bodyNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationEngine.prototype._driver;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an instance of `SpecialCasedStyles` if and when any special (non animateable) styles are\n * detected.\n *\n * In CSS there exist properties that cannot be animated within a keyframe animation\n * (whether it be via CSS keyframes or web-animations) and the animation implementation\n * will ignore them. This function is designed to detect those special cased styles and\n * return a container that will be executed at the start and end of the animation.\n *\n * @param {?} element\n * @param {?} styles\n * @return {?} an instance of `SpecialCasedStyles` if any special styles are detected otherwise `null`\n */\nfunction packageNonAnimatableStyles(element, styles) {\n    /** @type {?} */\n    let startStyles = null;\n    /** @type {?} */\n    let endStyles = null;\n    if (Array.isArray(styles) && styles.length) {\n        startStyles = filterNonAnimatableStyles(styles[0]);\n        if (styles.length > 1) {\n            endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);\n        }\n    }\n    else if (styles) {\n        startStyles = filterNonAnimatableStyles(styles);\n    }\n    return (startStyles || endStyles) ? new SpecialCasedStyles(element, startStyles, endStyles) :\n        null;\n}\n/**\n * Designed to be executed during a keyframe-based animation to apply any special-cased styles.\n *\n * When started (when the `start()` method is run) then the provided `startStyles`\n * will be applied. When finished (when the `finish()` method is called) the\n * `endStyles` will be applied as well any any starting styles. Finally when\n * `destroy()` is called then all styles will be removed.\n */\nclass SpecialCasedStyles {\n    /**\n     * @param {?} _element\n     * @param {?} _startStyles\n     * @param {?} _endStyles\n     */\n    constructor(_element, _startStyles, _endStyles) {\n        this._element = _element;\n        this._startStyles = _startStyles;\n        this._endStyles = _endStyles;\n        this._state = 0 /* Pending */;\n        /** @type {?} */\n        let initialStyles = SpecialCasedStyles.initialStylesByElement.get(_element);\n        if (!initialStyles) {\n            SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = {});\n        }\n        this._initialStyles = initialStyles;\n    }\n    /**\n     * @return {?}\n     */\n    start() {\n        if (this._state < 1 /* Started */) {\n            if (this._startStyles) {\n                setStyles(this._element, this._startStyles, this._initialStyles);\n            }\n            this._state = 1 /* Started */;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    finish() {\n        this.start();\n        if (this._state < 2 /* Finished */) {\n            setStyles(this._element, this._initialStyles);\n            if (this._endStyles) {\n                setStyles(this._element, this._endStyles);\n                this._endStyles = null;\n            }\n            this._state = 1 /* Started */;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        this.finish();\n        if (this._state < 3 /* Destroyed */) {\n            SpecialCasedStyles.initialStylesByElement.delete(this._element);\n            if (this._startStyles) {\n                eraseStyles(this._element, this._startStyles);\n                this._endStyles = null;\n            }\n            if (this._endStyles) {\n                eraseStyles(this._element, this._endStyles);\n                this._endStyles = null;\n            }\n            setStyles(this._element, this._initialStyles);\n            this._state = 3 /* Destroyed */;\n        }\n    }\n}\nSpecialCasedStyles.initialStylesByElement = new WeakMap();\nif (false) {\n    /** @type {?} */\n    SpecialCasedStyles.initialStylesByElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    SpecialCasedStyles.prototype._state;\n    /**\n     * @type {?}\n     * @private\n     */\n    SpecialCasedStyles.prototype._initialStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    SpecialCasedStyles.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    SpecialCasedStyles.prototype._startStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    SpecialCasedStyles.prototype._endStyles;\n}\n/** @enum {number} */\nconst SpecialCasedStylesState = {\n    Pending: 0,\n    Started: 1,\n    Finished: 2,\n    Destroyed: 3,\n};\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction filterNonAnimatableStyles(styles) {\n    /** @type {?} */\n    let result = null;\n    /** @type {?} */\n    const props = Object.keys(styles);\n    for (let i = 0; i < props.length; i++) {\n        /** @type {?} */\n        const prop = props[i];\n        if (isNonAnimatableStyle(prop)) {\n            result = result || {};\n            result[prop] = styles[prop];\n        }\n    }\n    return result;\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction isNonAnimatableStyle(prop) {\n    return prop === 'display' || prop === 'position';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\n/** @type {?} */\nconst ANIMATION_PROP = 'animation';\n/** @type {?} */\nconst ANIMATIONEND_EVENT = 'animationend';\n/** @type {?} */\nconst ONE_SECOND$1 = 1000;\nclass ElementAnimationStyleHandler {\n    /**\n     * @param {?} _element\n     * @param {?} _name\n     * @param {?} _duration\n     * @param {?} _delay\n     * @param {?} _easing\n     * @param {?} _fillMode\n     * @param {?} _onDoneFn\n     */\n    constructor(_element, _name, _duration, _delay, _easing, _fillMode, _onDoneFn) {\n        this._element = _element;\n        this._name = _name;\n        this._duration = _duration;\n        this._delay = _delay;\n        this._easing = _easing;\n        this._fillMode = _fillMode;\n        this._onDoneFn = _onDoneFn;\n        this._finished = false;\n        this._destroyed = false;\n        this._startTime = 0;\n        this._position = 0;\n        this._eventFn = (/**\n         * @param {?} e\n         * @return {?}\n         */\n        (e) => this._handleCallback(e));\n    }\n    /**\n     * @return {?}\n     */\n    apply() {\n        applyKeyframeAnimation(this._element, `${this._duration}ms ${this._easing} ${this._delay}ms 1 normal ${this._fillMode} ${this._name}`);\n        addRemoveAnimationEvent(this._element, this._eventFn, false);\n        this._startTime = Date.now();\n    }\n    /**\n     * @return {?}\n     */\n    pause() { playPauseAnimation(this._element, this._name, 'paused'); }\n    /**\n     * @return {?}\n     */\n    resume() { playPauseAnimation(this._element, this._name, 'running'); }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    setPosition(position) {\n        /** @type {?} */\n        const index = findIndexForAnimation(this._element, this._name);\n        this._position = position * this._duration;\n        setAnimationStyle(this._element, 'Delay', `-${this._position}ms`, index);\n    }\n    /**\n     * @return {?}\n     */\n    getPosition() { return this._position; }\n    /**\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCallback(event) {\n        /** @type {?} */\n        const timestamp = event._ngTestManualTimestamp || Date.now();\n        /** @type {?} */\n        const elapsedTime = parseFloat(event.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES)) * ONE_SECOND$1;\n        if (event.animationName == this._name &&\n            Math.max(timestamp - this._startTime, 0) >= this._delay && elapsedTime >= this._duration) {\n            this.finish();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    finish() {\n        if (this._finished)\n            return;\n        this._finished = true;\n        this._onDoneFn();\n        addRemoveAnimationEvent(this._element, this._eventFn, true);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._destroyed)\n            return;\n        this._destroyed = true;\n        this.finish();\n        removeKeyframeAnimation(this._element, this._name);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._eventFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._finished;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._startTime;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._position;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._name;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._duration;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._delay;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._easing;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._fillMode;\n    /**\n     * @type {?}\n     * @private\n     */\n    ElementAnimationStyleHandler.prototype._onDoneFn;\n}\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} status\n * @return {?}\n */\nfunction playPauseAnimation(element, name, status) {\n    /** @type {?} */\n    const index = findIndexForAnimation(element, name);\n    setAnimationStyle(element, 'PlayState', status, index);\n}\n/**\n * @param {?} element\n * @param {?} value\n * @return {?}\n */\nfunction applyKeyframeAnimation(element, value) {\n    /** @type {?} */\n    const anim = getAnimationStyle(element, '').trim();\n    /** @type {?} */\n    let index = 0;\n    if (anim.length) {\n        index = countChars(anim, ',') + 1;\n        value = `${anim}, ${value}`;\n    }\n    setAnimationStyle(element, '', value);\n    return index;\n}\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nfunction removeKeyframeAnimation(element, name) {\n    /** @type {?} */\n    const anim = getAnimationStyle(element, '');\n    /** @type {?} */\n    const tokens = anim.split(',');\n    /** @type {?} */\n    const index = findMatchingTokenIndex(tokens, name);\n    if (index >= 0) {\n        tokens.splice(index, 1);\n        /** @type {?} */\n        const newValue = tokens.join(',');\n        setAnimationStyle(element, '', newValue);\n    }\n}\n/**\n * @param {?} element\n * @param {?} value\n * @return {?}\n */\nfunction findIndexForAnimation(element, value) {\n    /** @type {?} */\n    const anim = getAnimationStyle(element, '');\n    if (anim.indexOf(',') > 0) {\n        /** @type {?} */\n        const tokens = anim.split(',');\n        return findMatchingTokenIndex(tokens, value);\n    }\n    return findMatchingTokenIndex([anim], value);\n}\n/**\n * @param {?} tokens\n * @param {?} searchToken\n * @return {?}\n */\nfunction findMatchingTokenIndex(tokens, searchToken) {\n    for (let i = 0; i < tokens.length; i++) {\n        if (tokens[i].indexOf(searchToken) >= 0) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} element\n * @param {?} fn\n * @param {?} doRemove\n * @return {?}\n */\nfunction addRemoveAnimationEvent(element, fn, doRemove) {\n    doRemove ? element.removeEventListener(ANIMATIONEND_EVENT, fn) :\n        element.addEventListener(ANIMATIONEND_EVENT, fn);\n}\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @param {?=} index\n * @return {?}\n */\nfunction setAnimationStyle(element, name, value, index) {\n    /** @type {?} */\n    const prop = ANIMATION_PROP + name;\n    if (index != null) {\n        /** @type {?} */\n        const oldValue = element.style[prop];\n        if (oldValue.length) {\n            /** @type {?} */\n            const tokens = oldValue.split(',');\n            tokens[index] = value;\n            value = tokens.join(',');\n        }\n    }\n    element.style[prop] = value;\n}\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nfunction getAnimationStyle(element, name) {\n    return element.style[ANIMATION_PROP + name];\n}\n/**\n * @param {?} value\n * @param {?} char\n * @return {?}\n */\nfunction countChars(value, char) {\n    /** @type {?} */\n    let count = 0;\n    for (let i = 0; i < value.length; i++) {\n        /** @type {?} */\n        const c = value.charAt(i);\n        if (c === char)\n            count++;\n    }\n    return count;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_FILL_MODE = 'forwards';\n/** @type {?} */\nconst DEFAULT_EASING = 'linear';\n/** @enum {number} */\nconst AnimatorControlState = {\n    INITIALIZED: 1, STARTED: 2, FINISHED: 3, DESTROYED: 4,\n};\nclass CssKeyframesPlayer {\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} animationName\n     * @param {?} _duration\n     * @param {?} _delay\n     * @param {?} easing\n     * @param {?} _finalStyles\n     * @param {?=} _specialStyles\n     */\n    constructor(element, keyframes, animationName, _duration, _delay, easing, _finalStyles, _specialStyles) {\n        this.element = element;\n        this.keyframes = keyframes;\n        this.animationName = animationName;\n        this._duration = _duration;\n        this._delay = _delay;\n        this._finalStyles = _finalStyles;\n        this._specialStyles = _specialStyles;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._started = false;\n        this.currentSnapshot = {};\n        this._state = 0;\n        this.easing = easing || DEFAULT_EASING;\n        this.totalTime = _duration + _delay;\n        this._buildStyler();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._onStartFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._onDoneFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._onDestroyFns.push(fn); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        this.init();\n        if (this._state >= 4 /* DESTROYED */)\n            return;\n        this._state = 4 /* DESTROYED */;\n        this._styler.destroy();\n        this._flushStartFns();\n        this._flushDoneFns();\n        if (this._specialStyles) {\n            this._specialStyles.destroy();\n        }\n        this._onDestroyFns.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        this._onDestroyFns = [];\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _flushDoneFns() {\n        this._onDoneFns.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        this._onDoneFns = [];\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _flushStartFns() {\n        this._onStartFns.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        this._onStartFns = [];\n    }\n    /**\n     * @return {?}\n     */\n    finish() {\n        this.init();\n        if (this._state >= 3 /* FINISHED */)\n            return;\n        this._state = 3 /* FINISHED */;\n        this._styler.finish();\n        this._flushStartFns();\n        if (this._specialStyles) {\n            this._specialStyles.finish();\n        }\n        this._flushDoneFns();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setPosition(value) { this._styler.setPosition(value); }\n    /**\n     * @return {?}\n     */\n    getPosition() { return this._styler.getPosition(); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._state >= 2 /* STARTED */; }\n    /**\n     * @return {?}\n     */\n    init() {\n        if (this._state >= 1 /* INITIALIZED */)\n            return;\n        this._state = 1 /* INITIALIZED */;\n        /** @type {?} */\n        const elm = this.element;\n        this._styler.apply();\n        if (this._delay) {\n            this._styler.pause();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    play() {\n        this.init();\n        if (!this.hasStarted()) {\n            this._flushStartFns();\n            this._state = 2 /* STARTED */;\n            if (this._specialStyles) {\n                this._specialStyles.start();\n            }\n        }\n        this._styler.resume();\n    }\n    /**\n     * @return {?}\n     */\n    pause() {\n        this.init();\n        this._styler.pause();\n    }\n    /**\n     * @return {?}\n     */\n    restart() {\n        this.reset();\n        this.play();\n    }\n    /**\n     * @return {?}\n     */\n    reset() {\n        this._styler.destroy();\n        this._buildStyler();\n        this._styler.apply();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _buildStyler() {\n        this._styler = new ElementAnimationStyleHandler(this.element, this.animationName, this._duration, this._delay, this.easing, DEFAULT_FILL_MODE, (/**\n         * @return {?}\n         */\n        () => this.finish()));\n    }\n    /**\n     * \\@internal\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        /** @type {?} */\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        methods.length = 0;\n    }\n    /**\n     * @return {?}\n     */\n    beforeDestroy() {\n        this.init();\n        /** @type {?} */\n        const styles = {};\n        if (this.hasStarted()) {\n            /** @type {?} */\n            const finished = this._state >= 3 /* FINISHED */;\n            Object.keys(this._finalStyles).forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => {\n                if (prop != 'offset') {\n                    styles[prop] = finished ? this._finalStyles[prop] : computeStyle(this.element, prop);\n                }\n            }));\n        }\n        this.currentSnapshot = styles;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesPlayer.prototype._onDoneFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesPlayer.prototype._onStartFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesPlayer.prototype._onDestroyFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesPlayer.prototype._started;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesPlayer.prototype._styler;\n    /** @type {?} */\n    CssKeyframesPlayer.prototype.parentPlayer;\n    /** @type {?} */\n    CssKeyframesPlayer.prototype.totalTime;\n    /** @type {?} */\n    CssKeyframesPlayer.prototype.easing;\n    /** @type {?} */\n    CssKeyframesPlayer.prototype.currentSnapshot;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesPlayer.prototype._state;\n    /** @type {?} */\n    CssKeyframesPlayer.prototype.element;\n    /** @type {?} */\n    CssKeyframesPlayer.prototype.keyframes;\n    /** @type {?} */\n    CssKeyframesPlayer.prototype.animationName;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesPlayer.prototype._duration;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesPlayer.prototype._delay;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesPlayer.prototype._finalStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesPlayer.prototype._specialStyles;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DirectStylePlayer extends NoopAnimationPlayer {\n    /**\n     * @param {?} element\n     * @param {?} styles\n     */\n    constructor(element, styles) {\n        super();\n        this.element = element;\n        this._startingStyles = {};\n        this.__initialized = false;\n        this._styles = hypenatePropsObject(styles);\n    }\n    /**\n     * @return {?}\n     */\n    init() {\n        if (this.__initialized || !this._startingStyles)\n            return;\n        this.__initialized = true;\n        Object.keys(this._styles).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            (/** @type {?} */ (this._startingStyles))[prop] = this.element.style[prop];\n        }));\n        super.init();\n    }\n    /**\n     * @return {?}\n     */\n    play() {\n        if (!this._startingStyles)\n            return;\n        this.init();\n        Object.keys(this._styles)\n            .forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => this.element.style.setProperty(prop, this._styles[prop])));\n        super.play();\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (!this._startingStyles)\n            return;\n        Object.keys(this._startingStyles).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            /** @type {?} */\n            const value = (/** @type {?} */ (this._startingStyles))[prop];\n            if (value) {\n                this.element.style.setProperty(prop, value);\n            }\n            else {\n                this.element.style.removeProperty(prop);\n            }\n        }));\n        this._startingStyles = null;\n        super.destroy();\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DirectStylePlayer.prototype._startingStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    DirectStylePlayer.prototype.__initialized;\n    /**\n     * @type {?}\n     * @private\n     */\n    DirectStylePlayer.prototype._styles;\n    /** @type {?} */\n    DirectStylePlayer.prototype.element;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst KEYFRAMES_NAME_PREFIX = 'gen_css_kf_';\n/** @type {?} */\nconst TAB_SPACE = ' ';\nclass CssKeyframesDriver {\n    constructor() {\n        this._count = 0;\n        this._head = document.querySelector('head');\n        this._warningIssued = false;\n    }\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    validateStyleProperty(prop) { return validateStyleProperty(prop); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    /**\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    computeStyle(element, prop, defaultValue) {\n        return (/** @type {?} */ (((/** @type {?} */ (window.getComputedStyle(element))))[prop]));\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} keyframes\n     * @return {?}\n     */\n    buildKeyframeElement(element, name, keyframes) {\n        keyframes = keyframes.map((/**\n         * @param {?} kf\n         * @return {?}\n         */\n        kf => hypenatePropsObject(kf)));\n        /** @type {?} */\n        let keyframeStr = `@keyframes ${name} {\\n`;\n        /** @type {?} */\n        let tab = '';\n        keyframes.forEach((/**\n         * @param {?} kf\n         * @return {?}\n         */\n        kf => {\n            tab = TAB_SPACE;\n            /** @type {?} */\n            const offset = parseFloat(kf['offset']);\n            keyframeStr += `${tab}${offset * 100}% {\\n`;\n            tab += TAB_SPACE;\n            Object.keys(kf).forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => {\n                /** @type {?} */\n                const value = kf[prop];\n                switch (prop) {\n                    case 'offset':\n                        return;\n                    case 'easing':\n                        if (value) {\n                            keyframeStr += `${tab}animation-timing-function: ${value};\\n`;\n                        }\n                        return;\n                    default:\n                        keyframeStr += `${tab}${prop}: ${value};\\n`;\n                        return;\n                }\n            }));\n            keyframeStr += `${tab}}\\n`;\n        }));\n        keyframeStr += `}\\n`;\n        /** @type {?} */\n        const kfElm = document.createElement('style');\n        kfElm.innerHTML = keyframeStr;\n        return kfElm;\n    }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @param {?=} scrubberAccessRequested\n     * @return {?}\n     */\n    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {\n        if (scrubberAccessRequested) {\n            this._notifyFaultyScrubber();\n        }\n        /** @type {?} */\n        const previousCssKeyframePlayers = (/** @type {?} */ (previousPlayers.filter((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => player instanceof CssKeyframesPlayer))));\n        /** @type {?} */\n        const previousStyles = {};\n        if (allowPreviousPlayerStylesMerge(duration, delay)) {\n            previousCssKeyframePlayers.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => {\n                /** @type {?} */\n                let styles = player.currentSnapshot;\n                Object.keys(styles).forEach((/**\n                 * @param {?} prop\n                 * @return {?}\n                 */\n                prop => previousStyles[prop] = styles[prop]));\n            }));\n        }\n        keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);\n        /** @type {?} */\n        const finalStyles = flattenKeyframesIntoStyles(keyframes);\n        // if there is no animation then there is no point in applying\n        // styles and waiting for an event to get fired. This causes lag.\n        // It's better to just directly apply the styles to the element\n        // via the direct styling animation player.\n        if (duration == 0) {\n            return new DirectStylePlayer(element, finalStyles);\n        }\n        /** @type {?} */\n        const animationName = `${KEYFRAMES_NAME_PREFIX}${this._count++}`;\n        /** @type {?} */\n        const kfElm = this.buildKeyframeElement(element, animationName, keyframes);\n        (/** @type {?} */ (document.querySelector('head'))).appendChild(kfElm);\n        /** @type {?} */\n        const specialStyles = packageNonAnimatableStyles(element, keyframes);\n        /** @type {?} */\n        const player = new CssKeyframesPlayer(element, keyframes, animationName, duration, delay, easing, finalStyles, specialStyles);\n        player.onDestroy((/**\n         * @return {?}\n         */\n        () => removeElement(kfElm)));\n        return player;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _notifyFaultyScrubber() {\n        if (!this._warningIssued) {\n            console.warn('@angular/animations: please load the web-animations.js polyfill to allow programmatic access...\\n', '  visit http://bit.ly/IWukam to learn more about using the web-animation-js polyfill.');\n            this._warningIssued = true;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesDriver.prototype._count;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesDriver.prototype._head;\n    /**\n     * @type {?}\n     * @private\n     */\n    CssKeyframesDriver.prototype._warningIssued;\n}\n/**\n * @param {?} keyframes\n * @return {?}\n */\nfunction flattenKeyframesIntoStyles(keyframes) {\n    /** @type {?} */\n    let flatKeyframes = {};\n    if (keyframes) {\n        /** @type {?} */\n        const kfs = Array.isArray(keyframes) ? keyframes : [keyframes];\n        kfs.forEach((/**\n         * @param {?} kf\n         * @return {?}\n         */\n        kf => {\n            Object.keys(kf).forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => {\n                if (prop == 'offset' || prop == 'easing')\n                    return;\n                flatKeyframes[prop] = kf[prop];\n            }));\n        }));\n    }\n    return flatKeyframes;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction removeElement(node) {\n    node.parentNode.removeChild(node);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass WebAnimationsPlayer {\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} options\n     * @param {?=} _specialStyles\n     */\n    constructor(element, keyframes, options, _specialStyles) {\n        this.element = element;\n        this.keyframes = keyframes;\n        this.options = options;\n        this._specialStyles = _specialStyles;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._initialized = false;\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this.time = 0;\n        this.parentPlayer = null;\n        this.currentSnapshot = {};\n        this._duration = (/** @type {?} */ (options['duration']));\n        this._delay = (/** @type {?} */ (options['delay'])) || 0;\n        this.time = this._duration + this._delay;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            fn => fn()));\n            this._onDoneFns = [];\n        }\n    }\n    /**\n     * @return {?}\n     */\n    init() {\n        this._buildPlayer();\n        this._preparePlayerBeforeStart();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _buildPlayer() {\n        if (this._initialized)\n            return;\n        this._initialized = true;\n        /** @type {?} */\n        const keyframes = this.keyframes;\n        ((/** @type {?} */ (this))).domPlayer =\n            this._triggerWebAnimation(this.element, keyframes, this.options);\n        this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};\n        this.domPlayer.addEventListener('finish', (/**\n         * @return {?}\n         */\n        () => this._onFinish()));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _preparePlayerBeforeStart() {\n        // this is required so that the player doesn't start to animate right away\n        if (this._delay) {\n            this._resetDomPlayerState();\n        }\n        else {\n            this.domPlayer.pause();\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} options\n     * @return {?}\n     */\n    _triggerWebAnimation(element, keyframes, options) {\n        // jscompiler doesn't seem to know animate is a native property because it's not fully\n        // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]\n        return (/** @type {?} */ (element['animate'](keyframes, options)));\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._onStartFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._onDoneFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._onDestroyFns.push(fn); }\n    /**\n     * @return {?}\n     */\n    play() {\n        this._buildPlayer();\n        if (!this.hasStarted()) {\n            this._onStartFns.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            fn => fn()));\n            this._onStartFns = [];\n            this._started = true;\n            if (this._specialStyles) {\n                this._specialStyles.start();\n            }\n        }\n        this.domPlayer.play();\n    }\n    /**\n     * @return {?}\n     */\n    pause() {\n        this.init();\n        this.domPlayer.pause();\n    }\n    /**\n     * @return {?}\n     */\n    finish() {\n        this.init();\n        if (this._specialStyles) {\n            this._specialStyles.finish();\n        }\n        this._onFinish();\n        this.domPlayer.finish();\n    }\n    /**\n     * @return {?}\n     */\n    reset() {\n        this._resetDomPlayerState();\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetDomPlayerState() {\n        if (this.domPlayer) {\n            this.domPlayer.cancel();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    restart() {\n        this.reset();\n        this.play();\n    }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._started; }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._resetDomPlayerState();\n            this._onFinish();\n            if (this._specialStyles) {\n                this._specialStyles.destroy();\n            }\n            this._onDestroyFns.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            fn => fn()));\n            this._onDestroyFns = [];\n        }\n    }\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    setPosition(p) { this.domPlayer.currentTime = p * this.time; }\n    /**\n     * @return {?}\n     */\n    getPosition() { return this.domPlayer.currentTime / this.time; }\n    /**\n     * @return {?}\n     */\n    get totalTime() { return this._delay + this._duration; }\n    /**\n     * @return {?}\n     */\n    beforeDestroy() {\n        /** @type {?} */\n        const styles = {};\n        if (this.hasStarted()) {\n            Object.keys(this._finalKeyframe).forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => {\n                if (prop != 'offset') {\n                    styles[prop] =\n                        this._finished ? this._finalKeyframe[prop] : computeStyle(this.element, prop);\n                }\n            }));\n        }\n        this.currentSnapshot = styles;\n    }\n    /**\n     * \\@internal\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        /** @type {?} */\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        methods.length = 0;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._onDoneFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._onStartFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._onDestroyFns;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._duration;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._delay;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._initialized;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._finished;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._started;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._finalKeyframe;\n    /** @type {?} */\n    WebAnimationsPlayer.prototype.domPlayer;\n    /** @type {?} */\n    WebAnimationsPlayer.prototype.time;\n    /** @type {?} */\n    WebAnimationsPlayer.prototype.parentPlayer;\n    /** @type {?} */\n    WebAnimationsPlayer.prototype.currentSnapshot;\n    /** @type {?} */\n    WebAnimationsPlayer.prototype.element;\n    /** @type {?} */\n    WebAnimationsPlayer.prototype.keyframes;\n    /** @type {?} */\n    WebAnimationsPlayer.prototype.options;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsPlayer.prototype._specialStyles;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass WebAnimationsDriver {\n    constructor() {\n        this._isNativeImpl = /\\{\\s*\\[native\\s+code\\]\\s*\\}/.test(getElementAnimateFn().toString());\n        this._cssKeyframesDriver = new CssKeyframesDriver();\n    }\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    validateStyleProperty(prop) { return validateStyleProperty(prop); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    /**\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    computeStyle(element, prop, defaultValue) {\n        return (/** @type {?} */ (((/** @type {?} */ (window.getComputedStyle(element))))[prop]));\n    }\n    /**\n     * @param {?} supported\n     * @return {?}\n     */\n    overrideWebAnimationsSupport(supported) { this._isNativeImpl = supported; }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @param {?=} scrubberAccessRequested\n     * @return {?}\n     */\n    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {\n        /** @type {?} */\n        const useKeyframes = !scrubberAccessRequested && !this._isNativeImpl;\n        if (useKeyframes) {\n            return this._cssKeyframesDriver.animate(element, keyframes, duration, delay, easing, previousPlayers);\n        }\n        /** @type {?} */\n        const fill = delay == 0 ? 'both' : 'forwards';\n        /** @type {?} */\n        const playerOptions = { duration, delay, fill };\n        // we check for this to avoid having a null|undefined value be present\n        // for the easing (which results in an error for certain browsers #9752)\n        if (easing) {\n            playerOptions['easing'] = easing;\n        }\n        /** @type {?} */\n        const previousStyles = {};\n        /** @type {?} */\n        const previousWebAnimationPlayers = (/** @type {?} */ (previousPlayers.filter((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => player instanceof WebAnimationsPlayer))));\n        if (allowPreviousPlayerStylesMerge(duration, delay)) {\n            previousWebAnimationPlayers.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => {\n                /** @type {?} */\n                let styles = player.currentSnapshot;\n                Object.keys(styles).forEach((/**\n                 * @param {?} prop\n                 * @return {?}\n                 */\n                prop => previousStyles[prop] = styles[prop]));\n            }));\n        }\n        keyframes = keyframes.map((/**\n         * @param {?} styles\n         * @return {?}\n         */\n        styles => copyStyles(styles, false)));\n        keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);\n        /** @type {?} */\n        const specialStyles = packageNonAnimatableStyles(element, keyframes);\n        return new WebAnimationsPlayer(element, keyframes, playerOptions, specialStyles);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsDriver.prototype._isNativeImpl;\n    /**\n     * @type {?}\n     * @private\n     */\n    WebAnimationsDriver.prototype._cssKeyframesDriver;\n}\n/**\n * @return {?}\n */\nfunction supportsWebAnimations() {\n    return typeof getElementAnimateFn() === 'function';\n}\n/**\n * @return {?}\n */\nfunction getElementAnimateFn() {\n    return (isBrowser() && ((/** @type {?} */ (Element))).prototype['animate']) || {};\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SpecialCasedStyles as Éµangular_packages_animations_browser_browser_a, AnimationDriver, AnimationDriver as ÉµAnimationDriver, Animation as ÉµAnimation, AnimationStyleNormalizer as ÉµAnimationStyleNormalizer, NoopAnimationStyleNormalizer as ÉµNoopAnimationStyleNormalizer, WebAnimationsStyleNormalizer as ÉµWebAnimationsStyleNormalizer, NoopAnimationDriver as ÉµNoopAnimationDriver, AnimationEngine as ÉµAnimationEngine, CssKeyframesDriver as ÉµCssKeyframesDriver, CssKeyframesPlayer as ÉµCssKeyframesPlayer, containsElement as ÉµcontainsElement, invokeQuery as ÉµinvokeQuery, matchesElement as ÉµmatchesElement, validateStyleProperty as ÉµvalidateStyleProperty, WebAnimationsDriver as ÉµWebAnimationsDriver, supportsWebAnimations as ÉµsupportsWebAnimations, WebAnimationsPlayer as ÉµWebAnimationsPlayer, allowPreviousPlayerStylesMerge as ÉµallowPreviousPlayerStylesMerge };\n//# sourceMappingURL=browser.js.map\n","import { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport const empty = {\n    closed: true,\n    next(value) { },\n    error(err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete() { }\n};\n//# sourceMappingURL=Observer.js.map","import { Subject } from './Subject';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nexport class BehaviorSubject extends Subject {\n    constructor(_value) {\n        super();\n        this._value = _value;\n    }\n    get value() {\n        return this.getValue();\n    }\n    _subscribe(subscriber) {\n        const subscription = super._subscribe(subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    }\n    getValue() {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    }\n    next(value) {\n        super.next(this._value = value);\n    }\n}\n//# sourceMappingURL=BehaviorSubject.js.map","import { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nconst NONE = {};\nexport function combineLatest(...observables) {\n    let resultSelector = null;\n    let scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        resultSelector = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nexport class CombineLatestOperator {\n    constructor(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n    }\n}\nexport class CombineLatestSubscriber extends OuterSubscriber {\n    constructor(destination, resultSelector) {\n        super(destination);\n        this.resultSelector = resultSelector;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    _next(observable) {\n        this.values.push(NONE);\n        this.observables.push(observable);\n    }\n    _complete() {\n        const observables = this.observables;\n        const len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (let i = 0; i < len; i++) {\n                const observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    }\n    notifyComplete(unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        const values = this.values;\n        const oldVal = values[outerIndex];\n        const toRespond = !this.toRespond\n            ? 0\n            : oldVal === NONE ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.resultSelector) {\n                this._tryResultSelector(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    }\n    _tryResultSelector(values) {\n        let result;\n        try {\n            result = this.resultSelector.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=combineLatest.js.map","import { Observable } from '../Observable';\nimport { from } from './from';\nimport { empty } from './empty';\nexport function defer(observableFactory) {\n    return new Observable(subscriber => {\n        let input;\n        try {\n            input = observableFactory();\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        const source = input ? from(input) : empty();\n        return source.subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=defer.js.map","import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nclass TakeLastOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    }\n}\nclass TakeLastSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    _next(value) {\n        const ring = this.ring;\n        const total = this.total;\n        const count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            const index = count % total;\n            ring[index] = value;\n        }\n    }\n    _complete() {\n        const destination = this.destination;\n        let count = this.count;\n        if (count > 0) {\n            const total = this.count >= this.total ? this.total : this.count;\n            const ring = this.ring;\n            for (let i = 0; i < total; i++) {\n                const idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    }\n}\n//# sourceMappingURL=takeLast.js.map","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { takeLast } from './takeLast';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { identity } from '../util/identity';\nexport function last(predicate, defaultValue) {\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n//# sourceMappingURL=last.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        const operator = new CatchOperator(selector);\n        const caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nclass CatchOperator {\n    constructor(selector) {\n        this.selector = selector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    }\n}\nclass CatchSubscriber extends OuterSubscriber {\n    constructor(destination, selector, caught) {\n        super(destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let result;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                super.error(err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n            this.add(innerSubscriber);\n            subscribeToResult(this, result, undefined, undefined, innerSubscriber);\n        }\n    }\n}\n//# sourceMappingURL=catchError.js.map","import { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n    return (source) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\nclass EveryOperator {\n    constructor(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    call(observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    }\n}\nclass EverySubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    notifyComplete(everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    }\n    _next(value) {\n        let result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    }\n    _complete() {\n        this.notifyComplete(true);\n    }\n}\n//# sourceMappingURL=every.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(switchMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n    }\n    return (source) => source.lift(new SwitchMapOperator(project));\n}\nclass SwitchMapOperator {\n    constructor(project) {\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    }\n}\nclass SwitchMapSubscriber extends OuterSubscriber {\n    constructor(destination, project) {\n        super(destination);\n        this.project = project;\n        this.index = 0;\n    }\n    _next(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    }\n    _innerSub(result, value, index) {\n        const innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        this.innerSubscription = subscribeToResult(this, result, value, index, innerSubscriber);\n    }\n    _complete() {\n        const { innerSubscription } = this;\n        if (!innerSubscription || innerSubscription.closed) {\n            super._complete();\n        }\n        this.unsubscribe();\n    }\n    _unsubscribe() {\n        this.innerSubscription = null;\n    }\n    notifyComplete(innerSub) {\n        const destination = this.destination;\n        destination.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            super._complete();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n}\n//# sourceMappingURL=switchMap.js.map","import { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n    let hasSeed = false;\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nclass ScanOperator {\n    constructor(accumulator, seed, hasSeed = false) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    }\n}\nclass ScanSubscriber extends Subscriber {\n    constructor(destination, accumulator, _seed, hasSeed) {\n        super(destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(value) {\n        this.hasSeed = true;\n        this._seed = value;\n    }\n    _next(value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    }\n    _tryNext(value) {\n        const index = this.index++;\n        let result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=scan.js.map","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nexport function finalize(callback) {\n    return (source) => source.lift(new FinallyOperator(callback));\n}\nclass FinallyOperator {\n    constructor(callback) {\n        this.callback = callback;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    }\n}\nclass FinallySubscriber extends Subscriber {\n    constructor(destination, callback) {\n        super(destination);\n        this.add(new Subscription(callback));\n    }\n}\n//# sourceMappingURL=finalize.js.map","/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { LocationStrategy, Location, PlatformLocation, APP_BASE_HREF, ViewportScroller, HashLocationStrategy, PathLocationStrategy, LOCATION_INITIALIZED } from '@angular/common';\nimport { Component, ÉµisObservable, ÉµisPromise, NgModuleRef, InjectionToken, NgModuleFactory, ÉµConsole, NgZone, isDevMode, Directive, Attribute, Renderer2, ElementRef, Input, HostListener, HostBinding, Optional, ContentChildren, EventEmitter, ViewContainerRef, ComponentFactoryResolver, ChangeDetectorRef, Output, Injectable, NgModuleFactoryLoader, Compiler, Injector, ApplicationRef, SystemJsNgModuleLoader, NgProbeToken, ANALYZE_FOR_ENTRY_COMPONENTS, SkipSelf, Inject, APP_INITIALIZER, APP_BOOTSTRAP_LISTENER, NgModule, Version } from '@angular/core';\nimport { of, from, BehaviorSubject, Observable, EmptyError, combineLatest, defer, Subject, EMPTY } from 'rxjs';\nimport { map, concatAll, last as last$1, catchError, first, mergeMap, every, switchMap, take, startWith, scan, filter, concatMap, reduce, tap, finalize, mergeAll } from 'rxjs/operators';\nimport { ÉµgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * \\@usageNotes\n *\n * ```ts\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.pipe(\n *       filter(e => e instanceof RouterEvent)\n *     ).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * @see `Event`\n * \\@publicApi\n */\nclass RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     */\n    constructor(id, url) {\n        this.id = id;\n        this.url = url;\n    }\n}\nif (false) {\n    /**\n     * A unique ID that the router assigns to every router navigation.\n     * @type {?}\n     */\n    RouterEvent.prototype.id;\n    /**\n     * The URL that is the destination for this navigation.\n     * @type {?}\n     */\n    RouterEvent.prototype.url;\n}\n/**\n * An event triggered when a navigation starts.\n *\n * \\@publicApi\n */\nclass NavigationStart extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?=} navigationTrigger\n     * @param {?=} restoredState\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    navigationTrigger = 'imperative', \n    /** @docsNotRequired */\n    restoredState = null) {\n        super(id, url);\n        this.navigationTrigger = navigationTrigger;\n        this.restoredState = restoredState;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\n}\nif (false) {\n    /**\n     * Identifies the call or event that triggered the navigation.\n     * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.\n     *\n     * @type {?}\n     */\n    NavigationStart.prototype.navigationTrigger;\n    /**\n     * The navigation state that was previously supplied to the `pushState` call,\n     * when the navigation is triggered by a `popstate` event. Otherwise null.\n     *\n     * The state object is defined by `NavigationExtras`, and contains any\n     * developer-defined state value, as well as a unique ID that\n     * the router assigns to every router transition/navigation.\n     *\n     * From the perspective of the router, the router never \"goes back\".\n     * When the user clicks on the back button in the browser,\n     * a new navigation ID is created.\n     *\n     * Use the ID in this previous-state object to differentiate between a newly created\n     * state and one returned to by a `popstate` event, so that you can restore some\n     * remembered state, such as scroll position.\n     *\n     * @type {?}\n     */\n    NavigationStart.prototype.restoredState;\n}\n/**\n * An event triggered when a navigation ends successfully.\n *\n * \\@publicApi\n */\nclass NavigationEnd extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() {\n        return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    NavigationEnd.prototype.urlAfterRedirects;\n}\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n *\n * This can happen when a [route guard](guide/router#milestone-5-route-guards)\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * \\@publicApi\n */\nclass NavigationCancel extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} reason\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, reason) {\n        super(id, url);\n        this.reason = reason;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    NavigationCancel.prototype.reason;\n}\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * \\@publicApi\n */\nclass NavigationError extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} error\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, error) {\n        super(id, url);\n        this.error = error;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() {\n        return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    NavigationError.prototype.error;\n}\n/**\n * An event triggered when routes are recognized.\n *\n * \\@publicApi\n */\nclass RoutesRecognized extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() {\n        return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RoutesRecognized.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RoutesRecognized.prototype.state;\n}\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * \\@publicApi\n */\nclass GuardsCheckStart extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckStart.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckStart.prototype.state;\n}\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * \\@publicApi\n */\nclass GuardsCheckEnd extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     * @param {?} shouldActivate\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects, state, shouldActivate) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n        this.shouldActivate = shouldActivate;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckEnd.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckEnd.prototype.state;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckEnd.prototype.shouldActivate;\n}\n/**\n * An event triggered at the the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * \\@publicApi\n */\nclass ResolveStart extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveStart.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveStart.prototype.state;\n}\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see `ResolveStart`.\n *\n * \\@publicApi\n */\nclass ResolveEnd extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveEnd.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveEnd.prototype.state;\n}\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * \\@publicApi\n */\nclass RouteConfigLoadStart {\n    /**\n     * @param {?} route\n     */\n    constructor(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `RouteConfigLoadStart(path: ${this.route.path})`; }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouteConfigLoadStart.prototype.route;\n}\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * \\@publicApi\n */\nclass RouteConfigLoadEnd {\n    /**\n     * @param {?} route\n     */\n    constructor(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `RouteConfigLoadEnd(path: ${this.route.path})`; }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouteConfigLoadEnd.prototype.route;\n}\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see `ChildActivationEnd`\n * @see `ResolveStart`\n *\n * \\@publicApi\n */\nclass ChildActivationStart {\n    /**\n     * @param {?} snapshot\n     */\n    constructor(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ChildActivationStart(path: '${path}')`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ChildActivationStart.prototype.snapshot;\n}\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see `ChildActivationStart`\n * @see `ResolveStart` *\n * \\@publicApi\n */\nclass ChildActivationEnd {\n    /**\n     * @param {?} snapshot\n     */\n    constructor(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ChildActivationEnd(path: '${path}')`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ChildActivationEnd.prototype.snapshot;\n}\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see ActivationEnd`\n * @see `ResolveStart`\n *\n * \\@publicApi\n */\nclass ActivationStart {\n    /**\n     * @param {?} snapshot\n     */\n    constructor(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ActivationStart(path: '${path}')`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ActivationStart.prototype.snapshot;\n}\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see `ActivationStart`\n * @see `ResolveStart`\n *\n * \\@publicApi\n */\nclass ActivationEnd {\n    /**\n     * @param {?} snapshot\n     */\n    constructor(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ActivationEnd(path: '${path}')`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ActivationEnd.prototype.snapshot;\n}\n/**\n * An event triggered by scrolling.\n *\n * \\@publicApi\n */\nclass Scroll {\n    /**\n     * @param {?} routerEvent\n     * @param {?} position\n     * @param {?} anchor\n     */\n    constructor(routerEvent, position, anchor) {\n        this.routerEvent = routerEvent;\n        this.position = position;\n        this.anchor = anchor;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n        return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n    }\n}\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    Scroll.prototype.routerEvent;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    Scroll.prototype.position;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    Scroll.prototype.anchor;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\nclass ÉµEmptyOutletComponent {\n}\nÉµEmptyOutletComponent.decorators = [\n    { type: Component, args: [{ template: `<router-outlet></router-outlet>` }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The primary routing outlet.\n *\n * \\@publicApi\n * @type {?}\n */\nconst PRIMARY_OUTLET = 'primary';\n/**\n * A map that provides access to the required and optional parameters\n * specific to a route.\n * The map supports retrieving a single value with `get()`\n * or multiple values with `getAll()`.\n *\n * @see [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n *\n * \\@publicApi\n * @record\n */\nfunction ParamMap() { }\nif (false) {\n    /**\n     * Names of the parameters in the map.\n     * @type {?}\n     */\n    ParamMap.prototype.keys;\n    /**\n     * Reports whether the map contains a given parameter.\n     * @param {?} name The parameter name.\n     * @return {?} True if the map contains the given parameter, false otherwise.\n     */\n    ParamMap.prototype.has = function (name) { };\n    /**\n     * Retrieves a single value for a parameter.\n     * @param {?} name The parameter name.\n     * @return {?} The parameter's single value,\n     * or the first value if the parameter has multiple values,\n     * or `null` when there is no such parameter.\n     */\n    ParamMap.prototype.get = function (name) { };\n    /**\n     * Retrieves multiple values for a parameter.\n     * @param {?} name The parameter name.\n     * @return {?} An array containing one or more values,\n     * or an empty array if there is no such parameter.\n     *\n     */\n    ParamMap.prototype.getAll = function (name) { };\n}\nclass ParamsAsMap {\n    /**\n     * @param {?} params\n     */\n    constructor(params) { this.params = params || {}; }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    has(name) { return this.params.hasOwnProperty(name); }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    get(name) {\n        if (this.has(name)) {\n            /** @type {?} */\n            const v = this.params[name];\n            return Array.isArray(v) ? v[0] : v;\n        }\n        return null;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getAll(name) {\n        if (this.has(name)) {\n            /** @type {?} */\n            const v = this.params[name];\n            return Array.isArray(v) ? v : [v];\n        }\n        return [];\n    }\n    /**\n     * @return {?}\n     */\n    get keys() { return Object.keys(this.params); }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ParamsAsMap.prototype.params;\n}\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * \\@publicApi\n * @param {?} params The instance to convert.\n * @return {?} The new map instance.\n *\n */\nfunction convertToParamMap(params) {\n    return new ParamsAsMap(params);\n}\n/** @type {?} */\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n/**\n * @param {?} message\n * @return {?}\n */\nfunction navigationCancelingError(message) {\n    /** @type {?} */\n    const error = Error('NavigationCancelingError: ' + message);\n    ((/** @type {?} */ (error)))[NAVIGATION_CANCELING_ERROR] = true;\n    return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction isNavigationCancelingError(error) {\n    return error && ((/** @type {?} */ (error)))[NAVIGATION_CANCELING_ERROR];\n}\n// Matches the route configuration (`route`) against the actual URL (`segments`).\n/**\n * @param {?} segments\n * @param {?} segmentGroup\n * @param {?} route\n * @return {?}\n */\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\n    /** @type {?} */\n    const parts = (/** @type {?} */ (route.path)).split('/');\n    if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n    }\n    if (route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n    }\n    /** @type {?} */\n    const posParams = {};\n    // Check each config part against the actual URL\n    for (let index = 0; index < parts.length; index++) {\n        /** @type {?} */\n        const part = parts[index];\n        /** @type {?} */\n        const segment = segments[index];\n        /** @type {?} */\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n            posParams[part.substring(1)] = segment;\n        }\n        else if (part !== segment.path) {\n            // The actual URL part does not match the config, no match\n            return null;\n        }\n    }\n    return { consumed: segments.slice(0, parts.length), posParams };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A configuration object that defines a single route.\n * A set of routes are collected in a `Routes` array to define a `Router` configuration.\n * The router attempts to match segments of a given URL against each route,\n * using the configuration options defined in this object.\n *\n * Supports static, parameterized, redirect, and wildcard routes, as well as\n * custom route data and resolve methods.\n *\n * For detailed usage information, see the [Routing Guide](guide/router).\n *\n * \\@usageNotes\n *\n * ### Simple Configuration\n *\n * The following route specifies that when navigating to, for example,\n * `/team/11/user/bob`, the router creates the 'Team' component\n * with the 'User' child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * ### Multiple Outlets\n *\n * The following route creates sibling components with multiple outlets.\n * When navigating to `/team/11(aux:chat/jim)`, the router creates the 'Team' component next to\n * the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * ### Wild Cards\n *\n * The following route uses wild-card notation to specify a component\n * that is always instantiated regardless of where you navigate to.\n *\n * ```\n * [{\n *   path: '**',\n *   component: WildcardComponent\n * }]\n * ```\n *\n * ### Redirects\n *\n * The following route uses the `redirectTo` property to ignore a segment of\n * a given URL when looking for a child path.\n *\n * When navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n * '/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\n * the Team component with the User child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * The redirect path can be relative, as shown in this example, or absolute.\n * If we change the `redirectTo` value in the example to the absolute URL segment '/user/:name',\n * the result URL is also absolute, '/user/jim'.\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any URL segments.\n *\n * In the following configuration, when navigating to\n * `/team/11`, the router instantiates the 'AllUsers' component.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * Empty-path routes can have children. In the following example, when navigating\n * to `/team/11/user/jim`, the router instantiates the wrapper component with\n * the user component in it.\n *\n * Note that an empty path route inherits its parent's parameters and data.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * ### Matching Strategy\n *\n * The default path-match strategy is 'prefix', which means that the router\n * checks URL elements from the left to see if the URL matches a specified path.\n * For example, '/team/11/user' matches 'team/:id'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * You can specify the path-match strategy 'full' to make sure that the path\n * covers the whole unconsumed URL. It is important to do this when redirecting\n * empty-path routes. Otherwise, because an empty path is a prefix of any URL,\n * the router would apply the redirect even when navigating to the redirect destination,\n * creating an endless loop.\n *\n * In the following example, supplying the 'full' `pathMatch` strategy ensures\n * that the router applies the redirect if and only if navigating to '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * You can share parameters between sibling components.\n * For example, suppose that two sibling components should go next to each other,\n * and both of them require an ID parameter. You can accomplish this using a route\n * that does not specify a component at the top level.\n *\n * In the following example, 'MainChild' and 'AuxChild' are siblings.\n * When navigating to 'parent/10/(a//aux:b)', the route instantiates\n * the main child and aux child components next to each other.\n * For this to work, the application component must have the primary and aux outlets defined.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * The router merges the parameters, data, and resolve of the componentless\n * parent into the parameters, data, and resolve of the children.\n *\n * This is especially useful when child components are defined\n * with an empty path string, as in the following example.\n * With this configuration, navigating to '/parent/10' creates\n * the main child and aux components.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up application load time by splitting the application\n * into multiple bundles and loading them on demand.\n * To use lazy loading, provide the `loadChildren` property  instead of the `children` property.\n *\n * Given the following example route, the router will lazy load\n * the associated module on demand using the browser native import system.\n *\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n * }];\n * ```\n *\n * \\@publicApi\n * @record\n */\nfunction Route() { }\nif (false) {\n    /**\n     * The path to match against. Cannot be used together with a custom `matcher` function.\n     * A URL string that uses router matching notation.\n     * Can be a wild card (`**`) that matches any URL (see Usage Notes below).\n     * Default is \"/\" (the root path).\n     *\n     * @type {?|undefined}\n     */\n    Route.prototype.path;\n    /**\n     * The path-matching strategy, one of 'prefix' or 'full'.\n     * Default is 'prefix'.\n     *\n     * By default, the router checks URL elements from the left to see if the URL\n     * matches a given  path, and stops when there is a match. For example,\n     * '/team/11/user' matches 'team/:id'.\n     *\n     * The path-match strategy 'full' matches against the entire URL.\n     * It is important to do this when redirecting empty-path routes.\n     * Otherwise, because an empty path is a prefix of any URL,\n     * the router would apply the redirect even when navigating\n     * to the redirect destination, creating an endless loop.\n     *\n     * @type {?|undefined}\n     */\n    Route.prototype.pathMatch;\n    /**\n     * A custom URL-matching function. Cannot be used together with `path`.\n     * @type {?|undefined}\n     */\n    Route.prototype.matcher;\n    /**\n     * The component to instantiate when the path matches.\n     * Can be empty if child routes specify components.\n     * @type {?|undefined}\n     */\n    Route.prototype.component;\n    /**\n     * A URL to which to redirect when a the path matches.\n     * Absolute if the URL begins with a slash (/), otherwise relative to the path URL.\n     * When not present, router does not redirect.\n     * @type {?|undefined}\n     */\n    Route.prototype.redirectTo;\n    /**\n     * Name of a `RouterOutlet` object where the component can be placed\n     * when the path matches.\n     * @type {?|undefined}\n     */\n    Route.prototype.outlet;\n    /**\n     * An array of dependency-injection tokens used to look up `CanActivate()`\n     * handlers, in order to determine if the current user is allowed to\n     * activate the component. By default, any user can activate.\n     * @type {?|undefined}\n     */\n    Route.prototype.canActivate;\n    /**\n     * An array of DI tokens used to look up `CanActivateChild()` handlers,\n     * in order to determine if the current user is allowed to activate\n     * a child of the component. By default, any user can activate a child.\n     * @type {?|undefined}\n     */\n    Route.prototype.canActivateChild;\n    /**\n     * An array of DI tokens used to look up `CanDeactivate()`\n     * handlers, in order to determine if the current user is allowed to\n     * deactivate the component. By default, any user can deactivate.\n     *\n     * @type {?|undefined}\n     */\n    Route.prototype.canDeactivate;\n    /**\n     * An array of DI tokens used to look up `CanLoad()`\n     * handlers, in order to determine if the current user is allowed to\n     * load the component. By default, any user can load.\n     * @type {?|undefined}\n     */\n    Route.prototype.canLoad;\n    /**\n     * Additional developer-defined data provided to the component via\n     * `ActivatedRoute`. By default, no additional data is passed.\n     * @type {?|undefined}\n     */\n    Route.prototype.data;\n    /**\n     * A map of DI tokens used to look up data resolvers. See `Resolve`.\n     * @type {?|undefined}\n     */\n    Route.prototype.resolve;\n    /**\n     * An array of child `Route` objects that specifies a nested route\n     * configuration.\n     * @type {?|undefined}\n     */\n    Route.prototype.children;\n    /**\n     * A `LoadChildren` object specifying lazy-loaded child routes.\n     * @type {?|undefined}\n     */\n    Route.prototype.loadChildren;\n    /**\n     * Defines when guards and resolvers will be run. One of\n     * - `paramsOrQueryParamsChange` : Run when query parameters change.\n     * - `always` : Run on every execution.\n     * By default, guards and resolvers run only when the matrix\n     * parameters of the route change.\n     * @type {?|undefined}\n     */\n    Route.prototype.runGuardsAndResolvers;\n    /**\n     * Filled for routes with `loadChildren` once the module has been loaded\n     * \\@internal\n     * @type {?|undefined}\n     */\n    Route.prototype._loadedConfig;\n}\nclass LoadedRouterConfig {\n    /**\n     * @param {?} routes\n     * @param {?} module\n     */\n    constructor(routes, module) {\n        this.routes = routes;\n        this.module = module;\n    }\n}\nif (false) {\n    /** @type {?} */\n    LoadedRouterConfig.prototype.routes;\n    /** @type {?} */\n    LoadedRouterConfig.prototype.module;\n}\n/**\n * @param {?} config\n * @param {?=} parentPath\n * @return {?}\n */\nfunction validateConfig(config, parentPath = '') {\n    // forEach doesn't iterate undefined values\n    for (let i = 0; i < config.length; i++) {\n        /** @type {?} */\n        const route = config[i];\n        /** @type {?} */\n        const fullPath = getFullPath(parentPath, route);\n        validateNode(route, fullPath);\n    }\n}\n/**\n * @param {?} route\n * @param {?} fullPath\n * @return {?}\n */\nfunction validateNode(route, fullPath) {\n    if (!route) {\n        throw new Error(`\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n    }\n    if (Array.isArray(route)) {\n        throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\n    }\n    if (!route.component && !route.children && !route.loadChildren &&\n        (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n        throw new Error(`Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n    }\n    if (route.redirectTo && route.children) {\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n    }\n    if (route.redirectTo && route.loadChildren) {\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n    }\n    if (route.children && route.loadChildren) {\n        throw new Error(`Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n    }\n    if (route.redirectTo && route.component) {\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);\n    }\n    if (route.path && route.matcher) {\n        throw new Error(`Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n        throw new Error(`Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n        throw new Error(`Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n        throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n        /** @type {?} */\n        const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n        throw new Error(`Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n    }\n    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n        throw new Error(`Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\n    }\n    if (route.children) {\n        validateConfig(route.children, fullPath);\n    }\n}\n/**\n * @param {?} parentPath\n * @param {?} currentRoute\n * @return {?}\n */\nfunction getFullPath(parentPath, currentRoute) {\n    if (!currentRoute) {\n        return parentPath;\n    }\n    if (!parentPath && !currentRoute.path) {\n        return '';\n    }\n    else if (parentPath && !currentRoute.path) {\n        return `${parentPath}/`;\n    }\n    else if (!parentPath && currentRoute.path) {\n        return currentRoute.path;\n    }\n    else {\n        return `${parentPath}/${currentRoute.path}`;\n    }\n}\n/**\n * Makes a copy of the config and adds any default required properties.\n * @param {?} r\n * @return {?}\n */\nfunction standardizeConfig(r) {\n    /** @type {?} */\n    const children = r.children && r.children.map(standardizeConfig);\n    /** @type {?} */\n    const c = children ? Object.assign({}, r, { children }) : Object.assign({}, r);\n    if (!c.component && (children || c.loadChildren) && (c.outlet && c.outlet !== PRIMARY_OUTLET)) {\n        c.component = ÉµEmptyOutletComponent;\n    }\n    return c;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction shallowEqualArrays(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; ++i) {\n        if (!shallowEqual(a[i], b[i]))\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction shallowEqual(a, b) {\n    // Casting Object.keys return values to include `undefined` as there are some cases\n    // in IE 11 where this can happen. Cannot provide a test because the behavior only\n    // exists in certain circumstances in IE 11, therefore doing this cast ensures the\n    // logic is correct for when this edge case is hit.\n    /** @type {?} */\n    const k1 = (/** @type {?} */ (Object.keys(a)));\n    /** @type {?} */\n    const k2 = (/** @type {?} */ (Object.keys(b)));\n    if (!k1 || !k2 || k1.length != k2.length) {\n        return false;\n    }\n    /** @type {?} */\n    let key;\n    for (let i = 0; i < k1.length; i++) {\n        key = k1[i];\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Flattens single-level nested arrays.\n * @template T\n * @param {?} arr\n * @return {?}\n */\nfunction flatten(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\n/**\n * Return the last element of an array.\n * @template T\n * @param {?} a\n * @return {?}\n */\nfunction last(a) {\n    return a.length > 0 ? a[a.length - 1] : null;\n}\n/**\n * Verifys all booleans in an array are `true`.\n * @param {?} bools\n * @return {?}\n */\nfunction and(bools) {\n    return !bools.some((/**\n     * @param {?} v\n     * @return {?}\n     */\n    v => !v));\n}\n/**\n * @template K, V\n * @param {?} map\n * @param {?} callback\n * @return {?}\n */\nfunction forEach(map, callback) {\n    for (const prop in map) {\n        if (map.hasOwnProperty(prop)) {\n            callback(map[prop], prop);\n        }\n    }\n}\n/**\n * @template A, B\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nfunction waitForMap(obj, fn) {\n    if (Object.keys(obj).length === 0) {\n        return of({});\n    }\n    /** @type {?} */\n    const waitHead = [];\n    /** @type {?} */\n    const waitTail = [];\n    /** @type {?} */\n    const res = {};\n    forEach(obj, (/**\n     * @param {?} a\n     * @param {?} k\n     * @return {?}\n     */\n    (a, k) => {\n        /** @type {?} */\n        const mapped = fn(k, a).pipe(map((/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => res[k] = r)));\n        if (k === PRIMARY_OUTLET) {\n            waitHead.push(mapped);\n        }\n        else {\n            waitTail.push(mapped);\n        }\n    }));\n    // Closure compiler has problem with using spread operator here. So we use \"Array.concat\".\n    // Note that we also need to cast the new promise because TypeScript cannot infer the type\n    // when calling the \"of\" function through \"Function.apply\"\n    return ((/** @type {?} */ (of.apply(null, waitHead.concat(waitTail)))))\n        .pipe(concatAll(), last$1(), map((/**\n     * @return {?}\n     */\n    () => res)));\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction wrapIntoObservable(value) {\n    if (ÉµisObservable(value)) {\n        return value;\n    }\n    if (ÉµisPromise(value)) {\n        // Use `Promise.resolve()` to wrap promise-like instances.\n        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n        // change detection.\n        return from(Promise.resolve(value));\n    }\n    return of(value);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction createEmptyUrlTree() {\n    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\nfunction containsTree(container, containee, exact) {\n    if (exact) {\n        return equalQueryParams(container.queryParams, containee.queryParams) &&\n            equalSegmentGroups(container.root, containee.root);\n    }\n    return containsQueryParams(container.queryParams, containee.queryParams) &&\n        containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalSegmentGroups(container, containee) {\n    if (!equalPath(container.segments, containee.segments))\n        return false;\n    if (container.numberOfChildren !== containee.numberOfChildren)\n        return false;\n    for (const c in containee.children) {\n        if (!container.children[c])\n            return false;\n        if (!equalSegmentGroups(container.children[c], containee.children[c]))\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => containee[key] === container[key]));\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsSegmentGroup(container, containee) {\n    return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\nfunction containsSegmentGroupHelper(container, containee, containeePaths) {\n    if (container.segments.length > containeePaths.length) {\n        /** @type {?} */\n        const current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths))\n            return false;\n        if (containee.hasChildren())\n            return false;\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths))\n            return false;\n        for (const c in containee.children) {\n            if (!container.children[c])\n                return false;\n            if (!containsSegmentGroup(container.children[c], containee.children[c]))\n                return false;\n        }\n        return true;\n    }\n    else {\n        /** @type {?} */\n        const current = containeePaths.slice(0, container.segments.length);\n        /** @type {?} */\n        const next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current))\n            return false;\n        if (!container.children[PRIMARY_OUTLET])\n            return false;\n        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n    }\n}\n/**\n * \\@description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass UrlTree {\n    /**\n     * \\@internal\n     * @param {?} root\n     * @param {?} queryParams\n     * @param {?} fragment\n     */\n    constructor(root, queryParams, fragment) {\n        this.root = root;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n    }\n    /**\n     * @return {?}\n     */\n    get queryParamMap() {\n        if (!this._queryParamMap) {\n            this._queryParamMap = convertToParamMap(this.queryParams);\n        }\n        return this._queryParamMap;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() { return DEFAULT_SERIALIZER.serialize(this); }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlTree.prototype._queryParamMap;\n    /**\n     * The root segment group of the URL tree\n     * @type {?}\n     */\n    UrlTree.prototype.root;\n    /**\n     * The query params of the URL\n     * @type {?}\n     */\n    UrlTree.prototype.queryParams;\n    /**\n     * The fragment of the URL\n     * @type {?}\n     */\n    UrlTree.prototype.fragment;\n}\n/**\n * \\@description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * \\@publicApi\n */\nclass UrlSegmentGroup {\n    /**\n     * @param {?} segments\n     * @param {?} children\n     */\n    constructor(segments, children) {\n        this.segments = segments;\n        this.children = children;\n        /**\n         * The parent node in the url tree\n         */\n        this.parent = null;\n        forEach(children, (/**\n         * @template THIS\n         * @this {THIS}\n         * @param {?} v\n         * @param {?} k\n         * @return {THIS}\n         */\n        (v, k) => v.parent = this));\n    }\n    /**\n     * Whether the segment has child segments\n     * @return {?}\n     */\n    hasChildren() { return this.numberOfChildren > 0; }\n    /**\n     * Number of child segments\n     * @return {?}\n     */\n    get numberOfChildren() { return Object.keys(this.children).length; }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() { return serializePaths(this); }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype._sourceSegment;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype._segmentIndexShift;\n    /**\n     * The parent node in the url tree\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype.parent;\n    /**\n     * The URL segments of this group. See `UrlSegment` for more information\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype.segments;\n    /**\n     * The list of children of this group\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype.children;\n}\n/**\n * \\@description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * \\@usageNotes\n * Â ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass UrlSegment {\n    /**\n     * @param {?} path\n     * @param {?} parameters\n     */\n    constructor(path, parameters) {\n        this.path = path;\n        this.parameters = parameters;\n    }\n    /**\n     * @return {?}\n     */\n    get parameterMap() {\n        if (!this._parameterMap) {\n            this._parameterMap = convertToParamMap(this.parameters);\n        }\n        return this._parameterMap;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() { return serializePath(this); }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlSegment.prototype._parameterMap;\n    /**\n     * The path part of a URL segment\n     * @type {?}\n     */\n    UrlSegment.prototype.path;\n    /**\n     * The matrix parameters associated with a segment\n     * @type {?}\n     */\n    UrlSegment.prototype.parameters;\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nfunction equalSegments(as, bs) {\n    return equalPath(as, bs) && as.every((/**\n     * @param {?} a\n     * @param {?} i\n     * @return {?}\n     */\n    (a, i) => shallowEqual(a.parameters, bs[i].parameters)));\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nfunction equalPath(as, bs) {\n    if (as.length !== bs.length)\n        return false;\n    return as.every((/**\n     * @param {?} a\n     * @param {?} i\n     * @return {?}\n     */\n    (a, i) => a.path === bs[i].path));\n}\n/**\n * @template T\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\nfunction mapChildrenIntoArray(segment, fn) {\n    /** @type {?} */\n    let res = [];\n    forEach(segment.children, (/**\n     * @param {?} child\n     * @param {?} childOutlet\n     * @return {?}\n     */\n    (child, childOutlet) => {\n        if (childOutlet === PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    }));\n    forEach(segment.children, (/**\n     * @param {?} child\n     * @param {?} childOutlet\n     * @return {?}\n     */\n    (child, childOutlet) => {\n        if (childOutlet !== PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    }));\n    return res;\n}\n/**\n * \\@description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * \\@publicApi\n * @abstract\n */\nclass UrlSerializer {\n}\nif (false) {\n    /**\n     * Parse a url into a `UrlTree`\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlSerializer.prototype.parse = function (url) { };\n    /**\n     * Converts a `UrlTree` into a url\n     * @abstract\n     * @param {?} tree\n     * @return {?}\n     */\n    UrlSerializer.prototype.serialize = function (tree) { };\n}\n/**\n * \\@description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * \\@publicApi\n */\nclass DefaultUrlSerializer {\n    /**\n     * Parses a url into a `UrlTree`\n     * @param {?} url\n     * @return {?}\n     */\n    parse(url) {\n        /** @type {?} */\n        const p = new UrlParser(url);\n        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n    }\n    /**\n     * Converts a `UrlTree` into a url\n     * @param {?} tree\n     * @return {?}\n     */\n    serialize(tree) {\n        /** @type {?} */\n        const segment = `/${serializeSegment(tree.root, true)}`;\n        /** @type {?} */\n        const query = serializeQueryParams(tree.queryParams);\n        /** @type {?} */\n        const fragment = typeof tree.fragment === `string` ? `#${encodeUriFragment((/** @type {?} */ (tree.fragment)))}` : '';\n        return `${segment}${query}${fragment}`;\n    }\n}\n/** @type {?} */\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n/**\n * @param {?} segment\n * @return {?}\n */\nfunction serializePaths(segment) {\n    return segment.segments.map((/**\n     * @param {?} p\n     * @return {?}\n     */\n    p => serializePath(p))).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\nfunction serializeSegment(segment, root) {\n    if (!segment.hasChildren()) {\n        return serializePaths(segment);\n    }\n    if (root) {\n        /** @type {?} */\n        const primary = segment.children[PRIMARY_OUTLET] ?\n            serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n            '';\n        /** @type {?} */\n        const children = [];\n        forEach(segment.children, (/**\n         * @param {?} v\n         * @param {?} k\n         * @return {?}\n         */\n        (v, k) => {\n            if (k !== PRIMARY_OUTLET) {\n                children.push(`${k}:${serializeSegment(v, false)}`);\n            }\n        }));\n        return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n    }\n    else {\n        /** @type {?} */\n        const children = mapChildrenIntoArray(segment, (/**\n         * @param {?} v\n         * @param {?} k\n         * @return {?}\n         */\n        (v, k) => {\n            if (k === PRIMARY_OUTLET) {\n                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n            }\n            return [`${k}:${serializeSegment(v, false)}`];\n        }));\n        return `${serializePaths(segment)}/(${children.join('//')})`;\n    }\n}\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n * @param {?} s\n * @return {?}\n */\nfunction encodeUriString(s) {\n    return encodeURIComponent(s)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',');\n}\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nfunction encodeUriQuery(s) {\n    return encodeUriString(s).replace(/%3B/gi, ';');\n}\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nfunction encodeUriFragment(s) {\n    return encodeURI(s);\n}\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nfunction encodeUriSegment(s) {\n    return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction decode(s) {\n    return decodeURIComponent(s);\n}\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\n/**\n * @param {?} s\n * @return {?}\n */\nfunction decodeQuery(s) {\n    return decode(s.replace(/\\+/g, '%20'));\n}\n/**\n * @param {?} path\n * @return {?}\n */\nfunction serializePath(path) {\n    return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeMatrixParams(params) {\n    return Object.keys(params)\n        .map((/**\n     * @param {?} key\n     * @return {?}\n     */\n    key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`))\n        .join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeQueryParams(params) {\n    /** @type {?} */\n    const strParams = Object.keys(params).map((/**\n     * @param {?} name\n     * @return {?}\n     */\n    (name) => {\n        /** @type {?} */\n        const value = params[name];\n        return Array.isArray(value) ?\n            value.map((/**\n             * @param {?} v\n             * @return {?}\n             */\n            v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`)).join('&') :\n            `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n    }));\n    return strParams.length ? `?${strParams.join(\"&\")}` : '';\n}\n/** @type {?} */\nconst SEGMENT_RE = /^[^\\/()?;=#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchSegments(str) {\n    /** @type {?} */\n    const match = str.match(SEGMENT_RE);\n    return match ? match[0] : '';\n}\n/** @type {?} */\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchQueryParams(str) {\n    /** @type {?} */\n    const match = str.match(QUERY_PARAM_RE);\n    return match ? match[0] : '';\n}\n/** @type {?} */\nconst QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n// Return the value of the query param at the start of the string or an empty string\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str) {\n    /** @type {?} */\n    const match = str.match(QUERY_PARAM_VALUE_RE);\n    return match ? match[0] : '';\n}\nclass UrlParser {\n    /**\n     * @param {?} url\n     */\n    constructor(url) {\n        this.url = url;\n        this.remaining = url;\n    }\n    /**\n     * @return {?}\n     */\n    parseRootSegment() {\n        this.consumeOptional('/');\n        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n            return new UrlSegmentGroup([], {});\n        }\n        // The root segment group never has segments\n        return new UrlSegmentGroup([], this.parseChildren());\n    }\n    /**\n     * @return {?}\n     */\n    parseQueryParams() {\n        /** @type {?} */\n        const params = {};\n        if (this.consumeOptional('?')) {\n            do {\n                this.parseQueryParam(params);\n            } while (this.consumeOptional('&'));\n        }\n        return params;\n    }\n    /**\n     * @return {?}\n     */\n    parseFragment() {\n        return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    parseChildren() {\n        if (this.remaining === '') {\n            return {};\n        }\n        this.consumeOptional('/');\n        /** @type {?} */\n        const segments = [];\n        if (!this.peekStartsWith('(')) {\n            segments.push(this.parseSegment());\n        }\n        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n            this.capture('/');\n            segments.push(this.parseSegment());\n        }\n        /** @type {?} */\n        let children = {};\n        if (this.peekStartsWith('/(')) {\n            this.capture('/');\n            children = this.parseParens(true);\n        }\n        /** @type {?} */\n        let res = {};\n        if (this.peekStartsWith('(')) {\n            res = this.parseParens(false);\n        }\n        if (segments.length > 0 || Object.keys(children).length > 0) {\n            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n        }\n        return res;\n    }\n    // parse a segment with its matrix parameters\n    // ie `name;k1=v1;k2`\n    /**\n     * @private\n     * @return {?}\n     */\n    parseSegment() {\n        /** @type {?} */\n        const path = matchSegments(this.remaining);\n        if (path === '' && this.peekStartsWith(';')) {\n            throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n        }\n        this.capture(path);\n        return new UrlSegment(decode(path), this.parseMatrixParams());\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    parseMatrixParams() {\n        /** @type {?} */\n        const params = {};\n        while (this.consumeOptional(';')) {\n            this.parseParam(params);\n        }\n        return params;\n    }\n    /**\n     * @private\n     * @param {?} params\n     * @return {?}\n     */\n    parseParam(params) {\n        /** @type {?} */\n        const key = matchSegments(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        /** @type {?} */\n        let value = '';\n        if (this.consumeOptional('=')) {\n            /** @type {?} */\n            const valueMatch = matchSegments(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        params[decode(key)] = decode(value);\n    }\n    // Parse a single query parameter `name[=value]`\n    /**\n     * @private\n     * @param {?} params\n     * @return {?}\n     */\n    parseQueryParam(params) {\n        /** @type {?} */\n        const key = matchQueryParams(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        /** @type {?} */\n        let value = '';\n        if (this.consumeOptional('=')) {\n            /** @type {?} */\n            const valueMatch = matchUrlQueryParamValue(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        /** @type {?} */\n        const decodedKey = decodeQuery(key);\n        /** @type {?} */\n        const decodedVal = decodeQuery(value);\n        if (params.hasOwnProperty(decodedKey)) {\n            // Append to existing values\n            /** @type {?} */\n            let currentVal = params[decodedKey];\n            if (!Array.isArray(currentVal)) {\n                currentVal = [currentVal];\n                params[decodedKey] = currentVal;\n            }\n            currentVal.push(decodedVal);\n        }\n        else {\n            // Create a new value\n            params[decodedKey] = decodedVal;\n        }\n    }\n    // parse `(a/b//outlet_name:c/d)`\n    /**\n     * @private\n     * @param {?} allowPrimary\n     * @return {?}\n     */\n    parseParens(allowPrimary) {\n        /** @type {?} */\n        const segments = {};\n        this.capture('(');\n        while (!this.consumeOptional(')') && this.remaining.length > 0) {\n            /** @type {?} */\n            const path = matchSegments(this.remaining);\n            /** @type {?} */\n            const next = this.remaining[path.length];\n            // if is is not one of these characters, then the segment was unescaped\n            // or the group was not closed\n            if (next !== '/' && next !== ')' && next !== ';') {\n                throw new Error(`Cannot parse url '${this.url}'`);\n            }\n            /** @type {?} */\n            let outletName = (/** @type {?} */ (undefined));\n            if (path.indexOf(':') > -1) {\n                outletName = path.substr(0, path.indexOf(':'));\n                this.capture(outletName);\n                this.capture(':');\n            }\n            else if (allowPrimary) {\n                outletName = PRIMARY_OUTLET;\n            }\n            /** @type {?} */\n            const children = this.parseChildren();\n            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                new UrlSegmentGroup([], children);\n            this.consumeOptional('//');\n        }\n        return segments;\n    }\n    /**\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    peekStartsWith(str) { return this.remaining.startsWith(str); }\n    // Consumes the prefix when it is present and returns whether it has been consumed\n    /**\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    consumeOptional(str) {\n        if (this.peekStartsWith(str)) {\n            this.remaining = this.remaining.substring(str.length);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    capture(str) {\n        if (!this.consumeOptional(str)) {\n            throw new Error(`Expected \"${str}\".`);\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    UrlParser.prototype.remaining;\n    /**\n     * @type {?}\n     * @private\n     */\n    UrlParser.prototype.url;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n */\nclass Tree {\n    /**\n     * @param {?} root\n     */\n    constructor(root) { this._root = root; }\n    /**\n     * @return {?}\n     */\n    get root() { return this._root.value; }\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    parent(t) {\n        /** @type {?} */\n        const p = this.pathFromRoot(t);\n        return p.length > 1 ? p[p.length - 2] : null;\n    }\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    children(t) {\n        /** @type {?} */\n        const n = findNode(t, this._root);\n        return n ? n.children.map((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => t.value)) : [];\n    }\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    firstChild(t) {\n        /** @type {?} */\n        const n = findNode(t, this._root);\n        return n && n.children.length > 0 ? n.children[0].value : null;\n    }\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    siblings(t) {\n        /** @type {?} */\n        const p = findPath(t, this._root);\n        if (p.length < 2)\n            return [];\n        /** @type {?} */\n        const c = p[p.length - 2].children.map((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => c.value));\n        return c.filter((/**\n         * @param {?} cc\n         * @return {?}\n         */\n        cc => cc !== t));\n    }\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    pathFromRoot(t) { return findPath(t, this._root).map((/**\n     * @param {?} s\n     * @return {?}\n     */\n    s => s.value)); }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Tree.prototype._root;\n}\n// DFS for the node matching the value\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findNode(value, node) {\n    if (value === node.value)\n        return node;\n    for (const child of node.children) {\n        /** @type {?} */\n        const node = findNode(value, child);\n        if (node)\n            return node;\n    }\n    return null;\n}\n// Return the path to the node with the given value using DFS\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findPath(value, node) {\n    if (value === node.value)\n        return [node];\n    for (const child of node.children) {\n        /** @type {?} */\n        const path = findPath(value, child);\n        if (path.length) {\n            path.unshift(node);\n            return path;\n        }\n    }\n    return [];\n}\n/**\n * @template T\n */\nclass TreeNode {\n    /**\n     * @param {?} value\n     * @param {?} children\n     */\n    constructor(value, children) {\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `TreeNode(${this.value})`; }\n}\nif (false) {\n    /** @type {?} */\n    TreeNode.prototype.value;\n    /** @type {?} */\n    TreeNode.prototype.children;\n}\n// Return the list of T indexed by outlet name\n/**\n * @template T\n * @param {?} node\n * @return {?}\n */\nfunction nodeChildrenAsMap(node) {\n    /** @type {?} */\n    const map = {};\n    if (node) {\n        node.children.forEach((/**\n         * @param {?} child\n         * @return {?}\n         */\n        child => map[child.value.outlet] = child));\n    }\n    return map;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * \\@usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see `ActivatedRoute`\n *\n * \\@publicApi\n */\nclass RouterState extends Tree {\n    /**\n     * \\@internal\n     * @param {?} root\n     * @param {?} snapshot\n     */\n    constructor(root, snapshot) {\n        super(root);\n        this.snapshot = snapshot;\n        setRouterState((/** @type {?} */ (this)), root);\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return this.snapshot.toString(); }\n}\nif (false) {\n    /**\n     * The current snapshot of the router state\n     * @type {?}\n     */\n    RouterState.prototype.snapshot;\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nfunction createEmptyState(urlTree, rootComponent) {\n    /** @type {?} */\n    const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n    /** @type {?} */\n    const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n    /** @type {?} */\n    const emptyParams = new BehaviorSubject({});\n    /** @type {?} */\n    const emptyData = new BehaviorSubject({});\n    /** @type {?} */\n    const emptyQueryParams = new BehaviorSubject({});\n    /** @type {?} */\n    const fragment = new BehaviorSubject('');\n    /** @type {?} */\n    const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n    activated.snapshot = snapshot.root;\n    return new RouterState(new TreeNode(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nfunction createEmptyStateSnapshot(urlTree, rootComponent) {\n    /** @type {?} */\n    const emptyParams = {};\n    /** @type {?} */\n    const emptyData = {};\n    /** @type {?} */\n    const emptyQueryParams = {};\n    /** @type {?} */\n    const fragment = '';\n    /** @type {?} */\n    const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\n    return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * {\\@example router/activated-route/module.ts region=\"activated-route\"\n *     header=\"activated-route.component.ts\"}\n *\n * \\@publicApi\n */\nclass ActivatedRoute {\n    /**\n     * \\@internal\n     * @param {?} url\n     * @param {?} params\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @param {?} data\n     * @param {?} outlet\n     * @param {?} component\n     * @param {?} futureSnapshot\n     */\n    constructor(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this._futureSnapshot = futureSnapshot;\n    }\n    /**\n     * The configuration used to match this route.\n     * @return {?}\n     */\n    get routeConfig() { return this._futureSnapshot.routeConfig; }\n    /**\n     * The root of the router state.\n     * @return {?}\n     */\n    get root() { return this._routerState.root; }\n    /**\n     * The parent of this route in the router state tree.\n     * @return {?}\n     */\n    get parent() { return this._routerState.parent(this); }\n    /**\n     * The first child of this route in the router state tree.\n     * @return {?}\n     */\n    get firstChild() { return this._routerState.firstChild(this); }\n    /**\n     * The children of this route in the router state tree.\n     * @return {?}\n     */\n    get children() { return this._routerState.children(this); }\n    /**\n     * The path from the root of the router state tree to this route.\n     * @return {?}\n     */\n    get pathFromRoot() { return this._routerState.pathFromRoot(this); }\n    /**\n     * An Observable that contains a map of the required and optional parameters\n     * specific to the route.\n     * The map supports retrieving single and multiple values from the same parameter.\n     * @return {?}\n     */\n    get paramMap() {\n        if (!this._paramMap) {\n            this._paramMap = this.params.pipe(map((/**\n             * @param {?} p\n             * @return {?}\n             */\n            (p) => convertToParamMap(p))));\n        }\n        return this._paramMap;\n    }\n    /**\n     * An Observable that contains a map of the query parameters available to all routes.\n     * The map supports retrieving single and multiple values from the query parameter.\n     * @return {?}\n     */\n    get queryParamMap() {\n        if (!this._queryParamMap) {\n            this._queryParamMap =\n                this.queryParams.pipe(map((/**\n                 * @param {?} p\n                 * @return {?}\n                 */\n                (p) => convertToParamMap(p))));\n        }\n        return this._queryParamMap;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n    }\n}\nif (false) {\n    /**\n     * The current snapshot of this route\n     * @type {?}\n     */\n    ActivatedRoute.prototype.snapshot;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._futureSnapshot;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._routerState;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._paramMap;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._queryParamMap;\n    /**\n     * An observable of the URL segments matched by this route.\n     * @type {?}\n     */\n    ActivatedRoute.prototype.url;\n    /**\n     * An observable of the matrix parameters scoped to this route.\n     * @type {?}\n     */\n    ActivatedRoute.prototype.params;\n    /**\n     * An observable of the query parameters shared by all the routes.\n     * @type {?}\n     */\n    ActivatedRoute.prototype.queryParams;\n    /**\n     * An observable of the URL fragment shared by all the routes.\n     * @type {?}\n     */\n    ActivatedRoute.prototype.fragment;\n    /**\n     * An observable of the static and resolved data of this route.\n     * @type {?}\n     */\n    ActivatedRoute.prototype.data;\n    /**\n     * The outlet name of the route, a constant.\n     * @type {?}\n     */\n    ActivatedRoute.prototype.outlet;\n    /**\n     * The component of the route, a constant.\n     * @type {?}\n     */\n    ActivatedRoute.prototype.component;\n}\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * \\@internal\n * @param {?} route\n * @param {?=} paramsInheritanceStrategy\n * @return {?}\n */\nfunction inheritedParamsDataResolve(route, paramsInheritanceStrategy = 'emptyOnly') {\n    /** @type {?} */\n    const pathFromRoot = route.pathFromRoot;\n    /** @type {?} */\n    let inheritingStartingFrom = 0;\n    if (paramsInheritanceStrategy !== 'always') {\n        inheritingStartingFrom = pathFromRoot.length - 1;\n        while (inheritingStartingFrom >= 1) {\n            /** @type {?} */\n            const current = pathFromRoot[inheritingStartingFrom];\n            /** @type {?} */\n            const parent = pathFromRoot[inheritingStartingFrom - 1];\n            // current route is an empty path => inherits its parent's params and data\n            if (current.routeConfig && current.routeConfig.path === '') {\n                inheritingStartingFrom--;\n                // parent is componentless => current route should inherit its params and data\n            }\n            else if (!parent.component) {\n                inheritingStartingFrom--;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n/**\n * \\@internal\n * @param {?} pathFromRoot\n * @return {?}\n */\nfunction flattenInherited(pathFromRoot) {\n    return pathFromRoot.reduce((/**\n     * @param {?} res\n     * @param {?} curr\n     * @return {?}\n     */\n    (res, curr) => {\n        /** @type {?} */\n        const params = Object.assign({}, res.params, curr.params);\n        /** @type {?} */\n        const data = Object.assign({}, res.data, curr.data);\n        /** @type {?} */\n        const resolve = Object.assign({}, res.resolve, curr._resolvedData);\n        return { params, data, resolve };\n    }), (/** @type {?} */ ({ params: {}, data: {}, resolve: {} })));\n}\n/**\n * \\@description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * \\@Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass ActivatedRouteSnapshot {\n    /**\n     * \\@internal\n     * @param {?} url\n     * @param {?} params\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @param {?} data\n     * @param {?} outlet\n     * @param {?} component\n     * @param {?} routeConfig\n     * @param {?} urlSegment\n     * @param {?} lastPathIndex\n     * @param {?} resolve\n     */\n    constructor(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this.routeConfig = routeConfig;\n        this._urlSegment = urlSegment;\n        this._lastPathIndex = lastPathIndex;\n        this._resolve = resolve;\n    }\n    /**\n     * The root of the router state\n     * @return {?}\n     */\n    get root() { return this._routerState.root; }\n    /**\n     * The parent of this route in the router state tree\n     * @return {?}\n     */\n    get parent() { return this._routerState.parent(this); }\n    /**\n     * The first child of this route in the router state tree\n     * @return {?}\n     */\n    get firstChild() { return this._routerState.firstChild(this); }\n    /**\n     * The children of this route in the router state tree\n     * @return {?}\n     */\n    get children() { return this._routerState.children(this); }\n    /**\n     * The path from the root of the router state tree to this route\n     * @return {?}\n     */\n    get pathFromRoot() { return this._routerState.pathFromRoot(this); }\n    /**\n     * @return {?}\n     */\n    get paramMap() {\n        if (!this._paramMap) {\n            this._paramMap = convertToParamMap(this.params);\n        }\n        return this._paramMap;\n    }\n    /**\n     * @return {?}\n     */\n    get queryParamMap() {\n        if (!this._queryParamMap) {\n            this._queryParamMap = convertToParamMap(this.queryParams);\n        }\n        return this._queryParamMap;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const url = this.url.map((/**\n         * @param {?} segment\n         * @return {?}\n         */\n        segment => segment.toString())).join('/');\n        /** @type {?} */\n        const matched = this.routeConfig ? this.routeConfig.path : '';\n        return `Route(url:'${url}', path:'${matched}')`;\n    }\n}\nif (false) {\n    /**\n     * The configuration used to match this route *\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.routeConfig;\n    /**\n     * \\@internal *\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._urlSegment;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._lastPathIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._resolve;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._resolvedData;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._routerState;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._paramMap;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._queryParamMap;\n    /**\n     * The URL segments matched by this route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.url;\n    /**\n     * The matrix parameters scoped to this route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.params;\n    /**\n     * The query parameters shared by all the routes\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.queryParams;\n    /**\n     * The URL fragment shared by all the routes\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.fragment;\n    /**\n     * The static and resolved data of this route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.data;\n    /**\n     * The outlet name of the route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.outlet;\n    /**\n     * The component of the route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.component;\n}\n/**\n * \\@description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass RouterStateSnapshot extends Tree {\n    /**\n     * \\@internal\n     * @param {?} url\n     * @param {?} root\n     */\n    constructor(url, root) {\n        super(root);\n        this.url = url;\n        setRouterState((/** @type {?} */ (this)), root);\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return serializeNode(this._root); }\n}\nif (false) {\n    /**\n     * The url from which this snapshot was created\n     * @type {?}\n     */\n    RouterStateSnapshot.prototype.url;\n}\n/**\n * @template U, T\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterState(state, node) {\n    node.value._routerState = state;\n    node.children.forEach((/**\n     * @param {?} c\n     * @return {?}\n     */\n    c => setRouterState(state, c)));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node) {\n    /** @type {?} */\n    const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n    return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nfunction advanceActivatedRoute(route) {\n    if (route.snapshot) {\n        /** @type {?} */\n        const currentSnapshot = route.snapshot;\n        /** @type {?} */\n        const nextSnapshot = route._futureSnapshot;\n        route.snapshot = nextSnapshot;\n        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n            ((/** @type {?} */ (route.queryParams))).next(nextSnapshot.queryParams);\n        }\n        if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n            ((/** @type {?} */ (route.fragment))).next(nextSnapshot.fragment);\n        }\n        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n            ((/** @type {?} */ (route.params))).next(nextSnapshot.params);\n        }\n        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n            ((/** @type {?} */ (route.url))).next(nextSnapshot.url);\n        }\n        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n            ((/** @type {?} */ (route.data))).next(nextSnapshot.data);\n        }\n    }\n    else {\n        route.snapshot = route._futureSnapshot;\n        // this is for resolved data\n        ((/** @type {?} */ (route.data))).next(route._futureSnapshot.data);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction equalParamsAndUrlSegments(a, b) {\n    /** @type {?} */\n    const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n    /** @type {?} */\n    const parentsMismatch = !a.parent !== !b.parent;\n    return equalUrlParams && !parentsMismatch &&\n        (!a.parent || equalParamsAndUrlSegments(a.parent, (/** @type {?} */ (b.parent))));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\n    /** @type {?} */\n    const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n    return new RouterState(root, curr);\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?=} prevState\n * @return {?}\n */\nfunction createNode(routeReuseStrategy, curr, prevState) {\n    // reuse an activated route that is currently displayed on the screen\n    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n        /** @type {?} */\n        const value = prevState.value;\n        value._futureSnapshot = curr.value;\n        /** @type {?} */\n        const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n        return new TreeNode(value, children);\n        // retrieve an activated route that is used to be displayed, but is not currently displayed\n    }\n    else {\n        /** @type {?} */\n        const detachedRouteHandle = (/** @type {?} */ (routeReuseStrategy.retrieve(curr.value)));\n        if (detachedRouteHandle) {\n            /** @type {?} */\n            const tree = detachedRouteHandle.route;\n            setFutureSnapshotsOfActivatedRoutes(curr, tree);\n            return tree;\n        }\n        else {\n            /** @type {?} */\n            const value = createActivatedRoute(curr.value);\n            /** @type {?} */\n            const children = curr.children.map((/**\n             * @param {?} c\n             * @return {?}\n             */\n            c => createNode(routeReuseStrategy, c)));\n            return new TreeNode(value, children);\n        }\n    }\n}\n/**\n * @param {?} curr\n * @param {?} result\n * @return {?}\n */\nfunction setFutureSnapshotsOfActivatedRoutes(curr, result) {\n    if (curr.value.routeConfig !== result.value.routeConfig) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n    }\n    if (curr.children.length !== result.children.length) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n    }\n    result.value._futureSnapshot = curr.value;\n    for (let i = 0; i < curr.children.length; ++i) {\n        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n    }\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n    return curr.children.map((/**\n     * @param {?} child\n     * @return {?}\n     */\n    child => {\n        for (const p of prevState.children) {\n            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n                return createNode(routeReuseStrategy, child, p);\n            }\n        }\n        return createNode(routeReuseStrategy, child);\n    }));\n}\n/**\n * @param {?} c\n * @return {?}\n */\nfunction createActivatedRoute(c) {\n    return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction createUrlTree(route, urlTree, commands, queryParams, fragment) {\n    if (commands.length === 0) {\n        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n    }\n    /** @type {?} */\n    const nav = computeNavigation(commands);\n    if (nav.toRoot()) {\n        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n    }\n    /** @type {?} */\n    const startingPosition = findStartingPosition(nav, urlTree, route);\n    /** @type {?} */\n    const segmentGroup = startingPosition.processChildren ?\n        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction isMatrixParams(command) {\n    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\n    /** @type {?} */\n    let qp = {};\n    if (queryParams) {\n        forEach(queryParams, (/**\n         * @param {?} value\n         * @param {?} name\n         * @return {?}\n         */\n        (value, name) => {\n            qp[name] = Array.isArray(value) ? value.map((/**\n             * @param {?} v\n             * @return {?}\n             */\n            (v) => `${v}`)) : `${value}`;\n        }));\n    }\n    if (urlTree.root === oldSegmentGroup) {\n        return new UrlTree(newSegmentGroup, qp, fragment);\n    }\n    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\nfunction replaceSegment(current, oldSegment, newSegment) {\n    /** @type {?} */\n    const children = {};\n    forEach(current.children, (/**\n     * @param {?} c\n     * @param {?} outletName\n     * @return {?}\n     */\n    (c, outletName) => {\n        if (c === oldSegment) {\n            children[outletName] = newSegment;\n        }\n        else {\n            children[outletName] = replaceSegment(c, oldSegment, newSegment);\n        }\n    }));\n    return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n    /**\n     * @param {?} isAbsolute\n     * @param {?} numberOfDoubleDots\n     * @param {?} commands\n     */\n    constructor(isAbsolute, numberOfDoubleDots, commands) {\n        this.isAbsolute = isAbsolute;\n        this.numberOfDoubleDots = numberOfDoubleDots;\n        this.commands = commands;\n        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n            throw new Error('Root segment cannot have matrix parameters');\n        }\n        /** @type {?} */\n        const cmdWithOutlet = commands.find((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => typeof c === 'object' && c != null && c.outlets));\n        if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n            throw new Error('{outlets:{}} has to be the last command');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toRoot() {\n        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n    }\n}\nif (false) {\n    /** @type {?} */\n    Navigation.prototype.isAbsolute;\n    /** @type {?} */\n    Navigation.prototype.numberOfDoubleDots;\n    /** @type {?} */\n    Navigation.prototype.commands;\n}\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\nfunction computeNavigation(commands) {\n    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n        return new Navigation(true, 0, commands);\n    }\n    /** @type {?} */\n    let numberOfDoubleDots = 0;\n    /** @type {?} */\n    let isAbsolute = false;\n    /** @type {?} */\n    const res = commands.reduce((/**\n     * @param {?} res\n     * @param {?} cmd\n     * @param {?} cmdIdx\n     * @return {?}\n     */\n    (res, cmd, cmdIdx) => {\n        if (typeof cmd === 'object' && cmd != null) {\n            if (cmd.outlets) {\n                /** @type {?} */\n                const outlets = {};\n                forEach(cmd.outlets, (/**\n                 * @param {?} commands\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (commands, name) => {\n                    outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n                }));\n                return [...res, { outlets }];\n            }\n            if (cmd.segmentPath) {\n                return [...res, cmd.segmentPath];\n            }\n        }\n        if (!(typeof cmd === 'string')) {\n            return [...res, cmd];\n        }\n        if (cmdIdx === 0) {\n            cmd.split('/').forEach((/**\n             * @param {?} urlPart\n             * @param {?} partIndex\n             * @return {?}\n             */\n            (urlPart, partIndex) => {\n                if (partIndex == 0 && urlPart === '.') {\n                    // skip './a'\n                }\n                else if (partIndex == 0 && urlPart === '') { //  '/a'\n                    isAbsolute = true;\n                }\n                else if (urlPart === '..') { //  '../a'\n                    numberOfDoubleDots++;\n                }\n                else if (urlPart != '') {\n                    res.push(urlPart);\n                }\n            }));\n            return res;\n        }\n        return [...res, cmd];\n    }), []);\n    return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n    /**\n     * @param {?} segmentGroup\n     * @param {?} processChildren\n     * @param {?} index\n     */\n    constructor(segmentGroup, processChildren, index) {\n        this.segmentGroup = segmentGroup;\n        this.processChildren = processChildren;\n        this.index = index;\n    }\n}\nif (false) {\n    /** @type {?} */\n    Position.prototype.segmentGroup;\n    /** @type {?} */\n    Position.prototype.processChildren;\n    /** @type {?} */\n    Position.prototype.index;\n}\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\nfunction findStartingPosition(nav, tree, route) {\n    if (nav.isAbsolute) {\n        return new Position(tree.root, true, 0);\n    }\n    if (route.snapshot._lastPathIndex === -1) {\n        return new Position(route.snapshot._urlSegment, true, 0);\n    }\n    /** @type {?} */\n    const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n    /** @type {?} */\n    const index = route.snapshot._lastPathIndex + modifier;\n    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n    /** @type {?} */\n    let g = group;\n    /** @type {?} */\n    let ci = index;\n    /** @type {?} */\n    let dd = numberOfDoubleDots;\n    while (dd > ci) {\n        dd -= ci;\n        g = (/** @type {?} */ (g.parent));\n        if (!g) {\n            throw new Error('Invalid number of \\'../\\'');\n        }\n        ci = g.segments.length;\n    }\n    return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction getPath(command) {\n    if (typeof command === 'object' && command != null && command.outlets) {\n        return command.outlets[PRIMARY_OUTLET];\n    }\n    return `${command}`;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction getOutlets(commands) {\n    if (!(typeof commands[0] === 'object'))\n        return { [PRIMARY_OUTLET]: commands };\n    if (commands[0].outlets === undefined)\n        return { [PRIMARY_OUTLET]: commands };\n    return commands[0].outlets;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n    if (!segmentGroup) {\n        segmentGroup = new UrlSegmentGroup([], {});\n    }\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n    }\n    /** @type {?} */\n    const m = prefixedWith(segmentGroup, startIndex, commands);\n    /** @type {?} */\n    const slicedCommands = commands.slice(m.commandIndex);\n    if (m.match && m.pathIndex < segmentGroup.segments.length) {\n        /** @type {?} */\n        const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n        g.children[PRIMARY_OUTLET] =\n            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n        return updateSegmentGroupChildren(g, 0, slicedCommands);\n    }\n    else if (m.match && slicedCommands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else if (m.match && !segmentGroup.hasChildren()) {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n    else if (m.match) {\n        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n    }\n    else {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n    if (commands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else {\n        /** @type {?} */\n        const outlets = getOutlets(commands);\n        /** @type {?} */\n        const children = {};\n        forEach(outlets, (/**\n         * @param {?} commands\n         * @param {?} outlet\n         * @return {?}\n         */\n        (commands, outlet) => {\n            if (commands !== null) {\n                children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n            }\n        }));\n        forEach(segmentGroup.children, (/**\n         * @param {?} child\n         * @param {?} childOutlet\n         * @return {?}\n         */\n        (child, childOutlet) => {\n            if (outlets[childOutlet] === undefined) {\n                children[childOutlet] = child;\n            }\n        }));\n        return new UrlSegmentGroup(segmentGroup.segments, children);\n    }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n    /** @type {?} */\n    let currentCommandIndex = 0;\n    /** @type {?} */\n    let currentPathIndex = startIndex;\n    /** @type {?} */\n    const noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\n    while (currentPathIndex < segmentGroup.segments.length) {\n        if (currentCommandIndex >= commands.length)\n            return noMatch;\n        /** @type {?} */\n        const path = segmentGroup.segments[currentPathIndex];\n        /** @type {?} */\n        const curr = getPath(commands[currentCommandIndex]);\n        /** @type {?} */\n        const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n        if (currentPathIndex > 0 && curr === undefined)\n            break;\n        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n            if (!compare(curr, next, path))\n                return noMatch;\n            currentCommandIndex += 2;\n        }\n        else {\n            if (!compare(curr, {}, path))\n                return noMatch;\n            currentCommandIndex++;\n        }\n        currentPathIndex++;\n    }\n    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n    /** @type {?} */\n    const paths = segmentGroup.segments.slice(0, startIndex);\n    /** @type {?} */\n    let i = 0;\n    while (i < commands.length) {\n        if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n            /** @type {?} */\n            const children = createNewSegmentChildren(commands[i].outlets);\n            return new UrlSegmentGroup(paths, children);\n        }\n        // if we start with an object literal, we need to reuse the path part from the segment\n        if (i === 0 && isMatrixParams(commands[0])) {\n            /** @type {?} */\n            const p = segmentGroup.segments[startIndex];\n            paths.push(new UrlSegment(p.path, commands[0]));\n            i++;\n            continue;\n        }\n        /** @type {?} */\n        const curr = getPath(commands[i]);\n        /** @type {?} */\n        const next = (i < commands.length - 1) ? commands[i + 1] : null;\n        if (curr && next && isMatrixParams(next)) {\n            paths.push(new UrlSegment(curr, stringify(next)));\n            i += 2;\n        }\n        else {\n            paths.push(new UrlSegment(curr, {}));\n            i++;\n        }\n    }\n    return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\nfunction createNewSegmentChildren(outlets) {\n    /** @type {?} */\n    const children = {};\n    forEach(outlets, (/**\n     * @param {?} commands\n     * @param {?} outlet\n     * @return {?}\n     */\n    (commands, outlet) => {\n        if (commands !== null) {\n            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n        }\n    }));\n    return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction stringify(params) {\n    /** @type {?} */\n    const res = {};\n    forEach(params, (/**\n     * @param {?} v\n     * @param {?} k\n     * @return {?}\n     */\n    (v, k) => res[k] = `${v}`));\n    return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\nfunction compare(path, params, segment) {\n    return path == segment.path && shallowEqual(params, segment.parameters);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst activateRoutes = (/**\n * @param {?} rootContexts\n * @param {?} routeReuseStrategy\n * @param {?} forwardEvent\n * @return {?}\n */\n(rootContexts, routeReuseStrategy, forwardEvent) => map((/**\n * @param {?} t\n * @return {?}\n */\nt => {\n    new ActivateRoutes(routeReuseStrategy, (/** @type {?} */ (t.targetRouterState)), t.currentRouterState, forwardEvent)\n        .activate(rootContexts);\n    return t;\n})));\nclass ActivateRoutes {\n    /**\n     * @param {?} routeReuseStrategy\n     * @param {?} futureState\n     * @param {?} currState\n     * @param {?} forwardEvent\n     */\n    constructor(routeReuseStrategy, futureState, currState, forwardEvent) {\n        this.routeReuseStrategy = routeReuseStrategy;\n        this.futureState = futureState;\n        this.currState = currState;\n        this.forwardEvent = forwardEvent;\n    }\n    /**\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    activate(parentContexts) {\n        /** @type {?} */\n        const futureRoot = this.futureState._root;\n        /** @type {?} */\n        const currRoot = this.currState ? this.currState._root : null;\n        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n        advanceActivatedRoute(this.futureState.root);\n        this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n    }\n    // De-activate the child route that are not re-used for the future state\n    /**\n     * @private\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    deactivateChildRoutes(futureNode, currNode, contexts) {\n        /** @type {?} */\n        const children = nodeChildrenAsMap(currNode);\n        // Recurse on the routes active in the future state to de-activate deeper children\n        futureNode.children.forEach((/**\n         * @param {?} futureChild\n         * @return {?}\n         */\n        futureChild => {\n            /** @type {?} */\n            const childOutletName = futureChild.value.outlet;\n            this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n            delete children[childOutletName];\n        }));\n        // De-activate the routes that will not be re-used\n        forEach(children, (/**\n         * @param {?} v\n         * @param {?} childName\n         * @return {?}\n         */\n        (v, childName) => {\n            this.deactivateRouteAndItsChildren(v, contexts);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContext\n     * @return {?}\n     */\n    deactivateRoutes(futureNode, currNode, parentContext) {\n        /** @type {?} */\n        const future = futureNode.value;\n        /** @type {?} */\n        const curr = currNode ? currNode.value : null;\n        if (future === curr) {\n            // Reusing the node, check to see if the children need to be de-activated\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                /** @type {?} */\n                const context = parentContext.getContext(future.outlet);\n                if (context) {\n                    this.deactivateChildRoutes(futureNode, currNode, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.deactivateChildRoutes(futureNode, currNode, parentContext);\n            }\n        }\n        else {\n            if (curr) {\n                // Deactivate the current route which will not be re-used\n                this.deactivateRouteAndItsChildren(currNode, parentContext);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    deactivateRouteAndItsChildren(route, parentContexts) {\n        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n            this.detachAndStoreRouteSubtree(route, parentContexts);\n        }\n        else {\n            this.deactivateRouteAndOutlet(route, parentContexts);\n        }\n    }\n    /**\n     * @private\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    detachAndStoreRouteSubtree(route, parentContexts) {\n        /** @type {?} */\n        const context = parentContexts.getContext(route.value.outlet);\n        if (context && context.outlet) {\n            /** @type {?} */\n            const componentRef = context.outlet.detach();\n            /** @type {?} */\n            const contexts = context.children.onOutletDeactivated();\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef, route, contexts });\n        }\n    }\n    /**\n     * @private\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    deactivateRouteAndOutlet(route, parentContexts) {\n        /** @type {?} */\n        const context = parentContexts.getContext(route.value.outlet);\n        if (context) {\n            /** @type {?} */\n            const children = nodeChildrenAsMap(route);\n            /** @type {?} */\n            const contexts = route.value.component ? context.children : parentContexts;\n            forEach(children, (/**\n             * @param {?} v\n             * @param {?} k\n             * @return {?}\n             */\n            (v, k) => this.deactivateRouteAndItsChildren(v, contexts)));\n            if (context.outlet) {\n                // Destroy the component\n                context.outlet.deactivate();\n                // Destroy the contexts for all the outlets that were in the component\n                context.children.onOutletDeactivated();\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    activateChildRoutes(futureNode, currNode, contexts) {\n        /** @type {?} */\n        const children = nodeChildrenAsMap(currNode);\n        futureNode.children.forEach((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => {\n            this.activateRoutes(c, children[c.value.outlet], contexts);\n            this.forwardEvent(new ActivationEnd(c.value.snapshot));\n        }));\n        if (futureNode.children.length) {\n            this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n        }\n    }\n    /**\n     * @private\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    activateRoutes(futureNode, currNode, parentContexts) {\n        /** @type {?} */\n        const future = futureNode.value;\n        /** @type {?} */\n        const curr = currNode ? currNode.value : null;\n        advanceActivatedRoute(future);\n        // reusing the node\n        if (future === curr) {\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                /** @type {?} */\n                const context = parentContexts.getOrCreateContext(future.outlet);\n                this.activateChildRoutes(futureNode, currNode, context.children);\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, currNode, parentContexts);\n            }\n        }\n        else {\n            if (future.component) {\n                // if we have a normal route, we need to place the component into the outlet and recurse.\n                /** @type {?} */\n                const context = parentContexts.getOrCreateContext(future.outlet);\n                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n                    /** @type {?} */\n                    const stored = ((/** @type {?} */ (this.routeReuseStrategy.retrieve(future.snapshot))));\n                    this.routeReuseStrategy.store(future.snapshot, null);\n                    context.children.onOutletReAttached(stored.contexts);\n                    context.attachRef = stored.componentRef;\n                    context.route = stored.route.value;\n                    if (context.outlet) {\n                        // Attach right away when the outlet has already been instantiated\n                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n                        context.outlet.attach(stored.componentRef, stored.route.value);\n                    }\n                    advanceActivatedRouteNodeAndItsChildren(stored.route);\n                }\n                else {\n                    /** @type {?} */\n                    const config = parentLoadedConfig(future.snapshot);\n                    /** @type {?} */\n                    const cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n                    context.attachRef = null;\n                    context.route = future;\n                    context.resolver = cmpFactoryResolver;\n                    if (context.outlet) {\n                        // Activate the outlet when it has already been instantiated\n                        // Otherwise it will get activated from its `ngOnInit` when instantiated\n                        context.outlet.activateWith(future, cmpFactoryResolver);\n                    }\n                    this.activateChildRoutes(futureNode, null, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, null, parentContexts);\n            }\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ActivateRoutes.prototype.routeReuseStrategy;\n    /**\n     * @type {?}\n     * @private\n     */\n    ActivateRoutes.prototype.futureState;\n    /**\n     * @type {?}\n     * @private\n     */\n    ActivateRoutes.prototype.currState;\n    /**\n     * @type {?}\n     * @private\n     */\n    ActivateRoutes.prototype.forwardEvent;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction advanceActivatedRouteNodeAndItsChildren(node) {\n    advanceActivatedRoute(node.value);\n    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction parentLoadedConfig(snapshot) {\n    for (let s = snapshot.parent; s; s = s.parent) {\n        /** @type {?} */\n        const route = s.routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n        if (route && route.component)\n            return null;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n * @template T\n * @param {?} v\n * @return {?}\n */\nfunction isFunction(v) {\n    return typeof v === 'function';\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction isUrlTree(v) {\n    return v instanceof UrlTree;\n}\n/**\n * @param {?} guard\n * @return {?}\n */\nfunction isCanLoad(guard) {\n    return guard && isFunction(guard.canLoad);\n}\n/**\n * @param {?} guard\n * @return {?}\n */\nfunction isCanActivate(guard) {\n    return guard && isFunction(guard.canActivate);\n}\n/**\n * @param {?} guard\n * @return {?}\n */\nfunction isCanActivateChild(guard) {\n    return guard && isFunction(guard.canActivateChild);\n}\n/**\n * @template T\n * @param {?} guard\n * @return {?}\n */\nfunction isCanDeactivate(guard) {\n    return guard && isFunction(guard.canDeactivate);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NoMatch {\n    /**\n     * @param {?=} segmentGroup\n     */\n    constructor(segmentGroup) { this.segmentGroup = segmentGroup || null; }\n}\nif (false) {\n    /** @type {?} */\n    NoMatch.prototype.segmentGroup;\n}\nclass AbsoluteRedirect {\n    /**\n     * @param {?} urlTree\n     */\n    constructor(urlTree) {\n        this.urlTree = urlTree;\n    }\n}\nif (false) {\n    /** @type {?} */\n    AbsoluteRedirect.prototype.urlTree;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction noMatch(segmentGroup) {\n    return new Observable((/**\n     * @param {?} obs\n     * @return {?}\n     */\n    (obs) => obs.error(new NoMatch(segmentGroup))));\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\nfunction absoluteRedirect(newTree) {\n    return new Observable((/**\n     * @param {?} obs\n     * @return {?}\n     */\n    (obs) => obs.error(new AbsoluteRedirect(newTree))));\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\nfunction namedOutletsRedirect(redirectTo) {\n    return new Observable((/**\n     * @param {?} obs\n     * @return {?}\n     */\n    (obs) => obs.error(new Error(`Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`))));\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction canLoadFails(route) {\n    return new Observable((/**\n     * @param {?} obs\n     * @return {?}\n     */\n    (obs) => obs.error(navigationCancelingError(`Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`))));\n}\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\nfunction applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\nclass ApplyRedirects {\n    /**\n     * @param {?} moduleInjector\n     * @param {?} configLoader\n     * @param {?} urlSerializer\n     * @param {?} urlTree\n     * @param {?} config\n     */\n    constructor(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n        this.configLoader = configLoader;\n        this.urlSerializer = urlSerializer;\n        this.urlTree = urlTree;\n        this.config = config;\n        this.allowRedirects = true;\n        this.ngModule = moduleInjector.get(NgModuleRef);\n    }\n    /**\n     * @return {?}\n     */\n    apply() {\n        /** @type {?} */\n        const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n        /** @type {?} */\n        const urlTrees$ = expanded$.pipe(map((/**\n         * @param {?} rootSegmentGroup\n         * @return {?}\n         */\n        (rootSegmentGroup) => this.createUrlTree(rootSegmentGroup, this.urlTree.queryParams, (/** @type {?} */ (this.urlTree.fragment))))));\n        return urlTrees$.pipe(catchError((/**\n         * @param {?} e\n         * @return {?}\n         */\n        (e) => {\n            if (e instanceof AbsoluteRedirect) {\n                // after an absolute redirect we do not apply any more redirects!\n                this.allowRedirects = false;\n                // we need to run matching, so we can fetch all lazy-loaded modules\n                return this.match(e.urlTree);\n            }\n            if (e instanceof NoMatch) {\n                throw this.noMatchError(e);\n            }\n            throw e;\n        })));\n    }\n    /**\n     * @private\n     * @param {?} tree\n     * @return {?}\n     */\n    match(tree) {\n        /** @type {?} */\n        const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n        /** @type {?} */\n        const mapped$ = expanded$.pipe(map((/**\n         * @param {?} rootSegmentGroup\n         * @return {?}\n         */\n        (rootSegmentGroup) => this.createUrlTree(rootSegmentGroup, tree.queryParams, (/** @type {?} */ (tree.fragment))))));\n        return mapped$.pipe(catchError((/**\n         * @param {?} e\n         * @return {?}\n         */\n        (e) => {\n            if (e instanceof NoMatch) {\n                throw this.noMatchError(e);\n            }\n            throw e;\n        })));\n    }\n    /**\n     * @private\n     * @param {?} e\n     * @return {?}\n     */\n    noMatchError(e) {\n        return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n    }\n    /**\n     * @private\n     * @param {?} rootCandidate\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    createUrlTree(rootCandidate, queryParams, fragment) {\n        /** @type {?} */\n        const root = rootCandidate.segments.length > 0 ?\n            new UrlSegmentGroup([], { [PRIMARY_OUTLET]: rootCandidate }) :\n            rootCandidate;\n        return new UrlTree(root, queryParams, fragment);\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    expandSegmentGroup(ngModule, routes, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.expandChildren(ngModule, routes, segmentGroup)\n                .pipe(map((/**\n             * @param {?} children\n             * @return {?}\n             */\n            (children) => new UrlSegmentGroup([], children))));\n        }\n        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n    }\n    // Recursively expand segment groups for all the child outlets\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    expandChildren(ngModule, routes, segmentGroup) {\n        return waitForMap(segmentGroup.children, (/**\n         * @param {?} childOutlet\n         * @param {?} child\n         * @return {?}\n         */\n        (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet)));\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} segments\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    expandSegment(ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {\n        return of(...routes).pipe(map((/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => {\n            /** @type {?} */\n            const expanded$ = this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n            return expanded$.pipe(catchError((/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => {\n                if (e instanceof NoMatch) {\n                    // TODO(i): this return type doesn't match the declared Observable<UrlSegmentGroup> -\n                    // talk to Jason\n                    return (/** @type {?} */ (of(null)));\n                }\n                throw e;\n            })));\n        })), concatAll(), first((/**\n         * @param {?} s\n         * @return {?}\n         */\n        (s) => !!s)), catchError((/**\n         * @param {?} e\n         * @param {?} _\n         * @return {?}\n         */\n        (e, _) => {\n            if (e instanceof EmptyError || e.name === 'EmptyError') {\n                if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                    return of(new UrlSegmentGroup([], {}));\n                }\n                throw new NoMatch(segmentGroup);\n            }\n            throw e;\n        })));\n    }\n    /**\n     * @private\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    noLeftoversInUrl(segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} paths\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    expandSegmentAgainstRoute(ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {\n        if (getOutlet(route) !== outlet) {\n            return noMatch(segmentGroup);\n        }\n        if (route.redirectTo === undefined) {\n            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n        }\n        if (allowRedirects && this.allowRedirects) {\n            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);\n        }\n        return noMatch(segmentGroup);\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {\n        if (route.path === '**') {\n            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);\n        }\n        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} outlet\n     * @return {?}\n     */\n    expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet) {\n        /** @type {?} */\n        const newTree = this.applyRedirectCommands([], (/** @type {?} */ (route.redirectTo)), {});\n        if ((/** @type {?} */ (route.redirectTo)).startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return this.lineralizeSegments(route, newTree).pipe(mergeMap((/**\n         * @param {?} newSegments\n         * @return {?}\n         */\n        (newSegments) => {\n            /** @type {?} */\n            const group = new UrlSegmentGroup(newSegments, {});\n            return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n        })));\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {\n        const { matched, consumedSegments, lastChild, positionalParamSegments } = match(segmentGroup, route, segments);\n        if (!matched)\n            return noMatch(segmentGroup);\n        /** @type {?} */\n        const newTree = this.applyRedirectCommands(consumedSegments, (/** @type {?} */ (route.redirectTo)), (/** @type {?} */ (positionalParamSegments)));\n        if ((/** @type {?} */ (route.redirectTo)).startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return this.lineralizeSegments(route, newTree).pipe(mergeMap((/**\n         * @param {?} newSegments\n         * @return {?}\n         */\n        (newSegments) => {\n            return this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\n        })));\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} rawSegmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    matchSegmentAgainstRoute(ngModule, rawSegmentGroup, route, segments) {\n        if (route.path === '**') {\n            if (route.loadChildren) {\n                return this.configLoader.load(ngModule.injector, route)\n                    .pipe(map((/**\n                 * @param {?} cfg\n                 * @return {?}\n                 */\n                (cfg) => {\n                    route._loadedConfig = cfg;\n                    return new UrlSegmentGroup(segments, {});\n                })));\n            }\n            return of(new UrlSegmentGroup(segments, {}));\n        }\n        const { matched, consumedSegments, lastChild } = match(rawSegmentGroup, route, segments);\n        if (!matched)\n            return noMatch(rawSegmentGroup);\n        /** @type {?} */\n        const rawSlicedSegments = segments.slice(lastChild);\n        /** @type {?} */\n        const childConfig$ = this.getChildConfig(ngModule, route, segments);\n        return childConfig$.pipe(mergeMap((/**\n         * @param {?} routerConfig\n         * @return {?}\n         */\n        (routerConfig) => {\n            /** @type {?} */\n            const childModule = routerConfig.module;\n            /** @type {?} */\n            const childConfig = routerConfig.routes;\n            const { segmentGroup, slicedSegments } = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                /** @type {?} */\n                const expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n                return expanded$.pipe(map((/**\n                 * @param {?} children\n                 * @return {?}\n                 */\n                (children) => new UrlSegmentGroup(consumedSegments, children))));\n            }\n            if (childConfig.length === 0 && slicedSegments.length === 0) {\n                return of(new UrlSegmentGroup(consumedSegments, {}));\n            }\n            /** @type {?} */\n            const expanded$ = this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n            return expanded$.pipe(map((/**\n             * @param {?} cs\n             * @return {?}\n             */\n            (cs) => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children))));\n        })));\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    getChildConfig(ngModule, route, segments) {\n        if (route.children) {\n            // The children belong to the same module\n            return of(new LoadedRouterConfig(route.children, ngModule));\n        }\n        if (route.loadChildren) {\n            // lazy children belong to the loaded module\n            if (route._loadedConfig !== undefined) {\n                return of(route._loadedConfig);\n            }\n            return runCanLoadGuard(ngModule.injector, route, segments)\n                .pipe(mergeMap((/**\n             * @param {?} shouldLoad\n             * @return {?}\n             */\n            (shouldLoad) => {\n                if (shouldLoad) {\n                    return this.configLoader.load(ngModule.injector, route)\n                        .pipe(map((/**\n                     * @param {?} cfg\n                     * @return {?}\n                     */\n                    (cfg) => {\n                        route._loadedConfig = cfg;\n                        return cfg;\n                    })));\n                }\n                return canLoadFails(route);\n            })));\n        }\n        return of(new LoadedRouterConfig([], ngModule));\n    }\n    /**\n     * @private\n     * @param {?} route\n     * @param {?} urlTree\n     * @return {?}\n     */\n    lineralizeSegments(route, urlTree) {\n        /** @type {?} */\n        let res = [];\n        /** @type {?} */\n        let c = urlTree.root;\n        while (true) {\n            res = res.concat(c.segments);\n            if (c.numberOfChildren === 0) {\n                return of(res);\n            }\n            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n                return namedOutletsRedirect((/** @type {?} */ (route.redirectTo)));\n            }\n            c = c.children[PRIMARY_OUTLET];\n        }\n    }\n    /**\n     * @private\n     * @param {?} segments\n     * @param {?} redirectTo\n     * @param {?} posParams\n     * @return {?}\n     */\n    applyRedirectCommands(segments, redirectTo, posParams) {\n        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n    }\n    /**\n     * @private\n     * @param {?} redirectTo\n     * @param {?} urlTree\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    applyRedirectCreatreUrlTree(redirectTo, urlTree, segments, posParams) {\n        /** @type {?} */\n        const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n    }\n    /**\n     * @private\n     * @param {?} redirectToParams\n     * @param {?} actualParams\n     * @return {?}\n     */\n    createQueryParams(redirectToParams, actualParams) {\n        /** @type {?} */\n        const res = {};\n        forEach(redirectToParams, (/**\n         * @param {?} v\n         * @param {?} k\n         * @return {?}\n         */\n        (v, k) => {\n            /** @type {?} */\n            const copySourceValue = typeof v === 'string' && v.startsWith(':');\n            if (copySourceValue) {\n                /** @type {?} */\n                const sourceName = v.substring(1);\n                res[k] = actualParams[sourceName];\n            }\n            else {\n                res[k] = v;\n            }\n        }));\n        return res;\n    }\n    /**\n     * @private\n     * @param {?} redirectTo\n     * @param {?} group\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    createSegmentGroup(redirectTo, group, segments, posParams) {\n        /** @type {?} */\n        const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n        /** @type {?} */\n        let children = {};\n        forEach(group.children, (/**\n         * @param {?} child\n         * @param {?} name\n         * @return {?}\n         */\n        (child, name) => {\n            children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n        }));\n        return new UrlSegmentGroup(updatedSegments, children);\n    }\n    /**\n     * @private\n     * @param {?} redirectTo\n     * @param {?} redirectToSegments\n     * @param {?} actualSegments\n     * @param {?} posParams\n     * @return {?}\n     */\n    createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {\n        return redirectToSegments.map((/**\n         * @param {?} s\n         * @return {?}\n         */\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n            this.findOrReturn(s, actualSegments)));\n    }\n    /**\n     * @private\n     * @param {?} redirectTo\n     * @param {?} redirectToUrlSegment\n     * @param {?} posParams\n     * @return {?}\n     */\n    findPosParam(redirectTo, redirectToUrlSegment, posParams) {\n        /** @type {?} */\n        const pos = posParams[redirectToUrlSegment.path.substring(1)];\n        if (!pos)\n            throw new Error(`Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n        return pos;\n    }\n    /**\n     * @private\n     * @param {?} redirectToUrlSegment\n     * @param {?} actualSegments\n     * @return {?}\n     */\n    findOrReturn(redirectToUrlSegment, actualSegments) {\n        /** @type {?} */\n        let idx = 0;\n        for (const s of actualSegments) {\n            if (s.path === redirectToUrlSegment.path) {\n                actualSegments.splice(idx);\n                return s;\n            }\n            idx++;\n        }\n        return redirectToUrlSegment;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplyRedirects.prototype.allowRedirects;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplyRedirects.prototype.ngModule;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplyRedirects.prototype.configLoader;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplyRedirects.prototype.urlSerializer;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplyRedirects.prototype.urlTree;\n    /**\n     * @type {?}\n     * @private\n     */\n    ApplyRedirects.prototype.config;\n}\n/**\n * @param {?} moduleInjector\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction runCanLoadGuard(moduleInjector, route, segments) {\n    /** @type {?} */\n    const canLoad = route.canLoad;\n    if (!canLoad || canLoad.length === 0)\n        return of(true);\n    /** @type {?} */\n    const obs = from(canLoad).pipe(map((/**\n     * @param {?} injectionToken\n     * @return {?}\n     */\n    (injectionToken) => {\n        /** @type {?} */\n        const guard = moduleInjector.get(injectionToken);\n        /** @type {?} */\n        let guardVal;\n        if (isCanLoad(guard)) {\n            guardVal = guard.canLoad(route, segments);\n        }\n        else if (isFunction(guard)) {\n            guardVal = guard(route, segments);\n        }\n        else {\n            throw new Error('Invalid CanLoad guard');\n        }\n        return wrapIntoObservable(guardVal);\n    })));\n    return obs.pipe(concatAll(), every((/**\n     * @param {?} result\n     * @return {?}\n     */\n    result => result === true)));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n        }\n        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n    }\n    /** @type {?} */\n    const matcher = route.matcher || defaultUrlMatcher;\n    /** @type {?} */\n    const res = matcher(segments, segmentGroup, route);\n    if (!res) {\n        return {\n            matched: false,\n            consumedSegments: (/** @type {?} */ ([])),\n            lastChild: 0,\n            positionalParamSegments: {},\n        };\n    }\n    return {\n        matched: true,\n        consumedSegments: (/** @type {?} */ (res.consumed)),\n        lastChild: (/** @type {?} */ (res.consumed.length)),\n        positionalParamSegments: (/** @type {?} */ (res.posParams)),\n    };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        const s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments };\n    }\n    return { segmentGroup, slicedSegments };\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction mergeTrivialChildren(s) {\n    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n        /** @type {?} */\n        const c = s.children[PRIMARY_OUTLET];\n        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n    }\n    return s;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n    /** @type {?} */\n    const res = {};\n    for (const r of routes) {\n        if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return Object.assign({}, children, res);\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\nfunction createChildrenForEmptySegments(routes, primarySegmentGroup) {\n    /** @type {?} */\n    const res = {};\n    res[PRIMARY_OUTLET] = primarySegmentGroup;\n    for (const r of routes) {\n        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {\n    return routes.some((/**\n     * @param {?} r\n     * @return {?}\n     */\n    r => isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirects(segmentGroup, segments, routes) {\n    return routes.some((/**\n     * @param {?} r\n     * @return {?}\n     */\n    r => isEmptyPathRedirect(segmentGroup, segments, r)));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} r\n * @return {?}\n */\nfunction isEmptyPathRedirect(segmentGroup, segments, r) {\n    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} config\n * @return {?}\n */\nfunction applyRedirects$1(moduleInjector, configLoader, urlSerializer, config) {\n    return (/**\n     * @param {?} source\n     * @return {?}\n     */\n    function (source) {\n        return source.pipe(switchMap((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => applyRedirects(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config)\n            .pipe(map((/**\n         * @param {?} urlAfterRedirects\n         * @return {?}\n         */\n        urlAfterRedirects => (Object.assign({}, t, { urlAfterRedirects }))))))));\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CanActivate {\n    /**\n     * @param {?} path\n     */\n    constructor(path) {\n        this.path = path;\n        this.route = this.path[this.path.length - 1];\n    }\n}\nif (false) {\n    /** @type {?} */\n    CanActivate.prototype.route;\n    /** @type {?} */\n    CanActivate.prototype.path;\n}\nclass CanDeactivate {\n    /**\n     * @param {?} component\n     * @param {?} route\n     */\n    constructor(component, route) {\n        this.component = component;\n        this.route = route;\n    }\n}\nif (false) {\n    /** @type {?} */\n    CanDeactivate.prototype.component;\n    /** @type {?} */\n    CanDeactivate.prototype.route;\n}\n/**\n * @param {?} future\n * @param {?} curr\n * @param {?} parentContexts\n * @return {?}\n */\nfunction getAllRouteGuards(future, curr, parentContexts) {\n    /** @type {?} */\n    const futureRoot = future._root;\n    /** @type {?} */\n    const currRoot = curr ? curr._root : null;\n    return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\n/**\n * @param {?} p\n * @return {?}\n */\nfunction getCanActivateChild(p) {\n    /** @type {?} */\n    const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n    if (!canActivateChild || canActivateChild.length === 0)\n        return null;\n    return { node: p, guards: canActivateChild };\n}\n/**\n * @param {?} token\n * @param {?} snapshot\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction getToken(token, snapshot, moduleInjector) {\n    /** @type {?} */\n    const config = getClosestLoadedConfig(snapshot);\n    /** @type {?} */\n    const injector = config ? config.module.injector : moduleInjector;\n    return injector.get(token);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction getClosestLoadedConfig(snapshot) {\n    if (!snapshot)\n        return null;\n    for (let s = snapshot.parent; s; s = s.parent) {\n        /** @type {?} */\n        const route = s.routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n    }\n    return null;\n}\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} contexts\n * @param {?} futurePath\n * @param {?=} checks\n * @return {?}\n */\nfunction getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {\n    canDeactivateChecks: [],\n    canActivateChecks: []\n}) {\n    /** @type {?} */\n    const prevChildren = nodeChildrenAsMap(currNode);\n    // Process the children of the future route\n    futureNode.children.forEach((/**\n     * @param {?} c\n     * @return {?}\n     */\n    c => {\n        getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n        delete prevChildren[c.value.outlet];\n    }));\n    // Process any children left from the current route (not active for the future route)\n    forEach(prevChildren, (/**\n     * @param {?} v\n     * @param {?} k\n     * @return {?}\n     */\n    (v, k) => deactivateRouteAndItsChildren(v, (/** @type {?} */ (contexts)).getContext(k), checks)));\n    return checks;\n}\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentContexts\n * @param {?} futurePath\n * @param {?=} checks\n * @return {?}\n */\nfunction getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {\n    canDeactivateChecks: [],\n    canActivateChecks: []\n}) {\n    /** @type {?} */\n    const future = futureNode.value;\n    /** @type {?} */\n    const curr = currNode ? currNode.value : null;\n    /** @type {?} */\n    const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n    // reusing the node\n    if (curr && future.routeConfig === curr.routeConfig) {\n        /** @type {?} */\n        const shouldRun = shouldRunGuardsAndResolvers(curr, future, (/** @type {?} */ (future.routeConfig)).runGuardsAndResolvers);\n        if (shouldRun) {\n            checks.canActivateChecks.push(new CanActivate(futurePath));\n        }\n        else {\n            // we need to set the data\n            future.data = curr.data;\n            future._resolvedData = curr._resolvedData;\n        }\n        // If we have a component, we need to go through an outlet.\n        if (future.component) {\n            getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);\n            // if we have a componentless route, we recurse but keep the same outlet map.\n        }\n        else {\n            getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n        }\n        if (shouldRun) {\n            /** @type {?} */\n            const component = context && context.outlet && context.outlet.component || null;\n            checks.canDeactivateChecks.push(new CanDeactivate(component, curr));\n        }\n    }\n    else {\n        if (curr) {\n            deactivateRouteAndItsChildren(currNode, context, checks);\n        }\n        checks.canActivateChecks.push(new CanActivate(futurePath));\n        // If we have a component, we need to go through an outlet.\n        if (future.component) {\n            getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n            // if we have a componentless route, we recurse but keep the same outlet map.\n        }\n        else {\n            getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n        }\n    }\n    return checks;\n}\n/**\n * @param {?} curr\n * @param {?} future\n * @param {?} mode\n * @return {?}\n */\nfunction shouldRunGuardsAndResolvers(curr, future, mode) {\n    if (typeof mode === 'function') {\n        return mode(curr, future);\n    }\n    switch (mode) {\n        case 'pathParamsChange':\n            return !equalPath(curr.url, future.url);\n        case 'pathParamsOrQueryParamsChange':\n            return !equalPath(curr.url, future.url) ||\n                !shallowEqual(curr.queryParams, future.queryParams);\n        case 'always':\n            return true;\n        case 'paramsOrQueryParamsChange':\n            return !equalParamsAndUrlSegments(curr, future) ||\n                !shallowEqual(curr.queryParams, future.queryParams);\n        case 'paramsChange':\n        default:\n            return !equalParamsAndUrlSegments(curr, future);\n    }\n}\n/**\n * @param {?} route\n * @param {?} context\n * @param {?} checks\n * @return {?}\n */\nfunction deactivateRouteAndItsChildren(route, context, checks) {\n    /** @type {?} */\n    const children = nodeChildrenAsMap(route);\n    /** @type {?} */\n    const r = route.value;\n    forEach(children, (/**\n     * @param {?} node\n     * @param {?} childName\n     * @return {?}\n     */\n    (node, childName) => {\n        if (!r.component) {\n            deactivateRouteAndItsChildren(node, context, checks);\n        }\n        else if (context) {\n            deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n        }\n        else {\n            deactivateRouteAndItsChildren(node, null, checks);\n        }\n    }));\n    if (!r.component) {\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n    else if (context && context.outlet && context.outlet.isActivated) {\n        checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n    }\n    else {\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst INITIAL_VALUE = Symbol('INITIAL_VALUE');\n/**\n * @return {?}\n */\nfunction prioritizedGuardValue() {\n    return switchMap((/**\n     * @param {?} obs\n     * @return {?}\n     */\n    obs => {\n        return (/** @type {?} */ (combineLatest(...obs.map((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => o.pipe(take(1), startWith((/** @type {?} */ (INITIAL_VALUE)))))))\n            .pipe(scan((/**\n         * @param {?} acc\n         * @param {?} list\n         * @return {?}\n         */\n        (acc, list) => {\n            /** @type {?} */\n            let isPending = false;\n            return list.reduce((/**\n             * @param {?} innerAcc\n             * @param {?} val\n             * @param {?} i\n             * @return {?}\n             */\n            (innerAcc, val, i) => {\n                if (innerAcc !== INITIAL_VALUE)\n                    return innerAcc;\n                // Toggle pending flag if any values haven't been set yet\n                if (val === INITIAL_VALUE)\n                    isPending = true;\n                // Any other return values are only valid if we haven't yet hit a pending call.\n                // This guarantees that in the case of a guard at the bottom of the tree that\n                // returns a redirect, we will wait for the higher priority guard at the top to\n                // finish before performing the redirect.\n                if (!isPending) {\n                    // Early return when we hit a `false` value as that should always cancel\n                    // navigation\n                    if (val === false)\n                        return val;\n                    if (i === list.length - 1 || isUrlTree(val)) {\n                        return val;\n                    }\n                }\n                return innerAcc;\n            }), acc);\n        }), INITIAL_VALUE), filter((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item !== INITIAL_VALUE)), map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => isUrlTree(item) ? item : item === true)), //\n        take(1))));\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} moduleInjector\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction checkGuards(moduleInjector, forwardEvent) {\n    return (/**\n     * @param {?} source\n     * @return {?}\n     */\n    function (source) {\n        return source.pipe(mergeMap((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => {\n            const { targetSnapshot, currentSnapshot, guards: { canActivateChecks, canDeactivateChecks } } = t;\n            if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n                return of(Object.assign({}, t, { guardsResult: true }));\n            }\n            return runCanDeactivateChecks(canDeactivateChecks, (/** @type {?} */ (targetSnapshot)), currentSnapshot, moduleInjector)\n                .pipe(mergeMap((/**\n             * @param {?} canDeactivate\n             * @return {?}\n             */\n            canDeactivate => {\n                return canDeactivate && isBoolean(canDeactivate) ?\n                    runCanActivateChecks((/** @type {?} */ (targetSnapshot)), canActivateChecks, moduleInjector, forwardEvent) :\n                    of(canDeactivate);\n            })), map((/**\n             * @param {?} guardsResult\n             * @return {?}\n             */\n            guardsResult => (Object.assign({}, t, { guardsResult })))));\n        })));\n    });\n}\n/**\n * @param {?} checks\n * @param {?} futureRSS\n * @param {?} currRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanDeactivateChecks(checks, futureRSS, currRSS, moduleInjector) {\n    return from(checks).pipe(mergeMap((/**\n     * @param {?} check\n     * @return {?}\n     */\n    check => runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector))), first((/**\n     * @param {?} result\n     * @return {?}\n     */\n    result => { return result !== true; }), (/** @type {?} */ (true))));\n}\n/**\n * @param {?} futureSnapshot\n * @param {?} checks\n * @param {?} moduleInjector\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction runCanActivateChecks(futureSnapshot, checks, moduleInjector, forwardEvent) {\n    return from(checks).pipe(concatMap((/**\n     * @param {?} check\n     * @return {?}\n     */\n    (check) => {\n        return from([\n            fireChildActivationStart(check.route.parent, forwardEvent),\n            fireActivationStart(check.route, forwardEvent),\n            runCanActivateChild(futureSnapshot, check.path, moduleInjector),\n            runCanActivate(futureSnapshot, check.route, moduleInjector)\n        ])\n            .pipe(concatAll(), first((/**\n         * @param {?} result\n         * @return {?}\n         */\n        result => {\n            return result !== true;\n        }), (/** @type {?} */ (true))));\n    })), first((/**\n     * @param {?} result\n     * @return {?}\n     */\n    result => { return result !== true; }), (/** @type {?} */ (true))));\n}\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n * @param {?} snapshot\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction fireActivationStart(snapshot, forwardEvent) {\n    if (snapshot !== null && forwardEvent) {\n        forwardEvent(new ActivationStart(snapshot));\n    }\n    return of(true);\n}\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n * @param {?} snapshot\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction fireChildActivationStart(snapshot, forwardEvent) {\n    if (snapshot !== null && forwardEvent) {\n        forwardEvent(new ChildActivationStart(snapshot));\n    }\n    return of(true);\n}\n/**\n * @param {?} futureRSS\n * @param {?} futureARS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanActivate(futureRSS, futureARS, moduleInjector) {\n    /** @type {?} */\n    const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n    if (!canActivate || canActivate.length === 0)\n        return of(true);\n    /** @type {?} */\n    const canActivateObservables = canActivate.map((/**\n     * @param {?} c\n     * @return {?}\n     */\n    (c) => {\n        return defer((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const guard = getToken(c, futureARS, moduleInjector);\n            /** @type {?} */\n            let observable;\n            if (isCanActivate(guard)) {\n                observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));\n            }\n            else if (isFunction(guard)) {\n                observable = wrapIntoObservable(guard(futureARS, futureRSS));\n            }\n            else {\n                throw new Error('Invalid CanActivate guard');\n            }\n            return observable.pipe(first());\n        }));\n    }));\n    return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\n/**\n * @param {?} futureRSS\n * @param {?} path\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanActivateChild(futureRSS, path, moduleInjector) {\n    /** @type {?} */\n    const futureARS = path[path.length - 1];\n    /** @type {?} */\n    const canActivateChildGuards = path.slice(0, path.length - 1)\n        .reverse()\n        .map((/**\n     * @param {?} p\n     * @return {?}\n     */\n    p => getCanActivateChild(p)))\n        .filter((/**\n     * @param {?} _\n     * @return {?}\n     */\n    _ => _ !== null));\n    /** @type {?} */\n    const canActivateChildGuardsMapped = canActivateChildGuards.map((/**\n     * @param {?} d\n     * @return {?}\n     */\n    (d) => {\n        return defer((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const guardsMapped = d.guards.map((/**\n             * @param {?} c\n             * @return {?}\n             */\n            (c) => {\n                /** @type {?} */\n                const guard = getToken(c, d.node, moduleInjector);\n                /** @type {?} */\n                let observable;\n                if (isCanActivateChild(guard)) {\n                    observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));\n                }\n                else if (isFunction(guard)) {\n                    observable = wrapIntoObservable(guard(futureARS, futureRSS));\n                }\n                else {\n                    throw new Error('Invalid CanActivateChild guard');\n                }\n                return observable.pipe(first());\n            }));\n            return of(guardsMapped).pipe(prioritizedGuardValue());\n        }));\n    }));\n    return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\n/**\n * @param {?} component\n * @param {?} currARS\n * @param {?} currRSS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanDeactivate(component, currARS, currRSS, futureRSS, moduleInjector) {\n    /** @type {?} */\n    const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n    if (!canDeactivate || canDeactivate.length === 0)\n        return of(true);\n    /** @type {?} */\n    const canDeactivateObservables = canDeactivate.map((/**\n     * @param {?} c\n     * @return {?}\n     */\n    (c) => {\n        /** @type {?} */\n        const guard = getToken(c, currARS, moduleInjector);\n        /** @type {?} */\n        let observable;\n        if (isCanDeactivate(guard)) {\n            observable =\n                wrapIntoObservable(guard.canDeactivate((/** @type {?} */ (component)), currARS, currRSS, futureRSS));\n        }\n        else if (isFunction(guard)) {\n            observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));\n        }\n        else {\n            throw new Error('Invalid CanDeactivate guard');\n        }\n        return observable.pipe(first());\n    }));\n    return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NoMatch$1 {\n}\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @param {?=} paramsInheritanceStrategy\n * @param {?=} relativeLinkResolution\n * @return {?}\n */\nfunction recognize(rootComponentType, config, urlTree, url, paramsInheritanceStrategy = 'emptyOnly', relativeLinkResolution = 'legacy') {\n    return new Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution)\n        .recognize();\n}\nclass Recognizer {\n    /**\n     * @param {?} rootComponentType\n     * @param {?} config\n     * @param {?} urlTree\n     * @param {?} url\n     * @param {?} paramsInheritanceStrategy\n     * @param {?} relativeLinkResolution\n     */\n    constructor(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {\n        this.rootComponentType = rootComponentType;\n        this.config = config;\n        this.urlTree = urlTree;\n        this.url = url;\n        this.paramsInheritanceStrategy = paramsInheritanceStrategy;\n        this.relativeLinkResolution = relativeLinkResolution;\n    }\n    /**\n     * @return {?}\n     */\n    recognize() {\n        try {\n            /** @type {?} */\n            const rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config, this.relativeLinkResolution).segmentGroup;\n            /** @type {?} */\n            const children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n            /** @type {?} */\n            const root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(Object.assign({}, this.urlTree.queryParams)), (/** @type {?} */ (this.urlTree.fragment)), {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n            /** @type {?} */\n            const rootNode = new TreeNode(root, children);\n            /** @type {?} */\n            const routeState = new RouterStateSnapshot(this.url, rootNode);\n            this.inheritParamsAndData(routeState._root);\n            return of(routeState);\n        }\n        catch (e) {\n            return new Observable((/**\n             * @param {?} obs\n             * @return {?}\n             */\n            (obs) => obs.error(e)));\n        }\n    }\n    /**\n     * @param {?} routeNode\n     * @return {?}\n     */\n    inheritParamsAndData(routeNode) {\n        /** @type {?} */\n        const route = routeNode.value;\n        /** @type {?} */\n        const i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\n        route.params = Object.freeze(i.params);\n        route.data = Object.freeze(i.data);\n        routeNode.children.forEach((/**\n         * @param {?} n\n         * @return {?}\n         */\n        n => this.inheritParamsAndData(n)));\n    }\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    processSegmentGroup(config, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.processChildren(config, segmentGroup);\n        }\n        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n    }\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    processChildren(config, segmentGroup) {\n        /** @type {?} */\n        const children = mapChildrenIntoArray(segmentGroup, (/**\n         * @param {?} child\n         * @param {?} childOutlet\n         * @return {?}\n         */\n        (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet)));\n        checkOutletNameUniqueness(children);\n        sortActivatedRouteSnapshots(children);\n        return children;\n    }\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    processSegment(config, segmentGroup, segments, outlet) {\n        for (const r of config) {\n            try {\n                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n            }\n            catch (e) {\n                if (!(e instanceof NoMatch$1))\n                    throw e;\n            }\n        }\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n            return [];\n        }\n        throw new NoMatch$1();\n    }\n    /**\n     * @private\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    noLeftoversInUrl(segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    }\n    /**\n     * @param {?} route\n     * @param {?} rawSegment\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    processSegmentAgainstRoute(route, rawSegment, segments, outlet) {\n        if (route.redirectTo)\n            throw new NoMatch$1();\n        if ((route.outlet || PRIMARY_OUTLET) !== outlet)\n            throw new NoMatch$1();\n        /** @type {?} */\n        let snapshot;\n        /** @type {?} */\n        let consumedSegments = [];\n        /** @type {?} */\n        let rawSlicedSegments = [];\n        if (route.path === '**') {\n            /** @type {?} */\n            const params = segments.length > 0 ? (/** @type {?} */ (last(segments))).parameters : {};\n            snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(Object.assign({}, this.urlTree.queryParams)), (/** @type {?} */ (this.urlTree.fragment)), getData(route), outlet, (/** @type {?} */ (route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n        }\n        else {\n            /** @type {?} */\n            const result = match$1(rawSegment, route, segments);\n            consumedSegments = result.consumedSegments;\n            rawSlicedSegments = segments.slice(result.lastChild);\n            snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(Object.assign({}, this.urlTree.queryParams)), (/** @type {?} */ (this.urlTree.fragment)), getData(route), outlet, (/** @type {?} */ (route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n        }\n        /** @type {?} */\n        const childConfig = getChildConfig(route);\n        const { segmentGroup, slicedSegments } = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig, this.relativeLinkResolution);\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n            /** @type {?} */\n            const children = this.processChildren(childConfig, segmentGroup);\n            return [new TreeNode(snapshot, children)];\n        }\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\n            return [new TreeNode(snapshot, [])];\n        }\n        /** @type {?} */\n        const children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n        return [new TreeNode(snapshot, children)];\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Recognizer.prototype.rootComponentType;\n    /**\n     * @type {?}\n     * @private\n     */\n    Recognizer.prototype.config;\n    /**\n     * @type {?}\n     * @private\n     */\n    Recognizer.prototype.urlTree;\n    /**\n     * @type {?}\n     * @private\n     */\n    Recognizer.prototype.url;\n    /**\n     * @type {?}\n     * @private\n     */\n    Recognizer.prototype.paramsInheritanceStrategy;\n    /**\n     * @type {?}\n     * @private\n     */\n    Recognizer.prototype.relativeLinkResolution;\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction sortActivatedRouteSnapshots(nodes) {\n    nodes.sort((/**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    (a, b) => {\n        if (a.value.outlet === PRIMARY_OUTLET)\n            return -1;\n        if (b.value.outlet === PRIMARY_OUTLET)\n            return 1;\n        return a.value.outlet.localeCompare(b.value.outlet);\n    }));\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getChildConfig(route) {\n    if (route.children) {\n        return route.children;\n    }\n    if (route.loadChildren) {\n        return (/** @type {?} */ (route._loadedConfig)).routes;\n    }\n    return [];\n}\n/**\n * @record\n */\nfunction MatchResult() { }\nif (false) {\n    /** @type {?} */\n    MatchResult.prototype.consumedSegments;\n    /** @type {?} */\n    MatchResult.prototype.lastChild;\n    /** @type {?} */\n    MatchResult.prototype.parameters;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match$1(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n            throw new NoMatch$1();\n        }\n        return { consumedSegments: [], lastChild: 0, parameters: {} };\n    }\n    /** @type {?} */\n    const matcher = route.matcher || defaultUrlMatcher;\n    /** @type {?} */\n    const res = matcher(segments, segmentGroup, route);\n    if (!res)\n        throw new NoMatch$1();\n    /** @type {?} */\n    const posParams = {};\n    forEach((/** @type {?} */ (res.posParams)), (/**\n     * @param {?} v\n     * @param {?} k\n     * @return {?}\n     */\n    (v, k) => { posParams[k] = v.path; }));\n    /** @type {?} */\n    const parameters = res.consumed.length > 0 ? Object.assign({}, posParams, res.consumed[res.consumed.length - 1].parameters) :\n        posParams;\n    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters };\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction checkOutletNameUniqueness(nodes) {\n    /** @type {?} */\n    const names = {};\n    nodes.forEach((/**\n     * @param {?} n\n     * @return {?}\n     */\n    n => {\n        /** @type {?} */\n        const routeWithSameOutletName = names[n.value.outlet];\n        if (routeWithSameOutletName) {\n            /** @type {?} */\n            const p = routeWithSameOutletName.url.map((/**\n             * @param {?} s\n             * @return {?}\n             */\n            s => s.toString())).join('/');\n            /** @type {?} */\n            const c = n.value.url.map((/**\n             * @param {?} s\n             * @return {?}\n             */\n            s => s.toString())).join('/');\n            throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n        }\n        names[n.value.outlet] = n.value;\n    }));\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getSourceSegmentGroup(segmentGroup) {\n    /** @type {?} */\n    let s = segmentGroup;\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n    }\n    return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getPathIndexShift(segmentGroup) {\n    /** @type {?} */\n    let s = segmentGroup;\n    /** @type {?} */\n    let res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    }\n    return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @param {?} relativeLinkResolution\n * @return {?}\n */\nfunction split$1(segmentGroup, consumedSegments, slicedSegments, config, relativeLinkResolution) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        s._sourceSegment = segmentGroup;\n        s._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s, slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        const s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children, relativeLinkResolution));\n        s._sourceSegment = segmentGroup;\n        s._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s, slicedSegments };\n    }\n    /** @type {?} */\n    const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return { segmentGroup: s, slicedSegments };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @param {?} relativeLinkResolution\n * @return {?}\n */\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes, children, relativeLinkResolution) {\n    /** @type {?} */\n    const res = {};\n    for (const r of routes) {\n        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {\n            /** @type {?} */\n            const s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            if (relativeLinkResolution === 'legacy') {\n                s._segmentIndexShift = segmentGroup.segments.length;\n            }\n            else {\n                s._segmentIndexShift = consumedSegments.length;\n            }\n            res[getOutlet$1(r)] = s;\n        }\n    }\n    return Object.assign({}, children, res);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\nfunction createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\n    /** @type {?} */\n    const res = {};\n    res[PRIMARY_OUTLET] = primarySegment;\n    primarySegment._sourceSegment = segmentGroup;\n    primarySegment._segmentIndexShift = consumedSegments.length;\n    for (const r of routes) {\n        if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {\n            /** @type {?} */\n            const s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            res[getOutlet$1(r)] = s;\n        }\n    }\n    return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n    return routes.some((/**\n     * @param {?} r\n     * @return {?}\n     */\n    r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n    return routes.some((/**\n     * @param {?} r\n     * @return {?}\n     */\n    r => emptyPathMatch(segmentGroup, slicedSegments, r)));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet$1(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getData(route) {\n    return route.data || {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getResolve(route) {\n    return route.resolve || {};\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} serializer\n * @param {?} paramsInheritanceStrategy\n * @param {?} relativeLinkResolution\n * @return {?}\n */\nfunction recognize$1(rootComponentType, config, serializer, paramsInheritanceStrategy, relativeLinkResolution) {\n    return (/**\n     * @param {?} source\n     * @return {?}\n     */\n    function (source) {\n        return source.pipe(mergeMap((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => recognize(rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects), paramsInheritanceStrategy, relativeLinkResolution)\n            .pipe(map((/**\n         * @param {?} targetSnapshot\n         * @return {?}\n         */\n        targetSnapshot => (Object.assign({}, t, { targetSnapshot }))))))));\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} paramsInheritanceStrategy\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction resolveData(paramsInheritanceStrategy, moduleInjector) {\n    return (/**\n     * @param {?} source\n     * @return {?}\n     */\n    function (source) {\n        return source.pipe(mergeMap((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => {\n            const { targetSnapshot, guards: { canActivateChecks } } = t;\n            if (!canActivateChecks.length) {\n                return of(t);\n            }\n            return from(canActivateChecks)\n                .pipe(concatMap((/**\n             * @param {?} check\n             * @return {?}\n             */\n            check => runResolve(check.route, (/** @type {?} */ (targetSnapshot)), paramsInheritanceStrategy, moduleInjector))), reduce((/**\n             * @param {?} _\n             * @param {?} __\n             * @return {?}\n             */\n            (_, __) => _)), map((/**\n             * @param {?} _\n             * @return {?}\n             */\n            _ => t)));\n        })));\n    });\n}\n/**\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} paramsInheritanceStrategy\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runResolve(futureARS, futureRSS, paramsInheritanceStrategy, moduleInjector) {\n    /** @type {?} */\n    const resolve = futureARS._resolve;\n    return resolveNode(resolve, futureARS, futureRSS, moduleInjector)\n        .pipe(map((/**\n     * @param {?} resolvedData\n     * @return {?}\n     */\n    (resolvedData) => {\n        futureARS._resolvedData = resolvedData;\n        futureARS.data = Object.assign({}, futureARS.data, inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve);\n        return null;\n    })));\n}\n/**\n * @param {?} resolve\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction resolveNode(resolve, futureARS, futureRSS, moduleInjector) {\n    /** @type {?} */\n    const keys = Object.keys(resolve);\n    if (keys.length === 0) {\n        return of({});\n    }\n    if (keys.length === 1) {\n        /** @type {?} */\n        const key = keys[0];\n        return getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\n            .pipe(map((/**\n         * @param {?} value\n         * @return {?}\n         */\n        (value) => { return { [key]: value }; })));\n    }\n    /** @type {?} */\n    const data = {};\n    /** @type {?} */\n    const runningResolvers$ = from(keys).pipe(mergeMap((/**\n     * @param {?} key\n     * @return {?}\n     */\n    (key) => {\n        return getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\n            .pipe(map((/**\n         * @param {?} value\n         * @return {?}\n         */\n        (value) => {\n            data[key] = value;\n            return value;\n        })));\n    })));\n    return runningResolvers$.pipe(last$1(), map((/**\n     * @return {?}\n     */\n    () => data)));\n}\n/**\n * @param {?} injectionToken\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction getResolver(injectionToken, futureARS, futureRSS, moduleInjector) {\n    /** @type {?} */\n    const resolver = getToken(injectionToken, futureARS, moduleInjector);\n    return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) :\n        wrapIntoObservable(resolver(futureARS, futureRSS));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n * @template T\n * @param {?} next\n * @return {?}\n */\nfunction switchTap(next) {\n    return (/**\n     * @param {?} source\n     * @return {?}\n     */\n    function (source) {\n        return source.pipe(switchMap((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => {\n            /** @type {?} */\n            const nextResult = next(v);\n            if (nextResult) {\n                return from(nextResult).pipe(map((/**\n                 * @return {?}\n                 */\n                () => v)));\n            }\n            return from([v]);\n        })));\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * \\@publicApi\n * @abstract\n */\nclass RouteReuseStrategy {\n}\nif (false) {\n    /**\n     * Determines if this route (and its subtree) should be detached to be reused later\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldDetach = function (route) { };\n    /**\n     * Stores the detached route.\n     *\n     * Storing a `null` value should erase the previously stored value.\n     * @abstract\n     * @param {?} route\n     * @param {?} handle\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.store = function (route, handle) { };\n    /**\n     * Determines if this route (and its subtree) should be reattached\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldAttach = function (route) { };\n    /**\n     * Retrieves the previously stored route\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.retrieve = function (route) { };\n    /**\n     * Determines if a route should be reused\n     * @abstract\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };\n}\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nclass DefaultRouteReuseStrategy {\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    shouldDetach(route) { return false; }\n    /**\n     * @param {?} route\n     * @param {?} detachedTree\n     * @return {?}\n     */\n    store(route, detachedTree) { }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    shouldAttach(route) { return false; }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    retrieve(route) { return null; }\n    /**\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    shouldReuseRoute(future, curr) {\n        return future.routeConfig === curr.routeConfig;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The [DI token](guide/glossary/#di-token) for a router configuration.\n * @see `ROUTES`\n * \\@publicApi\n * @type {?}\n */\nconst ROUTES = new InjectionToken('ROUTES');\nclass RouterConfigLoader {\n    /**\n     * @param {?} loader\n     * @param {?} compiler\n     * @param {?=} onLoadStartListener\n     * @param {?=} onLoadEndListener\n     */\n    constructor(loader, compiler, onLoadStartListener, onLoadEndListener) {\n        this.loader = loader;\n        this.compiler = compiler;\n        this.onLoadStartListener = onLoadStartListener;\n        this.onLoadEndListener = onLoadEndListener;\n    }\n    /**\n     * @param {?} parentInjector\n     * @param {?} route\n     * @return {?}\n     */\n    load(parentInjector, route) {\n        if (this.onLoadStartListener) {\n            this.onLoadStartListener(route);\n        }\n        /** @type {?} */\n        const moduleFactory$ = this.loadModuleFactory((/** @type {?} */ (route.loadChildren)));\n        return moduleFactory$.pipe(map((/**\n         * @param {?} factory\n         * @return {?}\n         */\n        (factory) => {\n            if (this.onLoadEndListener) {\n                this.onLoadEndListener(route);\n            }\n            /** @type {?} */\n            const module = factory.create(parentInjector);\n            return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)).map(standardizeConfig), module);\n        })));\n    }\n    /**\n     * @private\n     * @param {?} loadChildren\n     * @return {?}\n     */\n    loadModuleFactory(loadChildren) {\n        if (typeof loadChildren === 'string') {\n            return from(this.loader.load(loadChildren));\n        }\n        else {\n            return wrapIntoObservable(loadChildren()).pipe(mergeMap((/**\n             * @param {?} t\n             * @return {?}\n             */\n            (t) => {\n                if (t instanceof NgModuleFactory) {\n                    return of(t);\n                }\n                else {\n                    return from(this.compiler.compileModuleAsync(t));\n                }\n            })));\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterConfigLoader.prototype.loader;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterConfigLoader.prototype.compiler;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterConfigLoader.prototype.onLoadStartListener;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterConfigLoader.prototype.onLoadEndListener;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * \\@publicApi\n * @abstract\n */\nclass UrlHandlingStrategy {\n}\nif (false) {\n    /**\n     * Tells the router if this URL should be processed.\n     *\n     * When it returns true, the router will execute the regular navigation.\n     * When it returns false, the router will set the router state to an empty state.\n     * As a result, all the active components will be destroyed.\n     *\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };\n    /**\n     * Extracts the part of the URL that should be handled by the router.\n     * The rest of the URL will remain untouched.\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.extract = function (url) { };\n    /**\n     * Merges the URL fragment with the rest of the URL.\n     * @abstract\n     * @param {?} newUrlPart\n     * @param {?} rawUrl\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };\n}\n/**\n * \\@publicApi\n */\nclass DefaultUrlHandlingStrategy {\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    shouldProcessUrl(url) { return true; }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    extract(url) { return url; }\n    /**\n     * @param {?} newUrlPart\n     * @param {?} wholeUrl\n     * @return {?}\n     */\n    merge(newUrlPart, wholeUrl) { return newUrlPart; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Options that modify the navigation strategy.\n *\n * \\@publicApi\n * @record\n */\nfunction NavigationExtras() { }\nif (false) {\n    /**\n     * Specifies a root URI to use for relative navigation.\n     *\n     * For example, consider the following route configuration where the parent route\n     * has two children.\n     *\n     * ```\n     * [{\n     *   path: 'parent',\n     *   component: ParentComponent,\n     *   children: [{\n     *     path: 'list',\n     *     component: ListComponent\n     *   },{\n     *     path: 'child',\n     *     component: ChildComponent\n     *   }]\n     * }]\n     * ```\n     *\n     * The following `go()` function navigates to the `list` route by\n     * interpreting the destination URI as relative to the activated `child`  route\n     *\n     * ```\n     * \\@Component({...})\n     *  class ChildComponent {\n     *    constructor(private router: Router, private route: ActivatedRoute) {}\n     *\n     *    go() {\n     *      this.router.navigate(['../list'], { relativeTo: this.route });\n     *    }\n     *  }\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.relativeTo;\n    /**\n     * Sets query parameters to the URL.\n     *\n     * ```\n     * // Navigate to /results?page=1\n     * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.queryParams;\n    /**\n     * Sets the hash fragment for the URL.\n     *\n     * ```\n     * // Navigate to /results#top\n     * this.router.navigate(['/results'], { fragment: 'top' });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.fragment;\n    /**\n     * **DEPRECATED**: Use `queryParamsHandling: \"preserve\"` instead to preserve\n     * query parameters for the next navigation.\n     *\n     * @deprecated since v4\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.preserveQueryParams;\n    /**\n     * How to handle query parameters in the router link for the next navigation.\n     * One of:\n     * * `merge` : Merge new with current parameters.\n     * * `preserve` : Preserve current parameters.\n     *\n     * ```\n     * // from /results?page=1 to /view?page=1&page=2\n     * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.queryParamsHandling;\n    /**\n     * When true, preserves the URL fragment for the next navigation\n     *\n     * ```\n     * // Preserve fragment from /results#top to /view#top\n     * this.router.navigate(['/view'], { preserveFragment: true });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.preserveFragment;\n    /**\n     * When true, navigates without pushing a new state into history.\n     *\n     * ```\n     * // Navigate silently to /view\n     * this.router.navigate(['/view'], { skipLocationChange: true });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.skipLocationChange;\n    /**\n     * When true, navigates while replacing the current state in history.\n     *\n     * ```\n     * // Navigate to /view\n     * this.router.navigate(['/view'], { replaceUrl: true });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.replaceUrl;\n    /**\n     * Developer-defined state that can be passed to any navigation.\n     * Access this value through the `Navigation.extras` object\n     * returned from `router.getCurrentNavigation()` while a navigation is executing.\n     *\n     * After a navigation completes, the router writes an object containing this\n     * value together with a `navigationId` to `history.state`.\n     * The value is written when `location.go()` or `location.replaceState()`\n     * is called before activating this route.\n     *\n     * Note that `history.state` does not pass an object equality test because\n     * the router adds the `navigationId` on each navigation.\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.state;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction defaultErrorHandler(error) {\n    throw error;\n}\n/**\n * @param {?} error\n * @param {?} urlSerializer\n * @param {?} url\n * @return {?}\n */\nfunction defaultMalformedUriErrorHandler(error, urlSerializer, url) {\n    return urlSerializer.parse('/');\n}\n/**\n * \\@internal\n * @param {?} snapshot\n * @param {?} runExtras\n * @return {?}\n */\nfunction defaultRouterHook(snapshot, runExtras) {\n    return (/** @type {?} */ (of(null)));\n}\n/**\n * \\@description\n *\n * A service that provides navigation and URL manipulation capabilities.\n *\n * @see `Route`.\n * @see [Routing and Navigation Guide](guide/router).\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nclass Router {\n    /**\n     * Creates the router service.\n     * @param {?} rootComponentType\n     * @param {?} urlSerializer\n     * @param {?} rootContexts\n     * @param {?} location\n     * @param {?} injector\n     * @param {?} loader\n     * @param {?} compiler\n     * @param {?} config\n     */\n    // TODO: vsavkin make internal after the final is out.\n    constructor(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {\n        this.rootComponentType = rootComponentType;\n        this.urlSerializer = urlSerializer;\n        this.rootContexts = rootContexts;\n        this.location = location;\n        this.config = config;\n        this.lastSuccessfulNavigation = null;\n        this.currentNavigation = null;\n        this.navigationId = 0;\n        this.isNgZoneEnabled = false;\n        /**\n         * An event stream for routing events in this NgModule.\n         */\n        this.events = new Subject();\n        /**\n         * A handler for navigation errors in this NgModule.\n         */\n        this.errorHandler = defaultErrorHandler;\n        /**\n         * A handler for errors thrown by `Router.parseUrl(url)`\n         * when `url` contains an invalid character.\n         * The most common case is a `%` sign\n         * that's not encoded and is not part of a percent encoded sequence.\n         */\n        this.malformedUriErrorHandler = defaultMalformedUriErrorHandler;\n        /**\n         * True if at least one navigation event has occurred,\n         * false otherwise.\n         */\n        this.navigated = false;\n        this.lastSuccessfulId = -1;\n        /**\n         * Hooks that enable you to pause navigation,\n         * either before or after the preactivation phase.\n         * Used by `RouterModule`.\n         *\n         * \\@internal\n         */\n        this.hooks = {\n            beforePreactivation: defaultRouterHook,\n            afterPreactivation: defaultRouterHook\n        };\n        /**\n         * A strategy for extracting and merging URLs.\n         * Used for AngularJS to Angular migrations.\n         */\n        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\n        /**\n         * A strategy for re-using routes.\n         */\n        this.routeReuseStrategy = new DefaultRouteReuseStrategy();\n        /**\n         * How to handle a navigation request to the current URL. One of:\n         * - `'ignore'` :  The router ignores the request.\n         * - `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.\n         */\n        this.onSameUrlNavigation = 'ignore';\n        /**\n         * How to merge parameters, data, and resolved data from parent to child\n         * routes. One of:\n         *\n         * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data\n         * for path-less or component-less routes.\n         * - `'always'` : Inherit parent parameters, data, and resolved data\n         * for all child routes.\n         */\n        this.paramsInheritanceStrategy = 'emptyOnly';\n        /**\n         * Determines when the router updates the browser URL.\n         * By default (`\"deferred\"`), updates the browser URL after navigation has finished.\n         * Set to `'eager'` to update the browser URL at the beginning of navigation.\n         * You can choose to update early so that, if navigation fails,\n         * you can show an error message with the URL that failed.\n         */\n        this.urlUpdateStrategy = 'deferred';\n        /**\n         * Enables a bug fix that corrects relative link resolution in components with empty paths.\n         * @see `RouterModule`\n         */\n        this.relativeLinkResolution = 'legacy';\n        /** @type {?} */\n        const onLoadStart = (/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => this.triggerEvent(new RouteConfigLoadStart(r)));\n        /** @type {?} */\n        const onLoadEnd = (/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => this.triggerEvent(new RouteConfigLoadEnd(r)));\n        this.ngModule = injector.get(NgModuleRef);\n        this.console = injector.get(ÉµConsole);\n        /** @type {?} */\n        const ngZone = injector.get(NgZone);\n        this.isNgZoneEnabled = ngZone instanceof NgZone;\n        this.resetConfig(config);\n        this.currentUrlTree = createEmptyUrlTree();\n        this.rawUrlTree = this.currentUrlTree;\n        this.browserUrlTree = this.currentUrlTree;\n        this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n        this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n        this.transitions = new BehaviorSubject({\n            id: 0,\n            currentUrlTree: this.currentUrlTree,\n            currentRawUrl: this.currentUrlTree,\n            extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),\n            urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),\n            rawUrl: this.currentUrlTree,\n            extras: {},\n            resolve: null,\n            reject: null,\n            promise: Promise.resolve(true),\n            source: 'imperative',\n            restoredState: null,\n            currentSnapshot: this.routerState.snapshot,\n            targetSnapshot: null,\n            currentRouterState: this.routerState,\n            targetRouterState: null,\n            guards: { canActivateChecks: [], canDeactivateChecks: [] },\n            guardsResult: null,\n        });\n        this.navigations = this.setupNavigations(this.transitions);\n        this.processNavigations();\n    }\n    /**\n     * @private\n     * @param {?} transitions\n     * @return {?}\n     */\n    setupNavigations(transitions) {\n        /** @type {?} */\n        const eventsSubject = ((/** @type {?} */ (this.events)));\n        return (/** @type {?} */ ((/** @type {?} */ (transitions.pipe(filter((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => t.id !== 0)), \n        // Extract URL\n        map((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => ((/** @type {?} */ (Object.assign({}, t, { extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl) })))))), \n        // Using switchMap so we cancel executing navigations when a new one comes in\n        switchMap((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => {\n            /** @type {?} */\n            let completed = false;\n            /** @type {?} */\n            let errored = false;\n            return of(t).pipe(\n            // Store the Navigation object\n            tap((/**\n             * @param {?} t\n             * @return {?}\n             */\n            t => {\n                this.currentNavigation = {\n                    id: t.id,\n                    initialUrl: t.currentRawUrl,\n                    extractedUrl: t.extractedUrl,\n                    trigger: t.source,\n                    extras: t.extras,\n                    previousNavigation: this.lastSuccessfulNavigation ? Object.assign({}, this.lastSuccessfulNavigation, { previousNavigation: null }) :\n                        null\n                };\n            })), switchMap((/**\n             * @param {?} t\n             * @return {?}\n             */\n            t => {\n                /** @type {?} */\n                const urlTransition = !this.navigated || t.extractedUrl.toString() !== this.browserUrlTree.toString();\n                /** @type {?} */\n                const processCurrentUrl = (this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&\n                    this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);\n                if (processCurrentUrl) {\n                    return of(t).pipe(\n                    // Fire NavigationStart event\n                    switchMap((/**\n                     * @param {?} t\n                     * @return {?}\n                     */\n                    t => {\n                        /** @type {?} */\n                        const transition = this.transitions.getValue();\n                        eventsSubject.next(new NavigationStart(t.id, this.serializeUrl(t.extractedUrl), t.source, t.restoredState));\n                        if (transition !== this.transitions.getValue()) {\n                            return EMPTY;\n                        }\n                        return [t];\n                    })), \n                    // This delay is required to match old behavior that forced navigation to\n                    // always be async\n                    switchMap((/**\n                     * @param {?} t\n                     * @return {?}\n                     */\n                    t => Promise.resolve(t))), \n                    // ApplyRedirects\n                    applyRedirects$1(this.ngModule.injector, this.configLoader, this.urlSerializer, this.config), \n                    // Update the currentNavigation\n                    tap((/**\n                     * @param {?} t\n                     * @return {?}\n                     */\n                    t => {\n                        this.currentNavigation = Object.assign({}, (/** @type {?} */ (this.currentNavigation)), { finalUrl: t.urlAfterRedirects });\n                    })), \n                    // Recognize\n                    recognize$1(this.rootComponentType, this.config, (/**\n                     * @param {?} url\n                     * @return {?}\n                     */\n                    (url) => this.serializeUrl(url)), this.paramsInheritanceStrategy, this.relativeLinkResolution), \n                    // Update URL if in `eager` update mode\n                    tap((/**\n                     * @param {?} t\n                     * @return {?}\n                     */\n                    t => {\n                        if (this.urlUpdateStrategy === 'eager') {\n                            if (!t.extras.skipLocationChange) {\n                                this.setBrowserUrl(t.urlAfterRedirects, !!t.extras.replaceUrl, t.id, t.extras.state);\n                            }\n                            this.browserUrlTree = t.urlAfterRedirects;\n                        }\n                    })), \n                    // Fire RoutesRecognized\n                    tap((/**\n                     * @param {?} t\n                     * @return {?}\n                     */\n                    t => {\n                        /** @type {?} */\n                        const routesRecognized = new RoutesRecognized(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));\n                        eventsSubject.next(routesRecognized);\n                    })));\n                }\n                else {\n                    /** @type {?} */\n                    const processPreviousUrl = urlTransition && this.rawUrlTree &&\n                        this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree);\n                    /* When the current URL shouldn't be processed, but the previous one was, we\n                     * handle this \"error condition\" by navigating to the previously successful URL,\n                     * but leaving the URL intact.*/\n                    if (processPreviousUrl) {\n                        const { id, extractedUrl, source, restoredState, extras } = t;\n                        /** @type {?} */\n                        const navStart = new NavigationStart(id, this.serializeUrl(extractedUrl), source, restoredState);\n                        eventsSubject.next(navStart);\n                        /** @type {?} */\n                        const targetSnapshot = createEmptyState(extractedUrl, this.rootComponentType).snapshot;\n                        return of(Object.assign({}, t, { targetSnapshot, urlAfterRedirects: extractedUrl, extras: Object.assign({}, extras, { skipLocationChange: false, replaceUrl: false }) }));\n                    }\n                    else {\n                        /* When neither the current or previous URL can be processed, do nothing other\n                         * than update router's internal reference to the current \"settled\" URL. This\n                         * way the next navigation will be coming from the current URL in the browser.\n                         */\n                        this.rawUrlTree = t.rawUrl;\n                        this.browserUrlTree = t.urlAfterRedirects;\n                        t.resolve(null);\n                        return EMPTY;\n                    }\n                }\n            })), \n            // Before Preactivation\n            switchTap((/**\n             * @param {?} t\n             * @return {?}\n             */\n            t => {\n                const { targetSnapshot, id: navigationId, extractedUrl: appliedUrlTree, rawUrl: rawUrlTree, extras: { skipLocationChange, replaceUrl } } = t;\n                return this.hooks.beforePreactivation((/** @type {?} */ (targetSnapshot)), {\n                    navigationId,\n                    appliedUrlTree,\n                    rawUrlTree,\n                    skipLocationChange: !!skipLocationChange,\n                    replaceUrl: !!replaceUrl,\n                });\n            })), \n            // --- GUARDS ---\n            tap((/**\n             * @param {?} t\n             * @return {?}\n             */\n            t => {\n                /** @type {?} */\n                const guardsStart = new GuardsCheckStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));\n                this.triggerEvent(guardsStart);\n            })), map((/**\n             * @param {?} t\n             * @return {?}\n             */\n            t => (Object.assign({}, t, { guards: getAllRouteGuards((/** @type {?} */ (t.targetSnapshot)), t.currentSnapshot, this.rootContexts) })))), checkGuards(this.ngModule.injector, (/**\n             * @param {?} evt\n             * @return {?}\n             */\n            (evt) => this.triggerEvent(evt))), tap((/**\n             * @param {?} t\n             * @return {?}\n             */\n            t => {\n                if (isUrlTree(t.guardsResult)) {\n                    /** @type {?} */\n                    const error = navigationCancelingError(`Redirecting to \"${this.serializeUrl(t.guardsResult)}\"`);\n                    error.url = t.guardsResult;\n                    throw error;\n                }\n            })), tap((/**\n             * @param {?} t\n             * @return {?}\n             */\n            t => {\n                /** @type {?} */\n                const guardsEnd = new GuardsCheckEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)), !!t.guardsResult);\n                this.triggerEvent(guardsEnd);\n            })), filter((/**\n             * @param {?} t\n             * @return {?}\n             */\n            t => {\n                if (!t.guardsResult) {\n                    this.resetUrlToCurrentUrlTree();\n                    /** @type {?} */\n                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), '');\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                    return false;\n                }\n                return true;\n            })), \n            // --- RESOLVE ---\n            switchTap((/**\n             * @param {?} t\n             * @return {?}\n             */\n            t => {\n                if (t.guards.canActivateChecks.length) {\n                    return of(t).pipe(tap((/**\n                     * @param {?} t\n                     * @return {?}\n                     */\n                    t => {\n                        /** @type {?} */\n                        const resolveStart = new ResolveStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));\n                        this.triggerEvent(resolveStart);\n                    })), resolveData(this.paramsInheritanceStrategy, this.ngModule.injector), //\n                    tap((/**\n                     * @param {?} t\n                     * @return {?}\n                     */\n                    t => {\n                        /** @type {?} */\n                        const resolveEnd = new ResolveEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));\n                        this.triggerEvent(resolveEnd);\n                    })));\n                }\n                return undefined;\n            })), \n            // --- AFTER PREACTIVATION ---\n            switchTap((/**\n             * @param {?} t\n             * @return {?}\n             */\n            (t) => {\n                const { targetSnapshot, id: navigationId, extractedUrl: appliedUrlTree, rawUrl: rawUrlTree, extras: { skipLocationChange, replaceUrl } } = t;\n                return this.hooks.afterPreactivation((/** @type {?} */ (targetSnapshot)), {\n                    navigationId,\n                    appliedUrlTree,\n                    rawUrlTree,\n                    skipLocationChange: !!skipLocationChange,\n                    replaceUrl: !!replaceUrl,\n                });\n            })), map((/**\n             * @param {?} t\n             * @return {?}\n             */\n            (t) => {\n                /** @type {?} */\n                const targetRouterState = createRouterState(this.routeReuseStrategy, (/** @type {?} */ (t.targetSnapshot)), t.currentRouterState);\n                return (Object.assign({}, t, { targetRouterState }));\n            })), \n            /* Once here, we are about to activate syncronously. The assumption is this will\n               succeed, and user code may read from the Router service. Therefore before\n               activation, we need to update router properties storing the current URL and the\n               RouterState, as well as updated the browser URL. All this should happen *before*\n               activating. */\n            tap((/**\n             * @param {?} t\n             * @return {?}\n             */\n            (t) => {\n                this.currentUrlTree = t.urlAfterRedirects;\n                this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl);\n                ((/** @type {?} */ (this))).routerState = (/** @type {?} */ (t.targetRouterState));\n                if (this.urlUpdateStrategy === 'deferred') {\n                    if (!t.extras.skipLocationChange) {\n                        this.setBrowserUrl(this.rawUrlTree, !!t.extras.replaceUrl, t.id, t.extras.state);\n                    }\n                    this.browserUrlTree = t.urlAfterRedirects;\n                }\n            })), activateRoutes(this.rootContexts, this.routeReuseStrategy, (/**\n             * @param {?} evt\n             * @return {?}\n             */\n            (evt) => this.triggerEvent(evt))), tap({ /**\n                 * @return {?}\n                 */\n                next() { completed = true; }, /**\n                 * @return {?}\n                 */\n                complete() { completed = true; } }), finalize((/**\n             * @return {?}\n             */\n            () => {\n                /* When the navigation stream finishes either through error or success, we set the\n                 * `completed` or `errored` flag. However, there are some situations where we could\n                 * get here without either of those being set. For instance, a redirect during\n                 * NavigationStart. Therefore, this is a catch-all to make sure the NavigationCancel\n                 * event is fired when a navigation gets cancelled but not caught by other means. */\n                if (!completed && !errored) {\n                    // Must reset to current URL tree here to ensure history.state is set. On a fresh\n                    // page load, if a new navigation comes in before a successful navigation\n                    // completes, there will be nothing in history.state.navigationId. This can cause\n                    // sync problems with AngularJS sync code which looks for a value here in order\n                    // to determine whether or not to handle a given popstate event or to leave it\n                    // to the Angualr router.\n                    this.resetUrlToCurrentUrlTree();\n                    /** @type {?} */\n                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), `Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`);\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                }\n                // currentNavigation should always be reset to null here. If navigation was\n                // successful, lastSuccessfulTransition will have already been set. Therefore we\n                // can safely set currentNavigation to null here.\n                this.currentNavigation = null;\n            })), catchError((/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => {\n                errored = true;\n                /* This error type is issued during Redirect, and is handled as a cancellation\n                 * rather than an error. */\n                if (isNavigationCancelingError(e)) {\n                    /** @type {?} */\n                    const redirecting = isUrlTree(e.url);\n                    if (!redirecting) {\n                        // Set property only if we're not redirecting. If we landed on a page and\n                        // redirect to `/` route, the new navigation is going to see the `/` isn't\n                        // a change from the default currentUrlTree and won't navigate. This is\n                        // only applicable with initial navigation, so setting `navigated` only when\n                        // not redirecting resolves this scenario.\n                        this.navigated = true;\n                        this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                    }\n                    /** @type {?} */\n                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), e.message);\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                    if (redirecting) {\n                        this.navigateByUrl(e.url);\n                    }\n                    /* All other errors should reset to the router's internal URL reference to the\n                     * pre-error state. */\n                }\n                else {\n                    this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                    /** @type {?} */\n                    const navError = new NavigationError(t.id, this.serializeUrl(t.extractedUrl), e);\n                    eventsSubject.next(navError);\n                    try {\n                        t.resolve(this.errorHandler(e));\n                    }\n                    catch (ee) {\n                        t.reject(ee);\n                    }\n                }\n                return EMPTY;\n            })));\n            // TODO(jasonaden): remove cast once g3 is on updated TypeScript\n        })))))));\n    }\n    /**\n     * \\@internal\n     * TODO: this should be removed once the constructor of the router made internal\n     * @param {?} rootComponentType\n     * @return {?}\n     */\n    resetRootComponentType(rootComponentType) {\n        this.rootComponentType = rootComponentType;\n        // TODO: vsavkin router 4.0 should make the root component set to null\n        // this will simplify the lifecycle of the router.\n        this.routerState.root.component = this.rootComponentType;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getTransition() {\n        /** @type {?} */\n        const transition = this.transitions.value;\n        // This value needs to be set. Other values such as extractedUrl are set on initial navigation\n        // but the urlAfterRedirects may not get set if we aren't processing the new URL *and* not\n        // processing the previous URL.\n        transition.urlAfterRedirects = this.browserUrlTree;\n        return transition;\n    }\n    /**\n     * @private\n     * @param {?} t\n     * @return {?}\n     */\n    setTransition(t) {\n        this.transitions.next(Object.assign({}, this.getTransition(), t));\n    }\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     * @return {?}\n     */\n    initialNavigation() {\n        this.setUpLocationChangeListener();\n        if (this.navigationId === 0) {\n            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\n        }\n    }\n    /**\n     * Sets up the location change listener.\n     * @return {?}\n     */\n    setUpLocationChangeListener() {\n        // Don't need to use Zone.wrap any more, because zone.js\n        // already patch onPopState, so location change callback will\n        // run into ngZone\n        if (!this.locationSubscription) {\n            this.locationSubscription = (/** @type {?} */ (this.location.subscribe((/**\n             * @param {?} change\n             * @return {?}\n             */\n            (change) => {\n                /** @type {?} */\n                let rawUrlTree = this.parseUrl(change['url']);\n                /** @type {?} */\n                const source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n                // Navigations coming from Angular router have a navigationId state property. When this\n                // exists, restore the state.\n                /** @type {?} */\n                const state = change.state && change.state.navigationId ? change.state : null;\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => { this.scheduleNavigation(rawUrlTree, source, state, { replaceUrl: true }); }), 0);\n            }))));\n        }\n    }\n    /**\n     * The current URL.\n     * @return {?}\n     */\n    get url() { return this.serializeUrl(this.currentUrlTree); }\n    /**\n     * The current Navigation object if one exists\n     * @return {?}\n     */\n    getCurrentNavigation() { return this.currentNavigation; }\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    triggerEvent(event) { ((/** @type {?} */ (this.events))).next(event); }\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * \\@usageNotes\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     * @param {?} config The route array for the new configuration.\n     *\n     * @return {?}\n     */\n    resetConfig(config) {\n        validateConfig(config);\n        this.config = config.map(standardizeConfig);\n        this.navigated = false;\n        this.lastSuccessfulId = -1;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    ngOnDestroy() { this.dispose(); }\n    /**\n     * Disposes of the router.\n     * @return {?}\n     */\n    dispose() {\n        if (this.locationSubscription) {\n            this.locationSubscription.unsubscribe();\n            this.locationSubscription = (/** @type {?} */ (null));\n        }\n    }\n    /**\n     * Applies an array of commands to the current URL tree and creates a new URL tree.\n     *\n     * When given an activated route, applies the given commands starting from the route.\n     * Otherwise, applies the given command starting from the root.\n     *\n     * \\@usageNotes\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it,\n     * // you can do the following:\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     * @param {?} commands An array of commands to apply.\n     * @param {?=} navigationExtras Options that control the navigation strategy.\n     * @return {?} The new URL tree.\n     *\n     */\n    createUrlTree(commands, navigationExtras = {}) {\n        const { relativeTo, queryParams, fragment, preserveQueryParams, queryParamsHandling, preserveFragment } = navigationExtras;\n        if (isDevMode() && preserveQueryParams && (/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n        }\n        /** @type {?} */\n        const a = relativeTo || this.routerState.root;\n        /** @type {?} */\n        const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n        /** @type {?} */\n        let q = null;\n        if (queryParamsHandling) {\n            switch (queryParamsHandling) {\n                case 'merge':\n                    q = Object.assign({}, this.currentUrlTree.queryParams, queryParams);\n                    break;\n                case 'preserve':\n                    q = this.currentUrlTree.queryParams;\n                    break;\n                default:\n                    q = queryParams || null;\n            }\n        }\n        else {\n            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n        }\n        if (q !== null) {\n            q = this.removeEmptyProps(q);\n        }\n        return createUrlTree(a, this.currentUrlTree, commands, (/** @type {?} */ (q)), (/** @type {?} */ (f)));\n    }\n    /**\n     * Navigate based on the provided URL, which must be absolute.\n     *\n     * \\@usageNotes\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * @param {?} url An absolute URL. The function does not apply any delta to the current URL.\n     * @param {?=} extras An object containing properties that modify the navigation strategy.\n     * The function ignores any properties in the `NavigationExtras` that would change the\n     * provided URL.\n     *\n     * @return {?} A Promise that resolves to 'true' when navigation succeeds,\n     * to 'false' when navigation fails, or is rejected on error.\n     *\n     */\n    navigateByUrl(url, extras = { skipLocationChange: false }) {\n        if (isDevMode() && this.isNgZoneEnabled && !NgZone.isInAngularZone()) {\n            this.console.warn(`Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);\n        }\n        /** @type {?} */\n        const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n        /** @type {?} */\n        const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n        return this.scheduleNavigation(mergedTree, 'imperative', null, extras);\n    }\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * \\@usageNotes\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * The first parameter of `navigate()` is a delta to be applied to the current URL\n     * or the one provided in the `relativeTo` property of the second parameter (the\n     * `NavigationExtras`).\n     *\n     * In order to affect this browser's `history.state` entry, the `state`\n     * parameter can be passed. This must be an object because the router\n     * will add the `navigationId` property to this object before creating\n     * the new history item.\n     * @param {?} commands\n     * @param {?=} extras\n     * @return {?}\n     */\n    navigate(commands, extras = { skipLocationChange: false }) {\n        validateCommands(commands);\n        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n    }\n    /**\n     * Serializes a `UrlTree` into a string\n     * @param {?} url\n     * @return {?}\n     */\n    serializeUrl(url) { return this.urlSerializer.serialize(url); }\n    /**\n     * Parses a string into a `UrlTree`\n     * @param {?} url\n     * @return {?}\n     */\n    parseUrl(url) {\n        /** @type {?} */\n        let urlTree;\n        try {\n            urlTree = this.urlSerializer.parse(url);\n        }\n        catch (e) {\n            urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);\n        }\n        return urlTree;\n    }\n    /**\n     * Returns whether the url is activated\n     * @param {?} url\n     * @param {?} exact\n     * @return {?}\n     */\n    isActive(url, exact) {\n        if (isUrlTree(url)) {\n            return containsTree(this.currentUrlTree, url, exact);\n        }\n        /** @type {?} */\n        const urlTree = this.parseUrl(url);\n        return containsTree(this.currentUrlTree, urlTree, exact);\n    }\n    /**\n     * @private\n     * @param {?} params\n     * @return {?}\n     */\n    removeEmptyProps(params) {\n        return Object.keys(params).reduce((/**\n         * @param {?} result\n         * @param {?} key\n         * @return {?}\n         */\n        (result, key) => {\n            /** @type {?} */\n            const value = params[key];\n            if (value !== null && value !== undefined) {\n                result[key] = value;\n            }\n            return result;\n        }), {});\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    processNavigations() {\n        this.navigations.subscribe((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => {\n            this.navigated = true;\n            this.lastSuccessfulId = t.id;\n            ((/** @type {?} */ (this.events)))\n                .next(new NavigationEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree)));\n            this.lastSuccessfulNavigation = this.currentNavigation;\n            this.currentNavigation = null;\n            t.resolve(true);\n        }), (/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => { this.console.warn(`Unhandled Navigation Error: `); }));\n    }\n    /**\n     * @private\n     * @param {?} rawUrl\n     * @param {?} source\n     * @param {?} restoredState\n     * @param {?} extras\n     * @return {?}\n     */\n    scheduleNavigation(rawUrl, source, restoredState, extras) {\n        /** @type {?} */\n        const lastNavigation = this.getTransition();\n        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n        // and that navigation results in 'replaceState' that leads to the same URL,\n        // we should skip those.\n        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker. Handles the case when a popstate was emitted first.\n        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker. Handles the case when a hashchange was emitted first.\n        if (lastNavigation && source == 'popstate' && lastNavigation.source === 'hashchange' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        /** @type {?} */\n        let resolve = null;\n        /** @type {?} */\n        let reject = null;\n        /** @type {?} */\n        const promise = new Promise((/**\n         * @param {?} res\n         * @param {?} rej\n         * @return {?}\n         */\n        (res, rej) => {\n            resolve = res;\n            reject = rej;\n        }));\n        /** @type {?} */\n        const id = ++this.navigationId;\n        this.setTransition({\n            id,\n            source,\n            restoredState,\n            currentUrlTree: this.currentUrlTree,\n            currentRawUrl: this.rawUrlTree, rawUrl, extras, resolve, reject, promise,\n            currentSnapshot: this.routerState.snapshot,\n            currentRouterState: this.routerState\n        });\n        // Make sure that the error is propagated even though `processNavigations` catch\n        // handler does not rethrow\n        return promise.catch((/**\n         * @param {?} e\n         * @return {?}\n         */\n        (e) => { return Promise.reject(e); }));\n    }\n    /**\n     * @private\n     * @param {?} url\n     * @param {?} replaceUrl\n     * @param {?} id\n     * @param {?=} state\n     * @return {?}\n     */\n    setBrowserUrl(url, replaceUrl, id, state) {\n        /** @type {?} */\n        const path = this.urlSerializer.serialize(url);\n        state = state || {};\n        if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {\n            // TODO(jasonaden): Remove first `navigationId` and rely on `ng` namespace.\n            this.location.replaceState(path, '', Object.assign({}, state, { navigationId: id }));\n        }\n        else {\n            this.location.go(path, '', Object.assign({}, state, { navigationId: id }));\n        }\n    }\n    /**\n     * @private\n     * @param {?} storedState\n     * @param {?} storedUrl\n     * @param {?} rawUrl\n     * @return {?}\n     */\n    resetStateAndUrl(storedState, storedUrl, rawUrl) {\n        ((/** @type {?} */ (this))).routerState = storedState;\n        this.currentUrlTree = storedUrl;\n        this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n        this.resetUrlToCurrentUrlTree();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    resetUrlToCurrentUrlTree() {\n        this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', { navigationId: this.lastSuccessfulId });\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.currentUrlTree;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.rawUrlTree;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.browserUrlTree;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.transitions;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.navigations;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.lastSuccessfulNavigation;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.currentNavigation;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.locationSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.navigationId;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.configLoader;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.ngModule;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.console;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.isNgZoneEnabled;\n    /**\n     * An event stream for routing events in this NgModule.\n     * @type {?}\n     */\n    Router.prototype.events;\n    /**\n     * The current state of routing in this NgModule.\n     * @type {?}\n     */\n    Router.prototype.routerState;\n    /**\n     * A handler for navigation errors in this NgModule.\n     * @type {?}\n     */\n    Router.prototype.errorHandler;\n    /**\n     * A handler for errors thrown by `Router.parseUrl(url)`\n     * when `url` contains an invalid character.\n     * The most common case is a `%` sign\n     * that's not encoded and is not part of a percent encoded sequence.\n     * @type {?}\n     */\n    Router.prototype.malformedUriErrorHandler;\n    /**\n     * True if at least one navigation event has occurred,\n     * false otherwise.\n     * @type {?}\n     */\n    Router.prototype.navigated;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.lastSuccessfulId;\n    /**\n     * Hooks that enable you to pause navigation,\n     * either before or after the preactivation phase.\n     * Used by `RouterModule`.\n     *\n     * \\@internal\n     * @type {?}\n     */\n    Router.prototype.hooks;\n    /**\n     * A strategy for extracting and merging URLs.\n     * Used for AngularJS to Angular migrations.\n     * @type {?}\n     */\n    Router.prototype.urlHandlingStrategy;\n    /**\n     * A strategy for re-using routes.\n     * @type {?}\n     */\n    Router.prototype.routeReuseStrategy;\n    /**\n     * How to handle a navigation request to the current URL. One of:\n     * - `'ignore'` :  The router ignores the request.\n     * - `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.\n     * @type {?}\n     */\n    Router.prototype.onSameUrlNavigation;\n    /**\n     * How to merge parameters, data, and resolved data from parent to child\n     * routes. One of:\n     *\n     * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data\n     * for path-less or component-less routes.\n     * - `'always'` : Inherit parent parameters, data, and resolved data\n     * for all child routes.\n     * @type {?}\n     */\n    Router.prototype.paramsInheritanceStrategy;\n    /**\n     * Determines when the router updates the browser URL.\n     * By default (`\"deferred\"`), updates the browser URL after navigation has finished.\n     * Set to `'eager'` to update the browser URL at the beginning of navigation.\n     * You can choose to update early so that, if navigation fails,\n     * you can show an error message with the URL that failed.\n     * @type {?}\n     */\n    Router.prototype.urlUpdateStrategy;\n    /**\n     * Enables a bug fix that corrects relative link resolution in components with empty paths.\n     * @see `RouterModule`\n     * @type {?}\n     */\n    Router.prototype.relativeLinkResolution;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.rootComponentType;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.urlSerializer;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.rootContexts;\n    /**\n     * @type {?}\n     * @private\n     */\n    Router.prototype.location;\n    /** @type {?} */\n    Router.prototype.config;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction validateCommands(commands) {\n    for (let i = 0; i < commands.length; i++) {\n        /** @type {?} */\n        const cmd = commands[i];\n        if (cmd == null) {\n            throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Lets you link to specific routes in your app.\n *\n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`.\n * When linking to this `user/:name` route, you use the `RouterLink` directive.\n *\n * If the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n *\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n *\n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n *\n * You can set query params and fragment as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n *\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n *\n * You can tell the directive how to handle queryParams. Available options are:\n *  - `'merge'`: merge the queryParams into the current queryParams\n *  - `'preserve'`: preserve the current queryParams\n *  - default/`''`: use the queryParams only\n *\n * Same options for {\\@link NavigationExtras#queryParamsHandling\n * NavigationExtras#queryParamsHandling}.\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * You can provide a `state` value to be persisted to the browser's History.state\n * property (See https://developer.mozilla.org/en-US/docs/Web/API/History#Properties). It's\n * used as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * And later the value can be read from the router through `router.getCurrentNavigation`.\n * For example, to capture the `tracingId` above during the `NavigationStart` event:\n *\n * ```\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * The router link directive always treats the provided input as a delta to the current url.\n *\n * For instance, if the current url is `/user/(box//aux:team)`.\n *\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n *\n * See {\\@link Router#createUrlTree createUrlTree} for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nclass RouterLink {\n    /**\n     * @param {?} router\n     * @param {?} route\n     * @param {?} tabIndex\n     * @param {?} renderer\n     * @param {?} el\n     */\n    constructor(router, route, tabIndex, renderer, el) {\n        this.router = router;\n        this.route = route;\n        this.commands = [];\n        if (tabIndex == null) {\n            renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n        }\n    }\n    /**\n     * @param {?} commands\n     * @return {?}\n     */\n    set routerLink(commands) {\n        if (commands != null) {\n            this.commands = Array.isArray(commands) ? commands : [commands];\n        }\n        else {\n            this.commands = [];\n        }\n    }\n    /**\n     * @deprecated 4.0.0 use `queryParamsHandling` instead.\n     * @param {?} value\n     * @return {?}\n     */\n    set preserveQueryParams(value) {\n        if (isDevMode() && (/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n            console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n        }\n        this.preserve = value;\n    }\n    /**\n     * @return {?}\n     */\n    onClick() {\n        /** @type {?} */\n        const extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return true;\n    }\n    /**\n     * @return {?}\n     */\n    get urlTree() {\n        return this.router.createUrlTree(this.commands, {\n            relativeTo: this.route,\n            queryParams: this.queryParams,\n            fragment: this.fragment,\n            preserveQueryParams: attrBoolValue(this.preserve),\n            queryParamsHandling: this.queryParamsHandling,\n            preserveFragment: attrBoolValue(this.preserveFragment),\n        });\n    }\n}\nRouterLink.decorators = [\n    { type: Directive, args: [{ selector: ':not(a):not(area)[routerLink]' },] }\n];\n/** @nocollapse */\nRouterLink.ctorParameters = () => [\n    { type: Router },\n    { type: ActivatedRoute },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nRouterLink.propDecorators = {\n    queryParams: [{ type: Input }],\n    fragment: [{ type: Input }],\n    queryParamsHandling: [{ type: Input }],\n    preserveFragment: [{ type: Input }],\n    skipLocationChange: [{ type: Input }],\n    replaceUrl: [{ type: Input }],\n    state: [{ type: Input }],\n    routerLink: [{ type: Input }],\n    preserveQueryParams: [{ type: Input }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\nif (false) {\n    /** @type {?} */\n    RouterLink.prototype.queryParams;\n    /** @type {?} */\n    RouterLink.prototype.fragment;\n    /** @type {?} */\n    RouterLink.prototype.queryParamsHandling;\n    /** @type {?} */\n    RouterLink.prototype.preserveFragment;\n    /** @type {?} */\n    RouterLink.prototype.skipLocationChange;\n    /** @type {?} */\n    RouterLink.prototype.replaceUrl;\n    /** @type {?} */\n    RouterLink.prototype.state;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLink.prototype.commands;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLink.prototype.preserve;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLink.prototype.router;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLink.prototype.route;\n}\n/**\n * \\@description\n *\n * Lets you link to specific routes in your app.\n *\n * See `RouterLink` for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nclass RouterLinkWithHref {\n    /**\n     * @param {?} router\n     * @param {?} route\n     * @param {?} locationStrategy\n     */\n    constructor(router, route, locationStrategy) {\n        this.router = router;\n        this.route = route;\n        this.locationStrategy = locationStrategy;\n        this.commands = [];\n        this.subscription = router.events.subscribe((/**\n         * @param {?} s\n         * @return {?}\n         */\n        (s) => {\n            if (s instanceof NavigationEnd) {\n                this.updateTargetUrlAndHref();\n            }\n        }));\n    }\n    /**\n     * @param {?} commands\n     * @return {?}\n     */\n    set routerLink(commands) {\n        if (commands != null) {\n            this.commands = Array.isArray(commands) ? commands : [commands];\n        }\n        else {\n            this.commands = [];\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set preserveQueryParams(value) {\n        if (isDevMode() && (/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n        }\n        this.preserve = value;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) { this.updateTargetUrlAndHref(); }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this.subscription.unsubscribe(); }\n    /**\n     * @param {?} button\n     * @param {?} ctrlKey\n     * @param {?} metaKey\n     * @param {?} shiftKey\n     * @return {?}\n     */\n    onClick(button, ctrlKey, metaKey, shiftKey) {\n        if (button !== 0 || ctrlKey || metaKey || shiftKey) {\n            return true;\n        }\n        if (typeof this.target === 'string' && this.target != '_self') {\n            return true;\n        }\n        /** @type {?} */\n        const extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n            state: this.state\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    updateTargetUrlAndHref() {\n        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n    }\n    /**\n     * @return {?}\n     */\n    get urlTree() {\n        return this.router.createUrlTree(this.commands, {\n            relativeTo: this.route,\n            queryParams: this.queryParams,\n            fragment: this.fragment,\n            preserveQueryParams: attrBoolValue(this.preserve),\n            queryParamsHandling: this.queryParamsHandling,\n            preserveFragment: attrBoolValue(this.preserveFragment),\n        });\n    }\n}\nRouterLinkWithHref.decorators = [\n    { type: Directive, args: [{ selector: 'a[routerLink],area[routerLink]' },] }\n];\n/** @nocollapse */\nRouterLinkWithHref.ctorParameters = () => [\n    { type: Router },\n    { type: ActivatedRoute },\n    { type: LocationStrategy }\n];\nRouterLinkWithHref.propDecorators = {\n    target: [{ type: HostBinding, args: ['attr.target',] }, { type: Input }],\n    queryParams: [{ type: Input }],\n    fragment: [{ type: Input }],\n    queryParamsHandling: [{ type: Input }],\n    preserveFragment: [{ type: Input }],\n    skipLocationChange: [{ type: Input }],\n    replaceUrl: [{ type: Input }],\n    state: [{ type: Input }],\n    href: [{ type: HostBinding }],\n    routerLink: [{ type: Input }],\n    preserveQueryParams: [{ type: Input }],\n    onClick: [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] }]\n};\nif (false) {\n    /** @type {?} */\n    RouterLinkWithHref.prototype.target;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.queryParams;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.fragment;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.queryParamsHandling;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.preserveFragment;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.skipLocationChange;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.replaceUrl;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.state;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkWithHref.prototype.commands;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkWithHref.prototype.subscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkWithHref.prototype.preserve;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.href;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkWithHref.prototype.router;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkWithHref.prototype.route;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkWithHref.prototype.locationStrategy;\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction attrBoolValue(s) {\n    return s === '' || !!s;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *\n * \\@description\n *\n * Lets you add a CSS class to an element when the link's route becomes active.\n *\n * This directive lets you add a CSS class to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nclass RouterLinkActive {\n    /**\n     * @param {?} router\n     * @param {?} element\n     * @param {?} renderer\n     * @param {?=} link\n     * @param {?=} linkWithHref\n     */\n    constructor(router, element, renderer, link, linkWithHref) {\n        this.router = router;\n        this.element = element;\n        this.renderer = renderer;\n        this.link = link;\n        this.linkWithHref = linkWithHref;\n        this.classes = [];\n        this.isActive = false;\n        this.routerLinkActiveOptions = { exact: false };\n        this.subscription = router.events.subscribe((/**\n         * @param {?} s\n         * @return {?}\n         */\n        (s) => {\n            if (s instanceof NavigationEnd) {\n                this.update();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.links.changes.subscribe((/**\n         * @param {?} _\n         * @return {?}\n         */\n        _ => this.update()));\n        this.linksWithHrefs.changes.subscribe((/**\n         * @param {?} _\n         * @return {?}\n         */\n        _ => this.update()));\n        this.update();\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    set routerLinkActive(data) {\n        /** @type {?} */\n        const classes = Array.isArray(data) ? data : data.split(' ');\n        this.classes = classes.filter((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => !!c));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) { this.update(); }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this.subscription.unsubscribe(); }\n    /**\n     * @private\n     * @return {?}\n     */\n    update() {\n        if (!this.links || !this.linksWithHrefs || !this.router.navigated)\n            return;\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const hasActiveLinks = this.hasActiveLinks();\n            if (this.isActive !== hasActiveLinks) {\n                ((/** @type {?} */ (this))).isActive = hasActiveLinks;\n                this.classes.forEach((/**\n                 * @param {?} c\n                 * @return {?}\n                 */\n                (c) => {\n                    if (hasActiveLinks) {\n                        this.renderer.addClass(this.element.nativeElement, c);\n                    }\n                    else {\n                        this.renderer.removeClass(this.element.nativeElement, c);\n                    }\n                }));\n            }\n        }));\n    }\n    /**\n     * @private\n     * @param {?} router\n     * @return {?}\n     */\n    isLinkActive(router) {\n        return (/**\n         * @param {?} link\n         * @return {?}\n         */\n        (link) => router.isActive(link.urlTree, this.routerLinkActiveOptions.exact));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    hasActiveLinks() {\n        /** @type {?} */\n        const isActiveCheckFn = this.isLinkActive(this.router);\n        return this.link && isActiveCheckFn(this.link) ||\n            this.linkWithHref && isActiveCheckFn(this.linkWithHref) ||\n            this.links.some(isActiveCheckFn) || this.linksWithHrefs.some(isActiveCheckFn);\n    }\n}\nRouterLinkActive.decorators = [\n    { type: Directive, args: [{\n                selector: '[routerLinkActive]',\n                exportAs: 'routerLinkActive',\n            },] }\n];\n/** @nocollapse */\nRouterLinkActive.ctorParameters = () => [\n    { type: Router },\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: RouterLink, decorators: [{ type: Optional }] },\n    { type: RouterLinkWithHref, decorators: [{ type: Optional }] }\n];\nRouterLinkActive.propDecorators = {\n    links: [{ type: ContentChildren, args: [RouterLink, { descendants: true },] }],\n    linksWithHrefs: [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] }],\n    routerLinkActiveOptions: [{ type: Input }],\n    routerLinkActive: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    RouterLinkActive.prototype.links;\n    /** @type {?} */\n    RouterLinkActive.prototype.linksWithHrefs;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkActive.prototype.classes;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkActive.prototype.subscription;\n    /** @type {?} */\n    RouterLinkActive.prototype.isActive;\n    /** @type {?} */\n    RouterLinkActive.prototype.routerLinkActiveOptions;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkActive.prototype.router;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkActive.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkActive.prototype.renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkActive.prototype.link;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterLinkActive.prototype.linkWithHref;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * \\@publicApi\n */\nclass OutletContext {\n    constructor() {\n        this.outlet = null;\n        this.route = null;\n        this.resolver = null;\n        this.children = new ChildrenOutletContexts();\n        this.attachRef = null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    OutletContext.prototype.outlet;\n    /** @type {?} */\n    OutletContext.prototype.route;\n    /** @type {?} */\n    OutletContext.prototype.resolver;\n    /** @type {?} */\n    OutletContext.prototype.children;\n    /** @type {?} */\n    OutletContext.prototype.attachRef;\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * \\@publicApi\n */\nclass ChildrenOutletContexts {\n    constructor() {\n        // contexts for child outlets, by name.\n        this.contexts = new Map();\n    }\n    /**\n     * Called when a `RouterOutlet` directive is instantiated\n     * @param {?} childName\n     * @param {?} outlet\n     * @return {?}\n     */\n    onChildOutletCreated(childName, outlet) {\n        /** @type {?} */\n        const context = this.getOrCreateContext(childName);\n        context.outlet = outlet;\n        this.contexts.set(childName, context);\n    }\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     * @param {?} childName\n     * @return {?}\n     */\n    onChildOutletDestroyed(childName) {\n        /** @type {?} */\n        const context = this.getContext(childName);\n        if (context) {\n            context.outlet = null;\n        }\n    }\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     * @return {?}\n     */\n    onOutletDeactivated() {\n        /** @type {?} */\n        const contexts = this.contexts;\n        this.contexts = new Map();\n        return contexts;\n    }\n    /**\n     * @param {?} contexts\n     * @return {?}\n     */\n    onOutletReAttached(contexts) { this.contexts = contexts; }\n    /**\n     * @param {?} childName\n     * @return {?}\n     */\n    getOrCreateContext(childName) {\n        /** @type {?} */\n        let context = this.getContext(childName);\n        if (!context) {\n            context = new OutletContext();\n            this.contexts.set(childName, context);\n        }\n        return context;\n    }\n    /**\n     * @param {?} childName\n     * @return {?}\n     */\n    getContext(childName) { return this.contexts.get(childName) || null; }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ChildrenOutletContexts.prototype.contexts;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * and a deactivate event when a component is destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nclass RouterOutlet {\n    /**\n     * @param {?} parentContexts\n     * @param {?} location\n     * @param {?} resolver\n     * @param {?} name\n     * @param {?} changeDetector\n     */\n    constructor(parentContexts, location, resolver, name, changeDetector) {\n        this.parentContexts = parentContexts;\n        this.location = location;\n        this.resolver = resolver;\n        this.changeDetector = changeDetector;\n        this.activated = null;\n        this._activatedRoute = null;\n        this.activateEvents = new EventEmitter();\n        this.deactivateEvents = new EventEmitter();\n        this.name = name || PRIMARY_OUTLET;\n        parentContexts.onChildOutletCreated(this.name, this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this.parentContexts.onChildOutletDestroyed(this.name); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.activated) {\n            // If the outlet was not instantiated at the time the route got activated we need to populate\n            // the outlet when it is initialized (ie inside a NgIf)\n            /** @type {?} */\n            const context = this.parentContexts.getContext(this.name);\n            if (context && context.route) {\n                if (context.attachRef) {\n                    // `attachRef` is populated when there is an existing component to mount\n                    this.attach(context.attachRef, context.route);\n                }\n                else {\n                    // otherwise the component defined in the configuration is created\n                    this.activateWith(context.route, context.resolver || null);\n                }\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get isActivated() { return !!this.activated; }\n    /**\n     * @return {?}\n     */\n    get component() {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        return this.activated.instance;\n    }\n    /**\n     * @return {?}\n     */\n    get activatedRoute() {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        return (/** @type {?} */ (this._activatedRoute));\n    }\n    /**\n     * @return {?}\n     */\n    get activatedRouteData() {\n        if (this._activatedRoute) {\n            return this._activatedRoute.snapshot.data;\n        }\n        return {};\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     * @return {?}\n     */\n    detach() {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        this.location.detach();\n        /** @type {?} */\n        const cmp = this.activated;\n        this.activated = null;\n        this._activatedRoute = null;\n        return cmp;\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     * @param {?} ref\n     * @param {?} activatedRoute\n     * @return {?}\n     */\n    attach(ref, activatedRoute) {\n        this.activated = ref;\n        this._activatedRoute = activatedRoute;\n        this.location.insert(ref.hostView);\n    }\n    /**\n     * @return {?}\n     */\n    deactivate() {\n        if (this.activated) {\n            /** @type {?} */\n            const c = this.component;\n            this.activated.destroy();\n            this.activated = null;\n            this._activatedRoute = null;\n            this.deactivateEvents.emit(c);\n        }\n    }\n    /**\n     * @param {?} activatedRoute\n     * @param {?} resolver\n     * @return {?}\n     */\n    activateWith(activatedRoute, resolver) {\n        if (this.isActivated) {\n            throw new Error('Cannot activate an already activated outlet');\n        }\n        this._activatedRoute = activatedRoute;\n        /** @type {?} */\n        const snapshot = activatedRoute._futureSnapshot;\n        /** @type {?} */\n        const component = (/** @type {?} */ ((/** @type {?} */ (snapshot.routeConfig)).component));\n        resolver = resolver || this.resolver;\n        /** @type {?} */\n        const factory = resolver.resolveComponentFactory(component);\n        /** @type {?} */\n        const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n        /** @type {?} */\n        const injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n        this.activated = this.location.createComponent(factory, this.location.length, injector);\n        // Calling `markForCheck` to make sure we will run the change detection when the\n        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n        this.changeDetector.markForCheck();\n        this.activateEvents.emit(this.activated.instance);\n    }\n}\nRouterOutlet.decorators = [\n    { type: Directive, args: [{ selector: 'router-outlet', exportAs: 'outlet' },] }\n];\n/** @nocollapse */\nRouterOutlet.ctorParameters = () => [\n    { type: ChildrenOutletContexts },\n    { type: ViewContainerRef },\n    { type: ComponentFactoryResolver },\n    { type: String, decorators: [{ type: Attribute, args: ['name',] }] },\n    { type: ChangeDetectorRef }\n];\nRouterOutlet.propDecorators = {\n    activateEvents: [{ type: Output, args: ['activate',] }],\n    deactivateEvents: [{ type: Output, args: ['deactivate',] }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterOutlet.prototype.activated;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterOutlet.prototype._activatedRoute;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterOutlet.prototype.name;\n    /** @type {?} */\n    RouterOutlet.prototype.activateEvents;\n    /** @type {?} */\n    RouterOutlet.prototype.deactivateEvents;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterOutlet.prototype.parentContexts;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterOutlet.prototype.location;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterOutlet.prototype.resolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterOutlet.prototype.changeDetector;\n}\nclass OutletInjector {\n    /**\n     * @param {?} route\n     * @param {?} childContexts\n     * @param {?} parent\n     */\n    constructor(route, childContexts, parent) {\n        this.route = route;\n        this.childContexts = childContexts;\n        this.parent = parent;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        if (token === ActivatedRoute) {\n            return this.route;\n        }\n        if (token === ChildrenOutletContexts) {\n            return this.childContexts;\n        }\n        return this.parent.get(token, notFoundValue);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    OutletInjector.prototype.route;\n    /**\n     * @type {?}\n     * @private\n     */\n    OutletInjector.prototype.childContexts;\n    /**\n     * @type {?}\n     * @private\n     */\n    OutletInjector.prototype.parent;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Provides a preloading strategy.\n *\n * \\@publicApi\n * @abstract\n */\nclass PreloadingStrategy {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    PreloadingStrategy.prototype.preload = function (route, fn) { };\n}\n/**\n * \\@description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * \\@publicApi\n */\nclass PreloadAllModules {\n    /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    preload(route, fn) {\n        return fn().pipe(catchError((/**\n         * @return {?}\n         */\n        () => of(null))));\n    }\n}\n/**\n * \\@description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * \\@publicApi\n */\nclass NoPreloading {\n    /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    preload(route, fn) { return of(null); }\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * \\@publicApi\n */\nclass RouterPreloader {\n    /**\n     * @param {?} router\n     * @param {?} moduleLoader\n     * @param {?} compiler\n     * @param {?} injector\n     * @param {?} preloadingStrategy\n     */\n    constructor(router, moduleLoader, compiler, injector, preloadingStrategy) {\n        this.router = router;\n        this.injector = injector;\n        this.preloadingStrategy = preloadingStrategy;\n        /** @type {?} */\n        const onStartLoad = (/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => router.triggerEvent(new RouteConfigLoadStart(r)));\n        /** @type {?} */\n        const onEndLoad = (/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => router.triggerEvent(new RouteConfigLoadEnd(r)));\n        this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n    }\n    /**\n     * @return {?}\n     */\n    setUpPreloading() {\n        this.subscription =\n            this.router.events\n                .pipe(filter((/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => e instanceof NavigationEnd)), concatMap((/**\n             * @return {?}\n             */\n            () => this.preload())))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => { }));\n    }\n    /**\n     * @return {?}\n     */\n    preload() {\n        /** @type {?} */\n        const ngModule = this.injector.get(NgModuleRef);\n        return this.processRoutes(ngModule, this.router.config);\n    }\n    // TODO(jasonaden): This class relies on code external to the class to call setUpPreloading. If\n    // this hasn't been done, ngOnDestroy will fail as this.subscription will be undefined. This\n    // should be refactored.\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this.subscription.unsubscribe(); }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} routes\n     * @return {?}\n     */\n    processRoutes(ngModule, routes) {\n        /** @type {?} */\n        const res = [];\n        for (const route of routes) {\n            // we already have the config loaded, just recurse\n            if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n                /** @type {?} */\n                const childConfig = route._loadedConfig;\n                res.push(this.processRoutes(childConfig.module, childConfig.routes));\n                // no config loaded, fetch the config\n            }\n            else if (route.loadChildren && !route.canLoad) {\n                res.push(this.preloadConfig(ngModule, route));\n                // recurse into children\n            }\n            else if (route.children) {\n                res.push(this.processRoutes(ngModule, route.children));\n            }\n        }\n        return from(res).pipe(mergeAll(), map((/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => void 0)));\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} route\n     * @return {?}\n     */\n    preloadConfig(ngModule, route) {\n        return this.preloadingStrategy.preload(route, (/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const loaded$ = this.loader.load(ngModule.injector, route);\n            return loaded$.pipe(mergeMap((/**\n             * @param {?} config\n             * @return {?}\n             */\n            (config) => {\n                route._loadedConfig = config;\n                return this.processRoutes(config.module, config.routes);\n            })));\n        }));\n    }\n}\nRouterPreloader.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nRouterPreloader.ctorParameters = () => [\n    { type: Router },\n    { type: NgModuleFactoryLoader },\n    { type: Compiler },\n    { type: Injector },\n    { type: PreloadingStrategy }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterPreloader.prototype.loader;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterPreloader.prototype.subscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterPreloader.prototype.router;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterPreloader.prototype.injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterPreloader.prototype.preloadingStrategy;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass RouterScroller {\n    /**\n     * @param {?} router\n     * @param {?} viewportScroller\n     * @param {?=} options\n     */\n    constructor(router, viewportScroller, options = {}) {\n        this.router = router;\n        this.viewportScroller = viewportScroller;\n        this.options = options;\n        this.lastId = 0;\n        this.lastSource = 'imperative';\n        this.restoredId = 0;\n        this.store = {};\n        // Default both options to 'disabled'\n        options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';\n        options.anchorScrolling = options.anchorScrolling || 'disabled';\n    }\n    /**\n     * @return {?}\n     */\n    init() {\n        // we want to disable the automatic scrolling because having two places\n        // responsible for scrolling results race conditions, especially given\n        // that browser don't implement this behavior consistently\n        if (this.options.scrollPositionRestoration !== 'disabled') {\n            this.viewportScroller.setHistoryScrollRestoration('manual');\n        }\n        this.routerEventsSubscription = this.createScrollEvents();\n        this.scrollEventsSubscription = this.consumeScrollEvents();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    createScrollEvents() {\n        return this.router.events.subscribe((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => {\n            if (e instanceof NavigationStart) {\n                // store the scroll position of the current stable navigations.\n                this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n                this.lastSource = e.navigationTrigger;\n                this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n            }\n            else if (e instanceof NavigationEnd) {\n                this.lastId = e.id;\n                this.scheduleScrollEvent(e, this.router.parseUrl(e.urlAfterRedirects).fragment);\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    consumeScrollEvents() {\n        return this.router.events.subscribe((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => {\n            if (!(e instanceof Scroll))\n                return;\n            // a popstate event. The pop state event will always ignore anchor scrolling.\n            if (e.position) {\n                if (this.options.scrollPositionRestoration === 'top') {\n                    this.viewportScroller.scrollToPosition([0, 0]);\n                }\n                else if (this.options.scrollPositionRestoration === 'enabled') {\n                    this.viewportScroller.scrollToPosition(e.position);\n                }\n                // imperative navigation \"forward\"\n            }\n            else {\n                if (e.anchor && this.options.anchorScrolling === 'enabled') {\n                    this.viewportScroller.scrollToAnchor(e.anchor);\n                }\n                else if (this.options.scrollPositionRestoration !== 'disabled') {\n                    this.viewportScroller.scrollToPosition([0, 0]);\n                }\n            }\n        }));\n    }\n    /**\n     * @private\n     * @param {?} routerEvent\n     * @param {?} anchor\n     * @return {?}\n     */\n    scheduleScrollEvent(routerEvent, anchor) {\n        this.router.triggerEvent(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.routerEventsSubscription) {\n            this.routerEventsSubscription.unsubscribe();\n        }\n        if (this.scrollEventsSubscription) {\n            this.scrollEventsSubscription.unsubscribe();\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterScroller.prototype.routerEventsSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterScroller.prototype.scrollEventsSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterScroller.prototype.lastId;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterScroller.prototype.lastSource;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterScroller.prototype.restoredId;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterScroller.prototype.store;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterScroller.prototype.router;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouterScroller.prototype.viewportScroller;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterScroller.prototype.options;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The directives defined in the `RouterModule`.\n * @type {?}\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ÉµEmptyOutletComponent];\n/**\n * A [DI token](guide/glossary/#di-token) for the router service.\n *\n * \\@publicApi\n * @type {?}\n */\nconst ROUTER_CONFIGURATION = new InjectionToken('ROUTER_CONFIGURATION');\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nconst ROUTER_FORROOT_GUARD = new InjectionToken('ROUTER_FORROOT_GUARD');\nconst Éµ0 = { enableTracing: false };\n/** @type {?} */\nconst ROUTER_PROVIDERS = [\n    Location,\n    { provide: UrlSerializer, useClass: DefaultUrlSerializer },\n    {\n        provide: Router,\n        useFactory: setupRouter,\n        deps: [\n            ApplicationRef, UrlSerializer, ChildrenOutletContexts, Location, Injector,\n            NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION,\n            [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]\n        ]\n    },\n    ChildrenOutletContexts,\n    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },\n    RouterPreloader,\n    NoPreloading,\n    PreloadAllModules,\n    { provide: ROUTER_CONFIGURATION, useValue: Éµ0 },\n];\n/**\n * @return {?}\n */\nfunction routerNgProbeToken() {\n    return new NgProbeToken('Router', Router);\n}\n/**\n * \\@usageNotes\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@description\n *\n * Adds router directives and providers.\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router service solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * @see [Routing and Navigation](guide/router.html) for an\n * overview of how the router service should be used.\n *\n * \\@publicApi\n */\nclass RouterModule {\n    // Note: We are injecting the Router so it gets created eagerly...\n    /**\n     * @param {?} guard\n     * @param {?} router\n     */\n    constructor(guard, router) { }\n    /**\n     * Creates and configures a module with all the router providers and directives.\n     * Optionally sets up an application listener to perform an initial navigation.\n     *\n     * @param {?} routes An array of `Route` objects that define the navigation paths for the application.\n     * @param {?=} config An `ExtraOptions` configuration object that controls how navigation is performed.\n     * @return {?} The new router module.\n     */\n    static forRoot(routes, config) {\n        return {\n            ngModule: RouterModule,\n            providers: [\n                ROUTER_PROVIDERS,\n                provideRoutes(routes),\n                {\n                    provide: ROUTER_FORROOT_GUARD,\n                    useFactory: provideForRootGuard,\n                    deps: [[Router, new Optional(), new SkipSelf()]]\n                },\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n                {\n                    provide: LocationStrategy,\n                    useFactory: provideLocationStrategy,\n                    deps: [\n                        PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\n                    ]\n                },\n                {\n                    provide: RouterScroller,\n                    useFactory: createRouterScroller,\n                    deps: [Router, ViewportScroller, ROUTER_CONFIGURATION]\n                },\n                {\n                    provide: PreloadingStrategy,\n                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                        NoPreloading\n                },\n                { provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken },\n                provideRouterInitializer(),\n            ],\n        };\n    }\n    /**\n     * Creates a module with all the router directives and a provider registering routes.\n     * @param {?} routes\n     * @return {?}\n     */\n    static forChild(routes) {\n        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };\n    }\n}\nRouterModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: ROUTER_DIRECTIVES,\n                exports: ROUTER_DIRECTIVES,\n                entryComponents: [ÉµEmptyOutletComponent]\n            },] }\n];\n/** @nocollapse */\nRouterModule.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD,] }] },\n    { type: Router, decorators: [{ type: Optional }] }\n];\n/**\n * @param {?} router\n * @param {?} viewportScroller\n * @param {?} config\n * @return {?}\n */\nfunction createRouterScroller(router, viewportScroller, config) {\n    if (config.scrollOffset) {\n        viewportScroller.setOffset(config.scrollOffset);\n    }\n    return new RouterScroller(router, viewportScroller, config);\n}\n/**\n * @param {?} platformLocationStrategy\n * @param {?} baseHref\n * @param {?=} options\n * @return {?}\n */\nfunction provideLocationStrategy(platformLocationStrategy, baseHref, options = {}) {\n    return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n        new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n/**\n * @param {?} router\n * @return {?}\n */\nfunction provideForRootGuard(router) {\n    if (router) {\n        throw new Error(`RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n    }\n    return 'guarded';\n}\n/**\n * Registers a [DI provider](guide/glossary#provider) for a set of routes.\n * \\@usageNotes\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@publicApi\n * @param {?} routes The route configuration to provide.\n *\n * @return {?}\n */\nfunction provideRoutes(routes) {\n    return [\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },\n        { provide: ROUTES, multi: true, useValue: routes },\n    ];\n}\n/**\n * A set of configuration options for a router module, provided in the\n * `forRoot()` method.\n *\n * \\@publicApi\n * @record\n */\nfunction ExtraOptions() { }\nif (false) {\n    /**\n     * When true, log all internal navigation events to the console.\n     * Use for debugging.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.enableTracing;\n    /**\n     * When true, enable the location strategy that uses the URL fragment\n     * instead of the history API.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.useHash;\n    /**\n     * One of `enabled` or `disabled`.\n     * When set to `enabled`, the initial navigation starts before the root component is created.\n     * The bootstrap is blocked until the initial navigation is complete. This value is required for\n     * [server-side rendering](guide/universal) to work.\n     * When set to `disabled`, the initial navigation is not performed.\n     * The location listener is set up before the root component gets created.\n     * Use if there is a reason to have more control over when the router\n     * starts its initial navigation due to some complex initialization logic.\n     *\n     * Legacy values are deprecated since v4 and should not be used for new applications:\n     *\n     * * `legacy_enabled` - Default for compatibility.\n     * The initial navigation starts after the root component has been created,\n     * but the bootstrap is not blocked until the initial navigation is complete.\n     * * `legacy_disabled` - The initial navigation is not performed.\n     * The location listener is set up after the root component gets created.\n     * * `true` - same as `legacy_enabled`.\n     * * `false` - same as `legacy_disabled`.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.initialNavigation;\n    /**\n     * A custom error handler for failed navigations.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.errorHandler;\n    /**\n     * Configures a preloading strategy.\n     * One of `PreloadAllModules` or `NoPreloading` (the default).\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.preloadingStrategy;\n    /**\n     * Define what the router should do if it receives a navigation request to the current URL.\n     * Default is `ignore`, which causes the router ignores the navigation.\n     * This can disable features such as a \"refresh\" button.\n     * Use this option to configure the behavior when navigating to the\n     * current URL. Default is 'ignore'.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.onSameUrlNavigation;\n    /**\n     * Configures if the scroll position needs to be restored when navigating back.\n     *\n     * * 'disabled'- (Default) Does nothing. Scroll position is maintained on navigation.\n     * * 'top'- Sets the scroll position to x = 0, y = 0 on all navigation.\n     * * 'enabled'- Restores the previous scroll position on backward navigation, else sets the\n     * position to the anchor if one is provided, or sets the scroll position to [0, 0] (forward\n     * navigation). This option will be the default in the future.\n     *\n     * You can implement custom scroll restoration behavior by adapting the enabled behavior as\n     * in the following example.\n     *\n     * ```typescript\n     * class AppModule {\n     *   constructor(router: Router, viewportScroller: ViewportScroller) {\n     *     router.events.pipe(\n     *       filter((e: Event): e is Scroll => e instanceof Scroll)\n     *     ).subscribe(e => {\n     *       if (e.position) {\n     *         // backward navigation\n     *         viewportScroller.scrollToPosition(e.position);\n     *       } else if (e.anchor) {\n     *         // anchor navigation\n     *         viewportScroller.scrollToAnchor(e.anchor);\n     *       } else {\n     *         // forward navigation\n     *         viewportScroller.scrollToPosition([0, 0]);\n     *       }\n     *     });\n     *   }\n     * }\n     * ```\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.scrollPositionRestoration;\n    /**\n     * When set to 'enabled', scrolls to the anchor element when the URL has a fragment.\n     * Anchor scrolling is disabled by default.\n     *\n     * Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\n     * that we stored or scroll to the top.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.anchorScrolling;\n    /**\n     * Configures the scroll offset the router will use when scrolling to an element.\n     *\n     * When given a tuple with x and y position value,\n     * the router uses that offset each time it scrolls.\n     * When given a function, the router invokes the function every time\n     * it restores scroll position.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.scrollOffset;\n    /**\n     * Defines how the router merges parameters, data, and resolved data from parent to child\n     * routes. By default ('emptyOnly'), inherits parent parameters only for\n     * path-less or component-less routes.\n     * Set to 'always' to enable unconditional inheritance of parent parameters.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.paramsInheritanceStrategy;\n    /**\n     * A custom handler for malformed URI errors. The handler is invoked when `encodedURI` contains\n     * invalid character sequences.\n     * The default implementation is to redirect to the root URL, dropping\n     * any path or parameter information. The function takes three parameters:\n     *\n     * - `'URIError'` - Error thrown when parsing a bad URL.\n     * - `'UrlSerializer'` - UrlSerializer thatâs configured with the router.\n     * - `'url'` -  The malformed URL that caused the URIError\n     *\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.malformedUriErrorHandler;\n    /**\n     * Defines when the router updates the browser URL. By default ('deferred'),\n     * update after successful navigation.\n     * Set to 'eager' if prefer to update the URL at the beginning of navigation.\n     * Updating the URL early allows you to handle a failure of navigation by\n     * showing an error message with the URL that failed.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.urlUpdateStrategy;\n    /**\n     * Enables a bug fix that corrects relative link resolution in components with empty paths.\n     * Example:\n     *\n     * ```\n     * const routes = [\n     *   {\n     *     path: '',\n     *     component: ContainerComponent,\n     *     children: [\n     *       { path: 'a', component: AComponent },\n     *       { path: 'b', component: BComponent },\n     *     ]\n     *   }\n     * ];\n     * ```\n     *\n     * From the `ContainerComponent`, this will not work:\n     *\n     * `<a [routerLink]=\"['./a']\">Link to A</a>`\n     *\n     * However, this will work:\n     *\n     * `<a [routerLink]=\"['../a']\">Link to A</a>`\n     *\n     * In other words, you're required to use `../` rather than `./`. This is currently the default\n     * behavior. Setting this option to `corrected` enables the fix.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.relativeLinkResolution;\n}\n/**\n * @param {?} ref\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @param {?=} routeReuseStrategy\n * @return {?}\n */\nfunction setupRouter(ref, urlSerializer, contexts, location, injector, loader, compiler, config, opts = {}, urlHandlingStrategy, routeReuseStrategy) {\n    /** @type {?} */\n    const router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    if (routeReuseStrategy) {\n        router.routeReuseStrategy = routeReuseStrategy;\n    }\n    if (opts.errorHandler) {\n        router.errorHandler = opts.errorHandler;\n    }\n    if (opts.malformedUriErrorHandler) {\n        router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n    }\n    if (opts.enableTracing) {\n        /** @type {?} */\n        const dom = ÉµgetDOM();\n        router.events.subscribe((/**\n         * @param {?} e\n         * @return {?}\n         */\n        (e) => {\n            dom.logGroup(`Router Event: ${((/** @type {?} */ (e.constructor))).name}`);\n            dom.log(e.toString());\n            dom.log(e);\n            dom.logGroupEnd();\n        }));\n    }\n    if (opts.onSameUrlNavigation) {\n        router.onSameUrlNavigation = opts.onSameUrlNavigation;\n    }\n    if (opts.paramsInheritanceStrategy) {\n        router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n    }\n    if (opts.urlUpdateStrategy) {\n        router.urlUpdateStrategy = opts.urlUpdateStrategy;\n    }\n    if (opts.relativeLinkResolution) {\n        router.relativeLinkResolution = opts.relativeLinkResolution;\n    }\n    return router;\n}\n/**\n * @param {?} router\n * @return {?}\n */\nfunction rootRoute(router) {\n    return router.routerState.root;\n}\n/**\n * Router initialization requires two steps:\n *\n * First, we start the navigation in a `APP_INITIALIZER` to block the bootstrap if\n * a resolver or a guard executes asynchronously.\n *\n * Next, we actually run activation in a `BOOTSTRAP_LISTENER`, using the\n * `afterPreactivation` hook provided by the router.\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nclass RouterInitializer {\n    /**\n     * @param {?} injector\n     */\n    constructor(injector) {\n        this.injector = injector;\n        this.initNavigation = false;\n        this.resultOfPreactivationDone = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    appInitializer() {\n        /** @type {?} */\n        const p = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n        return p.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            let resolve = (/** @type {?} */ (null));\n            /** @type {?} */\n            const res = new Promise((/**\n             * @param {?} r\n             * @return {?}\n             */\n            r => resolve = r));\n            /** @type {?} */\n            const router = this.injector.get(Router);\n            /** @type {?} */\n            const opts = this.injector.get(ROUTER_CONFIGURATION);\n            if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'disabled') {\n                router.setUpLocationChangeListener();\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'enabled') {\n                router.hooks.afterPreactivation = (/**\n                 * @return {?}\n                 */\n                () => {\n                    // only the initial navigation should be delayed\n                    if (!this.initNavigation) {\n                        this.initNavigation = true;\n                        resolve(true);\n                        return this.resultOfPreactivationDone;\n                        // subsequent navigations should not be delayed\n                    }\n                    else {\n                        return (/** @type {?} */ (of(null)));\n                    }\n                });\n                router.initialNavigation();\n            }\n            else {\n                throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);\n            }\n            return res;\n        }));\n    }\n    /**\n     * @param {?} bootstrappedComponentRef\n     * @return {?}\n     */\n    bootstrapListener(bootstrappedComponentRef) {\n        /** @type {?} */\n        const opts = this.injector.get(ROUTER_CONFIGURATION);\n        /** @type {?} */\n        const preloader = this.injector.get(RouterPreloader);\n        /** @type {?} */\n        const routerScroller = this.injector.get(RouterScroller);\n        /** @type {?} */\n        const router = this.injector.get(Router);\n        /** @type {?} */\n        const ref = this.injector.get(ApplicationRef);\n        if (bootstrappedComponentRef !== ref.components[0]) {\n            return;\n        }\n        if (this.isLegacyEnabled(opts)) {\n            router.initialNavigation();\n        }\n        else if (this.isLegacyDisabled(opts)) {\n            router.setUpLocationChangeListener();\n        }\n        preloader.setUpPreloading();\n        routerScroller.init();\n        router.resetRootComponentType(ref.componentTypes[0]);\n        this.resultOfPreactivationDone.next((/** @type {?} */ (null)));\n        this.resultOfPreactivationDone.complete();\n    }\n    /**\n     * @private\n     * @param {?} opts\n     * @return {?}\n     */\n    isLegacyEnabled(opts) {\n        return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n            opts.initialNavigation === undefined;\n    }\n    /**\n     * @private\n     * @param {?} opts\n     * @return {?}\n     */\n    isLegacyDisabled(opts) {\n        return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n    }\n}\nRouterInitializer.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nRouterInitializer.ctorParameters = () => [\n    { type: Injector }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterInitializer.prototype.initNavigation;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterInitializer.prototype.resultOfPreactivationDone;\n    /**\n     * @type {?}\n     * @private\n     */\n    RouterInitializer.prototype.injector;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction getAppInitializer(r) {\n    return r.appInitializer.bind(r);\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction getBootstrapListener(r) {\n    return r.bootstrapListener.bind(r);\n}\n/**\n * A [DI token](guide/glossary/#di-token) for the router initializer that\n * is called after the app is bootstrapped.\n *\n * \\@publicApi\n * @type {?}\n */\nconst ROUTER_INITIALIZER = new InjectionToken('Router Initializer');\n/**\n * @return {?}\n */\nfunction provideRouterInitializer() {\n    return [\n        RouterInitializer,\n        {\n            provide: APP_INITIALIZER,\n            multi: true,\n            useFactory: getAppInitializer,\n            deps: [RouterInitializer]\n        },\n        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },\n        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\n    ];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('8.2.14');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ÉµEmptyOutletComponent as Éµangular_packages_router_router_l, ÉµEmptyOutletComponent, ROUTER_FORROOT_GUARD as Éµangular_packages_router_router_a, RouterInitializer as Éµangular_packages_router_router_h, createRouterScroller as Éµangular_packages_router_router_c, getAppInitializer as Éµangular_packages_router_router_i, getBootstrapListener as Éµangular_packages_router_router_j, provideForRootGuard as Éµangular_packages_router_router_e, provideLocationStrategy as Éµangular_packages_router_router_d, provideRouterInitializer as Éµangular_packages_router_router_k, rootRoute as Éµangular_packages_router_router_g, routerNgProbeToken as Éµangular_packages_router_router_b, setupRouter as Éµangular_packages_router_router_f, RouterScroller as Éµangular_packages_router_router_o, Tree as Éµangular_packages_router_router_m, TreeNode as Éµangular_packages_router_router_n, RouterLink, RouterLinkWithHref, RouterLinkActive, RouterOutlet, ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouterEvent, RoutesRecognized, Scroll, RouteReuseStrategy, Router, ROUTES, ROUTER_CONFIGURATION, ROUTER_INITIALIZER, RouterModule, provideRoutes, ChildrenOutletContexts, OutletContext, NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader, ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot, PRIMARY_OUTLET, convertToParamMap, UrlHandlingStrategy, DefaultUrlSerializer, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, VERSION, ROUTER_PROVIDERS as ÉµROUTER_PROVIDERS, flatten as Éµflatten };\n//# sourceMappingURL=router.js.map\n","import { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { pipe } from '../util/pipe';\nexport function reduce(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe(scan((acc, value, index) => accumulator(acc, value, index + 1)), takeLast(1))(source);\n    };\n}\n//# sourceMappingURL=reduce.js.map","export const observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map","import { Subscriber } from './Subscriber';\nexport class OuterSubscriber extends Subscriber {\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyError(error, innerSub) {\n        this.destination.error(error);\n    }\n    notifyComplete(innerSub) {\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=OuterSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport class MapOperator {\n    constructor(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    }\n}\nclass MapSubscriber extends Subscriber {\n    constructor(destination, project, thisArg) {\n        super(destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=map.js.map","import { noop } from './noop';\nexport function pipe(...fns) {\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn) => fn(prev), input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","export function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","export const subscribeToArray = (array) => (subscriber) => {\n    for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n    }\n    if (!subscriber.closed) {\n        subscriber.complete();\n    }\n};\n//# sourceMappingURL=subscribeToArray.js.map","/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ViewEncapsulation, Injectable, RendererFactory2, Inject, NgZone, InjectionToken, NgModule } from '@angular/core';\nimport { ÉµDomRendererFactory2, BrowserModule } from '@angular/platform-browser';\nimport { AnimationBuilder, sequence, AnimationFactory } from '@angular/animations';\nimport { ÉµAnimationEngine, AnimationDriver, ÉµAnimationStyleNormalizer, ÉµsupportsWebAnimations, ÉµWebAnimationsDriver, ÉµCssKeyframesDriver, ÉµWebAnimationsStyleNormalizer, ÉµNoopAnimationDriver } from '@angular/animations/browser';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BrowserAnimationBuilder extends AnimationBuilder {\n    /**\n     * @param {?} rootRenderer\n     * @param {?} doc\n     */\n    constructor(rootRenderer, doc) {\n        super();\n        this._nextAnimationId = 0;\n        /** @type {?} */\n        const typeData = (/** @type {?} */ ({\n            id: '0',\n            encapsulation: ViewEncapsulation.None,\n            styles: [],\n            data: { animation: [] }\n        }));\n        this._renderer = (/** @type {?} */ (rootRenderer.createRenderer(doc.body, typeData)));\n    }\n    /**\n     * @param {?} animation\n     * @return {?}\n     */\n    build(animation) {\n        /** @type {?} */\n        const id = this._nextAnimationId.toString();\n        this._nextAnimationId++;\n        /** @type {?} */\n        const entry = Array.isArray(animation) ? sequence(animation) : animation;\n        issueAnimationCommand(this._renderer, null, id, 'register', [entry]);\n        return new BrowserAnimationFactory(id, this._renderer);\n    }\n}\nBrowserAnimationBuilder.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserAnimationBuilder.ctorParameters = () => [\n    { type: RendererFactory2 },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    BrowserAnimationBuilder.prototype._nextAnimationId;\n    /**\n     * @type {?}\n     * @private\n     */\n    BrowserAnimationBuilder.prototype._renderer;\n}\nclass BrowserAnimationFactory extends AnimationFactory {\n    /**\n     * @param {?} _id\n     * @param {?} _renderer\n     */\n    constructor(_id, _renderer) {\n        super();\n        this._id = _id;\n        this._renderer = _renderer;\n    }\n    /**\n     * @param {?} element\n     * @param {?=} options\n     * @return {?}\n     */\n    create(element, options) {\n        return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    BrowserAnimationFactory.prototype._id;\n    /**\n     * @type {?}\n     * @private\n     */\n    BrowserAnimationFactory.prototype._renderer;\n}\nclass RendererAnimationPlayer {\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?} options\n     * @param {?} _renderer\n     */\n    constructor(id, element, options, _renderer) {\n        this.id = id;\n        this.element = element;\n        this._renderer = _renderer;\n        this.parentPlayer = null;\n        this._started = false;\n        this.totalTime = 0;\n        this._command('create', options);\n    }\n    /**\n     * @private\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    _listen(eventName, callback) {\n        return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);\n    }\n    /**\n     * @private\n     * @param {?} command\n     * @param {...?} args\n     * @return {?}\n     */\n    _command(command, ...args) {\n        return issueAnimationCommand(this._renderer, this.element, this.id, command, args);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._listen('done', fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._listen('start', fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._listen('destroy', fn); }\n    /**\n     * @return {?}\n     */\n    init() { this._command('init'); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._started; }\n    /**\n     * @return {?}\n     */\n    play() {\n        this._command('play');\n        this._started = true;\n    }\n    /**\n     * @return {?}\n     */\n    pause() { this._command('pause'); }\n    /**\n     * @return {?}\n     */\n    restart() { this._command('restart'); }\n    /**\n     * @return {?}\n     */\n    finish() { this._command('finish'); }\n    /**\n     * @return {?}\n     */\n    destroy() { this._command('destroy'); }\n    /**\n     * @return {?}\n     */\n    reset() { this._command('reset'); }\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    setPosition(p) { this._command('setPosition', p); }\n    /**\n     * @return {?}\n     */\n    getPosition() { return 0; }\n}\nif (false) {\n    /** @type {?} */\n    RendererAnimationPlayer.prototype.parentPlayer;\n    /**\n     * @type {?}\n     * @private\n     */\n    RendererAnimationPlayer.prototype._started;\n    /** @type {?} */\n    RendererAnimationPlayer.prototype.totalTime;\n    /** @type {?} */\n    RendererAnimationPlayer.prototype.id;\n    /** @type {?} */\n    RendererAnimationPlayer.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    RendererAnimationPlayer.prototype._renderer;\n}\n/**\n * @param {?} renderer\n * @param {?} element\n * @param {?} id\n * @param {?} command\n * @param {?} args\n * @return {?}\n */\nfunction issueAnimationCommand(renderer, element, id, command, args) {\n    return renderer.setProperty(element, `@@${id}:${command}`, args);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANIMATION_PREFIX = '@';\n/** @type {?} */\nconst DISABLE_ANIMATIONS_FLAG = '@.disabled';\nclass AnimationRendererFactory {\n    /**\n     * @param {?} delegate\n     * @param {?} engine\n     * @param {?} _zone\n     */\n    constructor(delegate, engine, _zone) {\n        this.delegate = delegate;\n        this.engine = engine;\n        this._zone = _zone;\n        this._currentId = 0;\n        this._microtaskId = 1;\n        this._animationCallbacksBuffer = [];\n        this._rendererCache = new Map();\n        this._cdRecurDepth = 0;\n        this.promise = Promise.resolve(0);\n        engine.onRemovalComplete = (/**\n         * @param {?} element\n         * @param {?} delegate\n         * @return {?}\n         */\n        (element, delegate) => {\n            // Note: if an component element has a leave animation, and the component\n            // a host leave animation, the view engine will call `removeChild` for the parent\n            // component renderer as well as for the child component renderer.\n            // Therefore, we need to check if we already removed the element.\n            if (delegate && delegate.parentNode(element)) {\n                delegate.removeChild(element.parentNode, element);\n            }\n        });\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} type\n     * @return {?}\n     */\n    createRenderer(hostElement, type) {\n        /** @type {?} */\n        const EMPTY_NAMESPACE_ID = '';\n        // cache the delegates to find out which cached delegate can\n        // be used by which cached renderer\n        /** @type {?} */\n        const delegate = this.delegate.createRenderer(hostElement, type);\n        if (!hostElement || !type || !type.data || !type.data['animation']) {\n            /** @type {?} */\n            let renderer = this._rendererCache.get(delegate);\n            if (!renderer) {\n                renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);\n                // only cache this result when the base renderer is used\n                this._rendererCache.set(delegate, renderer);\n            }\n            return renderer;\n        }\n        /** @type {?} */\n        const componentId = type.id;\n        /** @type {?} */\n        const namespaceId = type.id + '-' + this._currentId;\n        this._currentId++;\n        this.engine.register(namespaceId, hostElement);\n        /** @type {?} */\n        const animationTriggers = (/** @type {?} */ (type.data['animation']));\n        animationTriggers.forEach((/**\n         * @param {?} trigger\n         * @return {?}\n         */\n        trigger => this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger)));\n        return new AnimationRenderer(this, namespaceId, delegate, this.engine);\n    }\n    /**\n     * @return {?}\n     */\n    begin() {\n        this._cdRecurDepth++;\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _scheduleCountTask() {\n        // always use promise to schedule microtask instead of use Zone\n        this.promise.then((/**\n         * @return {?}\n         */\n        () => { this._microtaskId++; }));\n    }\n    /**\n     * \\@internal\n     * @param {?} count\n     * @param {?} fn\n     * @param {?} data\n     * @return {?}\n     */\n    scheduleListenerCallback(count, fn, data) {\n        if (count >= 0 && count < this._microtaskId) {\n            this._zone.run((/**\n             * @return {?}\n             */\n            () => fn(data)));\n            return;\n        }\n        if (this._animationCallbacksBuffer.length == 0) {\n            Promise.resolve(null).then((/**\n             * @return {?}\n             */\n            () => {\n                this._zone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._animationCallbacksBuffer.forEach((/**\n                     * @param {?} tuple\n                     * @return {?}\n                     */\n                    tuple => {\n                        const [fn, data] = tuple;\n                        fn(data);\n                    }));\n                    this._animationCallbacksBuffer = [];\n                }));\n            }));\n        }\n        this._animationCallbacksBuffer.push([fn, data]);\n    }\n    /**\n     * @return {?}\n     */\n    end() {\n        this._cdRecurDepth--;\n        // this is to prevent animations from running twice when an inner\n        // component does CD when a parent component instead has inserted it\n        if (this._cdRecurDepth == 0) {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._scheduleCountTask();\n                this.engine.flush(this._microtaskId);\n            }));\n        }\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() { return this.engine.whenRenderingDone(); }\n}\nAnimationRendererFactory.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nAnimationRendererFactory.ctorParameters = () => [\n    { type: RendererFactory2 },\n    { type: ÉµAnimationEngine },\n    { type: NgZone }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationRendererFactory.prototype._currentId;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationRendererFactory.prototype._microtaskId;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationRendererFactory.prototype._animationCallbacksBuffer;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationRendererFactory.prototype._rendererCache;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationRendererFactory.prototype._cdRecurDepth;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationRendererFactory.prototype.promise;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationRendererFactory.prototype.delegate;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationRendererFactory.prototype.engine;\n    /**\n     * @type {?}\n     * @private\n     */\n    AnimationRendererFactory.prototype._zone;\n}\nclass BaseAnimationRenderer {\n    /**\n     * @param {?} namespaceId\n     * @param {?} delegate\n     * @param {?} engine\n     */\n    constructor(namespaceId, delegate, engine) {\n        this.namespaceId = namespaceId;\n        this.delegate = delegate;\n        this.engine = engine;\n        this.destroyNode = this.delegate.destroyNode ? (/**\n         * @param {?} n\n         * @return {?}\n         */\n        (n) => (/** @type {?} */ (delegate.destroyNode))(n)) : null;\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this.delegate.data; }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        this.engine.destroy(this.namespaceId, this.delegate);\n        this.delegate.destroy();\n    }\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    createElement(name, namespace) {\n        return this.delegate.createElement(name, namespace);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createComment(value) { return this.delegate.createComment(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createText(value) { return this.delegate.createText(value); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) {\n        this.delegate.appendChild(parent, newChild);\n        this.engine.onInsert(this.namespaceId, newChild, parent, false);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        this.delegate.insertBefore(parent, newChild, refChild);\n        this.engine.onInsert(this.namespaceId, newChild, parent, true);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @param {?} isHostElement\n     * @return {?}\n     */\n    removeChild(parent, oldChild, isHostElement) {\n        this.engine.onRemove(this.namespaceId, oldChild, this.delegate, isHostElement);\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode, preserveContent) {\n        return this.delegate.selectRootElement(selectorOrNode, preserveContent);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) { return this.delegate.parentNode(node); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nextSibling(node) { return this.delegate.nextSibling(node); }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    setAttribute(el, name, value, namespace) {\n        this.delegate.setAttribute(el, name, value, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    removeAttribute(el, name, namespace) {\n        this.delegate.removeAttribute(el, name, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    addClass(el, name) { this.delegate.addClass(el, name); }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    removeClass(el, name) { this.delegate.removeClass(el, name); }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?=} flags\n     * @return {?}\n     */\n    setStyle(el, style, value, flags) {\n        this.delegate.setStyle(el, style, value, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?=} flags\n     * @return {?}\n     */\n    removeStyle(el, style, flags) {\n        this.delegate.removeStyle(el, style, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {\n            this.disableAnimations(el, !!value);\n        }\n        else {\n            this.delegate.setProperty(el, name, value);\n        }\n    }\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(node, value) { this.delegate.setValue(node, value); }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, eventName, callback) {\n        return this.delegate.listen(target, eventName, callback);\n    }\n    /**\n     * @protected\n     * @param {?} element\n     * @param {?} value\n     * @return {?}\n     */\n    disableAnimations(element, value) {\n        this.engine.disableAnimations(element, value);\n    }\n}\nif (false) {\n    /** @type {?} */\n    BaseAnimationRenderer.prototype.destroyNode;\n    /**\n     * @type {?}\n     * @protected\n     */\n    BaseAnimationRenderer.prototype.namespaceId;\n    /** @type {?} */\n    BaseAnimationRenderer.prototype.delegate;\n    /** @type {?} */\n    BaseAnimationRenderer.prototype.engine;\n}\nclass AnimationRenderer extends BaseAnimationRenderer {\n    /**\n     * @param {?} factory\n     * @param {?} namespaceId\n     * @param {?} delegate\n     * @param {?} engine\n     */\n    constructor(factory, namespaceId, delegate, engine) {\n        super(namespaceId, delegate, engine);\n        this.factory = factory;\n        this.namespaceId = namespaceId;\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        if (name.charAt(0) == ANIMATION_PREFIX) {\n            if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {\n                value = value === undefined ? true : !!value;\n                this.disableAnimations(el, (/** @type {?} */ (value)));\n            }\n            else {\n                this.engine.process(this.namespaceId, el, name.substr(1), value);\n            }\n        }\n        else {\n            this.delegate.setProperty(el, name, value);\n        }\n    }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, eventName, callback) {\n        if (eventName.charAt(0) == ANIMATION_PREFIX) {\n            /** @type {?} */\n            const element = resolveElementFromTarget(target);\n            /** @type {?} */\n            let name = eventName.substr(1);\n            /** @type {?} */\n            let phase = '';\n            // @listener.phase is for trigger animation callbacks\n            // @@listener is for animation builder callbacks\n            if (name.charAt(0) != ANIMATION_PREFIX) {\n                [name, phase] = parseTriggerCallbackName(name);\n            }\n            return this.engine.listen(this.namespaceId, element, name, phase, (/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                /** @type {?} */\n                const countId = ((/** @type {?} */ (event)))['_data'] || -1;\n                this.factory.scheduleListenerCallback(countId, callback, event);\n            }));\n        }\n        return this.delegate.listen(target, eventName, callback);\n    }\n}\nif (false) {\n    /** @type {?} */\n    AnimationRenderer.prototype.factory;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction resolveElementFromTarget(target) {\n    switch (target) {\n        case 'body':\n            return document.body;\n        case 'document':\n            return document;\n        case 'window':\n            return window;\n        default:\n            return target;\n    }\n}\n/**\n * @param {?} triggerName\n * @return {?}\n */\nfunction parseTriggerCallbackName(triggerName) {\n    /** @type {?} */\n    const dotIndex = triggerName.indexOf('.');\n    /** @type {?} */\n    const trigger = triggerName.substring(0, dotIndex);\n    /** @type {?} */\n    const phase = triggerName.substr(dotIndex + 1);\n    return [trigger, phase];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass InjectableAnimationEngine extends ÉµAnimationEngine {\n    /**\n     * @param {?} doc\n     * @param {?} driver\n     * @param {?} normalizer\n     */\n    constructor(doc, driver, normalizer) {\n        super(doc.body, driver, normalizer);\n    }\n}\nInjectableAnimationEngine.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nInjectableAnimationEngine.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: AnimationDriver },\n    { type: ÉµAnimationStyleNormalizer }\n];\n/**\n * @return {?}\n */\nfunction instantiateSupportedAnimationDriver() {\n    return ÉµsupportsWebAnimations() ? new ÉµWebAnimationsDriver() : new ÉµCssKeyframesDriver();\n}\n/**\n * @return {?}\n */\nfunction instantiateDefaultStyleNormalizer() {\n    return new ÉµWebAnimationsStyleNormalizer();\n}\n/**\n * @param {?} renderer\n * @param {?} engine\n * @param {?} zone\n * @return {?}\n */\nfunction instantiateRendererFactory(renderer, engine, zone) {\n    return new AnimationRendererFactory(renderer, engine, zone);\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst ANIMATION_MODULE_TYPE = new InjectionToken('AnimationModuleType');\n/** @type {?} */\nconst SHARED_ANIMATION_PROVIDERS = [\n    { provide: AnimationBuilder, useClass: BrowserAnimationBuilder },\n    { provide: ÉµAnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer },\n    { provide: ÉµAnimationEngine, useClass: InjectableAnimationEngine }, {\n        provide: RendererFactory2,\n        useFactory: instantiateRendererFactory,\n        deps: [ÉµDomRendererFactory2, ÉµAnimationEngine, NgZone]\n    }\n];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n * @type {?}\n */\nconst BROWSER_ANIMATIONS_PROVIDERS = [\n    { provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver },\n    { provide: ANIMATION_MODULE_TYPE, useValue: 'BrowserAnimations' }, ...SHARED_ANIMATION_PROVIDERS\n];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n * @type {?}\n */\nconst BROWSER_NOOP_ANIMATIONS_PROVIDERS = [\n    { provide: AnimationDriver, useClass: ÉµNoopAnimationDriver },\n    { provide: ANIMATION_MODULE_TYPE, useValue: 'NoopAnimations' }, ...SHARED_ANIMATION_PROVIDERS\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)\n * for use with animations. See [Animations](guide/animations).\n * \\@publicApi\n */\nclass BrowserAnimationsModule {\n}\nBrowserAnimationsModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [BrowserModule],\n                providers: BROWSER_ANIMATIONS_PROVIDERS,\n            },] }\n];\n/**\n * A null player that must be imported to allow disabling of animations.\n * \\@publicApi\n */\nclass NoopAnimationsModule {\n}\nNoopAnimationsModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [BrowserModule],\n                providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseAnimationRenderer as Éµangular_packages_platform_browser_animations_animations_f, BROWSER_ANIMATIONS_PROVIDERS as Éµangular_packages_platform_browser_animations_animations_d, BROWSER_NOOP_ANIMATIONS_PROVIDERS as Éµangular_packages_platform_browser_animations_animations_e, instantiateDefaultStyleNormalizer as Éµangular_packages_platform_browser_animations_animations_b, instantiateRendererFactory as Éµangular_packages_platform_browser_animations_animations_c, instantiateSupportedAnimationDriver as Éµangular_packages_platform_browser_animations_animations_a, BrowserAnimationsModule, NoopAnimationsModule, ANIMATION_MODULE_TYPE, BrowserAnimationBuilder as ÉµBrowserAnimationBuilder, BrowserAnimationFactory as ÉµBrowserAnimationFactory, AnimationRenderer as ÉµAnimationRenderer, AnimationRendererFactory as ÉµAnimationRendererFactory, InjectableAnimationEngine as ÉµInjectableAnimationEngine };\n//# sourceMappingURL=animations.js.map\n","import { Subscriber } from '../Subscriber';\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nclass FilterOperator {\n    constructor(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    }\n}\nclass FilterSubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=filter.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport const subscribeToIterable = (iterable) => (subscriber) => {\n    const iterator = iterable[Symbol_iterator]();\n    do {\n        const item = iterator.next();\n        if (item.done) {\n            subscriber.complete();\n            break;\n        }\n        subscriber.next(item.value);\n        if (subscriber.closed) {\n            break;\n        }\n    } while (true);\n    if (typeof iterator.return === 'function') {\n        subscriber.add(() => {\n            if (iterator.return) {\n                iterator.return();\n            }\n        });\n    }\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToIterable.js.map","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nvar RouterModuleNgFactory = i0.Éµcmf(i1.RouterModule, [], function (_l) { return i0.Éµmod([i0.Éµmpd(512, i0.ComponentFactoryResolver, i0.ÉµCodegenComponentFactoryResolver, [[8, [Éµangular_packages_router_router_lNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.Éµmpd(1073742336, i1.RouterModule, i1.RouterModule, [[2, i1.Éµangular_packages_router_router_a], [2, i1.Router]])]); });\nexport { RouterModuleNgFactory as RouterModuleNgFactory };\nvar styles_Éµangular_packages_router_router_l = [];\nvar RenderType_Éµangular_packages_router_router_l = i0.Éµcrt({ encapsulation: 2, styles: styles_Éµangular_packages_router_router_l, data: {} });\nexport { RenderType_Éµangular_packages_router_router_l as RenderType_Éµangular_packages_router_router_l };\nexport function View_Éµangular_packages_router_router_l_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 16777216, null, null, 1, \"router-outlet\", [], null, null, null, null, null)), i0.Éµdid(1, 212992, null, 0, i1.RouterOutlet, [i1.ChildrenOutletContexts, i0.ViewContainerRef, i0.ComponentFactoryResolver, [8, null], i0.ChangeDetectorRef], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nexport function View_Éµangular_packages_router_router_l_Host_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 1, \"ng-component\", [], null, null, null, View_Éµangular_packages_router_router_l_0, RenderType_Éµangular_packages_router_router_l)), i0.Éµdid(1, 49152, null, 0, i1.Éµangular_packages_router_router_l, [], null, null)], null, null); }\nvar Éµangular_packages_router_router_lNgFactory = i0.Éµccf(\"ng-component\", i1.Éµangular_packages_router_router_l, View_Éµangular_packages_router_router_l_Host_0, {}, {}, []);\nexport { Éµangular_packages_router_router_lNgFactory as Éµangular_packages_router_router_lNgFactory };\n","<router-outlet></router-outlet>","function UnsubscriptionErrorImpl(errors) {\n    Error.call(this);\n    this.message = errors ?\n        `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n}\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\nexport const UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport class Subscription {\n    constructor(unsubscribe) {\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    unsubscribe() {\n        let hasErrors = false;\n        let errors;\n        if (this.closed) {\n            return;\n        }\n        let { _parent, _parents, _unsubscribe, _subscriptions } = this;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        let index = -1;\n        let len = _parents ? _parents.length : 0;\n        while (_parent) {\n            _parent.remove(this);\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            try {\n                _unsubscribe.call(this);\n            }\n            catch (e) {\n                hasErrors = true;\n                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                const sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    try {\n                        sub.unsubscribe();\n                    }\n                    catch (e) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        if (e instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n                        }\n                        else {\n                            errors.push(e);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    }\n    add(teardown) {\n        let subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (!(subscription instanceof Subscription)) {\n                    const tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default: {\n                if (!teardown) {\n                    return Subscription.EMPTY;\n                }\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n            }\n        }\n        if (subscription._addParent(this)) {\n            const subscriptions = this._subscriptions;\n            if (subscriptions) {\n                subscriptions.push(subscription);\n            }\n            else {\n                this._subscriptions = [subscription];\n            }\n        }\n        return subscription;\n    }\n    remove(subscription) {\n        const subscriptions = this._subscriptions;\n        if (subscriptions) {\n            const subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    }\n    _addParent(parent) {\n        let { _parent, _parents } = this;\n        if (_parent === parent) {\n            return false;\n        }\n        else if (!_parent) {\n            this._parent = parent;\n            return true;\n        }\n        else if (!_parents) {\n            this._parents = [parent];\n            return true;\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            _parents.push(parent);\n            return true;\n        }\n        return false;\n    }\n}\nSubscription.EMPTY = (function (empty) {\n    empty.closed = true;\n    return empty;\n}(new Subscription()));\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n//# sourceMappingURL=Subscription.js.map","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from '../operators/map';\nexport function forkJoin(...sources) {\n    let resultSelector;\n    if (typeof sources[sources.length - 1] === 'function') {\n        resultSelector = sources.pop();\n    }\n    if (sources.length === 1 && isArray(sources[0])) {\n        sources = sources[0];\n    }\n    if (sources.length === 0) {\n        return EMPTY;\n    }\n    if (resultSelector) {\n        return forkJoin(sources).pipe(map(args => resultSelector(...args)));\n    }\n    return new Observable(subscriber => {\n        return new ForkJoinSubscriber(subscriber, sources);\n    });\n}\nclass ForkJoinSubscriber extends OuterSubscriber {\n    constructor(destination, sources) {\n        super(destination);\n        this.sources = sources;\n        this.completed = 0;\n        this.haveValues = 0;\n        const len = sources.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            const source = sources[i];\n            const innerSubscription = subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                this.add(innerSubscription);\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    }\n    notifyComplete(innerSub) {\n        const { destination, haveValues, values } = this;\n        const len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            destination.next(values);\n        }\n        destination.complete();\n    }\n}\n//# sourceMappingURL=forkJoin.js.map","/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken, forwardRef, Directive, Renderer2, ElementRef, Optional, Inject, Self, ÉµisPromise, ÉµisObservable, Injectable, Injector, Input, ÉµlooseIdentical, Host, isDevMode, EventEmitter, SkipSelf, Output, NgModule, Version } from '@angular/core';\nimport { ÉµgetDOM } from '@angular/platform-browser';\nimport { forkJoin, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * Defines an interface that acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface to create a custom form control directive\n * that integrates with Angular forms.\n *\n * @see DefaultValueAccessor\n *\n * \\@publicApi\n * @record\n */\nfunction ControlValueAccessor() { }\nif (false) {\n    /**\n     * \\@description\n     * Writes a new value to the element.\n     *\n     * This method is called by the forms API to write to the view when programmatic\n     * changes from model to view are requested.\n     *\n     * \\@usageNotes\n     * ### Write a value to the element\n     *\n     * The following example writes a value to the native DOM element.\n     *\n     * ```ts\n     * writeValue(value: any): void {\n     *   this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n     * }\n     * ```\n     *\n     * @param {?} obj The new value for the element\n     * @return {?}\n     */\n    ControlValueAccessor.prototype.writeValue = function (obj) { };\n    /**\n     * \\@description\n     * Registers a callback function that is called when the control's value\n     * changes in the UI.\n     *\n     * This method is called by the forms API on initialization to update the form\n     * model when values propagate from the view to the model.\n     *\n     * When implementing the `registerOnChange` method in your own value accessor,\n     * save the given function so your class calls it at the appropriate time.\n     *\n     * \\@usageNotes\n     * ### Store the change function\n     *\n     * The following example stores the provided function as an internal method.\n     *\n     * ```ts\n     * registerOnChange(fn: (_: any) => void): void {\n     *   this._onChange = fn;\n     * }\n     * ```\n     *\n     * When the value changes in the UI, call the registered\n     * function to allow the forms API to update itself:\n     *\n     * ```ts\n     * host: {\n     *    '(change)': '_onChange($event.target.value)'\n     * }\n     * ```\n     *\n     * @param {?} fn The callback function to register\n     * @return {?}\n     */\n    ControlValueAccessor.prototype.registerOnChange = function (fn) { };\n    /**\n     * \\@description\n     * Registers a callback function is called by the forms API on initialization\n     * to update the form model on blur.\n     *\n     * When implementing `registerOnTouched` in your own value accessor, save the given\n     * function so your class calls it when the control should be considered\n     * blurred or \"touched\".\n     *\n     * \\@usageNotes\n     * ### Store the callback function\n     *\n     * The following example stores the provided function as an internal method.\n     *\n     * ```ts\n     * registerOnTouched(fn: any): void {\n     *   this._onTouched = fn;\n     * }\n     * ```\n     *\n     * On blur (or equivalent), your class should call the registered function to allow\n     * the forms API to update itself:\n     *\n     * ```ts\n     * host: {\n     *    '(blur)': '_onTouched()'\n     * }\n     * ```\n     *\n     * @param {?} fn The callback function to register\n     * @return {?}\n     */\n    ControlValueAccessor.prototype.registerOnTouched = function (fn) { };\n    /**\n     * \\@description\n     * Function that is called by the forms API when the control status changes to\n     * or from 'DISABLED'. Depending on the status, it enables or disables the\n     * appropriate DOM element.\n     *\n     * \\@usageNotes\n     * The following is an example of writing the disabled property to a native DOM element:\n     *\n     * ```ts\n     * setDisabledState(isDisabled: boolean): void {\n     *   this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n     * }\n     * ```\n     *\n     * @param {?} isDisabled The disabled status to set on the element\n     * @return {?}\n     */\n    ControlValueAccessor.prototype.setDisabledState = function (isDisabled) { };\n}\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => CheckboxControlValueAccessor)),\n    multi: true,\n};\n/**\n * \\@description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * \\@usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass CheckboxControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * Sets the \"checked\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) { this.onChange = fn; }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nCheckboxControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                providers: [CHECKBOX_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nCheckboxControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nif (false) {\n    /**\n     * \\@description\n     * The registered callback function called when a change event occurs on the input element.\n     * @type {?}\n     */\n    CheckboxControlValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    CheckboxControlValueAccessor.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    CheckboxControlValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CheckboxControlValueAccessor.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => DefaultValueAccessor)),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    /** @type {?} */\n    const userAgent = ÉµgetDOM() ? ÉµgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * \\@description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * \\@publicApi\n * @type {?}\n */\nconst COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * \\@description\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass DefaultValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _compositionMode\n     */\n    constructor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        /**\n         * \\@description\n         * The registered callback function called when an input event occurs on the input element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Whether the user is creating a composition string (IME events).\n         */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        /** @type {?} */\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) { this.onChange = fn; }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _handleInput(value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _compositionStart() { this._composing = true; }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    }\n}\nDefaultValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                // TODO: vsavkin replace the above selector with the one below it once\n                // https://github.com/angular/angular/issues/3011 is implemented\n                // selector: '[ngModel],[formControl],[formControlName]',\n                host: {\n                    '(input)': '$any(this)._handleInput($event.target.value)',\n                    '(blur)': 'onTouched()',\n                    '(compositionstart)': '$any(this)._compositionStart()',\n                    '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                },\n                providers: [DEFAULT_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nDefaultValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }\n];\nif (false) {\n    /**\n     * \\@description\n     * The registered callback function called when an input event occurs on the input element.\n     * @type {?}\n     */\n    DefaultValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    DefaultValueAccessor.prototype.onTouched;\n    /**\n     * Whether the user is creating a composition string (IME events).\n     * @type {?}\n     * @private\n     */\n    DefaultValueAccessor.prototype._composing;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultValueAccessor.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultValueAccessor.prototype._compositionMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * \\@publicApi\n * @abstract\n */\nclass AbstractControlDirective {\n    /**\n     * \\@description\n     * Reports the value of the control if it is present, otherwise null.\n     * @return {?}\n     */\n    get value() { return this.control ? this.control.value : null; }\n    /**\n     * \\@description\n     * Reports whether the control is valid. A control is considered valid if no\n     * validation errors exist with the current value.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get valid() { return this.control ? this.control.valid : null; }\n    /**\n     * \\@description\n     * Reports whether the control is invalid, meaning that an error exists in the input value.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get invalid() { return this.control ? this.control.invalid : null; }\n    /**\n     * \\@description\n     * Reports whether a control is pending, meaning that that async validation is occurring and\n     * errors are not yet available for the input value. If the control is not present, null is\n     * returned.\n     * @return {?}\n     */\n    get pending() { return this.control ? this.control.pending : null; }\n    /**\n     * \\@description\n     * Reports whether the control is disabled, meaning that the control is disabled\n     * in the UI and is exempt from validation checks and excluded from aggregate\n     * values of ancestor controls. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get disabled() { return this.control ? this.control.disabled : null; }\n    /**\n     * \\@description\n     * Reports whether the control is enabled, meaning that the control is included in ancestor\n     * calculations of validity or value. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get enabled() { return this.control ? this.control.enabled : null; }\n    /**\n     * \\@description\n     * Reports the control's validation errors. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get errors() { return this.control ? this.control.errors : null; }\n    /**\n     * \\@description\n     * Reports whether the control is pristine, meaning that the user has not yet changed\n     * the value in the UI. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get pristine() { return this.control ? this.control.pristine : null; }\n    /**\n     * \\@description\n     * Reports whether the control is dirty, meaning that the user has changed\n     * the value in the UI. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get dirty() { return this.control ? this.control.dirty : null; }\n    /**\n     * \\@description\n     * Reports whether the control is touched, meaning that the user has triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get touched() { return this.control ? this.control.touched : null; }\n    /**\n     * \\@description\n     * Reports the validation status of the control. Possible values include:\n     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get status() { return this.control ? this.control.status : null; }\n    /**\n     * \\@description\n     * Reports whether the control is untouched, meaning that the user has not yet triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get untouched() { return this.control ? this.control.untouched : null; }\n    /**\n     * \\@description\n     * Returns a multicasting observable that emits a validation status whenever it is\n     * calculated for the control. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get statusChanges() {\n        return this.control ? this.control.statusChanges : null;\n    }\n    /**\n     * \\@description\n     * Returns a multicasting observable of value changes for the control that emits every time the\n     * value of the control changes in the UI or programmatically.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get valueChanges() {\n        return this.control ? this.control.valueChanges : null;\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return null; }\n    /**\n     * \\@description\n     * Resets the control with the provided value if the control is present.\n     * @param {?=} value\n     * @return {?}\n     */\n    reset(value = undefined) {\n        if (this.control)\n            this.control.reset(value);\n    }\n    /**\n     * \\@description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    }\n    /**\n     * \\@description\n     * Reports error data for the control with the given path.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    }\n}\nif (false) {\n    /**\n     * \\@description\n     * A reference to the underlying control.\n     *\n     * @abstract\n     * @return {?} the control that backs this directive. Most properties fall through to that instance.\n     */\n    AbstractControlDirective.prototype.control = function () { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * \\@publicApi\n * @abstract\n */\nclass ControlContainer extends AbstractControlDirective {\n    /**\n     * \\@description\n     * The top-level form directive for the control.\n     * @return {?}\n     */\n    get formDirective() { return null; }\n    /**\n     * \\@description\n     * The path to this group.\n     * @return {?}\n     */\n    get path() { return null; }\n}\nif (false) {\n    /**\n     * \\@description\n     * The name for the control\n     * @type {?}\n     */\n    ControlContainer.prototype.name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * \\@description\n * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * \\@publicApi\n * @abstract\n */\nclass NgControl extends AbstractControlDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * \\@description\n         * The parent form for the control.\n         *\n         * \\@internal\n         */\n        this._parent = null;\n        /**\n         * \\@description\n         * The name for the control\n         */\n        this.name = null;\n        /**\n         * \\@description\n         * The value accessor for the control\n         */\n        this.valueAccessor = null;\n        /**\n         * \\@description\n         * The uncomposed array of synchronous validators for the control\n         *\n         * \\@internal\n         */\n        this._rawValidators = [];\n        /**\n         * \\@description\n         * The uncomposed array of async validators for the control\n         *\n         * \\@internal\n         */\n        this._rawAsyncValidators = [];\n    }\n    /**\n     * \\@description\n     * The registered synchronous validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     * @return {?}\n     */\n    get validator() { return (/** @type {?} */ (unimplemented())); }\n    /**\n     * \\@description\n     * The registered async validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     * @return {?}\n     */\n    get asyncValidator() { return (/** @type {?} */ (unimplemented())); }\n}\nif (false) {\n    /**\n     * \\@description\n     * The parent form for the control.\n     *\n     * \\@internal\n     * @type {?}\n     */\n    NgControl.prototype._parent;\n    /**\n     * \\@description\n     * The name for the control\n     * @type {?}\n     */\n    NgControl.prototype.name;\n    /**\n     * \\@description\n     * The value accessor for the control\n     * @type {?}\n     */\n    NgControl.prototype.valueAccessor;\n    /**\n     * \\@description\n     * The uncomposed array of synchronous validators for the control\n     *\n     * \\@internal\n     * @type {?}\n     */\n    NgControl.prototype._rawValidators;\n    /**\n     * \\@description\n     * The uncomposed array of async validators for the control\n     *\n     * \\@internal\n     * @type {?}\n     */\n    NgControl.prototype._rawAsyncValidators;\n    /**\n     * \\@description\n     * The callback method to update the model from the view when requested\n     *\n     * @abstract\n     * @param {?} newValue The new value for the view\n     * @return {?}\n     */\n    NgControl.prototype.viewToModelUpdate = function (newValue) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) { this._cd = cd; }\n    /**\n     * @return {?}\n     */\n    get ngClassUntouched() { return this._cd.control ? this._cd.control.untouched : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassTouched() { return this._cd.control ? this._cd.control.touched : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassPristine() { return this._cd.control ? this._cd.control.pristine : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassDirty() { return this._cd.control ? this._cd.control.dirty : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassValid() { return this._cd.control ? this._cd.control.valid : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassInvalid() { return this._cd.control ? this._cd.control.invalid : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassPending() { return this._cd.control ? this._cd.control.pending : false; }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AbstractControlStatus.prototype._cd;\n}\n/** @type {?} */\nconst ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * \\@description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * \\@usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgControlStatus extends AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) { super(cd); }\n}\nNgControlStatus.decorators = [\n    { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] }\n];\n/** @nocollapse */\nNgControlStatus.ctorParameters = () => [\n    { type: NgControl, decorators: [{ type: Self }] }\n];\n/**\n * \\@description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @see `NgControlStatus`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgControlStatusGroup extends AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) { super(cd); }\n}\nNgControlStatusGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                host: ngControlStatusHost\n            },] }\n];\n/** @nocollapse */\nNgControlStatusGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Self }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\n/**\n * \\@description\n * An `InjectionToken` for registering additional synchronous validators used with `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * \\@usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * \\@description\n * An `InjectionToken` for registering additional asynchronous validators used with `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * At a high level, this regexp matches e-mail addresses of the format `local-part\\@tld`, where:\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\n *   punctuation symbols).\n * - `local-part` cannot begin or end with a period (`.`).\n * - `local-part` cannot be longer than 64 characters.\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\n *   `foo.com`.\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\n *   periods (`.`)).\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\n * - A `label` cannot be longer than 63 characters.\n * - The whole address cannot be longer than 254 characters.\n *\n * ## Implementation background\n *\n * This regexp was ported over from AngularJS (see there for git history):\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\n * It is based on the\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n * lengths of different parts of the address). The main differences from the WHATWG version are:\n *   - Disallow `local-part` to begin or end with a period (`.`).\n *   - Disallow `local-part` length to exceed 64 characters.\n *   - Disallow total address length to exceed 254 characters.\n *\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\n * @type {?}\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n/**\n * \\@description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n * \\@publicApi\n */\nclass Validators {\n    /**\n     * \\@description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} min\n     * @return {?} A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static min(min) {\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n        });\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} max\n     * @return {?} A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static max(max) {\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n        });\n    }\n    /**\n     * \\@description\n     * Validator that requires the control have a non-empty value.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} control\n     * @return {?} An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n    static required(control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} control\n     * @return {?} An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     *\n     */\n    static requiredTrue(control) {\n        return control.value === true ? null : { 'required': true };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * Tests the value using a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n     * pattern suitable for common usecases. The pattern is based on the definition of a valid email\n     * address in the [WHATWG HTML specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address)\n     * with some enhancements to incorporate more RFC rules (such as rules related to domain names and\n     * the lengths of different parts of the address).\n     *\n     * The differences from the WHATWG version include:\n     * - Disallow `local-part` (the part before the `\\@` symbol) to begin or end with a period (`.`).\n     * - Disallow `local-part` to be longer than 64 characters.\n     * - Disallow the whole address to be longer than 254 characters.\n     *\n     * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\n     * validate the value against a different pattern.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad\\@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} control\n     * @return {?} An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n    static email(control) {\n        if (isEmptyInputValue(control.value)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    }\n    /**\n     * \\@description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} minLength\n     * @return {?} A validator function that returns an error map with the\n     * `minlength` if the validation check fails, otherwise `null`.\n     *\n     */\n    static minLength(minLength) {\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const length = control.value ? control.value.length : 0;\n            return length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                null;\n        });\n    }\n    /**\n     * \\@description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} maxLength\n     * @return {?} A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static maxLength(maxLength) {\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const length = control.value ? control.value.length : 0;\n            return length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                null;\n        });\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided by default if you use the HTML5 `pattern` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} pattern A regular expression to be used as is to test the values, or a string.\n     * If a string is passed, the `^` character is prepended and the `$` character is\n     * appended to the provided string (if not already present), and the resulting regular\n     * expression is used to test the values.\n     *\n     * @return {?} A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static pattern(pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        /** @type {?} */\n        let regex;\n        /** @type {?} */\n        let regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n            if (pattern.charAt(0) !== '^')\n                regexStr += '^';\n            regexStr += pattern;\n            if (pattern.charAt(pattern.length - 1) !== '$')\n                regexStr += '$';\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        });\n    }\n    /**\n     * \\@description\n     * Validator that performs no operation.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} control\n     * @return {?}\n     */\n    static nullValidator(control) { return null; }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    static compose(validators) {\n        if (!validators)\n            return null;\n        /** @type {?} */\n        const presentValidators = (/** @type {?} */ (validators.filter(isPresent)));\n        if (presentValidators.length == 0)\n            return null;\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        });\n    }\n    /**\n     * \\@description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} validators\n     * @return {?} A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n     *\n     */\n    static composeAsync(validators) {\n        if (!validators)\n            return null;\n        /** @type {?} */\n        const presentValidators = (/** @type {?} */ (validators.filter(isPresent)));\n        if (presentValidators.length == 0)\n            return null;\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        function (control) {\n            /** @type {?} */\n            const observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return forkJoin(observables).pipe(map(_mergeErrors));\n        });\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o) {\n    return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r) {\n    /** @type {?} */\n    const obs = ÉµisPromise(r) ? from(r) : r;\n    if (!(ÉµisObservable(obs))) {\n        throw new Error(`Expected validator to return Promise or Observable.`);\n    }\n    return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control, validators) {\n    return validators.map((/**\n     * @param {?} v\n     * @return {?}\n     */\n    v => v(control)));\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map((/**\n     * @param {?} v\n     * @return {?}\n     */\n    v => v(control)));\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors) {\n    /** @type {?} */\n    const res = arrayOfErrors.reduce((/**\n     * @param {?} res\n     * @param {?} errors\n     * @return {?}\n     */\n    (res, errors) => {\n        return errors != null ? Object.assign({}, (/** @type {?} */ (res)), errors) : (/** @type {?} */ (res));\n    }), {});\n    return Object.keys(res).length === 0 ? null : res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeValidator(validator) {\n    if (((/** @type {?} */ (validator))).validate) {\n        return (/**\n         * @param {?} c\n         * @return {?}\n         */\n        (c) => ((/** @type {?} */ (validator))).validate(c));\n    }\n    else {\n        return (/** @type {?} */ (validator));\n    }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeAsyncValidator(validator) {\n    if (((/** @type {?} */ (validator))).validate) {\n        return (/**\n         * @param {?} c\n         * @return {?}\n         */\n        (c) => ((/** @type {?} */ (validator))).validate(c));\n    }\n    else {\n        return (/** @type {?} */ (validator));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => NumberValueAccessor)),\n    multi: true\n};\n/**\n * \\@description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * \\@usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NumberValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        /** @type {?} */\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (/**\n         * @param {?} value\n         * @return {?}\n         */\n        (value) => { fn(value == '' ? null : parseFloat(value)); });\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nNumberValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [NUMBER_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nNumberValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nif (false) {\n    /**\n     * \\@description\n     * The registered callback function called when a change or input event occurs on the input\n     * element.\n     * @type {?}\n     */\n    NumberValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    NumberValueAccessor.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    NumberValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    NumberValueAccessor.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => RadioControlValueAccessor)),\n    multi: true\n};\n/**\n * \\@description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nclass RadioControlRegistry {\n    constructor() {\n        this._accessors = [];\n    }\n    /**\n     * \\@description\n     * Adds a control to the internal registry. For internal use only.\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    add(control, accessor) {\n        this._accessors.push([control, accessor]);\n    }\n    /**\n     * \\@description\n     * Removes a control from the internal registry. For internal use only.\n     * @param {?} accessor\n     * @return {?}\n     */\n    remove(accessor) {\n        for (let i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * \\@description\n     * Selects a radio button. For internal use only.\n     * @param {?} accessor\n     * @return {?}\n     */\n    select(accessor) {\n        this._accessors.forEach((/**\n         * @param {?} c\n         * @return {?}\n         */\n        (c) => {\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        }));\n    }\n    /**\n     * @private\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    }\n}\nRadioControlRegistry.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RadioControlRegistry.prototype._accessors;\n}\n/**\n * \\@description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass RadioControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _registry\n     * @param {?} _injector\n     */\n    constructor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive is initialized. For internal use only.\n     * @return {?}\n     */\n    ngOnInit() {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() { this._registry.remove(this); }\n    /**\n     * \\@description\n     * Sets the \"checked\" property value on the radio input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._state = value === this.value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = (/**\n         * @return {?}\n         */\n        () => {\n            fn(this.value);\n            this._registry.select(this);\n        });\n    }\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    fireUncheck(value) { this.writeValue(value); }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _throwNameError() {\n        throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n    }\n}\nRadioControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                providers: [RADIO_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nRadioControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: RadioControlRegistry },\n    { type: Injector }\n];\nRadioControlValueAccessor.propDecorators = {\n    name: [{ type: Input }],\n    formControlName: [{ type: Input }],\n    value: [{ type: Input }]\n};\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype._state;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype._control;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype._fn;\n    /**\n     * \\@description\n     * The registered callback function called when a change event occurs on the input element.\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype.onTouched;\n    /**\n     * \\@description\n     * Tracks the name of the radio input element.\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype.name;\n    /**\n     * \\@description\n     * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype.formControlName;\n    /**\n     * \\@description\n     * Tracks the value of the radio input element\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype.value;\n    /**\n     * @type {?}\n     * @private\n     */\n    RadioControlValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    RadioControlValueAccessor.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    RadioControlValueAccessor.prototype._registry;\n    /**\n     * @type {?}\n     * @private\n     */\n    RadioControlValueAccessor.prototype._injector;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => RangeValueAccessor)),\n    multi: true\n};\n/**\n * \\@description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * \\@usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass RangeValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (/**\n         * @param {?} value\n         * @return {?}\n         */\n        (value) => { fn(value == '' ? null : parseFloat(value)); });\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the range input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nRangeValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [RANGE_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nRangeValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nif (false) {\n    /**\n     * \\@description\n     * The registered callback function called when a change or input event occurs on the input\n     * element.\n     * @type {?}\n     */\n    RangeValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    RangeValueAccessor.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    RangeValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    RangeValueAccessor.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst FormErrorExamples = {\n    formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n    formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n    formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n    ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n    ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ReactiveErrors {\n    /**\n     * @return {?}\n     */\n    static controlParentException() {\n        throw new Error(`formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formControlName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static ngModelGroupException() {\n        throw new Error(`formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${FormErrorExamples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static missingFormException() {\n        throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${FormErrorExamples.formControlName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static groupParentException() {\n        throw new Error(`formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formGroupName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static arrayParentException() {\n        throw new Error(`formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${FormErrorExamples.formArrayName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static disabledAttrWarning() {\n        console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n    }\n    /**\n     * @param {?} directiveName\n     * @return {?}\n     */\n    static ngModelWarning(directiveName) {\n        console.warn(`\n    It looks like you're using ngModel on the same form field as ${directiveName}. \n    Support for using the ngModel input property and ngModelChange event with \n    reactive form directives has been deprecated in Angular v6 and will be removed \n    in Angular v7.\n    \n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective'\n            : 'FormControlName'}#use-with-ngmodel\n    `);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => SelectControlValueAccessor)),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass SelectControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._compareWith = ÉµlooseIdentical;\n    }\n    /**\n     * \\@description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on the input element. The \"selectedIndex\"\n     * property is also set if an ID is provided on the option element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        /** @type {?} */\n        const id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        /** @type {?} */\n        const valueString = _buildValueString(id, value);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (/**\n         * @param {?} valueString\n         * @return {?}\n         */\n        (valueString) => {\n            this.value = this._getOptionValue(valueString);\n            fn(this.value);\n        });\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _registerOption() { return (this._idCounter++).toString(); }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    _getOptionValue(valueString) {\n        /** @type {?} */\n        const id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    }\n}\nSelectControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [SELECT_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nSelectControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    SelectControlValueAccessor.prototype.value;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SelectControlValueAccessor.prototype._optionMap;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SelectControlValueAccessor.prototype._idCounter;\n    /**\n     * \\@description\n     * The registered callback function called when a change event occurs on the input element.\n     * @type {?}\n     */\n    SelectControlValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    SelectControlValueAccessor.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectControlValueAccessor.prototype._compareWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectControlValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectControlValueAccessor.prototype._elementRef;\n}\n/**\n * \\@description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectControlValueAccessor`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgSelectOption {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    /**\n     * \\@description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     * @param {?} value\n     * @return {?}\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._select._optionMap.set(this.id, value);\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this._setElementValue(value);\n        if (this._select)\n            this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nNgSelectOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] }\n];\n/** @nocollapse */\nNgSelectOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nNgSelectOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * ID of the option element\n     * @type {?}\n     */\n    NgSelectOption.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSelectOption.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSelectOption.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSelectOption.prototype._select;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => SelectMultipleControlValueAccessor)),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (typeof value === 'string')\n        value = `'${value}'`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * Mock interface for HTML Options\n * @record\n */\nfunction HTMLOption() { }\nif (false) {\n    /** @type {?} */\n    HTMLOption.prototype.value;\n    /** @type {?} */\n    HTMLOption.prototype.selected;\n}\n/**\n * Mock interface for HTMLCollection\n * @abstract\n */\nclass HTMLCollection {\n}\nif (false) {\n    /** @type {?} */\n    HTMLCollection.prototype.length;\n    /**\n     * @abstract\n     * @param {?} _\n     * @return {?}\n     */\n    HTMLCollection.prototype.item = function (_) { };\n}\n/**\n * \\@description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @see `SelectControlValueAccessor`\n *\n * \\@usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass SelectMultipleControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._compareWith = ÉµlooseIdentical;\n    }\n    /**\n     * \\@description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * \\@description\n     * Sets the \"value\" property on one or of more\n     * of the select's options.\n     *\n     * @param {?} value The value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        /** @type {?} */\n        let optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            /** @type {?} */\n            const ids = value.map((/**\n             * @param {?} v\n             * @return {?}\n             */\n            (v) => this._getOptionId(v)));\n            optionSelectedStateSetter = (/**\n             * @param {?} opt\n             * @param {?} o\n             * @return {?}\n             */\n            (opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n        }\n        else {\n            optionSelectedStateSetter = (/**\n             * @param {?} opt\n             * @param {?} o\n             * @return {?}\n             */\n            (opt, o) => { opt._setSelected(false); });\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => {\n            /** @type {?} */\n            const selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                /** @type {?} */\n                const options = _.selectedOptions;\n                for (let i = 0; i < options.length; i++) {\n                    /** @type {?} */\n                    const opt = options.item(i);\n                    /** @type {?} */\n                    const val = this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            // Degrade on IE\n            else {\n                /** @type {?} */\n                const options = (/** @type {?} */ (_.options));\n                for (let i = 0; i < options.length; i++) {\n                    /** @type {?} */\n                    const opt = options.item(i);\n                    if (opt.selected) {\n                        /** @type {?} */\n                        const val = this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            this.value = selected;\n            fn(selected);\n        });\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _registerOption(value) {\n        /** @type {?} */\n        const id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith((/** @type {?} */ (this._optionMap.get(id)))._value, value))\n                return id;\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    _getOptionValue(valueString) {\n        /** @type {?} */\n        const id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? (/** @type {?} */ (this._optionMap.get(id)))._value : valueString;\n    }\n}\nSelectMultipleControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nSelectMultipleControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectMultipleControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\nif (false) {\n    /**\n     * \\@description\n     * The current value\n     * @type {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.value;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._optionMap;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._idCounter;\n    /**\n     * \\@description\n     * The registered callback function called when a change event occurs on the input element.\n     * @type {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectMultipleControlValueAccessor.prototype._compareWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectMultipleControlValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectMultipleControlValueAccessor.prototype._elementRef;\n}\n/**\n * \\@description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectMultipleControlValueAccessor`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass ÉµNgSelectMultipleOption {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    /**\n     * \\@description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     * @param {?} value\n     * @return {?}\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._value = value;\n        this._setElementValue(_buildValueString$1(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._select) {\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        }\n        else {\n            this._setElementValue(value);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    _setSelected(selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nÉµNgSelectMultipleOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] }\n];\n/** @nocollapse */\nÉµNgSelectMultipleOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nÉµNgSelectMultipleOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\nif (false) {\n    /** @type {?} */\n    ÉµNgSelectMultipleOption.prototype.id;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ÉµNgSelectMultipleOption.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    ÉµNgSelectMultipleOption.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    ÉµNgSelectMultipleOption.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    ÉµNgSelectMultipleOption.prototype._select;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nfunction controlPath(name, parent) {\n    return [...(/** @type {?} */ (parent.path)), name];\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([(/** @type {?} */ (control.validator)), dir.validator]);\n    control.asyncValidator = Validators.composeAsync([(/** @type {?} */ (control.asyncValidator)), dir.asyncValidator]);\n    (/** @type {?} */ (dir.valueAccessor)).writeValue(control.value);\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    if ((/** @type {?} */ (dir.valueAccessor)).setDisabledState) {\n        control.registerOnDisabledChange((/**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        (isDisabled) => { (/** @type {?} */ ((/** @type {?} */ (dir.valueAccessor)).setDisabledState))(isDisabled); }));\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach((/**\n     * @param {?} validator\n     * @return {?}\n     */\n    (validator) => {\n        if (((/** @type {?} */ (validator))).registerOnValidatorChange)\n            (/** @type {?} */ (((/** @type {?} */ (validator))).registerOnValidatorChange))((/**\n             * @return {?}\n             */\n            () => control.updateValueAndValidity()));\n    }));\n    dir._rawAsyncValidators.forEach((/**\n     * @param {?} validator\n     * @return {?}\n     */\n    (validator) => {\n        if (((/** @type {?} */ (validator))).registerOnValidatorChange)\n            (/** @type {?} */ (((/** @type {?} */ (validator))).registerOnValidatorChange))((/**\n             * @return {?}\n             */\n            () => control.updateValueAndValidity()));\n    }));\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction cleanUpControl(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnChange((/**\n     * @return {?}\n     */\n    () => _noControlError(dir)));\n    (/** @type {?} */ (dir.valueAccessor)).registerOnTouched((/**\n     * @return {?}\n     */\n    () => _noControlError(dir)));\n    dir._rawValidators.forEach((/**\n     * @param {?} validator\n     * @return {?}\n     */\n    (validator) => {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    }));\n    dir._rawAsyncValidators.forEach((/**\n     * @param {?} validator\n     * @return {?}\n     */\n    (validator) => {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    }));\n    if (control)\n        control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpViewChangePipeline(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnChange((/**\n     * @param {?} newValue\n     * @return {?}\n     */\n    (newValue) => {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    }));\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpBlurPipeline(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnTouched((/**\n     * @return {?}\n     */\n    () => {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    }));\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction updateControl(control, dir) {\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    dir.viewToModelUpdate(control._pendingValue);\n    control._pendingChange = false;\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpModelChangePipeline(control, dir) {\n    control.registerOnChange((/**\n     * @param {?} newValue\n     * @param {?} emitModelEvent\n     * @return {?}\n     */\n    (newValue, emitModelEvent) => {\n        // control -> view\n        (/** @type {?} */ (dir.valueAccessor)).writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    }));\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir, message) {\n    /** @type {?} */\n    let messageEnd;\n    if ((/** @type {?} */ (dir.path)).length > 1) {\n        messageEnd = `path: '${(/** @type {?} */ (dir.path)).join(' -> ')}'`;\n    }\n    else if ((/** @type {?} */ (dir.path))[0]) {\n        messageEnd = `name: '${dir.path}'`;\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(`${message} ${messageEnd}`);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    /** @type {?} */\n    const change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !ÉµlooseIdentical(viewModel, change.currentValue);\n}\n/** @type {?} */\nconst BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some((/**\n     * @param {?} a\n     * @return {?}\n     */\n    a => valueAccessor.constructor === a));\n}\n/**\n * @param {?} form\n * @param {?} directives\n * @return {?}\n */\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach((/**\n     * @param {?} dir\n     * @return {?}\n     */\n    dir => {\n        /** @type {?} */\n        const control = (/** @type {?} */ (dir.control));\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    }));\n}\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    if (!Array.isArray(valueAccessors))\n        _throwError(dir, 'Value accessor was not provided as an array for form control with');\n    /** @type {?} */\n    let defaultAccessor = undefined;\n    /** @type {?} */\n    let builtinAccessor = undefined;\n    /** @type {?} */\n    let customAccessor = undefined;\n    valueAccessors.forEach((/**\n     * @param {?} v\n     * @return {?}\n     */\n    (v) => {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    }));\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction removeDir(list, el) {\n    /** @type {?} */\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n// TODO(kara): remove after deprecation period\n/**\n * @param {?} name\n * @param {?} type\n * @param {?} instance\n * @param {?} warningConfig\n * @return {?}\n */\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n    if (!isDevMode() || warningConfig === 'never')\n        return;\n    if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n        (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n        ReactiveErrors.ngModelWarning(name);\n        type._ngModelWarningSentOnce = true;\n        instance._ngModelWarningSent = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n * @type {?}\n */\nconst VALID = 'VALID';\n/**\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n * @type {?}\n */\nconst INVALID = 'INVALID';\n/**\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n * @type {?}\n */\nconst PENDING = 'PENDING';\n/**\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n * @type {?}\n */\nconst DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!(path instanceof Array)) {\n        path = ((/** @type {?} */ (path))).split(delimiter);\n    }\n    if (path instanceof Array && (path.length === 0))\n        return null;\n    return ((/** @type {?} */ (path))).reduce((/**\n     * @param {?} v\n     * @param {?} name\n     * @return {?}\n     */\n    (v, name) => {\n        if (v instanceof FormGroup) {\n            return v.controls.hasOwnProperty((/** @type {?} */ (name))) ? v.controls[name] : null;\n        }\n        if (v instanceof FormArray) {\n            return v.at((/** @type {?} */ (name))) || null;\n        }\n        return null;\n    }), control);\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToValidator(validatorOrOpts) {\n    /** @type {?} */\n    const validator = (/** @type {?} */ ((isOptionsObj(validatorOrOpts) ? ((/** @type {?} */ (validatorOrOpts))).validators :\n        validatorOrOpts)));\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n    /** @type {?} */\n    const origAsyncValidator = (/** @type {?} */ ((isOptionsObj(validatorOrOpts) ? ((/** @type {?} */ (validatorOrOpts))).asyncValidators :\n        asyncValidator)));\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n        origAsyncValidator || null;\n}\n/**\n * Interface for options provided to an `AbstractControl`.\n *\n * \\@publicApi\n * @record\n */\nfunction AbstractControlOptions() { }\nif (false) {\n    /**\n     * \\@description\n     * The list of validators applied to a control.\n     * @type {?|undefined}\n     */\n    AbstractControlOptions.prototype.validators;\n    /**\n     * \\@description\n     * The list of async validators applied to control.\n     * @type {?|undefined}\n     */\n    AbstractControlOptions.prototype.asyncValidators;\n    /**\n     * \\@description\n     * The event name for control to update upon.\n     * @type {?|undefined}\n     */\n    AbstractControlOptions.prototype.updateOn;\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n * \\@publicApi\n * @abstract\n */\nclass AbstractControl {\n    /**\n     * Initialize the AbstractControl instance.\n     *\n     * @param {?} validator The function that determines the synchronous validity of this control.\n     * @param {?} asyncValidator The function that determines the asynchronous validity of this\n     * control.\n     */\n    constructor(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * @return True if the user has not yet changed the value in the UI; compare `dirty`.\n         * Programmatic changes to a control's value do not mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * True if the control is marked as `touched`.\n         *\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    /**\n     * The parent control.\n     * @return {?}\n     */\n    get parent() { return this._parent; }\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n    get valid() { return this.status === VALID; }\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n    get invalid() { return this.status === INVALID; }\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n    get pending() { return this.status == PENDING; }\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control is disabled, false otherwise.\n     */\n    get disabled() { return this.status === DISABLED; }\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     */\n    get enabled() { return this.status !== DISABLED; }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @return {?} True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    get dirty() { return !this.pristine; }\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     * @return {?}\n     */\n    get untouched() { return !this.touched; }\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     * @return {?}\n     */\n    get updateOn() {\n        return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing sync validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @param {?} newValidator\n     * @return {?}\n     */\n    setValidators(newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    }\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * overwrites any existing async validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @param {?} newValidator\n     * @return {?}\n     */\n    setAsyncValidators(newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    }\n    /**\n     * Empties out the sync validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @return {?}\n     */\n    clearValidators() { this.validator = null; }\n    /**\n     * Empties out the async validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @return {?}\n     */\n    clearAsyncValidators() { this.asyncValidator = null; }\n    /**\n     * Marks the control as `touched`. A control is touched by focus and\n     * blur events that do not change the value.\n     *\n     * @see `markAsUntouched()` / `markAsDirty()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsTouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    }\n    /**\n     * Marks the control and all its descendant controls as `touched`.\n     * @see `markAsTouched()`\n     * @return {?}\n     */\n    markAllAsTouched() {\n        this.markAsTouched({ onlySelf: true });\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control.markAllAsTouched()));\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, also marks all children as `untouched`\n     * and recalculates the `touched` status of all parent controls.\n     *\n     * @see `markAsTouched()` / `markAsDirty()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after the marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsUntouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = false;\n        this._pendingTouched = false;\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => { control.markAsUntouched({ onlySelf: true }); }));\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * Marks the control as `dirty`. A control becomes dirty when\n     * the control's value is changed through the UI; compare `markAsTouched`.\n     *\n     * @see `markAsTouched()` / `markAsUntouched()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsDirty(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, marks all children as `pristine`,\n     * and recalculates the `pristine` status of all parent\n     * controls.\n     *\n     * @see `markAsTouched()` / `markAsUntouched()` / `markAsDirty()`\n     *\n     * @param {?=} opts Configuration options that determine how the control emits events after\n     * marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * @return {?}\n     */\n    markAsPristine(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => { control.markAsPristine({ onlySelf: true }); }));\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * Marks the control as `pending`.\n     *\n     * A control is pending while the control performs async validation.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes and\n     * emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event with the latest status the control is marked pending.\n     * When false, no events are emitted.\n     *\n     * @return {?}\n     */\n    markAsPending(opts = {}) {\n        ((/** @type {?} */ (this))).status = PENDING;\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    }\n    /**\n     * Disables the control. This means the control is exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children are also disabled.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates\n     * changes and emits events after the control is disabled.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is disabled.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    disable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        /** @type {?} */\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        ((/** @type {?} */ (this))).status = DISABLED;\n        ((/** @type {?} */ (this))).errors = null;\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => { control.disable(Object.assign({}, opts, { onlySelf: true })); }));\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.valueChanges))).emit(this.value);\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        this._updateAncestors(Object.assign({}, opts, { skipPristineCheck }));\n        this._onDisabledChange.forEach((/**\n         * @param {?} changeFn\n         * @return {?}\n         */\n        (changeFn) => changeFn(true)));\n    }\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    enable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        /** @type {?} */\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        ((/** @type {?} */ (this))).status = VALID;\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => { control.enable(Object.assign({}, opts, { onlySelf: true })); }));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(Object.assign({}, opts, { skipPristineCheck }));\n        this._onDisabledChange.forEach((/**\n         * @param {?} changeFn\n         * @return {?}\n         */\n        (changeFn) => changeFn(false)));\n    }\n    /**\n     * @private\n     * @param {?} opts\n     * @return {?}\n     */\n    _updateAncestors(opts) {\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n            if (!opts.skipPristineCheck) {\n                this._parent._updatePristine();\n            }\n            this._parent._updateTouched();\n        }\n    }\n    /**\n     * @param {?} parent Sets the parent of the control\n     * @return {?}\n     */\n    setParent(parent) { this._parent = parent; }\n    /**\n     * Recalculates the value and validation status of the control.\n     *\n     * By default, it also updates the value and validity of its ancestors.\n     *\n     * @param {?=} opts Configuration options determine how the control propagates changes and emits events\n     * after updates and validity checks are applied.\n     * * `onlySelf`: When true, only update this control. When false or not supplied,\n     * update all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is updated.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    updateValueAndValidity(opts = {}) {\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            ((/** @type {?} */ (this))).errors = this._runValidator();\n            ((/** @type {?} */ (this))).status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.valueChanges))).emit(this.value);\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updateTreeValidity(opts = { emitEvent: true }) {\n        this._forEachChild((/**\n         * @param {?} ctrl\n         * @return {?}\n         */\n        (ctrl) => ctrl._updateTreeValidity(opts)));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setInitialStatus() {\n        ((/** @type {?} */ (this))).status = this._allControlsDisabled() ? DISABLED : VALID;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _runValidator() {\n        return this.validator ? this.validator(this) : null;\n    }\n    /**\n     * @private\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    _runAsyncValidator(emitEvent) {\n        if (this.asyncValidator) {\n            ((/** @type {?} */ (this))).status = PENDING;\n            /** @type {?} */\n            const obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe((/**\n                 * @param {?} errors\n                 * @return {?}\n                 */\n                (errors) => this.setErrors(errors, { emitEvent })));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _cancelExistingSubscription() {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Sets errors on a form control when running validations manually, rather than automatically.\n     *\n     * Calling `setErrors` also updates the validity of the parent control.\n     *\n     * \\@usageNotes\n     * ### Manually set the errors for a control\n     *\n     * ```\n     * const login = new FormControl('someLogin');\n     * login.setErrors({\n     *   notUnique: true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({ notUnique: true });\n     *\n     * login.setValue('someOtherLogin');\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    setErrors(errors, opts = {}) {\n        ((/** @type {?} */ (this))).errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * \\@usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path A dot-delimited string or array of string/number values that define the path to the\n     * control.\n     *\n     * @return {?}\n     */\n    get(path) { return _find(this, path, '.'); }\n    /**\n     * \\@description\n     * Reports error data for the control with the given path.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        /** @type {?} */\n        const control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * \\@description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return !!this.getError(errorCode, path);\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     * @return {?}\n     */\n    get root() {\n        /** @type {?} */\n        let x = this;\n        while (x._parent) {\n            x = x._parent;\n        }\n        return x;\n    }\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    _updateControlsErrors(emitEvent) {\n        ((/** @type {?} */ (this))).status = this._calculateStatus();\n        if (emitEvent) {\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _initObservables() {\n        ((/** @type {?} */ (this))).valueChanges = new EventEmitter();\n        ((/** @type {?} */ (this))).statusChanges = new EventEmitter();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _calculateStatus() {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    }\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    _anyControlsHaveStatus(status) {\n        return this._anyControls((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control.status === status));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _anyControlsDirty() {\n        return this._anyControls((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control.dirty));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _anyControlsTouched() {\n        return this._anyControls((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control.touched));\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updatePristine(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updateTouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    _isBoxedValue(formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    _registerOnCollectionChange(fn) { this._onCollectionChange = fn; }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _setUpdateStrategy(opts) {\n        if (isOptionsObj(opts) && ((/** @type {?} */ (opts))).updateOn != null) {\n            this._updateOn = (/** @type {?} */ (((/** @type {?} */ (opts))).updateOn));\n        }\n    }\n    /**\n     * Check to see if parent has been marked artificially dirty.\n     *\n     * \\@internal\n     * @private\n     * @param {?=} onlySelf\n     * @return {?}\n     */\n    _parentMarkedDirty(onlySelf) {\n        /** @type {?} */\n        const parentDirty = this._parent && this._parent.dirty;\n        return !onlySelf && parentDirty && !this._parent._anyControlsDirty();\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    AbstractControl.prototype._pendingDirty;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    AbstractControl.prototype._pendingTouched;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    AbstractControl.prototype._onCollectionChange;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    AbstractControl.prototype._updateOn;\n    /**\n     * @type {?}\n     * @private\n     */\n    AbstractControl.prototype._parent;\n    /**\n     * @type {?}\n     * @private\n     */\n    AbstractControl.prototype._asyncValidationSubscription;\n    /**\n     * The current value of the control.\n     *\n     * * For a `FormControl`, the current value.\n     * * For an enabled `FormGroup`, the values of enabled controls as an object\n     * with a key-value pair for each member of the group.\n     * * For a disabled `FormGroup`, the values of all controls as an object\n     * with a key-value pair for each member of the group.\n     * * For a `FormArray`, the values of enabled controls as an array.\n     *\n     * @type {?}\n     */\n    AbstractControl.prototype.value;\n    /**\n     * The validation status of the control. There are four possible\n     * validation status values:\n     *\n     * * **VALID**: This control has passed all validation checks.\n     * * **INVALID**: This control has failed at least one validation check.\n     * * **PENDING**: This control is in the midst of conducting a validation check.\n     * * **DISABLED**: This control is exempt from validation checks.\n     *\n     * These status values are mutually exclusive, so a control cannot be\n     * both valid AND invalid or invalid AND disabled.\n     * @type {?}\n     */\n    AbstractControl.prototype.status;\n    /**\n     * An object containing any errors generated by failing validation,\n     * or null if there are no errors.\n     * @type {?}\n     */\n    AbstractControl.prototype.errors;\n    /**\n     * A control is `pristine` if the user has not yet changed\n     * the value in the UI.\n     *\n     * \\@return True if the user has not yet changed the value in the UI; compare `dirty`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     * @type {?}\n     */\n    AbstractControl.prototype.pristine;\n    /**\n     * True if the control is marked as `touched`.\n     *\n     * A control is marked `touched` once the user has triggered\n     * a `blur` event on it.\n     * @type {?}\n     */\n    AbstractControl.prototype.touched;\n    /**\n     * A multicasting observable that emits an event every time the value of the control changes, in\n     * the UI or programmatically.\n     * @type {?}\n     */\n    AbstractControl.prototype.valueChanges;\n    /**\n     * A multicasting observable that emits an event every time the validation `status` of the control\n     * recalculates.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @type {?}\n     */\n    AbstractControl.prototype.statusChanges;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    AbstractControl.prototype._onDisabledChange;\n    /** @type {?} */\n    AbstractControl.prototype.validator;\n    /** @type {?} */\n    AbstractControl.prototype.asyncValidator;\n    /**\n     * Sets the value of the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.setValue = function (value, options) { };\n    /**\n     * Patches the value of the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.patchValue = function (value, options) { };\n    /**\n     * Resets the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.reset = function (value, options) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._updateValue = function () { };\n    /**\n     * \\@internal\n     * @abstract\n     * @param {?} cb\n     * @return {?}\n     */\n    AbstractControl.prototype._forEachChild = function (cb) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @param {?} condition\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControls = function (condition) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._allControlsDisabled = function () { };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._syncPendingControls = function () { };\n}\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the three fundamental building blocks of Angular forms, along with\n * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events.\n *\n * @see `AbstractControl`\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * \\@usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n * ```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a sync validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to an initial value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n * ```\n *\n * \\@publicApi\n */\nclass FormControl extends AbstractControl {\n    /**\n     * Creates a new `FormControl` instance.\n     *\n     * @param {?=} formState Initializes the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(formState = null, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        /**\n         * \\@internal\n         */\n        this._onChange = [];\n        this._applyFormState(formState);\n        this._setUpdateStrategy(validatorOrOpts);\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        this._initObservables();\n    }\n    /**\n     * Sets a new value for the form control.\n     *\n     * @param {?} value The new value for the control.\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events when the value changes.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n     * `onChange` event to\n     * update the view.\n     * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n     * `ngModelChange`\n     * event to update the model.\n     *\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        ((/** @type {?} */ (this))).value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach((/**\n             * @param {?} changeFn\n             * @return {?}\n             */\n            (changeFn) => changeFn(this.value, options.emitViewToModelChange !== false)));\n        }\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     *\n     * @see `setValue` for options\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        this.setValue(value, options);\n    }\n    /**\n     * Resets the form control, marking it `pristine` and `untouched`, and setting\n     * the value to null.\n     *\n     * @param {?=} formState Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     *\n     * @return {?}\n     */\n    reset(formState = null, options = {}) {\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() { }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) { return false; }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() { return this.disabled; }\n    /**\n     * Register a listener for change events.\n     *\n     * @param {?} fn The method that is called when the value changes\n     * @return {?}\n     */\n    registerOnChange(fn) { this._onChange.push(fn); }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _clearChangeFns() {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * Register a listener for disabled events.\n     *\n     * @param {?} fn The method that is called when the disabled status changes.\n     * @return {?}\n     */\n    registerOnDisabledChange(fn) {\n        this._onDisabledChange.push(fn);\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) { }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} formState\n     * @return {?}\n     */\n    _applyFormState(formState) {\n        if (this._isBoxedValue(formState)) {\n            ((/** @type {?} */ (this))).value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            ((/** @type {?} */ (this))).value = this._pendingValue = formState;\n        }\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormControl.prototype._onChange;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormControl.prototype._pendingValue;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormControl.prototype._pendingChange;\n}\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormArray`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * \\@usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * \\@publicApi\n */\nclass FormGroup extends AbstractControl {\n    /**\n     * Creates a new `FormGroup` instance.\n     *\n     * @param {?} controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control.\n     * Use {\\@link FormGroup#addControl addControl} instead.\n     *\n     * @param {?} name The control name to register in the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    registerControl(name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    }\n    /**\n     * Add a control to this group.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param {?} name The control name to add to the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    addControl(name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Remove a control from this group.\n     *\n     * @param {?} name The control name to remove from the collection\n     * @return {?}\n     */\n    removeControl(name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange((/**\n             * @return {?}\n             */\n            () => { }));\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param {?} name The control name to replace in the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    setControl(name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange((/**\n             * @return {?}\n             */\n            () => { }));\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * Reports false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     *\n     * @param {?} controlName The control name to check for existence in the collection\n     *\n     * @return {?} false for disabled controls, true otherwise.\n     */\n    contains(controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * \\@usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you exclude a value of a control that does exist.\n     *\n     * @param {?} value The new value for the control that matches the structure of the group.\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach((/**\n         * @param {?} name\n         * @return {?}\n         */\n        name => {\n            this._throwIfControlMissing(name);\n            this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        }));\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * \\@usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param {?} value The object that matches the structure of the group.\n     * @param {?=} options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        Object.keys(value).forEach((/**\n         * @param {?} name\n         * @return {?}\n         */\n        name => {\n            if (this.controls[name]) {\n                this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        }));\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\n     * the value of all descendants to null.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * \\@usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @return {?}\n     */\n    reset(value = {}, options = {}) {\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (control, name) => {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        }));\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     * The `value` property is the best way to get the value of the group, because\n     * it excludes disabled controls in the `FormGroup`.\n     * @return {?}\n     */\n    getRawValue() {\n        return this._reduceChildren({}, (/**\n         * @param {?} acc\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (acc, control, name) => {\n            acc[name] = control instanceof FormControl ? control.value : ((/** @type {?} */ (control))).getRawValue();\n            return acc;\n        }));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        /** @type {?} */\n        let subtreeUpdated = this._reduceChildren(false, (/**\n         * @param {?} updated\n         * @param {?} child\n         * @return {?}\n         */\n        (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }));\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    _throwIfControlMissing(name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.controls[name]) {\n            throw new Error(`Cannot find form control with name: ${name}.`);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) {\n        Object.keys(this.controls).forEach((/**\n         * @param {?} k\n         * @return {?}\n         */\n        k => cb(this.controls[k], k)));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _setUpControls() {\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        }));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() { ((/** @type {?} */ (this))).value = this._reduceValue(); }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) {\n        /** @type {?} */\n        let res = false;\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (control, name) => {\n            res = res || (this.contains(name) && condition(control));\n        }));\n        return res;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _reduceValue() {\n        return this._reduceChildren({}, (/**\n         * @param {?} acc\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (acc, control, name) => {\n            if (control.enabled || this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        }));\n    }\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    _reduceChildren(initValue, fn) {\n        /** @type {?} */\n        let res = initValue;\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (control, name) => { res = fn(res, control, name); }));\n        return res;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() {\n        for (const controlName of Object.keys(this.controls)) {\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (control, name) => {\n            if (value[name] === undefined) {\n                throw new Error(`Must supply a value for form control with name: '${name}'.`);\n            }\n        }));\n    }\n}\nif (false) {\n    /** @type {?} */\n    FormGroup.prototype.controls;\n}\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormGroup`.\n *\n * \\@usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * \\@publicApi\n */\nclass FormArray extends AbstractControl {\n    /**\n     * Creates a new `FormArray` instance.\n     *\n     * @param {?} controls An array of child controls. Each child control is given an index\n     * where it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Get the `AbstractControl` at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to retrieve the control\n     * @return {?}\n     */\n    at(index) { return this.controls[index]; }\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param {?} control Form control to be inserted\n     * @return {?}\n     */\n    push(control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to insert the control\n     * @param {?} control Form control to be inserted\n     * @return {?}\n     */\n    insert(index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to remove the control\n     * @return {?}\n     */\n    removeAt(index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange((/**\n             * @return {?}\n             */\n            () => { }));\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param {?} index Index in the array to replace the control\n     * @param {?} control The `AbstractControl` control to replace the existing control\n     * @return {?}\n     */\n    setControl(index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange((/**\n             * @return {?}\n             */\n            () => { }));\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Length of the control array.\n     * @return {?}\n     */\n    get length() { return this.controls.length; }\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * \\@usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param {?} value Array of values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        value.forEach((/**\n         * @param {?} newValue\n         * @param {?} index\n         * @return {?}\n         */\n        (newValue, index) => {\n            this._throwIfControlMissing(index);\n            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        }));\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * \\@usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param {?} value Array of latest values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        value.forEach((/**\n         * @param {?} newValue\n         * @param {?} index\n         * @return {?}\n         */\n        (newValue, index) => {\n            if (this.at(index)) {\n                this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        }));\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * \\@usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param {?=} value Array of values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    reset(value = [], options = {}) {\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} index\n         * @return {?}\n         */\n        (control, index) => {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        }));\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     * For enabled controls only, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    getRawValue() {\n        return this.controls.map((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            return control instanceof FormControl ? control.value : ((/** @type {?} */ (control))).getRawValue();\n        }));\n    }\n    /**\n     * Remove all controls in the `FormArray`.\n     *\n     * \\@usageNotes\n     * ### Remove all elements from a FormArray\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.length);  // 2\n     *\n     * arr.clear();\n     * console.log(arr.length);  // 0\n     * ```\n     *\n     * It's a simpler and more efficient alternative to removing all elements one by one:\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     *\n     * while (arr.length) {\n     *    arr.removeAt(0);\n     * }\n     * ```\n     * @return {?}\n     */\n    clear() {\n        if (this.controls.length < 1)\n            return;\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control._registerOnCollectionChange((/**\n         * @return {?}\n         */\n        () => { }))));\n        this.controls.splice(0);\n        this.updateValueAndValidity();\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        /** @type {?} */\n        let subtreeUpdated = this.controls.reduce((/**\n         * @param {?} updated\n         * @param {?} child\n         * @return {?}\n         */\n        (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }), false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    _throwIfControlMissing(index) {\n        if (!this.controls.length) {\n            throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.at(index)) {\n            throw new Error(`Cannot find form control at index ${index}`);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) {\n        this.controls.forEach((/**\n         * @param {?} control\n         * @param {?} index\n         * @return {?}\n         */\n        (control, index) => { cb(control, index); }));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() {\n        ((/** @type {?} */ (this))).value =\n            this.controls.filter((/**\n             * @param {?} control\n             * @return {?}\n             */\n            (control) => control.enabled || this.disabled))\n                .map((/**\n             * @param {?} control\n             * @return {?}\n             */\n            (control) => control.value));\n    }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) {\n        return this.controls.some((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control.enabled && condition(control)));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _setUpControls() {\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => this._registerControl(control)));\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} i\n         * @return {?}\n         */\n        (control, i) => {\n            if (value[i] === undefined) {\n                throw new Error(`Must supply a value for form control at index: ${i}.`);\n            }\n        }));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() {\n        for (const control of this.controls) {\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    }\n    /**\n     * @private\n     * @param {?} control\n     * @return {?}\n     */\n    _registerControl(control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    }\n}\nif (false) {\n    /** @type {?} */\n    FormArray.prototype.controls;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => NgForm))\n};\nconst Éµ0 = /**\n * @return {?}\n */\n() => Promise.resolve(null);\n/** @type {?} */\nconst resolvedPromise = ((Éµ0))();\n/**\n * \\@description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * \\@usageNotes\n *\n * ### Migrating from deprecated ngForm selector\n *\n * Support for using `ngForm` element selector has been deprecated in Angular v6 and will be removed\n * in Angular v9.\n *\n * This has been deprecated to keep selectors consistent with other core Angular selectors,\n * as element selectors are typically written in kebab-case.\n *\n * Now deprecated:\n * ```html\n * <ngForm #myForm=\"ngForm\">\n * ```\n *\n * After:\n * ```html\n * <ng-form #myForm=\"ngForm\">\n * ```\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgForm extends ControlContainer {\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(validators, asyncValidators) {\n        super();\n        /**\n         * \\@description\n         * Returns whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        this._directives = [];\n        /**\n         * \\@description\n         * Event emitter for the \"ngSubmit\" event\n         */\n        this.ngSubmit = new EventEmitter();\n        this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /**\n     * \\@description\n     * Lifecycle method called after the view is initialized. For internal use only.\n     * @return {?}\n     */\n    ngAfterViewInit() { this._setUpdateStrategy(); }\n    /**\n     * \\@description\n     * The directive instance.\n     * @return {?}\n     */\n    get formDirective() { return this; }\n    /**\n     * \\@description\n     * The internal `FormGroup` instance.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Returns a map of the controls in this group.\n     * @return {?}\n     */\n    get controls() { return this.form.controls; }\n    /**\n     * \\@description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    addControl(dir) {\n        resolvedPromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            ((/** @type {?} */ (dir))).control =\n                (/** @type {?} */ (container.registerControl(dir.name, dir.control)));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            this._directives.push(dir);\n        }));\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    getControl(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * \\@description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    removeControl(dir) {\n        resolvedPromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeDir(this._directives, dir);\n        }));\n    }\n    /**\n     * \\@description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    addFormGroup(dir) {\n        resolvedPromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            /** @type {?} */\n            const group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        }));\n    }\n    /**\n     * \\@description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    removeFormGroup(dir) {\n        resolvedPromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        }));\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    getFormGroup(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param {?} dir The `NgControl` directive instance.\n     * @param {?} value The new value for the directive's control.\n     * @return {?}\n     */\n    updateModel(dir, value) {\n        resolvedPromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const ctrl = (/** @type {?} */ (this.form.get((/** @type {?} */ (dir.path)))));\n            ctrl.setValue(value);\n        }));\n    }\n    /**\n     * \\@description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param {?} value The new value\n     * @return {?}\n     */\n    setValue(value) { this.control.setValue(value); }\n    /**\n     * \\@description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param {?} $event The \"submit\" event object\n     * @return {?}\n     */\n    onSubmit($event) {\n        ((/** @type {?} */ (this))).submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * \\@description\n     * Method called when the \"reset\" event is triggered on the form.\n     * @return {?}\n     */\n    onReset() { this.resetForm(); }\n    /**\n     * \\@description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param {?=} value The new value for the form.\n     * @return {?}\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        ((/** @type {?} */ (this))).submitted = false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    _findContainer(path) {\n        path.pop();\n        return path.length ? (/** @type {?} */ (this.form.get(path))) : this.form;\n    }\n}\nNgForm.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,ng-form,[ngForm]',\n                providers: [formDirectiveProvider],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                outputs: ['ngSubmit'],\n                exportAs: 'ngForm'\n            },] }\n];\n/** @nocollapse */\nNgForm.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgForm.propDecorators = {\n    options: [{ type: Input, args: ['ngFormOptions',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Returns whether the form submission has been triggered.\n     * @type {?}\n     */\n    NgForm.prototype.submitted;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgForm.prototype._directives;\n    /**\n     * \\@description\n     * The `FormGroup` instance created for this form.\n     * @type {?}\n     */\n    NgForm.prototype.form;\n    /**\n     * \\@description\n     * Event emitter for the \"ngSubmit\" event\n     * @type {?}\n     */\n    NgForm.prototype.ngSubmit;\n    /**\n     * \\@description\n     * Tracks options for the `NgForm` instance.\n     *\n     * **updateOn**: Sets the default `updateOn` value for all child `NgModels` below it\n     * unless explicitly set by a child `NgModel` using `ngModelOptions`). Defaults to 'change'.\n     * Possible values: `'change'` | `'blur'` | `'submit'`.\n     *\n     * @type {?}\n     */\n    NgForm.prototype.options;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TemplateDrivenErrors {\n    /**\n     * @return {?}\n     */\n    static modelParentException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${FormErrorExamples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${FormErrorExamples.ngModelWithFormGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static formGroupNameException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static missingNameException() {\n        throw new Error(`If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n    }\n    /**\n     * @return {?}\n     */\n    static modelGroupParentException() {\n        throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static ngFormWarning() {\n        console.warn(`\n    It looks like you're using 'ngForm'.\n\n    Support for using the 'ngForm' element selector has been deprecated in Angular v6 and will be removed\n    in Angular v9.\n\n    Use 'ng-form' instead.\n\n    Before:\n    <ngForm #myForm=\"ngForm\">\n\n    After:\n    <ng-form #myForm=\"ngForm\">\n    `);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * `InjectionToken` to provide to turn off the warning when using 'ngForm' deprecated selector.\n * @type {?}\n */\nconst NG_FORM_SELECTOR_WARNING = new InjectionToken('NgFormSelectorWarning');\n/**\n * This directive is solely used to display warnings when the deprecated `ngForm` selector is used.\n *\n * @deprecated in Angular v6 and will be removed in Angular v9.\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgFormSelectorWarning {\n    /**\n     * @param {?} ngFormWarning\n     */\n    constructor(ngFormWarning) {\n        if (((!ngFormWarning || ngFormWarning === 'once') && !NgFormSelectorWarning._ngFormWarning) ||\n            ngFormWarning === 'always') {\n            TemplateDrivenErrors.ngFormWarning();\n            NgFormSelectorWarning._ngFormWarning = true;\n        }\n    }\n}\n/**\n * Static property used to track whether the deprecation warning for this selector has been sent.\n * Used to support warning config of \"once\".\n *\n * \\@internal\n */\nNgFormSelectorWarning._ngFormWarning = false;\nNgFormSelectorWarning.decorators = [\n    { type: Directive, args: [{ selector: 'ngForm' },] }\n];\n/** @nocollapse */\nNgFormSelectorWarning.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_FORM_SELECTOR_WARNING,] }] }\n];\nif (false) {\n    /**\n     * Static property used to track whether the deprecation warning for this selector has been sent.\n     * Used to support warning config of \"once\".\n     *\n     * \\@internal\n     * @type {?}\n     */\n    NgFormSelectorWarning._ngFormWarning;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * \\@publicApi\n */\nclass AbstractFormGroupDirective extends ControlContainer {\n    /**\n     * \\@description\n     * An internal callback method triggered on the instance after the inputs are set.\n     * Registers the group with its parent group.\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkParentType();\n        (/** @type {?} */ (this.formDirective)).addFormGroup(this);\n    }\n    /**\n     * \\@description\n     * An internal callback method triggered before the instance is destroyed.\n     * Removes the group from its parent group.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    }\n    /**\n     * \\@description\n     * The `FormGroup` bound to this directive.\n     * @return {?}\n     */\n    get control() { return (/** @type {?} */ (this.formDirective)).getFormGroup(this); }\n    /**\n     * \\@description\n     * The path to this group from the top-level directive.\n     * @return {?}\n     */\n    get path() { return controlPath(this.name, this._parent); }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * The synchronous validators registered with this group.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._validators); }\n    /**\n     * \\@description\n     * The async validators registered with this group.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._asyncValidators);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() { }\n}\nif (false) {\n    /**\n     * \\@description\n     * The parent control for the group\n     *\n     * \\@internal\n     * @type {?}\n     */\n    AbstractFormGroupDirective.prototype._parent;\n    /**\n     * \\@description\n     * An array of synchronous validators for the group\n     *\n     * \\@internal\n     * @type {?}\n     */\n    AbstractFormGroupDirective.prototype._validators;\n    /**\n     * \\@description\n     * An array of async validators for the group\n     *\n     * \\@internal\n     * @type {?}\n     */\n    AbstractFormGroupDirective.prototype._asyncValidators;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => NgModelGroup))\n};\n/**\n * \\@description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * \\@usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgModelGroup extends AbstractFormGroupDirective {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    }\n}\nNgModelGroup.decorators = [\n    { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] }\n];\n/** @nocollapse */\nNgModelGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgModelGroup.propDecorators = {\n    name: [{ type: Input, args: ['ngModelGroup',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Tracks the name of the `NgModelGroup` bound to the directive. The name corresponds\n     * to a key in the parent `NgForm`.\n     * @type {?}\n     */\n    NgModelGroup.prototype.name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => NgModel))\n};\nconst Éµ0$1 = /**\n * @return {?}\n */\n() => Promise.resolve(null);\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n * @type {?}\n */\nconst resolvedPromise$1 = ((Éµ0$1))();\n/**\n * \\@description\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex: `#myVar=\"ngModel\"`).\n * You then access the control using the directive's `control` property,\n * but most properties used (like `valid` and `dirty`) fall through to the control anyway for direct access.\n * See a full list of properties directly available in `AbstractControlDirective`.\n *\n * @see `RadioControlValueAccessor`\n * @see `SelectControlValueAccessor`\n *\n * \\@usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel name attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. The name attribute is used\n * within a custom form component, and the name `\\@Input` property serves a different purpose.\n *\n * ```html\n * <form>\n *   <my-person-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-person-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgModel extends NgControl {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    constructor(parent, validators, asyncValidators, valueAccessors) {\n        super();\n        this.control = new FormControl();\n        /**\n         * \\@internal\n         */\n        this._registered = false;\n        /**\n         * \\@description\n         * Event emitter for producing the `ngModelChange` event after\n         * the view model updates.\n         */\n        this.update = new EventEmitter();\n        this._parent = parent;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal\n     * use only.\n     * @return {?}\n     */\n    ngOnDestroy() { this.formDirective && this.formDirective.removeControl(this); }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() {\n        return this._parent ? controlPath(this.name, this._parent) : [this.name];\n    }\n    /**\n     * \\@description\n     * The top-level directive for this control if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value emitted by `ngModelChange`.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpControl() {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpStandalone() {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkForErrors() {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkName() {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _updateValue(value) {\n        resolvedPromise$1.then((/**\n         * @return {?}\n         */\n        () => { this.control.setValue(value, { emitViewToModelChange: false }); }));\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _updateDisabled(changes) {\n        /** @type {?} */\n        const disabledValue = changes['isDisabled'].currentValue;\n        /** @type {?} */\n        const isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then((/**\n         * @return {?}\n         */\n        () => {\n            if (isDisabled && !this.control.disabled) {\n                this.control.disable();\n            }\n            else if (!isDisabled && this.control.disabled) {\n                this.control.enable();\n            }\n        }));\n    }\n}\nNgModel.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngModel]:not([formControlName]):not([formControl])',\n                providers: [formControlBinding],\n                exportAs: 'ngModel'\n            },] }\n];\n/** @nocollapse */\nNgModel.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] }\n];\nNgModel.propDecorators = {\n    name: [{ type: Input }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    options: [{ type: Input, args: ['ngModelOptions',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\nif (false) {\n    /** @type {?} */\n    NgModel.prototype.control;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModel.prototype._registered;\n    /**\n     * \\@description\n     * Internal reference to the view model value.\n     * @type {?}\n     */\n    NgModel.prototype.viewModel;\n    /**\n     * \\@description\n     * Tracks the name bound to the directive. The parent form\n     * uses this name as a key to retrieve this control's value.\n     * @type {?}\n     */\n    NgModel.prototype.name;\n    /**\n     * \\@description\n     * Tracks whether the control is disabled.\n     * @type {?}\n     */\n    NgModel.prototype.isDisabled;\n    /**\n     * \\@description\n     * Tracks the value bound to this directive.\n     * @type {?}\n     */\n    NgModel.prototype.model;\n    /**\n     * \\@description\n     * Tracks the configuration options for this `ngModel` instance.\n     *\n     * **name**: An alternative to setting the name attribute on the form control element. See\n     * the [example](api/forms/NgModel#using-ngmodel-on-a-standalone-control) for using `NgModel`\n     * as a standalone control.\n     *\n     * **standalone**: When set to true, the `ngModel` will not register itself with its parent form,\n     * and acts as if it's not in the form. Defaults to false.\n     *\n     * **updateOn**: Defines the event upon which the form control value and validity update.\n     * Defaults to 'change'. Possible values: `'change'` | `'blur'` | `'submit'`.\n     *\n     * @type {?}\n     */\n    NgModel.prototype.options;\n    /**\n     * \\@description\n     * Event emitter for producing the `ngModelChange` event after\n     * the view model updates.\n     * @type {?}\n     */\n    NgModel.prototype.update;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@publicApi\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n */\nclass ÉµNgNoValidate {\n}\nÉµNgNoValidate.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                host: { 'novalidate': '' },\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n * @type {?}\n */\nconst NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');\n/** @type {?} */\nconst formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => FormControlDirective))\n};\n/**\n * \\@description\n * * Syncs a standalone `FormControl` instance to a form control element.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Registering a single form control\n *\n * The following examples shows how to register a standalone control and set its value.\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <input [formControl]=\"control\" [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <input [formControl]=\"control\">\n * ```\n *\n * ```ts\n * this.control.setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormControlDirective extends NgControl {\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     * @param {?} _ngModelWarningConfig\n     */\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        /**\n         * @deprecated as of v6\n         */\n        this.update = new EventEmitter();\n        /**\n         * \\@description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n         *\n         * \\@internal\n         */\n        this._ngModelWarningSent = false;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * Triggers a warning that this input should not be used with reactive forms.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    set isDisabled(isDisabled) { ReactiveErrors.disabledAttrWarning(); }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && (/** @type {?} */ (this.valueAccessor)).setDisabledState) {\n                (/** @type {?} */ ((/** @type {?} */ (this.valueAccessor)).setDisabledState))(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * \\@description\n     * The `FormControl` bound to this directive.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value for the view model.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n    }\n}\n/**\n * \\@description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlDirective. Used to support warning config of \"once\".\n *\n * \\@internal\n */\nFormControlDirective._ngModelWarningSentOnce = false;\nFormControlDirective.decorators = [\n    { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] }\n];\n/** @nocollapse */\nFormControlDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlDirective.propDecorators = {\n    form: [{ type: Input, args: ['formControl',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Static property used to track whether any ngModel warnings have been sent across\n     * all instances of FormControlDirective. Used to support warning config of \"once\".\n     *\n     * \\@internal\n     * @type {?}\n     */\n    FormControlDirective._ngModelWarningSentOnce;\n    /**\n     * \\@description\n     * Internal reference to the view model value.\n     * @type {?}\n     */\n    FormControlDirective.prototype.viewModel;\n    /**\n     * \\@description\n     * Tracks the `FormControl` instance bound to the directive.\n     * @type {?}\n     */\n    FormControlDirective.prototype.form;\n    /**\n     * @deprecated as of v6\n     * @type {?}\n     */\n    FormControlDirective.prototype.model;\n    /**\n     * @deprecated as of v6\n     * @type {?}\n     */\n    FormControlDirective.prototype.update;\n    /**\n     * \\@description\n     * Instance property used to track whether an ngModel warning has been sent out for this\n     * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n     *\n     * \\@internal\n     * @type {?}\n     */\n    FormControlDirective.prototype._ngModelWarningSent;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormControlDirective.prototype._ngModelWarningConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => FormGroupDirective))\n};\n/**\n * \\@description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormGroupDirective extends ControlContainer {\n    /**\n     * @param {?} _validators\n     * @param {?} _asyncValidators\n     */\n    constructor(_validators, _asyncValidators) {\n        super();\n        this._validators = _validators;\n        this._asyncValidators = _asyncValidators;\n        /**\n         * \\@description\n         * Reports whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        /**\n         * \\@description\n         * Tracks the list of added `FormControlName` instances\n         */\n        this.directives = [];\n        /**\n         * \\@description\n         * Tracks the `FormGroup` bound to this directive.\n         */\n        this.form = (/** @type {?} */ (null));\n        /**\n         * \\@description\n         * Emits an event when the form submission has been triggered.\n         */\n        this.ngSubmit = new EventEmitter();\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    }\n    /**\n     * \\@description\n     * Returns this directive's instance.\n     * @return {?}\n     */\n    get formDirective() { return this; }\n    /**\n     * \\@description\n     * Returns the `FormGroup` bound to this directive.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    addControl(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    getControl(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * \\@description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    removeControl(dir) { removeDir(this.directives, dir); }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    addFormGroup(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form group.\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    removeFormGroup(dir) { }\n    /**\n     * \\@description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    getFormGroup(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Adds a new `FormArrayName` directive instance to the form.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    addFormArray(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form array.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    removeFormArray(dir) { }\n    /**\n     * \\@description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    getFormArray(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @param {?} value The new value for the directive's control.\n     * @return {?}\n     */\n    updateModel(dir, value) {\n        /** @type {?} */\n        const ctrl = (/** @type {?} */ (this.form.get(dir.path)));\n        ctrl.setValue(value);\n    }\n    /**\n     * \\@description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param {?} $event The \"submit\" event object\n     * @return {?}\n     */\n    onSubmit($event) {\n        ((/** @type {?} */ (this))).submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * \\@description\n     * Method called when the \"reset\" event is triggered on the form.\n     * @return {?}\n     */\n    onReset() { this.resetForm(); }\n    /**\n     * \\@description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param {?=} value The new value for the form.\n     * @return {?}\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        ((/** @type {?} */ (this))).submitted = false;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateDomValue() {\n        this.directives.forEach((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => {\n            /** @type {?} */\n            const newCtrl = this.form.get(dir.path);\n            if (dir.control !== newCtrl) {\n                cleanUpControl(dir.control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                ((/** @type {?} */ (dir))).control = newCtrl;\n            }\n        }));\n        this.form._updateTreeValidity({ emitEvent: false });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateRegistrations() {\n        this.form._registerOnCollectionChange((/**\n         * @return {?}\n         */\n        () => this._updateDomValue()));\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange((/**\n             * @return {?}\n             */\n            () => { }));\n        this._oldForm = this.form;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateValidators() {\n        /** @type {?} */\n        const sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([(/** @type {?} */ (this.form.validator)), (/** @type {?} */ (sync))]);\n        /** @type {?} */\n        const async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([(/** @type {?} */ (this.form.asyncValidator)), (/** @type {?} */ (async))]);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkFormPresent() {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    }\n}\nFormGroupDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[formGroup]',\n                providers: [formDirectiveProvider$1],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                exportAs: 'ngForm'\n            },] }\n];\n/** @nocollapse */\nFormGroupDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupDirective.propDecorators = {\n    form: [{ type: Input, args: ['formGroup',] }],\n    ngSubmit: [{ type: Output }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Reports whether the form submission has been triggered.\n     * @type {?}\n     */\n    FormGroupDirective.prototype.submitted;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormGroupDirective.prototype._oldForm;\n    /**\n     * \\@description\n     * Tracks the list of added `FormControlName` instances\n     * @type {?}\n     */\n    FormGroupDirective.prototype.directives;\n    /**\n     * \\@description\n     * Tracks the `FormGroup` bound to this directive.\n     * @type {?}\n     */\n    FormGroupDirective.prototype.form;\n    /**\n     * \\@description\n     * Emits an event when the form submission has been triggered.\n     * @type {?}\n     */\n    FormGroupDirective.prototype.ngSubmit;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormGroupDirective.prototype._validators;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormGroupDirective.prototype._asyncValidators;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => FormGroupName))\n};\n/**\n * \\@description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` to link, and\n * looks for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * \\@usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the {\\@link AbstractControl#get get} method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the {\\@link AbstractControl#get get} method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormGroupName extends AbstractFormGroupDirective {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    }\n}\nFormGroupName.decorators = [\n    { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] }\n];\n/** @nocollapse */\nFormGroupName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupName.propDecorators = {\n    name: [{ type: Input, args: ['formGroupName',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Tracks the name of the `FormGroup` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * @type {?}\n     */\n    FormGroupName.prototype.name;\n}\n/** @type {?} */\nconst formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => FormArrayName))\n};\n/**\n * \\@description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormArrayName extends ControlContainer {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     *\n     * @throws If the directive does not have a valid parent.\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkParentType();\n        (/** @type {?} */ (this.formDirective)).addFormArray(this);\n    }\n    /**\n     * \\@description\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    }\n    /**\n     * \\@description\n     * The `FormArray` bound to this directive.\n     * @return {?}\n     */\n    get control() { return (/** @type {?} */ (this.formDirective)).getFormArray(this); }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() {\n        return this._parent ? (/** @type {?} */ (this._parent.formDirective)) : null;\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return controlPath(this.name, this._parent); }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._validators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._asyncValidators);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    }\n}\nFormArrayName.decorators = [\n    { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] }\n];\n/** @nocollapse */\nFormArrayName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormArrayName.propDecorators = {\n    name: [{ type: Input, args: ['formArrayName',] }]\n};\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormArrayName.prototype._parent;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormArrayName.prototype._validators;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormArrayName.prototype._asyncValidators;\n    /**\n     * \\@description\n     * Tracks the name of the `FormArray` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * @type {?}\n     */\n    FormArrayName.prototype.name;\n}\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => FormControlName))\n};\n/**\n * \\@description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\" [(ngModel)]=\"value\">\n * </form>\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\">\n * </form>\n * ```\n *\n * ```ts\n * this.form.get('first').setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'})\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormControlName extends NgControl {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     * @param {?} _ngModelWarningConfig\n     */\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this._added = false;\n        /**\n         * @deprecated as of v6\n         */\n        this.update = new EventEmitter();\n        /**\n         * \\@description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular FormControlName instance. Used to support warning config of \"always\".\n         *\n         * \\@internal\n         */\n        this._ngModelWarningSent = false;\n        this._parent = parent;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * Triggers a warning that this input should not be used with reactive forms.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    set isDisabled(isDisabled) { ReactiveErrors.disabledAttrWarning(); }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value for the view model.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return controlPath(this.name, (/** @type {?} */ (this._parent))); }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return (/** @type {?} */ (composeAsyncValidators(this._rawAsyncValidators)));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpControl() {\n        this._checkParentType();\n        ((/** @type {?} */ (this))).control = this.formDirective.addControl(this);\n        if (this.control.disabled && (/** @type {?} */ (this.valueAccessor)).setDisabledState) {\n            (/** @type {?} */ ((/** @type {?} */ (this.valueAccessor)).setDisabledState))(true);\n        }\n        this._added = true;\n    }\n}\n/**\n * \\@description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlName. Used to support warning config of \"once\".\n *\n * \\@internal\n */\nFormControlName._ngModelWarningSentOnce = false;\nFormControlName.decorators = [\n    { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] }\n];\n/** @nocollapse */\nFormControlName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlName.propDecorators = {\n    name: [{ type: Input, args: ['formControlName',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Static property used to track whether any ngModel warnings have been sent across\n     * all instances of FormControlName. Used to support warning config of \"once\".\n     *\n     * \\@internal\n     * @type {?}\n     */\n    FormControlName._ngModelWarningSentOnce;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormControlName.prototype._added;\n    /**\n     * \\@description\n     * Internal reference to the view model value.\n     * \\@internal\n     * @type {?}\n     */\n    FormControlName.prototype.viewModel;\n    /**\n     * \\@description\n     * Tracks the `FormControl` instance bound to the directive.\n     * @type {?}\n     */\n    FormControlName.prototype.control;\n    /**\n     * \\@description\n     * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * @type {?}\n     */\n    FormControlName.prototype.name;\n    /**\n     * @deprecated as of v6\n     * @type {?}\n     */\n    FormControlName.prototype.model;\n    /**\n     * @deprecated as of v6\n     * @type {?}\n     */\n    FormControlName.prototype.update;\n    /**\n     * \\@description\n     * Instance property used to track whether an ngModel warning has been sent out for this\n     * particular FormControlName instance. Used to support warning config of \"always\".\n     *\n     * \\@internal\n     * @type {?}\n     */\n    FormControlName.prototype._ngModelWarningSent;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormControlName.prototype._ngModelWarningConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * An interface implemented by classes that perform synchronous validation.\n *\n * \\@usageNotes\n *\n * ### Provide a custom validator\n *\n * The following example implements the `Validator` interface to create a\n * validator directive with a custom error key.\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors|null {\n *     return {'custom': true};\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @record\n */\nfunction Validator() { }\nif (false) {\n    /**\n     * \\@description\n     * Method that performs synchronous validation against the provided control.\n     *\n     * @param {?} control The control to validate against.\n     *\n     * @return {?} A map of validation errors if validation fails,\n     * otherwise null.\n     */\n    Validator.prototype.validate = function (control) { };\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    Validator.prototype.registerOnValidatorChange = function (fn) { };\n}\n/**\n * \\@description\n * An interface implemented by classes that perform asynchronous validation.\n *\n * \\@usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```typescript\n * import { of as observableOf } from 'rxjs';\n *\n * \\@Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Observable<ValidationErrors|null> {\n *     return observableOf({'custom': true});\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @record\n */\nfunction AsyncValidator() { }\nif (false) {\n    /**\n     * \\@description\n     * Method that performs async validation against the provided control.\n     *\n     * @param {?} control The control to validate against.\n     *\n     * @return {?} A promise or observable that resolves a map of validation errors\n     * if validation fails, otherwise null.\n     */\n    AsyncValidator.prototype.validate = function (control) { };\n}\n/**\n * \\@description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => RequiredValidator)),\n    multi: true\n};\n/**\n * \\@description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => CheckboxRequiredValidator)),\n    multi: true\n};\n/**\n * \\@description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass RequiredValidator {\n    /**\n     * \\@description\n     * Tracks changes to the required attribute bound to this directive.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = value != null && value !== false && `${value}` !== 'false';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * \\@description\n     * Method that validates whether the control is empty.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.required ? Validators.required(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n}\nRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                providers: [REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] }\n];\nRequiredValidator.propDecorators = {\n    required: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RequiredValidator.prototype._required;\n    /**\n     * @type {?}\n     * @private\n     */\n    RequiredValidator.prototype._onChange;\n}\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@publicApi\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\nclass CheckboxRequiredValidator extends RequiredValidator {\n    /**\n     * \\@description\n     * Method that validates whether or not the checkbox has been checked.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.required ? Validators.requiredTrue(control) : null;\n    }\n}\nCheckboxRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] }\n];\n/**\n * \\@description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => EmailValidator)),\n    multi: true\n};\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel binding.\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@publicApi\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\nclass EmailValidator {\n    /**\n     * \\@description\n     * Tracks changes to the email attribute bound to this directive.\n     * @param {?} value\n     * @return {?}\n     */\n    set email(value) {\n        this._enabled = value === '' || value === true || value === 'true';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * \\@description\n     * Method that validates whether an email address is valid.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this._enabled ? Validators.email(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n}\nEmailValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                providers: [EMAIL_VALIDATOR]\n            },] }\n];\nEmailValidator.propDecorators = {\n    email: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    EmailValidator.prototype._enabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    EmailValidator.prototype._onChange;\n}\n/**\n * \\@description\n * A function that receives a control and synchronously returns a map of\n * validation errors if present, otherwise null.\n *\n * \\@publicApi\n * @record\n */\nfunction ValidatorFn() { }\n/**\n * \\@description\n * A function that receives a control and returns a Promise or observable\n * that emits validation errors if present, otherwise null.\n *\n * \\@publicApi\n * @record\n */\nfunction AsyncValidatorFn() { }\n/**\n * \\@description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MinLengthValidator)),\n    multi: true\n};\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` mult-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass MinLengthValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value meets a minimum length\n     * requirement. Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.minlength == null ? null : this._validator(control);\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n    }\n}\nMinLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                providers: [MIN_LENGTH_VALIDATOR],\n                host: { '[attr.minlength]': 'minlength ? minlength : null' }\n            },] }\n];\nMinLengthValidator.propDecorators = {\n    minlength: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MinLengthValidator.prototype._validator;\n    /**\n     * @type {?}\n     * @private\n     */\n    MinLengthValidator.prototype._onChange;\n    /**\n     * \\@description\n     * Tracks changes to the the minimum length bound to this directive.\n     * @type {?}\n     */\n    MinLengthValidator.prototype.minlength;\n}\n/**\n * \\@description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MaxLengthValidator)),\n    multi: true\n};\n/**\n * A directive that adds max length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass MaxLengthValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value exceeds\n     * the maximum length requirement.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.maxlength != null ? this._validator(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n    }\n}\nMaxLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                providers: [MAX_LENGTH_VALIDATOR],\n                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n            },] }\n];\nMaxLengthValidator.propDecorators = {\n    maxlength: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MaxLengthValidator.prototype._validator;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaxLengthValidator.prototype._onChange;\n    /**\n     * \\@description\n     * Tracks changes to the the maximum length bound to this directive.\n     * @type {?}\n     */\n    MaxLengthValidator.prototype.maxlength;\n}\n/**\n * \\@description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => PatternValidator)),\n    multi: true\n};\n/**\n * \\@description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass PatternValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value matches the\n     * the pattern requirement.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) { return this._validator(control); }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() { this._validator = Validators.pattern(this.pattern); }\n}\nPatternValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                providers: [PATTERN_VALIDATOR],\n                host: { '[attr.pattern]': 'pattern ? pattern : null' }\n            },] }\n];\nPatternValidator.propDecorators = {\n    pattern: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PatternValidator.prototype._validator;\n    /**\n     * @type {?}\n     * @private\n     */\n    PatternValidator.prototype._onChange;\n    /**\n     * \\@description\n     * Tracks changes to the pattern bound to this directive.\n     * @type {?}\n     */\n    PatternValidator.prototype.pattern;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SHARED_FORM_DIRECTIVES = [\n    ÉµNgNoValidate,\n    NgSelectOption,\n    ÉµNgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\n/** @type {?} */\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm, NgFormSelectorWarning];\n/** @type {?} */\nconst REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nclass ÉµInternalFormsSharedModule {\n}\nÉµInternalFormsSharedModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: SHARED_FORM_DIRECTIVES,\n                exports: SHARED_FORM_DIRECTIVES,\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} options\n * @return {?}\n */\nfunction isAbstractControlOptions(options) {\n    return ((/** @type {?} */ (options))).asyncValidators !== undefined ||\n        ((/** @type {?} */ (options))).validators !== undefined ||\n        ((/** @type {?} */ (options))).updateOn !== undefined;\n}\n/**\n * \\@description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * \\@publicApi\n */\nclass FormBuilder {\n    /**\n     * \\@description\n     * Construct a new `FormGroup` instance.\n     *\n     * @param {?} controlsConfig A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param {?=} options Configuration options object for the `FormGroup`. The object can\n     * have two shapes:\n     *\n     * 1) `AbstractControlOptions` object (preferred), which consists of:\n     * * `validators`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidators`: A single async validator or array of async validator functions\n     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |\n     * submit')\n     *\n     * 2) Legacy configuration object, which consists of:\n     * * `validator`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidator`: A single async validator or array of async validator functions\n     *\n     * @return {?}\n     */\n    group(controlsConfig, options = null) {\n        /** @type {?} */\n        const controls = this._reduceControls(controlsConfig);\n        /** @type {?} */\n        let validators = null;\n        /** @type {?} */\n        let asyncValidators = null;\n        /** @type {?} */\n        let updateOn = undefined;\n        if (options != null) {\n            if (isAbstractControlOptions(options)) {\n                // `options` are `AbstractControlOptions`\n                validators = options.validators != null ? options.validators : null;\n                asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n                updateOn = options.updateOn != null ? options.updateOn : undefined;\n            }\n            else {\n                // `options` are legacy form group options\n                validators = options['validator'] != null ? options['validator'] : null;\n                asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;\n            }\n        }\n        return new FormGroup(controls, { asyncValidators, updateOn, validators });\n    }\n    /**\n     * \\@description\n     * Construct a new `FormControl` with the given state, validators and options.\n     *\n     * \\@usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\" region=\"disabled-control\">\n     * </code-example>\n     * @param {?} formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * @return {?}\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        return new FormControl(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options.\n     *\n     * @param {?} controlsConfig An array of child controls or control configs. Each\n     * child control is given an index when it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator\n     * functions.\n     * @return {?}\n     */\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n        /** @type {?} */\n        const controls = controlsConfig.map((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => this._createControl(c)));\n        return new FormArray(controls, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    _reduceControls(controlsConfig) {\n        /** @type {?} */\n        const controls = {};\n        Object.keys(controlsConfig).forEach((/**\n         * @param {?} controlName\n         * @return {?}\n         */\n        controlName => {\n            controls[controlName] = this._createControl(controlsConfig[controlName]);\n        }));\n        return controls;\n    }\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    _createControl(controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            /** @type {?} */\n            const value = controlConfig[0];\n            /** @type {?} */\n            const validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            /** @type {?} */\n            const asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    }\n}\nFormBuilder.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('8.2.14');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Guide](/guide/forms)\n *\n * \\@publicApi\n */\nclass FormsModule {\n    /**\n     * \\@description\n     * Provides options for configuring the template-driven forms module.\n     *\n     * @param {?} opts An object of configuration options\n     * * `warnOnDeprecatedNgFormSelector` Configures when to emit a warning when the deprecated\n     * `ngForm` selector is used.\n     * @return {?}\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: FormsModule,\n            providers: [{ provide: NG_FORM_SELECTOR_WARNING, useValue: opts.warnOnDeprecatedNgFormSelector }]\n        };\n    }\n}\nFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                providers: [RadioControlRegistry],\n                exports: [ÉµInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n            },] }\n];\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n * @see [Forms](guide/reactive-forms)\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * \\@publicApi\n */\nclass ReactiveFormsModule {\n    /**\n     * \\@description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param {?} opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     * @return {?}\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: ReactiveFormsModule,\n            providers: [{\n                    provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n                    useValue: opts.warnOnNgModelWithFormControl\n                }]\n        };\n    }\n}\nReactiveFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                providers: [FormBuilder, RadioControlRegistry],\n                exports: [ÉµInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ÉµInternalFormsSharedModule as Éµangular_packages_forms_forms_d, ÉµInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES as Éµangular_packages_forms_forms_c, SHARED_FORM_DIRECTIVES as Éµangular_packages_forms_forms_a, TEMPLATE_DRIVEN_DIRECTIVES as Éµangular_packages_forms_forms_b, CHECKBOX_VALUE_ACCESSOR as Éµangular_packages_forms_forms_e, DEFAULT_VALUE_ACCESSOR as Éµangular_packages_forms_forms_f, AbstractControlStatus as Éµangular_packages_forms_forms_g, ngControlStatusHost as Éµangular_packages_forms_forms_h, formDirectiveProvider as Éµangular_packages_forms_forms_i, NG_FORM_SELECTOR_WARNING as Éµangular_packages_forms_forms_j, formControlBinding as Éµangular_packages_forms_forms_k, modelGroupProvider as Éµangular_packages_forms_forms_l, ÉµNgNoValidate as Éµangular_packages_forms_forms_z, ÉµNgNoValidate, NUMBER_VALUE_ACCESSOR as Éµangular_packages_forms_forms_m, RADIO_VALUE_ACCESSOR as Éµangular_packages_forms_forms_n, RadioControlRegistry as Éµangular_packages_forms_forms_o, RANGE_VALUE_ACCESSOR as Éµangular_packages_forms_forms_p, NG_MODEL_WITH_FORM_CONTROL_WARNING as Éµangular_packages_forms_forms_q, formControlBinding$1 as Éµangular_packages_forms_forms_r, controlNameBinding as Éµangular_packages_forms_forms_s, formDirectiveProvider$1 as Éµangular_packages_forms_forms_t, formArrayNameProvider as Éµangular_packages_forms_forms_v, formGroupNameProvider as Éµangular_packages_forms_forms_u, SELECT_VALUE_ACCESSOR as Éµangular_packages_forms_forms_w, ÉµNgSelectMultipleOption as Éµangular_packages_forms_forms_y, ÉµNgSelectMultipleOption, SELECT_MULTIPLE_VALUE_ACCESSOR as Éµangular_packages_forms_forms_x, CHECKBOX_REQUIRED_VALIDATOR as Éµangular_packages_forms_forms_bb, EMAIL_VALIDATOR as Éµangular_packages_forms_forms_bc, MAX_LENGTH_VALIDATOR as Éµangular_packages_forms_forms_be, MIN_LENGTH_VALIDATOR as Éµangular_packages_forms_forms_bd, PATTERN_VALIDATOR as Éµangular_packages_forms_forms_bf, REQUIRED_VALIDATOR as Éµangular_packages_forms_forms_ba, AbstractControlDirective, AbstractFormGroupDirective, CheckboxControlValueAccessor, ControlContainer, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgFormSelectorWarning, NgModel, NgModelGroup, NumberValueAccessor, RadioControlValueAccessor, RangeValueAccessor, FormControlDirective, FormControlName, FormGroupDirective, FormArrayName, FormGroupName, NgSelectOption, SelectControlValueAccessor, SelectMultipleControlValueAccessor, CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, FormBuilder, AbstractControl, FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators, VERSION, FormsModule, ReactiveFormsModule };\n//# sourceMappingURL=forms.js.map\n","function EmptyErrorImpl() {\n    Error.call(this);\n    this.message = 'no elements in sequence';\n    this.name = 'EmptyError';\n    return this;\n}\nEmptyErrorImpl.prototype = Object.create(Error.prototype);\nexport const EmptyError = EmptyErrorImpl;\n//# sourceMappingURL=EmptyError.js.map","import { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nclass DoOperator {\n    constructor(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    }\n}\nclass TapSubscriber extends Subscriber {\n    constructor(destination, observerOrNext, error, complete) {\n        super(destination);\n        this._tapNext = noop;\n        this._tapError = noop;\n        this._tapComplete = noop;\n        this._tapError = error || noop;\n        this._tapComplete = complete || noop;\n        if (isFunction(observerOrNext)) {\n            this._context = this;\n            this._tapNext = observerOrNext;\n        }\n        else if (observerOrNext) {\n            this._context = observerOrNext;\n            this._tapNext = observerOrNext.next || noop;\n            this._tapError = observerOrNext.error || noop;\n            this._tapComplete = observerOrNext.complete || noop;\n        }\n    }\n    _next(value) {\n        try {\n            this._tapNext.call(this._context, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(value);\n    }\n    _error(err) {\n        try {\n            this._tapError.call(this._context, err);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        try {\n            this._tapComplete.call(this._context);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        return this.destination.complete();\n    }\n}\n//# sourceMappingURL=tap.js.map","import { Subscriber } from '../Subscriber';\nexport function defaultIfEmpty(defaultValue = null) {\n    return (source) => source.lift(new DefaultIfEmptyOperator(defaultValue));\n}\nclass DefaultIfEmptyOperator {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    }\n}\nclass DefaultIfEmptySubscriber extends Subscriber {\n    constructor(destination, defaultValue) {\n        super(destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    _next(value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    }\n    _complete() {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=defaultIfEmpty.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            let i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n","export function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./app.component.scss.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./app.component\";\nvar styles_AppComponent = [i0.styles];\nvar RenderType_AppComponent = i1.Éµcrt({ encapsulation: 0, styles: styles_AppComponent, data: {} });\nexport { RenderType_AppComponent as RenderType_AppComponent };\nexport function View_AppComponent_0(_l) { return i1.Éµvid(0, [(_l()(), i1.Éµeld(0, 16777216, null, null, 1, \"router-outlet\", [], null, null, null, null, null)), i1.Éµdid(1, 212992, null, 0, i2.RouterOutlet, [i2.ChildrenOutletContexts, i1.ViewContainerRef, i1.ComponentFactoryResolver, [8, null], i1.ChangeDetectorRef], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nexport function View_AppComponent_Host_0(_l) { return i1.Éµvid(0, [(_l()(), i1.Éµeld(0, 0, null, null, 1, \"app-root\", [], null, null, null, View_AppComponent_0, RenderType_AppComponent)), i1.Éµdid(1, 49152, null, 0, i3.AppComponent, [], null, null)], null, null); }\nvar AppComponentNgFactory = i1.Éµccf(\"app-root\", i3.AppComponent, View_AppComponent_Host_0, {}, {}, []);\nexport { AppComponentNgFactory as AppComponentNgFactory };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\"\"];\nexport { styles as styles };\n","<router-outlet></router-outlet>\n","import { Routes } from '@angular/router';\nconst Éµ0 = () => import(\"./markdown-pane/markdown-pane.module.ngfactory\").then(m => m.MarkdownPaneModuleNgFactory);\nconst routes = [\n    {\n        path: '',\n        redirectTo: 'markdownpane',\n        pathMatch: 'full'\n    },\n    {\n        path: 'markdownpane',\n        loadChildren: Éµ0\n    }\n];\nexport class AppRoutingModule {\n}\nexport { Éµ0 };\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'markdownpane',\n    pathMatch: 'full'\n  },\n  {\n    path: 'markdownpane',\n    loadChildren: () =>\n      import('./markdown-pane/markdown-pane.module').then(\n        m => m.MarkdownPaneModule\n      )\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app.module\";\nimport * as i2 from \"./app.component\";\nimport * as i3 from \"../../node_modules/@angular/router/router.ngfactory\";\nimport * as i4 from \"./app.component.ngfactory\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/platform-browser\";\nimport * as i7 from \"@angular/animations/browser\";\nimport * as i8 from \"@angular/platform-browser/animations\";\nimport * as i9 from \"@angular/forms\";\nimport * as i10 from \"@angular/router\";\nimport * as i11 from \"@angular/animations\";\nimport * as i12 from \"./app-routing.module\";\nvar AppModuleNgFactory = i0.Éµcmf(i1.AppModule, [i2.AppComponent], function (_l) { return i0.Éµmod([i0.Éµmpd(512, i0.ComponentFactoryResolver, i0.ÉµCodegenComponentFactoryResolver, [[8, [i3.Éµangular_packages_router_router_lNgFactory, i4.AppComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.Éµmpd(5120, i0.LOCALE_ID, i0.Éµangular_packages_core_core_p, [[3, i0.LOCALE_ID]]), i0.Éµmpd(4608, i5.NgLocalization, i5.NgLocaleLocalization, [i0.LOCALE_ID, [2, i5.Éµangular_packages_common_common_a]]), i0.Éµmpd(5120, i0.Éµangular_packages_core_core_ba, i0.Éµangular_packages_core_core_r, [i0.NgZone]), i0.Éµmpd(5120, i0.APP_ID, i0.Éµangular_packages_core_core_f, []), i0.Éµmpd(5120, i0.IterableDiffers, i0.Éµangular_packages_core_core_n, []), i0.Éµmpd(5120, i0.KeyValueDiffers, i0.Éµangular_packages_core_core_o, []), i0.Éµmpd(4608, i6.DomSanitizer, i6.ÉµDomSanitizerImpl, [i5.DOCUMENT]), i0.Éµmpd(6144, i0.Sanitizer, null, [i6.DomSanitizer]), i0.Éµmpd(4608, i6.HAMMER_GESTURE_CONFIG, i6.HammerGestureConfig, []), i0.Éµmpd(5120, i6.EVENT_MANAGER_PLUGINS, function (p0_0, p0_1, p0_2, p1_0, p2_0, p2_1, p2_2, p2_3) { return [new i6.ÉµDomEventsPlugin(p0_0, p0_1, p0_2), new i6.ÉµKeyEventsPlugin(p1_0), new i6.ÉµHammerGesturesPlugin(p2_0, p2_1, p2_2, p2_3)]; }, [i5.DOCUMENT, i0.NgZone, i0.PLATFORM_ID, i5.DOCUMENT, i5.DOCUMENT, i6.HAMMER_GESTURE_CONFIG, i0.ÉµConsole, [2, i6.HAMMER_LOADER]]), i0.Éµmpd(4608, i6.EventManager, i6.EventManager, [i6.EVENT_MANAGER_PLUGINS, i0.NgZone]), i0.Éµmpd(135680, i6.ÉµDomSharedStylesHost, i6.ÉµDomSharedStylesHost, [i5.DOCUMENT]), i0.Éµmpd(4608, i6.ÉµDomRendererFactory2, i6.ÉµDomRendererFactory2, [i6.EventManager, i6.ÉµDomSharedStylesHost, i0.APP_ID]), i0.Éµmpd(5120, i7.AnimationDriver, i8.Éµangular_packages_platform_browser_animations_animations_a, []), i0.Éµmpd(5120, i7.ÉµAnimationStyleNormalizer, i8.Éµangular_packages_platform_browser_animations_animations_b, []), i0.Éµmpd(4608, i7.ÉµAnimationEngine, i8.ÉµInjectableAnimationEngine, [i5.DOCUMENT, i7.AnimationDriver, i7.ÉµAnimationStyleNormalizer]), i0.Éµmpd(5120, i0.RendererFactory2, i8.Éµangular_packages_platform_browser_animations_animations_c, [i6.ÉµDomRendererFactory2, i7.ÉµAnimationEngine, i0.NgZone]), i0.Éµmpd(6144, i6.ÉµSharedStylesHost, null, [i6.ÉµDomSharedStylesHost]), i0.Éµmpd(4608, i0.Testability, i0.Testability, [i0.NgZone]), i0.Éµmpd(4608, i9.Éµangular_packages_forms_forms_o, i9.Éµangular_packages_forms_forms_o, []), i0.Éµmpd(5120, i10.ActivatedRoute, i10.Éµangular_packages_router_router_g, [i10.Router]), i0.Éµmpd(4608, i10.NoPreloading, i10.NoPreloading, []), i0.Éµmpd(6144, i10.PreloadingStrategy, null, [i10.NoPreloading]), i0.Éµmpd(135680, i10.RouterPreloader, i10.RouterPreloader, [i10.Router, i0.NgModuleFactoryLoader, i0.Compiler, i0.Injector, i10.PreloadingStrategy]), i0.Éµmpd(4608, i10.PreloadAllModules, i10.PreloadAllModules, []), i0.Éµmpd(5120, i10.Éµangular_packages_router_router_o, i10.Éµangular_packages_router_router_c, [i10.Router, i5.ViewportScroller, i10.ROUTER_CONFIGURATION]), i0.Éµmpd(5120, i10.ROUTER_INITIALIZER, i10.Éµangular_packages_router_router_j, [i10.Éµangular_packages_router_router_h]), i0.Éµmpd(5120, i0.APP_BOOTSTRAP_LISTENER, function (p0_0) { return [p0_0]; }, [i10.ROUTER_INITIALIZER]), i0.Éµmpd(4608, i11.AnimationBuilder, i8.ÉµBrowserAnimationBuilder, [i0.RendererFactory2, i5.DOCUMENT]), i0.Éµmpd(1073742336, i5.CommonModule, i5.CommonModule, []), i0.Éµmpd(1024, i0.ErrorHandler, i6.Éµangular_packages_platform_browser_platform_browser_a, []), i0.Éµmpd(1024, i0.NgProbeToken, function () { return [i10.Éµangular_packages_router_router_b()]; }, []), i0.Éµmpd(512, i10.Éµangular_packages_router_router_h, i10.Éµangular_packages_router_router_h, [i0.Injector]), i0.Éµmpd(1024, i0.APP_INITIALIZER, function (p0_0, p1_0) { return [i6.Éµangular_packages_platform_browser_platform_browser_j(p0_0), i10.Éµangular_packages_router_router_i(p1_0)]; }, [[2, i0.NgProbeToken], i10.Éµangular_packages_router_router_h]), i0.Éµmpd(512, i0.ApplicationInitStatus, i0.ApplicationInitStatus, [[2, i0.APP_INITIALIZER]]), i0.Éµmpd(131584, i0.ApplicationRef, i0.ApplicationRef, [i0.NgZone, i0.ÉµConsole, i0.Injector, i0.ErrorHandler, i0.ComponentFactoryResolver, i0.ApplicationInitStatus]), i0.Éµmpd(1073742336, i0.ApplicationModule, i0.ApplicationModule, [i0.ApplicationRef]), i0.Éµmpd(1073742336, i6.BrowserModule, i6.BrowserModule, [[3, i6.BrowserModule]]), i0.Éµmpd(1073742336, i9.Éµangular_packages_forms_forms_d, i9.Éµangular_packages_forms_forms_d, []), i0.Éµmpd(1073742336, i9.FormsModule, i9.FormsModule, []), i0.Éµmpd(1024, i10.Éµangular_packages_router_router_a, i10.Éµangular_packages_router_router_e, [[3, i10.Router]]), i0.Éµmpd(512, i10.UrlSerializer, i10.DefaultUrlSerializer, []), i0.Éµmpd(512, i10.ChildrenOutletContexts, i10.ChildrenOutletContexts, []), i0.Éµmpd(256, i10.ROUTER_CONFIGURATION, { useHash: true }, []), i0.Éµmpd(1024, i5.LocationStrategy, i10.Éµangular_packages_router_router_d, [i5.PlatformLocation, [2, i5.APP_BASE_HREF], i10.ROUTER_CONFIGURATION]), i0.Éµmpd(512, i5.Location, i5.Location, [i5.LocationStrategy, i5.PlatformLocation]), i0.Éµmpd(512, i0.Compiler, i0.Compiler, []), i0.Éµmpd(512, i0.NgModuleFactoryLoader, i0.SystemJsNgModuleLoader, [i0.Compiler, [2, i0.SystemJsNgModuleLoaderConfig]]), i0.Éµmpd(1024, i10.ROUTES, function () { return [[{ path: \"\", redirectTo: \"markdownpane\", pathMatch: \"full\" }, { path: \"markdownpane\", loadChildren: i12.Éµ0 }]]; }, []), i0.Éµmpd(1024, i10.Router, i10.Éµangular_packages_router_router_f, [i0.ApplicationRef, i10.UrlSerializer, i10.ChildrenOutletContexts, i5.Location, i0.Injector, i0.NgModuleFactoryLoader, i0.Compiler, i10.ROUTES, i10.ROUTER_CONFIGURATION, [2, i10.UrlHandlingStrategy], [2, i10.RouteReuseStrategy]]), i0.Éµmpd(1073742336, i10.RouterModule, i10.RouterModule, [[2, i10.Éµangular_packages_router_router_a], [2, i10.Router]]), i0.Éµmpd(1073742336, i12.AppRoutingModule, i12.AppRoutingModule, []), i0.Éµmpd(1073742336, i8.BrowserAnimationsModule, i8.BrowserAnimationsModule, []), i0.Éµmpd(1073742336, i1.AppModule, i1.AppModule, []), i0.Éµmpd(256, i0.ÉµAPP_ROOT, true, []), i0.Éµmpd(256, i8.ANIMATION_MODULE_TYPE, \"BrowserAnimations\", [])]); });\nexport { AppModuleNgFactory as AppModuleNgFactory };\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nOffice.initialize = () => {\n  platformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n};\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport * as __NgCli_bootstrap_1 from \"./app/app.module.ngfactory\";\nimport * as __NgCli_bootstrap_2 from \"@angular/platform-browser\";\nif (environment.production) {\n    enableProdMode();\n}\nOffice.initialize = () => {\n    __NgCli_bootstrap_2.platformBrowser()\n        .bootstrapModuleFactory(__NgCli_bootstrap_1.AppModuleNgFactory)\n        .catch(err => console.error(err));\n};\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}